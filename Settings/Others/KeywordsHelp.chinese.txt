
-------------------------------------------------------- KeyPgAbs ----

Abs   绝对值
  
计算数字的绝对值

语法
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

用法
result = Abs( number )

参数
number
值要找到绝对值。

返回值
的绝对值。number

描述
数字的绝对值是其正量级。如果某个数字为负数，则其值将被否定，并返回正结果。例如，两者都返回 。必需的参数可以是任何有效的数值表达式。
无符号数字将被视为有符号，?


-------------------------------------------------------- KeyPgAbstract ----

Abstract   抽象方法
  
声明抽象方法

语法
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

描述
Abstract是 的一种特殊形式。不同之处在于抽象方法没有主体，而只有声明。从本质上讲，这允许声明一个接口，该接口可以由各种派生类型实现。
为了调用抽象方法，它必须已被派生数据类型重写和实


-------------------------------------------------------- KeyPgAccess ----

Access   访问权
  
用于指定所请求特权的语句子句Open

语法
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

用法
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

参数
Read
仅以读取权限打开文件。
Write
仅以写入权限打开文件。
Read Write
使用读取和写入权限打开文件。

描述
Acces


-------------------------------------------------------- KeyPgAcos ----

Acos   反余弦
  
查找角度的反余弦

语法
Declare Function Acos ( ByVal number As Double ) As Double

用法
result = Acos( number )

参数
number
范围为 [-1..1] 的余弦值。

返回值
的反余弦，以弧度为单位，在 [0..Pi] 范围内。number

描述
Acos将参数的反余弦作为 0 范围内的 a 返回到 Pi。反余弦是函数


-------------------------------------------------------- KeyPgAddGfx ----

Add   添加
  
图形语句的参数，该语句选择加法作为 blliting 方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

参数
Add
必填。
multiplier
介于 0 和 255 之间的可选值。源像素在添加之前会被预乘。如果省略，此值默认为 255。(multiplier / 256)

描述
Add选择加法作为删除图像缓冲区的方法。对于每个源像素和目标像素，将每个相应分量的值相加以生成结果。
加法是饱和的 - 即如果两个值的?


-------------------------------------------------------- KeyPgAlias ----

Alias (Name)   别名
  
提供备用内部名称的 and 语句的子句。SubFunction

语法
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

用法
declare sub usablename Alias "alternatename" ( ... )
或
declare function usablename Alias "alternatename" ( ... )
或
sub usablename Alias "alternatename" ( ... )
...
end sub
或
function usablename Alias "alternatename" ( ... )
...
end function
或
type typename Alias "alternatename" ( ... )
...
end type

描述
Alias为过程提供备用名称。此备用名称不能在程序中用于调用该过程，但在使用其他语言编写的代码进行链接时，链接器可以看到此备用名称（如果函数不是私有的）。
通常用于用其他语?


-------------------------------------------------------- KeyPgAliasModifier ----

Alias (Modifier)   别名
  
修改公共符号的数据类型名称修饰（修饰）

语法
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

用法
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

参数
datatype
要修改的标准数据类型或用户定义的数据类型
modifier
支持的修饰符之一，如下面的“说明”部分所述
描述
Alias "modifier"，当在数据类型之后指定时，会为数据类型提供另一种含义，这对于与 FreeBASIC 以外的语言进行链接时可能需要。
公共


-------------------------------------------------------- KeyPgAllocate ----

Allocate   分配内存
  
从免费存储区分配内存块

语法
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

用法
result = Allocate( count )

参数
count
要分配的内存块的大小（以字节为单位）。

返回值
如果成功，则返回已分配内存的起始地址。否则，如果无法分配请求的块大小，或者如果 ，则返回空指针 （）。count < 00

描述
尝试从免费存储（堆）中分配或保留字节数。新分配的内存未初始化。
由于新分配的内存的初始值未指定，因此?


-------------------------------------------------------- KeyPgAlphaGfx ----

Alpha   a通道
  
图形语句的参数，该语句选择 alpha 混合作为方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

参数
Alpha
必填。
alphaval
范围 [0..255] 中的可选 alpha 参数。覆盖单个像素中的 Alpha 值。

描述
Alpha选择 Alpha 混合作为调色图像的方法。如果指定了该参数，它将覆盖每个像素的 alpha 值，并且蒙版颜色（洋红色）将被视为透明。这适用于 15、16、24 或 


-------------------------------------------------------- KeyPgAndGfx ----

And   和
  
图形语句的参数，该语句使用按位作为 blitting 方法PutAnd

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

参数
And
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有遮罩颜色，尽管设置了所有位的颜色值（对于 8 位?


-------------------------------------------------------- KeyPgAny ----

Any   任意
  
该关键字以各种方式用作类型或值的占位符。Any

语法
Dim identifier As Any Pointer|Ptr
orororororor
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )

Dim identifier(Any [, Any...]) As DataType

[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType  )

Dim identifier As DataType = Any

New DataType ( Any )

New(Address) DataType [count] { Any }

InStr|InStrRev ( string, Any substring )

描述
指针：
称为 （或 “”） 的特殊指针类型允许指向任何变量类型。如果将其转换为 ，则可以对其进行索引或取消引用，以访问作为 的实例访问内存。允许在 上使用指针算术，并将其视为 


-------------------------------------------------------- KeyPgAppend ----

Append   追加
  
指定要为追加模式打开的文本文件

语法
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行追加的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行写入的文件模式。
此模式用于向现有文件添加文本，或将逗号分隔的值与 。
文本文件不能在FreeBASIC中同时读


-------------------------------------------------------- KeyPgArrayLen ----

Arraylen
  
提供给定数组名称的数组的长度。

语法
Declare Function ArrayLen ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArrayLen(arrayname())

参数
arrayname
返回其长度的数组的名称。

描述
返回 由


-------------------------------------------------------- KeyPgArraySize ----

Arraysize
  
提供给定数组名称的数组的大小。

语法
Declare Function ArraySize ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArraySize(arrayname())

参数
arrayname
返回其大小的数组的名称。

描述
返回由 （数组元素的?


-------------------------------------------------------- KeyPgAs ----

As   为
  
指定数据类型的声明的一部分，或指定文件句柄的 Open 语句的一部分。

语法
symbolname As datatype

Open ... As #filenumber
Type ... As datatype

描述
As用于声明变量、字段或参数的类型，也用于在语句中


-------------------------------------------------------- KeyPgAsc ----

Asc   字符取码值
  
返回字符的相应 ASCII 或 Unicode 整数表示形式。

语法
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

用法
result = Asc( str [, position ] )

参数
str
源字符串。
position
字符字符串中的位置。

返回值
存储在 中的原始字符值。
如果两者都可以在编译时计算（如 或 或 ...），则在结果中返回值，否则在结果中返回。positionstrstrpositionAsc("a")Asc(chr(97))Asc("abc", 2)UIntegerULong

描述
如果 是 a 或 a ，则返回该处的值。这将是一个 7 位 ASCII 代码，甚至是某些代码页中的 8 位字符值，具体取?


-------------------------------------------------------- KeyPgAsin ----

Asin   反正弦
  
查找数字的反正弦

语法
Declare Function Asin ( ByVal number As Double ) As Double

用法
result = Asin( number )

参数
number
范围为 [-1..1] 的正弦值。

返回值
的弧正弦（以弧度为单位），范围为 [-Pi/2..Pi/2]。number

描述
Asin将参数的反正弦值作为 -Pi/2 到 Pi/2 范围内的 a 返回。反正弦是函?


-------------------------------------------------------- KeyPgAsm ----

Asm   汇编
  
允许使用特定于体系结构的指令的代码块。

语法
Asm
architecture-dependent instructions
End Asm

或

Asm architecture-dependent instructions

描述
该块用于在程序中插入特定的机器代码指令，以便执行无法使用语言功能执行的操作，或手动优化性能敏感的代码部分。
当前的 FreeBASIC 编译器目前只为基于英特尔 80x86 的机器生成代?


-------------------------------------------------------- KeyPgAssert ----

Assert   中断执行
  
调试在表达式计算为 （false） 时停止程序执行的宏。0

语法
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
Assert( expression )

参数
expression
任何有效的条件/数值表达式。如果计算结果为（即“false”），则停止执行。expression0

描述
该宏旨在用于调试，并且仅当 或 -eassertfbcexpression0-g 未传递给 fbc、该宏不生成任何代码且不起作用时才有效。
注意：如果在程序位于?


-------------------------------------------------------- KeyPgAssertwarn ----

AssertWarn   调试警告
  
调试在表达式的计算结果为 0 时打印警告的宏。

语法
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
AssertWarn( expression )

参数
expression
任何有效的表达式。如果计算结果为 ，则会向 stderr （控制台） 打印一条警告消息。expression0

描述
该宏旨在用于调试，并且仅当在 FBC 命令行中选择了该选项时才有效。在这种情况下，如果计算结果为


-------------------------------------------------------- KeyPgAtan2 ----

Atan2   反正切2
  
返回比率的反正切值

语法
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

用法
result = ATan2( y, x )

参数
y
垂直分量的比率。
x
比率的水平分量。

返回值
切线为的角度，以弧度为单位，在 [-Pi..圆周率]。y/x

描述
ATan2返回比率的反正切值，作为 -Pi 到 Pi 范围内的?


-------------------------------------------------------- KeyPgAtn ----

Atn   反正切
  
返回数字的反正切值

语法
Declare Function Atn ( ByVal number As Double ) As Double

用法
result = Atn( number )

参数
number
数字。

返回值
角度（以弧度为单位，其切线为 ）范围为 [-Pi/2..Pi/2]。number

描述
Atn将参数的反正切值作为 -Pi/2 到 Pi/2 范围内的 a 返回。反正切是函数


-------------------------------------------------------- KeyPgBase ----

Base (Member Access)   基类
  
提供对 非静态方法中的基类型成员的显式访问Type

语法
Base.member
Base [ .Base ... ] .member

描述
Base提供了一种在用户定义类型的非静态方法的上下文中显式访问特定基类型的成员的方法，这些方法使用 派生自另一种类型。
通过重复使用，如 在 中，可以访问任何所需的基类型，以防


-------------------------------------------------------- KeyPgBaseInit ----

Base (Initializer)   基类
  
为派生的 Udt 构造函数中的基本 UDT 指定初始值设定项

语法
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

描述
初始值设定项可用于派生 UDT 的构造函数的顶部。它允许指定显式构造函数调用或用于初始化基对象的 UDT 初始值设定项。它将替换隐式默认初始化，并且必须出现在使用它的构造函数中的?


-------------------------------------------------------- KeyPgBeep ----

Beep   响铃
  
发出蜂鸣音。

语法
Declare Sub Beep ( )

用法
Beep

描述
Beep告诉系统发出蜂鸣声。请注意，这可能在某些平台上不起作用。由于此命令不可靠，并且无法指定频率和持续时间，因此您可能希望避免使用它，以支?


-------------------------------------------------------- KeyPgBin ----

Bin   二进制
  
返回整数的二进制（基数为 2）字符串表示形式

语法
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String

Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Bin[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
返回的字符串中所需的位数。

返回值
包含 的无符号二进制表示形式的字符串。number

描述
返回一个字符串，该字符串表示整数的无符号二进制值。二进制数字的范围从 0 到 1。
如果指定 > 0，则结果字符串将恰?


-------------------------------------------------------- KeyPgBinary ----

Binary   二进制流
  
指定要为二进制模式打开的文件或设备

语法
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开的文件名
access_type
指示文件是可以从中读取、写入文件还是同时读取到两者
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
打开文件或设备，用于以自由格式读取和/或写入文件中的二进制数据。
如果该文件不存在，则将创建一个新文件。文件


-------------------------------------------------------- KeyPgBit ----

Bit   位
  
获取整数值中单个位的状态。

语法
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

用法
result = Bit( value, bit_number )

参数
value
整数值。
bit_number
位的索引。

返回值
返回一个值 if 如果设置了该位，或者如果该位已清除。Integer-10

描述
此宏扩展为一个整数值，该值指示 指定的位是否在整数 中设置。行为为“”。
的有效值范围取决于 '' 的大小（以位为单位），即 ''（从最低位开始）?


-------------------------------------------------------- KeyPgBitreset ----

BitReset   位重置
  
从复制的整数中获取清除指定位的值。

语法
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitReset( value, bit_number )

参数
value
整数值。
bit_number
要清除的位的索引。

返回值
返回已清除指定位的整数值。

描述
此宏扩展为已清除指定的整数（to off 或 ''）的副本。行为为“”。
要清除变量中的指定位，可以使用以下赋值： 
的有效值范围取决于 '' 的大小（?


-------------------------------------------------------- KeyPgBitset ----

BitSet   位整数值
  
从复制的整数中获取具有指定位集的值。

语法
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitSet( value, bit_number )

参数
value
整数值。
bit_number
要设置的位的索引。

返回值
返回设置了指定位的整数值。

描述
此宏扩展为具有指定集（to on 或 ''）的整数的副本。行为为“”。
要在变量中设置指定的位，可以使用以下赋值： 
的值的有效范围取决于 '' 的大


-------------------------------------------------------- KeyPgBload ----

BLoad   位图加载
  
从使用 创建的文件或兼容的 BMP 映像文件中加载任意数据。BSave

语法
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

用法
result = BLoad( filename [, [ dest ] [, pal ] ] )

参数
filename
要从中加载图像的文件的名称;可以包含文件路径
dest
要将图像加载到的内存位置，或 null （） 将图像复制到当前图形屏幕工作页面0
pal
要将调色板加载到的内存位置，或 null （） 更改当前图形屏幕调色板（如果它使用0

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。（引发运行时错误）0

描述
BLoad可用于从使用 创建的文件中加?


-------------------------------------------------------- KeyPgBoolean ----

Boolean   逻辑型
  
标准数据类型

语法
Dim variable As Boolean

描述
布尔数据类型。可以保存的值或
初始化时的默认值是
 关于定义布尔数据类型的注释：TrueFalseFalse
- 理想情况下，布尔数据类型的定义是它包含 True 或 False 的值，仅此而已。然而，要使这个概


-------------------------------------------------------- KeyPgBsave ----

BSave   位图保存
  
将任意数据和调色板信息的数组保存到磁盘上的文件中

语法
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

用法
result = BSave( filename, source [,[ size ][,{ pal | pal, bitsperpixel }]] )

参数
filename
要创建的用于存储像素和调色板数据的文件的名称。
source
要存储的数据的地址，或 null （） 用于存储当前屏幕工作页面中的像素数据。0
size
可选，要存储的数据的总字节数。除非输出是 BMP 文件，否则需要此值。
pal
可选，包含 256 种颜色的缓冲区的地址，或当前屏幕调色板的空 （）。Palette0
bitsperpixel
可选，输出 BMP 图像请求的位深度。如果指定，则还必须指定（至少为 null （） 值），否则将获得错误。bitsperpixelpal0

返回值
如果成功，则返回零 （），或返回非零错误代码以指?


-------------------------------------------------------- KeyPgByref ----

Byref (Parameters)   传址
  
通过引用显式传递参数的声明说明符

语法
ByRef param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype  )

描述
通过引用（即变量的地址）将变量传递给子例程或函数。当变量通过引用传递时，目标子例程或函数可以更改变量的内容。
在 -lang qb 和 -lang fblite 方言中，是默认参数传递约定，除非?


-------------------------------------------------------- KeyPgByrefFunction ----

Byref (Function Results)   传址
  
指定通过引用返回函数结果

语法
Function name ( parameter-list ) ByRef As datatype

描述
使函数结果按引用而不是按值返回。返回的函数将返回变量的地址，而不是像按值返回时那样进行复制。这允许函数的调用方修改函数结果指向的变量。
如果未指定，则默认按值返回函数结果。
具?


-------------------------------------------------------- KeyPgByrefVariables ----

Byref (Variables)   传址
  
声明引用

语法
(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
或
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
或
[Static] Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

参数
name
引用名称
variable
要引用的变量名称

描述
声明对变量的引用（按名称）。
引用是一种实体，用于访问位于内存中的数据。引用不是数据本身，而只是有关其位置的信息。可以将引用视为隐式取消引用的指针。在许多情况下，它可以?


-------------------------------------------------------- KeyPgByte ----

Byte   字节
  
标准数据类型：8 位签名

语法
Dim variable As Byte

描述
8 位有符号整数数据类型


-------------------------------------------------------- KeyPgByval ----

ByVal   传值
  
声明说明符，用于按值显式传递参数

语法
ByVal param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype  )

描述
ByVal在声明语句的参数列表中，导致变量的副本通过其值传递给过程（例如，sub 或函数）。
这意味着，如果传递了变量 x 的值，则原始变量 x 将不会以任何方式进行修改;但是，如果传递?


-------------------------------------------------------- KeyPgCall ----

Call   调用
  
调用子例程的语句

语法
Call procname ([parameter list])

描述
调用 或 。
此关键字是 BASIC 早期方言的保留，主要已弃用。
在 -lang qb 中，它可用于在声明之前在代码中调用 s。该函数将隐式为 'd，并传递任何参数。
注意?


-------------------------------------------------------- KeyPgCallocate ----

CAllocate   内存分配初始化
  
为自由存储中一定数量的元素分配内存并清除内容

语法
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

用法
result = CAllocate( num_elements [, size ] )

参数
num_elements
要为其分配内存的元素数。
size
每个元素的大小（以字节为单位）。

返回值
如果成功，则返回已分配内存的起始地址。否则，将返回空指针 （）。0

描述
CAllocate用零初始化分配的内存。
因此，也可以直接


-------------------------------------------------------- KeyPgCase ----
Case   条
Description



-------------------------------------------------------- KeyPgCast ----

Cast   转换
  
将表达式转换为指定的数据类型

语法
Cast( datatype, expression )

参数
datatype 
内置数据类型（标准类型）
expression 
另一个内置数据类型的变量

描述
转换为其他 .当未知时以及在转换为类型别名时，在宏中使用非常有用。
这是转换运算符的一种通用形式，例如 或 。
用途更广，因为它可以用于具有内置的内置类?


-------------------------------------------------------- KeyPgCbool ----

CBool
  
将数字或字符串表达式转换为布尔值 （Boolean)

语法
Declare Function CBool ( ByVal expression As datatype ) As Boolean

Type typename
Declare Operator Cast ( ) As Boolean
End Type

用法
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

参数
expression
要转换为值的数字、字符串或用户定义类型Boolean
datatype
任何数字、字符串或用户定义的类型
typename
用户定义的类型

返回值
值。Boolean

描述
该函数将零值转换为 ，并将非零值转换为 。
该名称?


-------------------------------------------------------- KeyPgCbyte ----

CByte   转字节
  
将数字或字符串表达式转换为 。Byte

语法
Declare Function CByte ( ByVal expression As datatype ) As Byte

Type typename
Declare Operator Cast ( ) As Byte
End Type

用法
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式。Byte
datatype
任何数值、字符串或指针数据类型。
typename
用户定义的类型。

返回值
值。Byte

描述
该函数舍入小数部分并返回 8 位值。该函数不?


-------------------------------------------------------- KeyPgCdbl ----

CDbl   转双精型
  
将数字或字符串表达式转换为精确浮点Double

语法
Declare Function CDbl ( ByVal expression As datatype ) As Double

Type typename
Declare Operator Cast ( ) As Double
End Type

用法
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Double
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
精度值。Double

描述
该函数返回一个 64 位值。该函数不检查溢出，因此请?


-------------------------------------------------------- KeyPgCdecl ----

cdecl   cdecl
  
在过程声明中指定 cdecl 样式的调用约定

语法
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在调用约定中，任何参数都将以列出它们的相反顺序传递（推送到堆栈上），即从右到左。过程不需要保留 或 寄存器，并且不得在堆栈返回之前清理堆栈（


-------------------------------------------------------- KeyPgChain ----

Chain   链接
  
暂时将控制权移交给外部程序

语法
Declare Function Chain ( ByRef program As Const String ) As Long

用法
result = Chain( program )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。

返回值
如果成功执行，则返回外部


-------------------------------------------------------- KeyPgChdir ----

ChDir   改路径
  
更改当前驱动器和目录

语法
Declare Function ChDir ( ByRef path As Const String ) As Long

用法
result = ChDir( path )

参数
path
指定要更改为的路径的参数。String

返回值
成功时返回零 （0），失?


-------------------------------------------------------- KeyPgChr ----

Chr   数转字符
  
从一个或多个 ASCII 整数值返回一串字符

语法
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

用法
result = Chr[$]( ch0 [, ch1 ... chN ] )

参数
ch
字符的 ASCII 整数值。

返回值
返回包含字符的字符串。

描述
Chr返回一个字符串，其中包含由传递给它的 ASCII 值所表示的字符。
当与数值?


-------------------------------------------------------- KeyPgCint ----

CInt   转整型
  
将数字或字符串表达式转换为IntegerInteger<bits>

语法
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>

Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

用法
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

参数
bits
一个数字常量表达式，指示所需大小的整数位。允许的值为 、 或 。8163264
expression
要转换为值的数字、字符串或指针表达式Integer
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
包含转换后的值的 或。IntegerInteger<bits>

描述
如果传递给一个数字，它使用舍入到偶数的方法对其进行舍入 - 即它舍入到最接近的整数值，如果数


-------------------------------------------------------- KeyPgCircle ----

Circle   画圆
  
用于绘制椭圆或圆的图形语句

语法
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

参数
target
可选;指定要在其上绘制的图像缓冲区
STEP
表示坐标是相对的
(x, y)
椭圆中心的坐标
radius
圆的半径 - 对于椭圆，为半长轴（即最长半径）
color
颜色属性
start
起始角度
end
结束角度
aspect
椭圆的纵横比，高度与宽度的比率
F
填充模式指示器

描述
Circle将根据给定的参数绘制一个圆、椭圆或圆弧。
指定要在其上绘制的缓冲区。 可能是使用 或 


-------------------------------------------------------- KeyPgClass ----

Class   类对象
  
声明类对象

语法
Class typename ...

参数
typename
的名称Class

描述
我们会在这里放一些有用的东西（诚实），除了这个功能还没有在编译器中实现。但是


-------------------------------------------------------- KeyPgClear ----

Clear   清除
  
清除或初始化某些内存

语法
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

用法
Clear( dst, [value], bytes )

参数
dst
某些内存的起始地址
value
要将所有字节设置为等于的值
bytes
要清除的字节数

描述
Clear将内存中的一个或多个字节设置为特定值（如果未指定，则默认值为零 （）。起始地址取自对变量或数组元素


-------------------------------------------------------- KeyPgClng ----

CLng   转长型
  
将数值或字符串表达式转换为Long

语法
Declare Function CLng ( ByVal expression As datatype ) As Long

Type typename
Declare Operator Cast ( ) As Long
End Type

用法
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Long
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。Long

描述
该函数舍入小数部分并返回 32 位值。该函数不检查溢出，并且对于小


-------------------------------------------------------- KeyPgClngint ----

CLngInt   转长整型
  
将数字或字符串表达式转换为 64 位整数 （LongInt)

语法
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt

Type typename
Declare Operator Cast ( ) As LongInt
End Type

用法
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式LongInt
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。LongInt

描述
该函数舍入小数部分并返回 64 位值。该函数不检查溢出，并且对于小于或大于 的值，未定义结果?


-------------------------------------------------------- KeyPgClose ----

Close   关闭
  
流 I/O 功能，用于终止对设备的访问

语法
Close [[#]filenum ] [, [#]filenum ...]
 or 
result = Close( [#filenum] )

参数
filenum
要关闭的文件编号列表。

返回值
Close成功时返回 32 位 ：零 （），否则返回非零错误代码。Long0

描述
关闭其文件编号作为参数传递的文件。如果传递了未使用的文件编号，则返回错误。
没有参数将关闭当前


-------------------------------------------------------- KeyPgCls ----

Cls   清屏
  
在文本模式和图形模式下清除屏幕

语法
Declare Sub Cls ( ByVal mode As Long = 1 )

用法
Cls mode

参数
mode
一个可选的数值变量，其值为 从 到 。如果省略，则默认为 。021

描述
可以给出一个可选参数，mode

如果省略，则清除文本或图形视口。如果已使用该语句定义了图形视口，则将清除图形视口。否则，将清除由 定义的文本视?


-------------------------------------------------------- KeyPgColor ----

Color   颜色
  
设置与文本的控制台输出和图形输出一起使用的显示前景/背景色

语法
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

用法
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

参数
foreground
要设置的前景色
background
要设置的背景颜色

返回值
返回一个 32 位值，其中包含 中的当前前景色和 中的当前背景色。
在高/真彩色模式下，仅返回前景色，占用整个 32 位。相反，请参阅以返回当前图形模式颜色（前景和背景）。
可以在设置新颜色值的同时检索旧颜色值。Low WordHigh WordScreenControl

描述
该语句设置当前的前景色和/或背景色。、、、、、?


-------------------------------------------------------- KeyPgCommand ----

Command   命令行
  
返回用于调用程序的命令行参数

语法
Declare Function Command ( ByVal index As Long = -1 ) As String

用法
result = Command[$]( [ index ] )

参数
index
特定命令行参数的从零开始的索引。

返回值
返回命令行参数。

描述
Command返回在执行时传递给程序的命令行参数。
如果 小于零 （），则返回所有命令行参数的空格分隔列表，否则，返回单个参数。值为零 （） 返回可执行文


-------------------------------------------------------- KeyPgCommon ----

Common   全局变量
  
变量声明和作用域修饰符

语法
Common [Shared] symbolname[()] [AS DataType] [, ...]

描述
声明在代码模块（包括要编译为静态和动态库 （DLL） 的代码模块）之间共享的变量。
匹配语句必须出现在使用该变量的所有其他代码模块中。
无法初始化变量。
数组始终是可变长度的，并且?


-------------------------------------------------------- KeyPgCondBroadcast ----

CondBroadcast   条件变量广播
  
重新启动句柄的所有线程CondWait

语法
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

用法
CondBroadcast ( handle )

参数
handle
条件变量的句柄。

描述
一旦条件为并且线程启动，其中一个（包括执行主程序的隐式主线程）可以设置为条件，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重新启动等待条件的所有线程?


-------------------------------------------------------- KeyPgCondCreate ----

CondCreate   条件变量创建
  
创建要用于同步线程的条件变量

语法
Declare Function CondCreate ( ) As Any Ptr

用法
result = CondCreate

返回值
新创建的条件变量的句柄，或失败时的空指针 （0）。

描述
一旦条件为Condcreated并且线程启动，其中一个或多个线程（包括执行主程序的隐式主线程）可以设置为条件，它们将被停止，直?


-------------------------------------------------------- KeyPgCondDestroy ----

CondDestroy   条件变量销毁
  
在不再需要多线程条件变量时销毁该变量

语法
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

用法
CondDestroy ( handle )

参数
handle
要销毁的条件变量的句柄。

描述
一旦条件为 d 并且线程启动，其中一个（包括执行主程序的隐式主线程）可以设置为条件线程，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重新启动?


-------------------------------------------------------- KeyPgCondSignal ----

CondSignal   条件变量信号
  
重新启动由调用暂停的线程CondWait

语法
Declare Sub CondSignal ( ByVal handle As Any Ptr )

用法
CondSignal ( handle )

参数
handle
条件变量的句柄。

描述
一旦创建了条件线程并启动了线程，就可以为条件线程设置其中的多个线程（包括执行主程序的隐式主线程）之一，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重


-------------------------------------------------------- KeyPgCondWait ----

CondWait   条件变量等待
  
停止执行当前线程，直到某些条件变为 true

语法
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

用法
CondWait ( handle, mutex )

参数
handle
条件变量的句柄。
mutex
与此条件变量关联的互斥体，在测试条件和调用 时必须锁定该变量。CondWait

描述
停止调用它的线程的函数，直到其他线程 s 或 s 成为句柄。
一旦创建了条件变量并启动了线程，就可以为条件变量设置其中的多个变量之一


-------------------------------------------------------- KeyPgConst ----

Const   常量
  
不可修改的变量声明。

语法
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

描述
声明不可修改的常量数据，这些数据可以是整数或十进制（浮点数）数字或字符串。如果未显式给出，则将推断常量类型。
不允许指定 或 as。
允许指定 as，但不起作用，因为生成的类型始终为 .



-------------------------------------------------------- KeyPgConstMember ----

Const (Member)   常量
  
指定成员过程为只读。

语法
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type

[Const] Sub|Function|... typename ...
...
End Sub|Function|...

描述
指定方法不更改调用它的对象。隐藏的参数将被视为只读。该声明可以读作“调用 const 方法承诺不更改对象”，如果成员过程尝试更改任何数据字段或调用非 const 成员过程，编译器将出错。
只读?


-------------------------------------------------------- KeyPgConstQualifier ----

Const (Qualifier)   常量
  
指定数据类型或指针数据类型为只读。

语法
... As [Const] datatype [ [Const] Ptr ... ]

参数
datatype
标准或用户定义的数据类型的名称。

描述
指定将限定符右侧的 or 视为只读。只读（）声明是类型安全的度量，可以理解为“承诺不更改”。编译器使用 const 声明来检查对变量和参数的操作，并在编译时生成错误?


-------------------------------------------------------- KeyPgConstructor ----

Constructor   构造函数
  
在创建类或用户定义类型时自动调用

语法
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type

Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

参数
typename 
或 的名称TypeClass

描述
Constructor在创建用户定义或变量时调用方法。
是为其声明和定义方法的类型的名称。的名称解析遵循与 在 中使用的过程相同的规则。
一个类型或类可能存在多个构造函数。调用的


-------------------------------------------------------- KeyPgContinue ----

Continue   继续本次
  
控制流语句以继续循环的下一次迭代

语法
Continue {Do | For | While}

描述
跳过所有代码，直到循环结构的结束子句（即 、或块），然后执行限制条件检查。在 a 的情况下，变量根据指定的递增。
如果有多个 / / 块嵌套，它将继续在该类型的最内层块上，即输入的


-------------------------------------------------------- KeyPgCos ----

Cos   余弦
  
返回角度的余弦

语法
Declare Function Cos ( ByVal angle As Double ) As Double

用法
result = Cos( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的余弦作为 to 的范围内返回。angleDouble-1.01.0

描述
参数以弧度（而不是度）为单位进行度量。
对于绝?


-------------------------------------------------------- KeyPgCptr ----

CPtr   转为PTR
  
将指针表达式转换为指定的数据类型指针

语法
CPtr( PointerDataType, expression )

描述
转换为 .
必须是一种类型（例如数据类型或 ），或者是一对一。
可能具有不同的指针类型，也可能是 .
 注意：目前，FB实际上并没有强制要求必须是指针。不过，这在将来的版本中可能?


-------------------------------------------------------- KeyPgCshort ----

CShort   转短整型
  
将数字或字符串表达式转换为整数 （Short)

语法
Declare Function CShort ( ByVal expression As datatype ) As Short

Type typename
Declare Operator Cast ( ) As Short
End Type

用法
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Short
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。Short

描述
该函数舍入小数部分并返回一个 16 位值。该函数不检查?


-------------------------------------------------------- KeyPgCsign ----

CSign   转符号
  
将表达式转换为有符号

语法
CSign ( expression )

用法
variable = CSign ( expression )

描述
将无符号转换为有符号，这对于强制除法或乘法的有符号行为（


-------------------------------------------------------- KeyPgCsng ----

CSng   转单精型
  
将数字或字符串表达式转换为精确浮点Single

语法
Declare Function CSng ( ByVal expression As datatype ) As Single

Type typename
Declare Operator Cast ( ) As Single
End Type

用法
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Single
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
精度值。Single

描述
该函数返回一个 32 位值。该函数不检查溢出，因此请


-------------------------------------------------------- KeyPgCsrlin ----

CsrLin   光标行
  
返回游标的行位置

语法
Declare Function CsrLin ( ) As Integer

用法
result = CsrLin

返回值
指定游标的当前行。Integer

描述
返回游标所在的?


-------------------------------------------------------- KeyPgCubyte ----

CUByte   转U字节型
  
将数字或字符串表达式转换为无符号字节 （UByte)

语法
Declare Function CUByte ( ByVal expression As datatype ) As UByte

Type typename
Declare Operator Cast ( ) As UByte
End Type

用法
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式UByte
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。UByte

描述
该函数舍入小数部分并返回 8 位值。该函数不?


-------------------------------------------------------- KeyPgCuint ----

CUInt   转U整型
  
将数字或字符串表达式转换为或UIntegerUInteger<bits>

语法
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>

Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

用法
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

参数
bits
一个数值常量表达式，指示所需无符号整数位的大小。允许的值为 、 或 。8163264
expression
要转换为 或 值的数字、字符串或指针表达式UIntegerUInteger<bits>
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
A 或 包含转换后的值。UIntegerUInteger<bits>

描述
该函数舍入小数部分并返回一个值，或者如果提供了值，则返回给定大小的无符号整数类型。
?


-------------------------------------------------------- KeyPgCulng ----

CULng   转U长型
  
将数值或字符串表达式转换为ULong

语法
Declare Function CULng ( ByVal expression As datatype ) As ULong

Type typename
Declare Operator Cast ( ) As ULong
End Type

用法
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式ULong
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。ULong

描述
该函数舍入小数部分并返回 32 位值。该函


-------------------------------------------------------- KeyPgCulngint ----

CULngInt   转U长整型
  
将数字或字符串表达式转换为 64 位无符号整数 （ULongInt)

语法
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt

Type typename
Declare Operator Cast ( ) As ULongInt
End Type

用法
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式ULongInt
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。ULongInt

描述
该函数舍入小数部分并返回 64 位值。该函数不检查溢出，并且对于小于或大于 的值，未定义结果。此外，浮点表达式的强制转换当?


-------------------------------------------------------- KeyPgCunsg ----
CUnsg   转无
Description



-------------------------------------------------------- KeyPgCurdir ----

CurDir   目录取当前
  
返回当前目录/文件夹

语法
Declare Function CurDir ( ) As String

用法
result = CurDir

返回值
设置为当前目录/文件夹的名称。String

描述
返回当前目录/文件夹。

例

Print CurDir

输出会有所不同。

方言差异
在 -lang qb 方言中不可用，除非使用别名 引用。__Curdir




-------------------------------------------------------- KeyPgCushort ----

CUShort   转U短整型
  
将数字或字符串表达式转换为无符号整数 （UShort)

语法
Declare Function CUShort ( ByVal expression As datatype ) As UShort

Type typename
Declare Operator Cast ( ) As UShort
End Type

用法
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式UShort
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。UShort

描述
该函数舍入小数部分并返回一个 16 位值。该函数不检?


-------------------------------------------------------- KeyPgCustomgfx ----

Custom   自定义
  
选择自定义方法的图形语句的参数Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

参数
Custom
必填。
custom_function_ptr
自定义用户定义函数的名称。
parameter
可选传递给自定义函数;如果省略，则默认值为零 （）。Pointer0

描述
Custom选择自定义用户定义函数作为删除图像缓冲区的方法。
该方法使用用户定义的函数来计算要绘制到目标缓冲区的最终像素值。对于源图像的?


-------------------------------------------------------- KeyPgCvaArg ----

Cva_Arg
  
宏，用于从可变参数列表对象获取下一个参数。

语法
variable = Cva_Arg ( argument_list, datatype )

参数
argument_list
Cva_List要访问下一个值的数据类型变量
datatype
变量参数列表中下一个值的数据类型argument_list

描述
该宏允许在函数中使用可变数量的参数：Cva_Arg
 	Cva_Arg返回列表中的当前参数，其预期数据类型为 。argument_listdatatype
在首次使用之前，?


-------------------------------------------------------- KeyPgCvaCopy ----

Cva_Copy
  
用于从已初始化的可变参数列表对象变量初始化可变参数列表对象变量的宏

语法
Cva_Copy( dst_list, src_list )

参数
dst_list
要初始化的目标变量Cva_List
src_list
要从中复制的源变量Cva_List

描述
将一个类型变量复制到另一个类型变量。 使用当前状态进行初始化，
必须已使用上一个或语句初始化。
就像可变参数列表对象的副本构造函数，并且最?


-------------------------------------------------------- KeyPgCvaEnd ----

Cva_End
  
用于清理可变参数列表对象变量的宏

语法
Cva_End( argument_list )

参数
argument_list
Cva_List要清理的变量

描述
清理以前使用 或 初始化的类型变量，如析构函数。
必须已使用与（为了跨平台兼容性）相同的过程中的上一?


-------------------------------------------------------- KeyPgCvaList ----

Cva_List
  
可变参数列表对象类型

语法
Dim variable As Cva_List

描述
Cva_List是一种内置数据类型，用于在可变参数过程中使用可变长度参数列表。
用于初始化变量（构造函数）。
用于复制变量（复制构造函数）。
用于获取下一个参数的值。
使用完变量（析构函数?


-------------------------------------------------------- KeyPgCvaStart ----

Cva_Start
  
用于初始化可变参数列表对象变量的宏

语法
Cva_Start( argument_list, last_param )

参数
argument_list
Cva_List要初始化的数据类型变量
last_param
过程参数列表中省略号之前的最后一个参数 ...

描述
在可变参数过程定义中，是具有该类型的变量，必须使用该类型进行初始化才能使用传递给过程的变量长度参数列表。
是可变参数过程定义中省略号之前的最后


-------------------------------------------------------- KeyPgCvd ----

CVD   转整双精型
  
将 64 位整数或 8 字节字符串转换为双精度值

语法
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

用法
result = CVD( l )
result = CVD( str )

参数
l
一个 64 位，其中存储了双精度变量的二进制副本。LongInt
str
长度至少为 8 个字节，其中存储了双精度变量的二进制副本。String

返回值
返回一个值，该值保存输入值的二进制副本。Double

描述
从 64 位或 8 字节到变量的二进制副本。如果字符串的长度小于 8 ?


-------------------------------------------------------- KeyPgCvi ----

CVI   转整单精型
  
使用二进制副本将浮点数或字符串转换为整数变量

语法
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer

Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

用法
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

参数
f
一个浮点数，其中存储了一个整数变量的二进制副本。其精度（或）取决于当前平台上的大小SingleDoubleInteger
str
包含存储在其中的整数变量的二进制副本。String
bits
指定要返回的整数类型大小。接受的类型和大小将取决于调用的相应函数。expr
expr
将复制到 .Integer<bits>

返回值
包含输入表达式的二进制副本的 or 变量。IntegerInteger<bits>

描述
使用浮点值中包含的二进制数据或 .如果字符串?


-------------------------------------------------------- KeyPgCvl ----

CVL   转整单精整型
  
将单精度浮点数或四字节字符串转换为整数 （） 变量Long

语法
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

用法
result = CVL( sng )
result = CVL( str )

参数
sng
一个浮点数，其中存储了一个整数变量的二进制副本。Single
str
长度至少为四个字节，其中存储了整数变量的二进制副本。String

返回值
要将整数的二进制副本复制到的变量。Long

描述
使用 a 中包含的二进制数据返回一个 32 位整数值，或长度至少为 4 个字节的 a。如果字符串


-------------------------------------------------------- KeyPgCvlongint ----

CVLongInt   转双精长整型
  
将双精度浮点数或八字节字符串转换为变量LongInt

语法
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

用法
result = CVLongInt( dbl )
result = CVLongInt( str )

参数
dbl
一个浮点数，其中存储了变量的二进制副本。DoubleLongInt
str
长度至少为八个字节，其中存储了变量的二进制副本。StringLongInt

返回值
保存输入变量的二进制副本的变量。LongInt

描述
使用长度至少为 8 个字节的 a 或 a 中包含的二进制数据返回一个 64 位值。如果字符串的长度小于八个字节，


-------------------------------------------------------- KeyPgCvs ----

CVS   转单精整型
  
将 32 位整数或 4 字节字符串转换为单精度变量

语法
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

用法
result = CVS( i )
result = CVS( str )

参数
i
一个 32 位，其中存储了单精度变量的二进制副本。Integer
str
长度至少为 4 个字节，其中存储了单精度变量的二进制副本。String

返回值
返回一个值，该值保存输入值的二进制副本。Single

描述
从 32 位或 4 字节到变量的二进制副本。如果字符串的长度?


-------------------------------------------------------- KeyPgCvshort ----

CVShort   转字短整型
  
将双字节字符串转换为整数变量Short

语法
Declare Function CVShort ( ByRef str As Const String ) As Short

用法
result = CVShort( str )

参数
str
长度至少为两个字节，其中存储了整数变量的二进制副本。StringShort

返回值
 Short保存 的二进制副本的变量。Keypgshort

描述
使用长度至少为两个字节的 a 中包含的二进制数据返回一个 16 位整数值。如果字符串的长度小于两个字节，则返回值为零 （）。
用于转


-------------------------------------------------------- KeyPgData ----

Data   数据
  
用于在编译时存储数据的语句。

语法
Data constant_expression1 [,constant_expression2]...

描述
Data存储常量数值或字母表达式的列表，这些表达式在编译时计算（使用 -lang qb 除外），并存储为常量，可以使用 读取到变量中。
程序中的所有语句都表现为单个链式列表;读取一个语句的最?


-------------------------------------------------------- KeyPgDate ----

Date   日期
  
以字符串形式返回当前系统日期

语法
Declare Function Date ( ) As String

用法
result = Date[$]

返回值
返回当前系统日期，格式为mm-dd-yyyy

描述
没有

例

Print Date ' 打印当前日期



与QB的区别
QB DATE 语句（用于设置系统日期）现在称为 。SetDate
字符串类型后缀“$”在 -lang qb 方言中是必需的。


-------------------------------------------------------- KeyPgDateAdd ----

DateAdd   日期相加
  
以指定的间隔偏移日期

语法
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

用法
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

参数
interval
指示哪个时间段对应于一个单位的字符串number
number
要添加到基准日期的间隔数。该数字将四舍五入为最接近的整数。
date_serial
基准日期

返回值
返回与收到的 加上 的 相对应的 日期序列。date_serialnumberintervals

描述
间隔指


-------------------------------------------------------- KeyPgDateDiff ----

DateDiff   日期差值
  
获取按指定间隔测量的两个日期的差异

语法
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

参数
interval
用于测量差值的时间单位（间隔）
date_serial1
开始日期序列
date_serial2
结束日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，该整数对应于在两个日期序列之间找到的 s 数。
如果>，则结果为负数。intervaldate_serial1date_serial2

描述
interval指定如下：

价值间隔yyyy年q季度（三个月）m月份w七天期间断续器日历周d，y日h小?


-------------------------------------------------------- KeyPgDatePart ----

DatePart   日期部分
  
从日期获取间隔

语法
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

参数
interval
指示日期的哪一部分需要的字符串
date_serial
要解码的日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，表示 日期序列中的 。interval

描述

interval指示需要日期的哪一部分的字符串指定如下：

价值间隔yyyy年q季度（三个月）m月份w工作日断续器一年中的一周y一年中的


-------------------------------------------------------- KeyPgDateSerial ----

DateSerial   日期序列
  
创建日期序列

语法
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

用法
#include "vbcompat.bi"
result = DateSerial( year, month, day )

参数
year
年份
month
一年中的月份
day
月份中的某一天

返回值
返回一个日期序列，其中包含由 和 参数中的值形成的日期。返回的日期序列没有


-------------------------------------------------------- KeyPgDateValue ----

DateValue   日期数值
  
从字符串返回日期序列

语法
Declare Function DateValue ( ByRef date_string As String ) As Double

用法
#include "vbcompat.bi"
result = DateValue( date_string )

参数
date_string
要转换为日期序列的字符串

返回值
从日期字符串返回日期序列。

描述
日期字符串必须采用在操作系统的区域设置中设置的格式。
仅当区域设置指定了与使用的相同的短日期格式 QB （） 时，才能正常工作。请考虑?


-------------------------------------------------------- KeyPgDay ----

Day   日期取天
  
从日期序列中获取月份中的某一天

语法
Declare Function Day ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Day( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回月份中


-------------------------------------------------------- KeyPgDddate ----

__DATE__   _编译__日期__
  
编译器设置的内部定义（宏值）

语法
__DATE__

描述
将文本字符串（格式）


-------------------------------------------------------- KeyPgDddateiso ----

__DATE_ISO__   _编译_日期_ISO
  
编译器设置的内部定义（宏值）

语法
__DATE_ISO__

描述
将文本字符串（格式）中的编译器日期替换为已使用的


-------------------------------------------------------- KeyPgDdfb64bit ----

__FB_64BIT__   _编译_64位
  
编译器设置的内部定义

语法
__FB_64BIT__

描述
定义编译时?


-------------------------------------------------------- KeyPgDdfbargc ----

__FB_ARGC__   _编译传名称
  
编译器设置的内部定义（宏值）

语法
__FB_ARGC__

描述
替换为命令行上传入的参数数。
 __FB_ARGC__是传递给程序


-------------------------------------------------------- KeyPgDdfbargcount ----

__FB_ARG_COUNT__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_COUNT__( args... )

参数
args...
参数列表

描述
计算参数列表 （） 中的参数数并返回相应的值。
始终返回一个值，其中 0 对应于空参


-------------------------------------------------------- KeyPgDdfbargextract ----

__FB_ARG_EXTRACT__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_EXTRACT__( index, args... )

参数
index
从第一个参数开始的从零开始的偏移量（零或正整数值）
args...
参数列表

描述
从与索引值 （） 对应的参数列表 （）


-------------------------------------------------------- KeyPgDdfbargleftof ----

__FB_ARG_LEFTOF__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_LEFTOF__( arg, sep [, ret] )

参数
arg
论点
sep
分隔符，明显不同于逗号 （，）
ret
如果未找到分隔符，则默认返回

描述
基于分隔符 （） 返回参数 （） 的左标记。
 （在参数的表达式中，标记和分隔符必须间隔）
默认情况下，如果未给出默认返回 


-------------------------------------------------------- KeyPgDdfbargrightof ----

__FB_ARG_RIGHTOF__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_RIGHTOF__( arg, sep [, ret] )

参数
arg
论点
sep
分隔符，明显不同于逗号 （，）
ret
如果未找到分隔符，则默认返回

描述
基于分隔符 （） 返回参数 （） 的正确标记。
 （在参数的表达式中，标记和分隔符必须间隔）
默认情况下，如果未给出默认返回


-------------------------------------------------------- KeyPgDdfbargv ----

__FB_ARGV__   _编译传入值
  
编译器设置的内部定义（宏值）

语法
__FB_ARGV__

描述
替换为指向指向命令行上传入的零个终止的命令行参数的指针列表的指针。
 __FB


-------------------------------------------------------- KeyPgDdfbarm ----

__FB_ARM__   _编译_ARM_
  
编译器设置的内部定义

语法
__FB_ARM__

描述
如果编译目标使用 ARM CPU 


-------------------------------------------------------- KeyPgDdfbasm ----

__FB_ASM__   _编译_汇编
  
编译器设置的内部定义

语法
__FB_ASM__

描述
__FB_ASM__返回一个字符串，该字符串等于或取决于内联装?


-------------------------------------------------------- KeyPgDdFBBackend ----

__FB_BACKEND__   _编译_后端
  
编译器设置的内部定义

语法
__FB_BACKEND__

描述
定义为 或 ，具体取决?


-------------------------------------------------------- KeyPgDdFBBigEndian ----

__FB_BIGENDIAN__   _编译_大端存储
  
编译器设置的内部定义

语法
__FB_BIGENDIAN__

描述
如果为大端目标进行编译，则在编译?


-------------------------------------------------------- KeyPgDdFBBuildDate ----

__FB_BUILD_DATE__   _编译_日期_
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_DATE__

描述
替换为包含编译


-------------------------------------------------------- KeyPgDdfbbuilddateiso ----

__FB_BUILD_DATE_ISO__
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_DATE_ISO__

描述
替换为包含 ISO 日期格式构建?


-------------------------------------------------------- KeyPgDdfbbuildsha1 ----

__FB_BUILD_SHA1__
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_SHA1__

描述
替换为编译器的源 SHA-1 修订版的字符串。该值是使用用于生成编译器二进制文件的源代码修


-------------------------------------------------------- KeyPgDdfbcygwin ----

__FB_CYGWIN__   _编译_CYGWIN
  
编译器设置的内部定义

语法
__FB_CYGWIN__

描述
定义时，在编译器的 Cygwin 版本中，或者在使用 -target cygwin 命令行选?


-------------------------------------------------------- KeyPgDdfbdarwin ----

__FB_DARWIN__   _编译_DARWIN
  
编译器设置的内部定义

语法
__FB_DARWIN__

描述
定义时不使用在编译器的达尔文版本中编译时或使用 -target darwin ?


-------------------------------------------------------- KeyPgDdfbdebug ----

__FB_DEBUG__   _编译_调试
  
编译器设置的内部定义（宏值）

语法
__FB_DEBUG__

描述
__FB_DEBUG__指示编译时是否在命令行上指定了“生成调试信息”选项或“启用内部定义”选项。
如果指定了任一选项，则返回非零 （-1）。否则返回零 （0）。
可用于


-------------------------------------------------------- KeyPgDdfbdos ----

__FB_DOS__   _编译_DOS
  
编译器设置的内部定义

语法
__FB_DOS__

描述
如果为 DOS 目标进行编译，则定义时不创建在编译时创建的值。在 DOS 托管版本中缺省，或在使用 -target dos 命令行选项时处于?


-------------------------------------------------------- KeyPgDdfberr ----

__FB_ERR__   _编译_错误
  
编译器设置的内部定义（宏值）

语法
__FB_ERR__

描述
__FB_ERR__指示在编译模块时是否在编译器命令行上指定了 -e、-ex 或 -exx。
指示在编译模块时，是否在编译器命令行上指定了 -earray、-enullptr 或 -elocation，或者通过使用 -exx 进行


-------------------------------------------------------- KeyPgDdfbeval ----

__FB_EVAL__
  
编译器执行的内部定义（宏）。

语法
__FB_EVAL__( arg )

参数
arg
论点

描述
在编译时计算参数（常量表达式）。
当参数计算生成字符串时，返回使用预处理器运算符格式化的字符串：__FB_EVAL__
-a （形式： ），
 - 或 （形式： ）如果需要。Non-Escaped String 


-------------------------------------------------------- KeyPgDdfbfpmode ----

__FB_FPMODE__   _编译_快速_
  
编译器设置的内部定义

语法
__FB_FPMODE__

描述
定义为启用了 SSE 快速算术?


-------------------------------------------------------- KeyPgDdfbfpu ----

__FB_FPU__   _编译_浮点
  
编译器设置的内部定义

语法
__FB_FPU__

描述
定义为启用了 SSE 浮


-------------------------------------------------------- KeyPgDdfbfreebsd ----

__FB_FREEBSD__   _编译_FREEBSD
  
编译器设置的内部定义

语法
__FB_FREEBSD__

描述
定义时在编译时在 FreeBSD 版本的编译器中创建的值，或者当使用 -target freebsd 命令?


-------------------------------------------------------- KeyPgDdfbgcc ----

__FB_GCC__   _编译_GCC
  
编译器设置的内部定义

语法
__FB_GCC__

描述
如果使用 -gen gcc，则定义为 true


-------------------------------------------------------- KeyPgDdfbgui ----

__FB_GUI__
  
编译器设置的内部定义（宏值）

语法
__FB_GUI__

描述
__FB_GUI__指示编译时是否在命令行上指定了可执行子系统选项 '-s gui'。
如果指定了可执行子系统选项 “-s gui”，则?


-------------------------------------------------------- KeyPgDdfbjoin ----

__FB_JOIN__
  
编译器执行的内部定义（宏）。

语法
__FB_JOIN__( arg1, arg2 )

参数
arg1,arg2
要加入的左 （1） 和右 （2） 个参数

描述
将两个令牌参数连?


-------------------------------------------------------- KeyPgDdfblang ----

__FB_LANG__   _编译_语言
  
编译器设置的内部定义（宏值）

语法
__FB_LANG__

描述
__FB_LANG__指示在编译模块时设置的语言兼容性选项。默认情况下将设置为 。可以使用以下一种（或多种）方法更改语言兼容性选项：__FB_LANG__"fb"
 -lang 命令行选项
 -forcelang 命令?


-------------------------------------------------------- KeyPgDdfblinux ----

__FB_LINUX__   _编译_LINUX
  
编译器设置的内部定义

语法
__FB_LINUX__

描述
在编译到 Linux 目标时，不使用编译时创建的值进行定义。默认为 Linux 托管版本的编译器，或在使用 -tar


-------------------------------------------------------- KeyPgDdFBMain ----

__FB_MAIN__   _编译_主模_
  
编译器设置的内部定义

语法
__FB_MAIN__

描述
__FB_MAIN__在主模块中定义，而不是在其他模块中定义。
编译器将


-------------------------------------------------------- KeyPgDdFBMinVersion ----

__FB_MIN_VERSION__   _编译_最小编译版本
  
用于测试最低编译器版本的宏函数

语法
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

用法
__FB_MIN_VERSION__( major, minor, patch)

参数
major
要测试的最低主要版本
minor
要测试的最低次要版本
patch
要测试的最低补丁版本

返回值
如果编译器版本小于指定版本，


-------------------------------------------------------- KeyPgDdfbmt ----

__FB_MT__   _编译多线程
  
编译器设置的内部定义（宏值）

语法
__FB_MT__

描述
__FB_MT__指示编译时是否在命令行上指定了多线程选项 -mt，或者是否在源代码中更多地使用了 or 关键?


-------------------------------------------------------- KeyPgDdfbnetbsd ----

__FB_NETBSD__   _编译_NETBSD
  
编译器设置的内部定义

语法
__FB_NETBSD__

描述
定义时，在 NetBSD 版本的编译器中，或者在使用 -target netbsd 命令行选项?


-------------------------------------------------------- KeyPgDdfbopenbsd ----

__FB_OPENBSD__   _编译_OPENBSD
  
编译器设置的内部定义

语法
__FB_OPENBSD__

描述
在 OpenBSD 版本的编译器中，或者在使用 -target openbsd 命令行选项时，定义时


-------------------------------------------------------- KeyPgDdfboptimize ----

__FB_OPTIMIZE__
  
编译器设置的内部定义

语法
__FB_OPTIMIZE__

描述
始终定义，并且将具有从 0 到 3（默认情况下?


-------------------------------------------------------- KeyPgDdfboptionbyval ----

__FB_OPTION_BYVAL__   _编译选项支持值传递
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_BYVAL__

描述
指示当未显式声明 by value /by 引用说明符时，是否通过引用传递给 或 按值传递的参数（如 with ），或者像默认情况下那样按值传递。
如果默认情况下参数是传递值，则设置为非零 ?


-------------------------------------------------------- KeyPgDdfboptiondynamic ----

__FB_OPTION_DYNAMIC__   _编译选项数组变长
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_DYNAMIC__

描述
__FB_OPTION_DYNAMIC__定义为 true（负数 （-1）），如果发出了最近的语?


-------------------------------------------------------- KeyPgDdfboptionescape ----

__FB_OPTION_ESCAPE__   _编译选项_支持转义
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_ESCAPE__

描述
指示默认情况下，如果未以 $ 运算符显式前缀（对于非转义字符串）或 ！转义字符串的运算符。
处理字符串文本的缺省方法是在编译或使用源文件中的 -lang 命令行选项期


-------------------------------------------------------- KeyPgDdfboptionexplicit ----

__FB_OPTION_EXPLICIT__   _编译选项_支持EXPLICIT
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_EXPLICIT__

描述
__FB_OPTION_EXPLICIT__指示以前是否在源中使用过。
如果尚未设置该选项，


-------------------------------------------------------- KeyPgDdfboptiongosub ----

__FB_OPTION_GOSUB__   _编译选项_支持GOSUB
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_GOSUB__

描述
指示在编译时如何处理和将要处理。如果该选项设置为 （-1），则允许此选项，并且仅被识别为从 gosub 返回。如果未设置该选项 （0），则不允许这样做，并且仅将其识别为从过程返回。
?


-------------------------------------------------------- KeyPgDdfboptionprivate ----

__FB_OPTION_PRIVATE__   _编译选项_支持PRIVATE
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_PRIVATE__

描述
指示 默认情况下，和 的 是否具有模块作用域或全局作用域（如果未用 或 显式指定）。
函数和子的默认作用域说明符是在编译期间或在源文件中使用 -lang 命令行选项来设置的。
如?


-------------------------------------------------------- KeyPgDdfboutdll ----

__FB_OUT_DLL__   _编译_输出DLL
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_DLL__

描述
__FB_OUT_DLL__指示编译时编译器命令行上指定的输出文件类型是共享库。
如果输出是共享库，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将计算


-------------------------------------------------------- KeyPgDdfboutexe ----

__FB_OUT_EXE__   _编译_输出EXE
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_EXE__

描述
__FB_OUT_EXE__指示编译时编译器命令行上指定的输出文件类型是可执行文件。
如果输出是可执行文件，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将


-------------------------------------------------------- KeyPgDdfboutlib ----

__FB_OUT_LIB__   _编译_输出LIB
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_LIB__

描述
__FB_OUT_LIB__指示编译时编译器命令行上指定的输出文件类型是静态库。
如果输出是静态库，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将计算


-------------------------------------------------------- KeyPgDdfboutobj ----

__FB_OUT_OBJ__   _编译_输出OBJ
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_OBJ__

描述
__FB_OUT_OBJ__指示编译时编译器命令行上指定的输出文件类型是对象模块。
如果输出是对象模块，则返回非零 （-1）。否则返回零 （0）。
只有一个 、 、 或 的计算结


-------------------------------------------------------- KeyPgDdfbpcos ----

__FB_PCOS__   _编译常规PC
  
编译器设置的内部定义

语法
__FB_PCOS__

描述
定义在编译时创建的操作系统，如果操作系统具有类似于常见 PC 操作系统的文件系统行为，例如 DOS?


-------------------------------------------------------- KeyPgDdfbppc ----

__FB_PPC__
  
编译器设置的内部定义

语法
__FB_PPC__

描述
定义编译时创建的编译目标是否?


-------------------------------------------------------- KeyPgDdfbquote ----

__FB_QUOTE__
  
编译器执行的内部定义（宏）。

语法
__FB_QUOTE__( arg )

参数
arg
论点

描述
将参数转换为字符串，类似于 stringize 运算符 （#），但可以在任何位置使用（将在转换前展开参数）。
更准确地说，与通过参数传递的文本相比，返回一个多引号文本（前缀为 ?


-------------------------------------------------------- KeyPgDdfbsignature ----

__FB_SIGNATURE__   _编译_编译签名
  
编译器设置的内部定义（宏字符串）

语法
__FB_SIGNATURE__


-------------------------------------------------------- KeyPgDdfbsse ----

__FB_SSE__   _编译_SSE
  
编译器设置的内部定义

语法
__FB_SSE__

描述
如果启用了 SSE 浮?


-------------------------------------------------------- KeyPgDdfbuniqueid ----

__FB_UNIQUEID__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID__( stack-id )

参数
stack-id
要访问的堆栈的名称

描述
获取由 标识的堆栈顶部的标识符（不修改堆栈的大小）。
 （允许将新的唯一标识符推送到堆栈，并允许从堆栈中弹出标识符）
注意：stack-id__FB_UNIQUEID_PUSH____FB_UNIQUEID_PO


-------------------------------------------------------- KeyPgDdfbuniqueidpop ----

__FB_UNIQUEID_POP__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID_POP__( stack-id )

参数
stack-id
要弹出的堆栈的名称

描述
从标识的堆栈中弹出一个标识符（堆栈的大小减小 1）。
 （允许获取堆栈顶部的标识符，并允许将新的唯一标识符推送到堆栈）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_PUSH__


-------------------------------------------------------- KeyPgDdfbuniqueidpush ----

__FB_UNIQUEID_PUSH__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID_PUSH__( stack-id )

参数
stack-id
要推送的堆栈的名称

描述
将新的唯一标识符推送到 由 标识的堆栈（堆栈的大小增加 1）。
 （允许在堆栈顶部获取标识符，并允许从堆栈中弹出标识符）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_POP__



-------------------------------------------------------- KeyPgDdfbunix ----

__FB_UNIX__   _编译_UNIX
  
编译器设置的内部定义

语法
__FB_UNIX__

描述
定义在编译时创建的操作系统，如果操?


-------------------------------------------------------- KeyPgDdfbunquote ----

__FB_UNQUOTE__
  
编译器执行的内部定义（宏）。

语法
__FB_UNQUOTE__( arg )

参数
arg
论点

描述
采用文本字符串并将其转换回标记。
更准确地说，与通过参数传递的文本相比，返回一个带子引?


-------------------------------------------------------- KeyPgDdfbvectorize ----

__FB_VECTORIZE__   _编译_编号级别
  
编译器设置的内部定义

语法
__FB_VECTORIZE__

描述
定义为由 


-------------------------------------------------------- KeyPgDdFBVerMajor ----

__FB_VER_MAJOR__   _编译_主版本号
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MAJOR__

Description
__FB_VER_MAJOR__ will return the major version of FreeBASIC currently being used.  For example, the major version is 0 for FreeBASIC 0.90, and will remain 0 until FreeBASIC version


-------------------------------------------------------- KeyPgDdFBVerMinor ----

__FB_VER_MINOR__   _编译_次版本号
  
编译器设置的内部定义（宏值）

语法
__FB_VER_MINOR__

描述
__FB_VER_MINOR__将返回当前正在使用的 FreeBASIC 的次要版本?


-------------------------------------------------------- KeyPgDdFBVerPatch ----

__FB_VER_PATCH__   _编译_版本修订
  
编译器设置的内部定义（宏值）

语法
__FB_VER_PATCH__

描述
__FB_VER_PATCH__将返回当前正在使用的FreeBASIC版本的补丁/颠覆/修订版号。例如，对于 FreeBAS


-------------------------------------------------------- KeyPgDdfbversion ----

__FB_VERSION__   _编译_版本号
  
编译器设置的内部定义（宏字符串）

语法
 __FB_VERSION__



-------------------------------------------------------- KeyPgDdfbwin32 ----

__FB_WIN32__   _编译_Win32
  
编译器设置的内部定义

语法
__FB_WIN32__

描述
如果编译到 Win（32 位或 64 位）目标，则定义在编译时不创建值。在 Win 托管版本中为默认值，如果使用 -target win32 或 -


-------------------------------------------------------- KeyPgDdfbx86 ----

__FB_X86__
  
编译器设置的内部定义

语法
__FB_X86__

描述
定义编译时创建的编译目标是否使用 X


-------------------------------------------------------- KeyPgDdfbxbox ----

__FB_XBOX__   _编译_XBOX
  
编译器设置的内部定义

语法
__FB_XBOX__

描述
定义时不使用在编译时使用 -target xbox 命令行选项时创


-------------------------------------------------------- KeyPgDdfile ----

__FILE__   __文件__
  
编译器设置的内部定义（宏字符串）

语法
__FILE__

描述
替换为引用的源文件名?


-------------------------------------------------------- KeyPgDdfilenq ----

__FILE_NQ__   __文件_未用
  
编译器设置的内部定义（宏字符串）

语法
__FILE_NQ__

描述


-------------------------------------------------------- KeyPgDdfunction ----

__FUNCTION__   __函数__
  
编译器设置的内部定义（宏字符串）

语法
__FUNCTION__

描述
替换为当前功能块的引号名称。
它的正常用途是在调试中报告错误的值。
如果在模块级别使用，则给定的?


-------------------------------------------------------- KeyPgDdfunctionnq ----

__FUNCTION_NQ__   __函数_未引用__
  
编译器设置的内部定义（宏字符串）

语法
__FUNCTION_NQ__

描述
替换为当前功能块（如果使用）的非引号名称。
如果在模块级别使用，则给定的函数名称将用于主模块或其他模块。?


-------------------------------------------------------- KeyPgDdline ----

__LINE__   __行__
  
编译器设置的内部定义（宏值）

语法
__LINE__

描述
替换为所用源文件的


-------------------------------------------------------- KeyPgDdpath ----

__PATH__   __路径__
  
编译器设置的内部定义（宏字符串）

语法
__PATH__

描述



-------------------------------------------------------- KeyPgDdtime ----

__TIME__   __时间__
  
编译器设置的内部定义（宏值）

语法
__TIME__

描述
替换已使用的文本字符串


-------------------------------------------------------- KeyPgDeallocate ----

Deallocate   内存分配清除
  
释放以前分配的内存

语法
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

用法
Deallocate( pointer )

参数
pointer
以前分配的缓冲区的地址。

描述
此过程将释放以前使用 分配的内存。 必须是有效的指针。过程返回后，将呈现为无效（指向无效的内存地址），并且其使用（取消引用或再次调用Deallocate）将导致未定义的行为


-------------------------------------------------------- KeyPgDeclare ----

Declare   声明
  
声明模块级或成员过程

语法
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]

Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

参数
param_list
用逗号分隔的括号括起来的参数列表。
return_type
、或 过程的返回类型。FunctionOperatorProperty
name
过程的名称或符号。
op_symbol
运算符的名称或符号。
T
新的用户定义类型的名称。

描述
该语句声明 a 、 、 、 或 。
可以在代码中引用该过程，而无需查看其定义，尽管它必须在某个位置定义。从本质上讲，该声明引入


-------------------------------------------------------- KeyPgDefbyte ----

DefByte   默认字节
  
为变量名称范围指定默认数据类型

语法
DefByte start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefByte指定未使用数据类型声明（或根


-------------------------------------------------------- KeyPgDefdbl ----

DefDbl   默认双精型
  
为变量名称范围指定默认数据类型

语法
DefDbl start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefDbl指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDefined ----

defined   预定义
  
预处理器函数，用于测试是否定义了交易品种

语法
defined (symbol_name)

参数
symbol_name
要测试的品种的名称

返回值
如果已定义交易品种，则返回非零 （），否则返回零 （）。-10

描述
给定符号名称，如果已定义符号，则预处?


-------------------------------------------------------- KeyPgDefint ----

DefInt   默认整型
  
为变量名称范围指定默认数据类型

语法
DefInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefInt指定未使用数据类型声明（或根本?


-------------------------------------------------------- KeyPgDeflng ----

DefLng   默认长型
  
为变量名称范围指定默认数据类型

语法
DefLng start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefLng指定未使用数据类型声明（或根


-------------------------------------------------------- KeyPgDeflongint ----

DefLongInt   默认长整型
  
为变量名称范围指定默认数据类型

语法
DefLongInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefLongInt指定未使用数据类型声明（或根本


-------------------------------------------------------- KeyPgDefshort ----

DefShort   默认短整型
  
为变量名称范围指定默认数据类型

语法
DefShort start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefShort指定未使用数据类型声明（或根


-------------------------------------------------------- KeyPgDefsng ----

DefSng   默认单精型
  
为变量名称范围指定默认数据类型

语法
DefSng start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefSng指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDefstr ----

DefStr   默认字符
  
为变量名称范围指定默认数据类型

语法
DefStr start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefStr指定未使用数据类型声明（或根本


-------------------------------------------------------- KeyPgDefubyte ----

DefUByte   默认U字节
  
为变量名称范围指定默认数据类型

语法
DefUByte start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUByte指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDefuint ----

DefUInt   默认U整型
  
为变量名称范围指定默认数据类型

语法
DefUInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUInt指定未使用数据类型声明（或根本不


-------------------------------------------------------- KeyPgDefulongint ----

Defulongint   默认U长整型
  
为变量名称范围指定默认数据类型

语法
Defulongint start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
Defulongint指定未使用数据类型声明（或根本?


-------------------------------------------------------- KeyPgDefushort ----

DefUShort   默认U短整型
  
为变量名称范围指定默认数据类型

语法
DefUShort start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUShort指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDestructor ----

Destructor   析构函数
  
当类或用户定义的类型超出范围或被销毁时自动调用

语法
Type typename
field declarations
Declare Destructor ( )
End Type

Destructor typename ( ) [ Export ]
statements
End Destructor

参数
typename 
的名称TypeClass

描述
当用户定义的或变量超出范围或使用运算符显式销毁时，将调用析构函数方法。
是为其声明和定义方法的类型的名称。的名称解析遵循与 在 中使用的过程相同的规则。
该方法?


-------------------------------------------------------- KeyPgDim ----

Dim   定义
  
声明变量

语法
Dim [Shared] name1 As DataType [, name2 As DataType, ...]
或
Dim [Shared] As DataType name1 [, name2, ...]
阵 列：
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
初始值设定项：
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

描述
按名称声明变量并保留内存以容纳它。
变量必须先声明，然后才能在 -lang fb 方言中使用，或者在其他方言中使用。只有在 -lang qb 和 -lang fblite 方言中，变量可以在不首先声明它们的情


-------------------------------------------------------- KeyPgDir ----

Dir   目录取名称
  
在文件系统中搜索并返回有关项目的信息;执行目录搜索属性

语法
# Include "dir.bi"

Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

用法
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

参数
item_spec
要与项目名称匹配的模式。
attrib_mask
要匹配项属性所依据的位掩码。
out_attrib
引用分配给找到的每个项的属性（如果有）的位掩码。
p_out_attrib
指向分配了找到的每个项属性（如果有）的位掩码的指针。

返回值
如果未找到与名称或属性掩码匹配的项目，则 （or ） 将赋值为零并返回空字符串。否则，（或 ）将分配项目的属性掩码，并返回不带路径的项目名称。item_specattrib_maskout_attrib*p_out_attribout_attrib*p_out_attrib

描述
Dir返回与作?


-------------------------------------------------------- KeyPgDo ----
Do   重复
Description



-------------------------------------------------------- KeyPgDoloop ----

Do...Loop
  
用于循环的控制流语句

语法
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

描述
该语句执行以下语句块中的语句，直到/同时条件（如果有）的计算结果为 true。
如果使用，则当条件计算结果为 true 时，语句将停止重复语句块。关键字具有相反的效果，如果条件计算结果为 false?


-------------------------------------------------------- KeyPgDots ----

... (Ellipsis)
  

	用于代替过程参数传递可变数量的参数，或用作数组声明中的上限，以表示元素数将由初始值设定项确定。

语法
Declare { Sub | Function } proc_name cdecl ( param_list, ... )  { | [ ByRef ] As return_type }

#define identifier( [ parameters, ] variadic_parameter... ) body

Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

描述
可变参数程序
省略号（三个点，）在过程声明和定义中用于指示变量参数列表。
必须始终指定第一个参数（至少），并且必须使用 C 调用约定调用该过程。
?


-------------------------------------------------------- KeyPgDouble ----

Double   双精度
  
标准数据类型：64 位浮点

语法
Dim variable As Double

描述
Double 是一种 64 位浮点数据类型，用于存储更精确的十进制数。它们可以在 到 的范围内保存正值，也可以在 到 的范围内保存负值，或者保存为 零 （）。它们最多包含 53 位精度，或大约 15 位?


-------------------------------------------------------- KeyPgDraw ----

Draw   绘图
  
用于序列化像素绘图的声明

语法
Draw [target,] cmd

参数
target
要利用的缓冲区
cmd
包含命令序列的字符串

描述
绘图将通过 / 缓冲区（如果指定）在当前工作页面集上进行。
该语句可用于同时发出多个绘图命令;快速绘制图形很有用。命令字符串接受以下命令：
用于打印像素的命令：Sc


-------------------------------------------------------- KeyPgDrawString ----

Draw String   绘图
  
用于将文本呈现到图像或屏幕的图形语句。

语法
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

用法
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

参数
buffer
要在其上绘制字符串的子画面。如果未提供，它将被绘制到屏幕上。
STEP
使用相对坐标。如果添加，则相对于最后一个绘制点平移 x 和 y 坐标。STEP
x,y
要绘制的水平/垂直位置，相对于屏幕的左上角（除非使用 - 见上文）。文本的左上角将在此位置绘制。STEP
text
包含要绘制的文本的字符串
color
如果未提供字体，则允许您选择文本的颜色。如果省略，则使用默认前台。
如果提供了字体，则忽略，并且字体本身指定每个像素的颜色。Colorcolor
font
包含自定义字体的图像缓冲区。如果未提供字体，则使用当前文本分辨率的标准字体，并忽略以下参数。
method|Custom
指定如何在目标曲面顶部绘制字体字符。允许使用与为语句找到的相同方法，唯一的区别是默认方法是用于此函数。此参数仅适用于自定义字体。PutTrans
alpha
alpha 值，范围为 0-255。此参数仅适用于 或 方法。AddAlpha
b


-------------------------------------------------------- KeyPgDylibfree ----

DyLibFree   动态库卸载
  
从内存中卸载动态链接库

语法
Declare Sub DyLibFree ( ByVal libhandle As Any Pointer )

用法
DyLibFree( libhandle )

参数
libhandle
要卸载的库的句柄。

描述
DyLibFree用于在运行时库中发布以前


-------------------------------------------------------- KeyPgDylibload ----

DyLibLoad   动态库加载
  
在运行时加载到动态链接库 （DLL） 到内存中

语法
Declare Function DyLibLoad ( ByRef libname As String ) As Any Pointer

用法
result = DyLibLoad ( libname )

参数
libname
包含要加载的库的名称。String

返回值
已加载库的句柄。零对错误Pointer

描述
DyLibLoad用于在运行时库中链接到程序。此函数执行链接并返回一个句柄，该句柄在调用库中的函数时必须?


-------------------------------------------------------- KeyPgDylibsymbol ----

DyLibSymbol   动态库地址
  
返回 dll 中函数或变量的地址

语法
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByVal symbol As Short ) As Any Ptr

用法
result = DyLibSymbol ( libhandle, symbol )

参数
libhandle
返回的 DLL 的 Any Ptr 句柄DyLibLoad
symbol
一个字符串，包含函数的名称，或库中要返回的地址的变量。仅在 Windows 中，也可以是包含函数/变量的序号。Short

返回值
A 表示库中的函数或变量。
如果函数失败，则返回值为 0。Pointer

描述
DyLibSymbol返回一个指针，该指针指向 在 所指向的 dll 中名为 的变量或函数。 是通过使用 加载 dll


-------------------------------------------------------- KeyPgElse ----
Else   否
Description



-------------------------------------------------------- KeyPgElseif ----
ElseIf   又
Description



-------------------------------------------------------- KeyPgEncoding ----

Encoding   编码类型
  
指定文本文件的字符格式

语法
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

参数
filename对于 {输入|输出|追加}
要打开的文件名，或InputOutputAppend
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
指示文件的编码类型
filenum
要与打开的文件关联的未使用的文件编号

描述
Encoding指定 Unicode 文本文件的格式，因此并使用正确的编码。如果从语句中省略，


-------------------------------------------------------- KeyPgEnd ----

End (Statement)   结束
  
控制流语句以结束程序。

语法
Declare Sub End ( ByVal retval As Long = 0 )

用法
End [ retval ]

参数
retval
错误代码返回系统。

描述
用于退出程序并返回操作系统。可以指定可选的整数返回值以指示系统的错误代码。如果未给出返回值，则在程序结束时自动返回值 。
此语句的用法不会完全关闭范围。局部变量不会自


-------------------------------------------------------- KeyPgEndblock ----

End (Block)   结束
  
指示复合语句块的结束。

语法
End { Sub | Function | If  | Select  | Type  | Enum  | Scope  | With  | Namespace  | Extern  | Constructor  | Destructor  | Operator | Property }

描述
用于指示最新代码块的结束。
块的类型必须包含在命令中：、 或 之一。
结束 一个 、 、 、 、 或 块也会关闭该块内定义的变量的作用域。当作用域关闭时，作用域内定义的变量将被销毁，并根?


-------------------------------------------------------- KeyPgEndif ----
End If   结
Description



-------------------------------------------------------- KeyPgEnum ----

Enum   枚举
  
声明枚举类型。

语法
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

参数
typename
的名称Enum
symbolname
常量的名称
expression
常量表达式
Explicit
要求符号必须由typename.symbolname

描述
Enum，表示声明与离散值对应的符号名称列表。如果未给出初始值，则第一项将设置为 。除非给出，否则每个后续交易品种的值都比前一个交易品种多一个。
符号可以各在自己的?


-------------------------------------------------------- KeyPgEnviron ----

Environ   环境变量
  
返回系统环境变量的值

语法
Declare Function Environ ( ByRef varname As Const String ) As String

用法
result = Environ[$]( varname )

参数
varname
环境变量的名称。

返回值
返回环境变量的文本值，如果变量不


-------------------------------------------------------- KeyPgEof ----

EOF   文件到尾
  
检查是否已到达打开文件的末尾

语法
Declare Function EOF ( ByVal filenum As Long ) As Long

用法
result = EOF( filenum )

参数
filenum
打开的文件的文件编号。

返回值
如果已达到文件末尾，则返回 true （-1），否则返回零 （0）。

描述
从 中打开的文件读取 时，了解何时到达文件末尾非常有用，从而避免了因读取文件末尾而导致的错误。使?


-------------------------------------------------------- KeyPgErase ----

Erase   擦除
  
擦除数组的声明

语法
Declare Sub Erase ( array As Any [, ... ] )

用法
Erase( array0 [, array1 ... arrayN ] )

参数
array
要擦除的数组。

描述
在固定长度的数组上使用会重置所有元素，而不会释放分配的内存。
在物体的情况下，有破坏然后重建。
在可变长度数组（数组大小已调整）上使用可释放分配?


-------------------------------------------------------- KeyPgErfn ----

Erfn   错误函数
  
错误报告功能

语法
Declare Function Erfn ( ) As ZString Ptr

用法
result = Erfn ( ) 

返回值
返回一个指针，该指针指向标识发生错误的函数的字符串。
如果未使用 -exx 编译


-------------------------------------------------------- KeyPgErl ----

Erl   错误行
  
错误处理函数，用于返回发生错误的行

语法
Declare Function Erl ( ) As Integer

用法
result = Erl

返回值
一个 Integer 返回值，其中包含上次发生错误的行号。

描述
Erl将返回上次发生错误的行号。如果未发生任?


-------------------------------------------------------- KeyPgErmn ----

Ermn   错误模块
  
错误报告功能

语法
Declare Function Ermn ( ) As ZString Ptr

用法
result = Ermn ( ) 

返回值
返回一个指针，该指针指向标识发生错误的模块的字符串。
如果未使用 -exx 编


-------------------------------------------------------- KeyPgErr ----

Err   错误
  
获取或设置运行时错误号

用法
result = Err( )
or
Err = number

描述
该函数返回 FreeBASIC 运行时错误号（32 位），该错误号可由内置语句和函数设置，或由程序通过 或 设置。与 不同，设置错误号而不调用错误处理程序。
有关预定义的运行时错误号及其相关含义?


-------------------------------------------------------- KeyPgError ----

Error   错误号
  
用于强制生成错误的错误处理语句

语法
Declare Sub Error ( errno As Integer )

用法
Error number

参数
number
要生成的错误号

描述
Error 调用使用 On Error 指定的错误处理程序，或者，如果未设置任何错误处理程序，则中止程序，打印?


-------------------------------------------------------- KeyPgEvent ----

Event (Message Data From Screenevent)   事件
  
ScreenEvent 用于返回事件数据的预定义结构 （UDT） fbgfx.bi

语法
#include once "fbgfx.bi"
using fb
Dim variable As Event

描述
为了清楚起见，我们在这里报告结构：
 
该字段将包含事件类型 ID，而其余 4 个整数将保存事件类型的敏感数据。
 事件类型EVENT
Type Event Field = 1
    Type As Long
    Union



-------------------------------------------------------- KeyPgExec ----

Exec   外部调用
  
临时将执行转移到外部程序

语法
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

用法
result = Exec( program, arguments )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。
arguments
要传递给程序的命令行参数。

返回值
程?


-------------------------------------------------------- KeyPgExepath ----

ExePath   程序路径
  
返回正在运行的程序的路径

语法
Declare Function ExePath ( ) As String

用法
result = ExePath

返回值
设置为正在运行的程序的路径的变量。String


-------------------------------------------------------- KeyPgExit ----

Exit   退出
  

	Control flow statement to exit a compound statement block

Syntax
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }

Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


Description
Leaves a code block such as a , , , , , , , , , or a   block. The execution skips the rest of the block and goes to the line after its end.

Where there are multiple  /  /  /  blocks


-------------------------------------------------------- KeyPgExp ----

Exp   指数
  
提高到给定数字的幂的返回e

语法
Declare Function Exp cdecl ( ByVal number As Double ) As Double

用法
result = Exp( number )

参数
number
那被提升到权力。Doublenumbere

返回值
将的 Double 值返回为 的幂。enumber

描述
数学常数，也称为欧拉常数，是 和 的基数，并且是一个无理数和超越数。二十个有效数字的值为：。所需的参数可以是函数范围内的任何有效数值表达式。如果太大，则返?


-------------------------------------------------------- KeyPgExport ----

Export   导出
  
定义说明符，用于指示 DLL 中的过程应从其他程序中可见

语法
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

描述
如果在 DLL 中使用此子句定义了函数，则该函数将添加到公共导出表中，因此外部


-------------------------------------------------------- KeyPgExtends ----

Extends   派生类型
  
指定从中派生新类型的基类型

语法
Type|Union typename Extends base_typename
...
End Type|Union

描述
Extends声明派生自 。派生的用户定义类型 ，继承基类型的字段和方法。 对象可以代替对象使用。从继承的字段和方法将像 的成员一样隐式访问。
但是，如果继承的成员具有相同的标识符，则?


-------------------------------------------------------- KeyPgExtendsWstring ----

Extends Wstring   派生类型
  
指定继承 Wstring 行为的类型

语法
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

描述
Extends Wstring声明继承 的属性和行为。目的是允许用户创建自定义字符串类型（即动态内存管理），这些类型可以很好地集成到现有的内置 fbc 编译器中（与 fbc 类型的良好互操作性）。
使用合


-------------------------------------------------------- KeyPgExtendsZstring ----

Extends Zstring   派生类型
  
指定继承 Z 字符串行为的类型

语法
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

描述
Extends Zstring声明继承 的属性和行为。目的是允许用户创建自定义字符串类型（即动态内存管理），这些类型可以很好地集成到现有的内置 fbc 编译器中（与 fbc 类型的良好互操作性）。
使?


-------------------------------------------------------- KeyPgExtern ----

Extern   外部扩展
  
声明具有外部链接的变量、数组或对象

语法
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

参数
symbolname
变量、数组或对象的名称。
aliasname
变量、数组或对象的备用外部名称。

描述
声明为外部名称，这意味着它是外部模块的全局模块，包括那些要编译为静态和动态库 （DLL） 的模块。
仅声明变量、数组和对象，而不定义它们（与 或 ?


-------------------------------------------------------- KeyPgExternBlock ----

Extern...End Extern
  
语句块，允许调用为特定语言或平台编译的函数。

语法
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

描述
Extern块为过程提供默认调用约定，并强制要求特定的名称修饰。
块为过程提供了默认的调用约定，并且还保留了其中声明的所有名称的大小写。在没有 EXTERN 块的情况下，可以通过与包?


-------------------------------------------------------- KeyPgFalse ----

False   假
  
编译器设置的固有常量

语法
Const False As Boolean

描述
在使用的位置


-------------------------------------------------------- KeyPgFBArray ----

Fbarray (Array Descriptor Structure And Access)
  
包含文件中的预定义结构 （UDT） 和过程声明，可用于访问数组描述符数据字段。fbc-int/array.bi

语法
从：./inc/fbc-int/array.bi

# If __FB_LANG__ = "fb"
Namespace FBC
# endif

Const FB_MAXDIMENSIONS As Integer = 8

Type FBARRAYDIM
    Dim As UInteger elements     “”元素数

    Dim As Integer LBound        '' 尺寸下限

    Dim As Integer UBound        '' 尺寸上限

End Type

Const FBARRAY_FLAGS_DIMENSIONS = &h0000000f    在 dimTb（） 中分配的条目数

Const FBARRAY_FLAGS_FIXED_DIM  = &h00000010    '' 数组具有固定数量的维度

Const FBARRAY_FLAGS_FIXED_LEN  = &h00000020    '' 数组指向固定长度内存

Const FBARRAY_FLAGS_RESERVED   = &hffffffc0    '' 保留，请勿使用


Type FBARRAY
    Dim As Any Ptr index_ptr     '' @array（0， 0， 0， ... ）

    Dim As Any Ptr base_ptr      内存在数组最低边界处开始的''

    Dim As UInteger size         “”已分配内容的字节大小

    Dim As UInteger element_len  单个元素的“”字节大小

    Dim As UInteger dimensions   '' 尺寸数

    Dim As UInteger flags        “” FBARRAY_FLAGS_*


    '' 注意尺寸的数量;全血细胞计数可分配

    “”一个较小的描述符，少于 FB_MAXDIMENSIONS

    dimTb（） 中的 ''，如果在编译时已知它们

    永远不需要“”。始终尊重数量

    访问 dimTb（） 时的'' 尺寸


    Dim As FBARRAYDIM dimTb(0 To FB_MAXDIMENSIONS-1)
End Type

Extern "rtlib"
    Declare Function ArrayDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Any ) As FBC.FBARRAY Ptr
    Declare Function ArrayConstDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Const Any ) As Const FBC.FBARRAY Ptr
End Extern

# If __FB_LANG__ = "fb"
End Namespace
# endif
        
用法
#include once "fbc-int/array.bi"
using FBC

' then:
Dim pd As FBARRAY Ptr
...
pd = ArrayDescriptorPtr ( array() )

' or safer:
Dim pd As Const FBARRAY Ptr
...
pd = ArrayConstDescriptorPtr ( array() )

参数
pd 
指向数组描述符的指针的名称
array 


-------------------------------------------------------- KeyPgFBMemcopy ----

Fb_Memcopy
  
将内存块从一个位置复制到另一个位置

语法
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memcopy( dst, src, bytes )

参数
dst
目标内存的起始地址
src
源内存的起始地址
bytes
要复制的字节数

返回值
返回目标内存的起始地址。

描述
fb_memcopy将给定数量的字节从内存位置复制到内存位置。
每个起始地址都取自对变量或数组元素的引用。
内存区域不得重叠（否则，不能保证?


-------------------------------------------------------- KeyPgFBMemcopyclear ----

fb_MemCopyClear
  
将内存块的第一部分从一个位置复制到另一个位置，并清除其余部分

语法
Declare Sub fb_MemCopyClear ( ByRef dst As Any, ByVal dstlen As UInteger, ByRef src As Any, ByVal srclen As UInteger )

用法
fb_memcopy( dst, dstlen, src, srclen )

参数
dst
目标内存的起始地址
dstlen
要写入的字节数
src
源内存的起始地址
srclen
要复制的第一个字节数（其他已清除）

描述
fb_memcopycopy将给定数量的字节（）从内存位置复制到内存位置，但只有第一个字节被真正复制，其余的被清除（-字节）。
每?


-------------------------------------------------------- KeyPgFBMemmove ----

Fb_Memmove
  
将内存块从一个位置复制到另一个位置

语法
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memmove( dst, src, bytes )

参数
dst
目标内存的起始地址
src
源内存的起始地址
bytes
要复制的字节数

返回值
返回目标内存的起始地址。

描述
fb_memmove将给定数量的字节从内存位置复制到内存位置。每个起始地址都取自对变量或数组元素的引用。
复制就像使用中间缓冲区一样进行，允?


-------------------------------------------------------- KeyPgField ----

Field   字段
  
指定字段对齐方式。

语法
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

描述
Field可用于打包或比默认布局更紧密。最常用的值是 ，这会导致 尽可能紧密地打包 或，而不会在字段之间或 末尾添加任何填充字节。 只能用于减少字段对齐?


-------------------------------------------------------- KeyPgFileattr ----

FileAttr   文件属性
  
返回有关打开的文件编号的信息

语法
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

用法
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )

或

#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

参数
filenum
打开的文件或设备的文件编号Open
returntype
一个整数值，指示要返回的信息类型。

返回值
与返回类型关联的值，否则出错时为 0。

描述
根据提供的文件号返回有关文件编号的信息returntype
价值描述不断1文件模式fbFileAttrMode2文件句柄fbFileAttrHandle3编码fbF


-------------------------------------------------------- KeyPgFilecopy ----

FileCopy   文件复制
  
复制文件

语法
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

用法
#include "file.bi"
FileCopy source, destination

或

#include "file.bi"
result = FileCopy( source, destination )

参数
source
指定要从中复制的文件的文件名的参数。此文件必须存在。String
destination
指定要复制到的文件的文件名的参数。如果此文件存在，它将被覆盖。任何打开的文件句柄当前都不应引用此文件。String

返回值
成功时或发生错误时返回。01

描述
将源文件的内容复制到目标文件中，?


-------------------------------------------------------- KeyPgFiledatetime ----

FileDateTime   文件日期时间
  
将文件的上次修改日期和时间作为“串行日期”返回 

语法
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

用法
#include "file.bi"
result = FileDateTime( filename )

或

#include "vbcompat.bi"
result = FileDateTime( filename )

参数
filename
要检索其日期和时间的文件名。



-------------------------------------------------------- KeyPgFileexists ----

FileExists   文件存在
  
测试文件是否存在

语法
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

用法
#include "file.bi"
result = FileExists( filename )

或

#include "vbcompat.bi"
result = FileExists( filename )

参数
filename
用于测试是否存在的文件名。

返回值
如果文件存在，则返回非零 （），否则返回零 （）。-10

描述
FileExists测试文件是否存在。
在内部，它可能会发出Open（）和Close（）函数，这可能会产生后果 - 例如，文


-------------------------------------------------------- KeyPgFileflush ----

FileFlush
  
将应用程序流缓冲区刷新到系统，或将系统缓冲区刷新到文件

语法
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

用法
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

参数
filenum
绑定文件或设备的文件编号。如果未给出，或 -1，则刷新所有打开的文件。
systembuffers
如果为非零，则将系统缓冲区刷新到物理设备。默认值为零 （0）。

返回值
返回零 （0） 表示成功，如果无法刷新文件缓冲区，则返回错误代码。

描述
FileFlush将应用程序缓冲输出写入基础流，如果为非零，则写入基础物理?


-------------------------------------------------------- KeyPgFilelen ----

FileLen   文件大小
  
查找给定文件名的文件的长度

语法
Declare Function FileLen ( filename As String ) As LongInt

用法
#include "file.bi"
result = FileLen(filename)

或

#include "vbcompat.bi"
result = FileLen(filename)

参数
filename
一个参数，指定要返回其长度的文件的文


-------------------------------------------------------- KeyPgFileseteof ----

FileSetEof
  
设置绑定到文件编号的打开文件的长度

语法
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

用法
#include "file.bi"
result = FileSetEof(fnum)

参数
filenum
绑定文件或设备的文件编号。

返回值
返回零 （0） 表示成功，如果无法设置文件末尾（文件大小），则返回错误代码。

描述
FileSetEof根据当前文件位置设置文件的结尾。文件位置与 中一样基于一个。
当当前文件位置位于文件末尾之前时，文件将被截断。


-------------------------------------------------------- KeyPgFix ----

Fix   截断
  
返回数字的整数部分，舍入到零

语法
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

用法
result = Fix( number )

参数
number
要截断的浮点数

返回值
返回 的整数部分，舍入到零。number

描述
等效于： .例如，将返回 ，并将返回 。对于整数类型，返回的数字保持不变。
注意：此函数也等效于 。
一元可以使用用


-------------------------------------------------------- KeyPgFlip ----

Flip   翻页
  
更改当前视频显示页面

语法
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

用法
Flip [ frompage ] [, topage ]

参数
frompage
上一页
topage
要显示的新页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
在普通图形模式下，是 和 的别名。有关详细信息，请参阅。
在 OpenGL 模式下，执行硬件翻页并显示反缓冲器的内容。建议您在 OpenGL 模式下定?


-------------------------------------------------------- KeyPgFor ----
For   循
Description



-------------------------------------------------------- KeyPgFormat ----

Format   格式化
  
以指定的格式设置数字的格式

语法
Declare Function Format ( ByVal numerical_expression As Double, ByRef formatting_expression As Const String = "" ) As String

用法
#include "string.bi"
result = Format[$]( numerical_expression, formatting_expression )

参数
numerical_expression
要格式化的数字
formatting_expression
格式化模式

返回值
Format返回一个字符串，其结果的格式设置为格式设置表达式中指示的格式。
格式表达式是一个字符串，可以生成数字或日期时间值。

描述
要恢复有意义的日期时间值，数值表达式必须是从相应函数获取的日期序列。
此函数是 FreeBASIC 的一部分，?


-------------------------------------------------------- KeyPgFornext ----

For...Next
  
用于循环的控制流语句

语法
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

参数
iterator
用于从初始值循环访问到结束值的变量标识符
datatype
如果指定，变量将自动使用类型声明iteratordatatype
startvalue
表示迭代器起始值的表达式
endvalue
用于与迭代器的值进行比较的表达式
stepvalue
每次迭代后添加到迭代器的表达式

描述
循环初始化为 ，然后执行 递增 ， 直到超过 。如果未显式给出，它将设置为 。
和 的值在语句执行后立即存?


-------------------------------------------------------- KeyPgFrac ----

Frac   小数
  
返回数字的小数部分

语法
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

用法
result = Frac( number )

参数
number
要获取分数部分的数字或表达式。

返回值
返回数字或表达式的小数部分。

描述
等效于： .
例如，将返回 ，并将返回 。对于整数类型，始终返回该值。
一?


-------------------------------------------------------- KeyPgFre ----

Fre   内存可用值
  
返回可用内存量

语法
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

用法
result = Fre( [ value ] )

参数
value
保留未使用的虚拟参数以向后兼容;可以忽略。

返回值
返回可


-------------------------------------------------------- KeyPgFreefile ----

FreeFile   文件号
  
返回可用文件编号

语法
Declare Function FreeFile ( ) As Long

用法
result = FreeFile

返回值
下一个可用文件编号（如果有），否则为零 （）。0

描述
返回下一个可用文件号的编号，其有效值为 ，或者如果已打开了 255 个文件。此值是文件的必需参数。 在程序员无法跟踪已用文件编号的复杂程序中打开文件时非常有用。


-------------------------------------------------------- KeyPgFunction ----

Function   函数
  
定义返回值的过程

语法
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

参数
identifier：函数
的名称：外部可见的（对链接器）名称括在引号中
： 
 ：external_identifierparameter_listparameter[, parameter[, ...]]parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数中引用的变量的名称。如果参数是数组，则标识符后必须跟空括号。
 ：变量
的类型 ：如果调用中未指定任何参数，则参数的值typedefault_value
return_type：函数
返回的变量的类型：组成函数体
的一个或多个语句：从函数返回的值statementsreturn_value

描述
函数定义一个代码块，该代码块可以使用单个语句（函数调用）执行?


-------------------------------------------------------- KeyPgFunctionPtr ----

Function Pointer   函数
  
存储指向返回值的过程的指针的数据类型Function

语法
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

参数
parameter_list： 参数[， 参数[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数
中引用的变量的名称：变量
的类型：如果调用中未指定任何参数，则参数的值typedefault_value
return_value：从函数
返回的值 ：要设置为初始值的函数的地址intializer

描述
指针是一个过程指针，用于存储返回值的已编译代码的内存位置。如果未给出初始值，则默认初始值为零 （0）。



-------------------------------------------------------- KeyPgGetfileio ----

Get (File I/O)   获取
  
将数据从文件读取到缓冲区

语法
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

用法
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

参数
filenum
打开文件时传递给的值。Open
position
必须开始读取的位置。如果文件被打开，仓位在记录中;否则，它以字节为单位。如果省略，则从当前文件指针位置开始读取。位置是从 1 开始的：即文件的第一条记录或字节位于 位置 。
如果省略或为零 （），则文件读取将从当前文件位置开始。For Random1position0
data
写入数据的缓冲区。它可以是数值变量、字符串、数组、用户定义类型或取消引用的指针。读取操作将尝试完全填充变量，除非达到。
获取数组时，后跟一对空括号：“”。 将读取数组中所有值的数据。 是不允许的。
获取 s 时，读取的字节数与字符串数据中的字节数相同。 是不允许的。
注意：如果要将值读入缓冲区，则不应将指针传递到缓冲区;相反，您应该传递缓冲区中的第一个变量（这可以通过取消引用指针来完成）。如果直接传递指针，则将覆盖指针变量，而不是它指向的内存。EOFdata()GetamountStringamountOperator * (Value Of)Get
amount
使从文件读取到内存的连续变量，即从 的内存位置开始将文件中的数据字节读取到内存中。如果省略，则默认为 ，表示只?


-------------------------------------------------------- KeyPgGetgraphics ----

Get (Graphics)   获取
  
获取当前工作页的一部分或图像缓冲区的副本

语法
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

参数
source
图像缓冲区的地址。如果省略它，则会复制当前工作页面。
STEP
表示以下坐标不是绝对坐标。
[STEP](x1, y1)
要复制的子图像左上角的坐标。 指示偏移量相对于当前图形光标位置。STEP(x1, y1)
[STEP](x2, y2)
要复制的子图像右下角的坐标。 指示 和 分别相对于 和。STEPx2y2x1y1
dest
以前分配的缓冲区的地址，用于存储图像数据。

描述
Get复制当前工作页面的矩形部分，该坐标由坐标 （， ） 


-------------------------------------------------------- KeyPgGetjoystick ----

GetJoystick   游戏杆获取
  
从连接的游戏设备读取按钮和轴信息

语法
Declare Function GetJoystick ( ByVal id As Long, ByRef buttons As Integer = 0, ByRef a1 As Single = 0, ByRef a2 As Single = 0, ByRef a3 As Single = 0, ByRef a4 As Single = 0, ByRef a5 As Single = 0, ByRef a6 As Single = 0, ByRef a7 As Single = 0, ByRef a8 As Single = 0 ) As Integer

用法
result = GetJoystick( id[, buttons[, a1[, a2[, a3[, a4[, a5[, a6[, a7[, a8]]]]]]]]] )

参数
id
设备 id 号 （0 - 15）
buttons
按钮状态
a1
第一轴值
a2
第二轴值
a3
第三轴值
a4
第四轴值
a5
第五轴值
a6
第六轴值
a7
第七轴值
a8
第八轴值

返回值
0成功或失败。所有轴位置都以浮点格式返回。1

描述
GetJoystick将检索按钮状态，以及最多 8 个轴的轴位置，对于由 和 之间的数字确定的操纵杆。按钮的存储方式与


-------------------------------------------------------- KeyPgGetkey ----

GetKey   键取值
  
返回键盘缓冲区中第一个键的 ascii 代码

语法
Declare Function GetKey ( ) As Long

用法
result = GetKey

返回值
返回的 ascii 代码的值。

描述
它返回键盘缓冲区中第一个键的 ascii 代码。该键将从缓冲区中删除。如果不存在密钥，请等待它。
对于扩展键（返回两个字符），扩展代码在第一个字节中返回，常规代码在第?


-------------------------------------------------------- KeyPgGetmouse ----

GetMouse   鼠标获取
  
检索鼠标指针设备的状态

语法
Declare Function GetMouse ( ByRef x As Long, ByRef y As Long, ByRef wheel As Long = 0, ByRef buttons As Long = 0, ByRef clip As Long = 0 ) As Long
Declare Function GetMouse ( ByRef x As LongInt, ByRef y As LongInt, ByRef wheel As LongInt = 0, ByRef buttons As LongInt = 0, ByRef clip As LongInt = 0 ) As Long

用法
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

参数
x
x 坐标值
y
y 坐标值
wheel
滚轮值
buttons
按钮状态
clip
剪辑状态

返回值
0成功时，或出错时（例如，因为鼠标位于图形窗口外）或失败时。（设置运行时错误）1

描述
GetMouse检索鼠标位置和按钮状态;信息在通过引用传递给此函数的变量中返回。如果鼠标不可用，则所有变量都将包含该值。
?


-------------------------------------------------------- KeyPgGosub ----

GoSub   跳转
  
控制流语句以使用一段代码并返回。

语法
GoSub label

描述
执行跳转到由行标签标记的子例程。始终使用 退出 a ，执行将在 之后的下一个语句上继续。
跳转必须与 相同的 main/function/sub 块中的行标签。子例程中的所有变量都与块共享，不能使用


-------------------------------------------------------- KeyPgGoto ----

Goto   转到
  
控制流语句跳转到程序的另一部分

语法
Goto label

描述
将代码执行跳转到行标签。
使用退出作用域时，将销毁在该作用域中定义的任何局部变量（调用析构函数）。
当 跳过变量定义而不是变量作用域的末尾时，可能会不允许使用。如果变量需要构?


-------------------------------------------------------- KeyPgHex ----

Hex   十六进制
  
返回给定数字的十六进制数

语法
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String

Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Hex[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
要返回的可选位数。

返回值
包含 的无符号十六进制表示形式的字符串。number

描述
返回整数 的无符号十六进制字符串表示形式。十六进制数字的范围为 0-9 或 A-F。
如果指定 > 0，则结果字符串将恰好是该长度。如


-------------------------------------------------------- KeyPgHibyte ----

HiByte   单字节高位
  
获取操作数的第二个字节。

语法
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

用法
result = HiByte( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低 16 位字的高字节值。

描述
此宏将数值表达式转换为值，然后展开?


-------------------------------------------------------- KeyPgHiword ----

HiWord   双字节高位
  
获取操作数的第二个 16 位字。

语法
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

用法
result = HiWord( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低 32 位 dword 的 16 位高字的值。

描述
此宏将数值表达式转换为一个值，然后扩展为表示其第?


-------------------------------------------------------- KeyPgHour ----

Hour   时间取小时
  
从日期序列中获取一天中的小时数 

语法
Declare Function Hour ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Hour( dateserial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中


-------------------------------------------------------- KeyPgIfthen ----

If...Then
  
用于条件分支的控制流语句

语法
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

备注：（不带空格）也像在QB中一样支持向后兼容。EndIf

描述
If...Then是一种做决定的方式。
它是一种仅在条件为 true 时才执行代码的机制，并且可以根据更多条件提供要执行的替代代码：
如果条件为真，则执行代码（紧随其后）。


-------------------------------------------------------- KeyPgIif ----

IIf   如果是
  
返回两个值之一的条件函数。

语法
IIf ( condition, expr_if_true, expr_if_false )

参数
condition
要测试的条件。
非零值的计算结果为 true，而零值的计算结果为 false。
expr_if_true
要计算并返回 if 为 true 的表达式。
它必须返回：condition
一个数值，可以是整数、浮点数或指针，包括布尔值，
或字符串值，
或 UDT 值。
expr_if_false
要计算并返回 if 为 false 的表达式。
它必须与（数字、字符串或 UDT）的类型相同。conditionexpr_if_true

返回值
if 为非零，否则conditionexpr_if_trueexpr_if_false

描述
IIf返回不同的数字或字符串或 UDT 值（不是引用），具体取?


-------------------------------------------------------- KeyPgImageConvertRow ----

ImageConvertRow   图像转换行
  
将一行图像数据转换为其他颜色深度

语法
Declare Sub ImageConvertRow ( ByVal src As Any  Ptr, ByVal src_bpp As Long, ByVal dst As Any  Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

用法
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

参数
src
源行开头的地址。源可以是位深度为每像素 24 位或 32 位的全彩色图像，也可以是位深度为每像素 1-8 位的调色板图像。只有在进行转换时处于使用正确调色板的屏幕模式时，转换调色板图像才能正常工作。
src_bpp
源行中每个像素的位数。第1-8、24和32段。
dst
目标行开头的地址。图像可以是每像素 16 位或 32 位的全彩色图像。如果源是调色板图像，则目标也可以是每像素 1 到 8 位


-------------------------------------------------------- KeyPgImagecreate ----

ImageCreate   图像创建
  
为映像分配和初始化存储

语法
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

用法
result = ImageCreate( width, height [, [ color ][, depth ]] )

参数
width
所需宽度，以像素数为单位。
height
所需高度（以像素数为单位）。
color
用于填充图像区域的像素值。
depth
所需的颜色深度，以每像素位数为单位。

返回值
如果无法创建映像，则返回 NULL （），否则返回映像的地址。 必须在图形模式初始化后调用，否则它将返回 。
因此，在变量声明的情况下，不能用作集成初始值设定项，即使在（在成员字段或构造函数中）中也是如此，因为（共享变量的）初始化值是在程序开始时设置的，然后运行任何用户代码。图像分配调用必须在单独的可执行指令中，并且在图形模式初始?


-------------------------------------------------------- KeyPgImageDestroy ----

ImageDestroy   图像销毁
  
销毁和取消分配映像的存储

语法
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

用法
ImageDestroy( image )

参数
image
要销毁的映像的地址。

描述
销毁 所指向 的图像，该图像必须是从调用 ?


-------------------------------------------------------- KeyPgImageInfo ----

ImageInfo   图像信息
  
检索有关图像的信息

语法
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As Long = 0, ByRef height As Long = 0, ByRef bypp As Long = 0, ByRef pitch As Long = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As LongInt, ByRef height As LongInt, ByRef bypp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long

用法
in the LONG (or INTEGER<32>) version of the function:
result = ImageInfo( image [, [ width ] [, [ height ] [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]]]] )
in the LONGINT (or INTEGER<64>) version of the function:
result = ImageInfo( image , width , height [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]] )

参数
image
映像的地址。
width
存储图像的宽度（以像素为单位）。
height
存储图像的高度（以像素为单位）。
bypp
存储图像每像素的字节数 - 即单个像素的大小，以字节为单位。
pitch
存储图像的间距 - 即每条扫描线（行）的大小，以字节为单位。请注意，这可能不仅仅是 ，因为扫描线可能会被填充，以允许它们在内存中更好地对齐。width * bypp
pixdata
存储图像的第一条扫描线的起始地址。
size
将映像的大小存储在内存中（以字节为单位）。

返回值
如果未指向有效图像，则返回一个 （）。否则，将为 、 、 和 分配适当的值，并返回零 （）。image1widt


-------------------------------------------------------- KeyPgImplements ----

Implements   继承接口
  
指定要由用户定义类型
实现的接口 注意：存根页。即使此关键字已保留，接口尚未实现。

语法
Type typename Implements interface
...
End Type

描述

例

方言差异
在 -lang qb 方言中不可用，除非使用别名 引用。__Implements

与QB的区别
FreeBASIC 的


-------------------------------------------------------- KeyPgImport ----

Import   导入
  
位于 DLL 中的公共数据的外部链接属性

语法
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

描述
仅在外部模块中（使用关键字）用于访问 Win32 DLL 中的全局变量：变量名称将添加到动态?


-------------------------------------------------------- KeyPgInclib ----

#inclib   #包含库
  
预处理器指令

语法
#inclib "libname"

描述
在链接过程中包含一个库，就


-------------------------------------------------------- KeyPgInclude ----

#include   #包含
  
预处理器语句，用于包含另一个源文件的内容

语法
#include [once] "file"

描述
#include在指令出现的位置插入来自另一个文件的源代码。这具有从包含文件编译源代码的效果，就好像它是包含它的源文件的一部分一样。一旦编译器到达包含文件的末尾，原始源文件将继?


-------------------------------------------------------- KeyPgInkey ----

Inkey   键输入
  
返回一个字符串，表示在键盘缓冲区中等待的第一个键

语法
Declare Function Inkey ( ) As String

用法
result = Inkey[$]

返回值
在键盘缓冲区中找到的第一个字符，如果未找到，则为空字符串 （）。""

描述
扫视键盘缓冲区并返回找到的第一个字符（如果有）的表示形式。然后，该键将从缓冲区中删除，并且不会回显到屏幕上。如果键盘缓冲区为空，


-------------------------------------------------------- KeyPgInp ----

Inp   端口
  
返回硬件端口处的值。

语法
Declare Function Inp ( ByVal port As UShort ) As Integer

用法
value = Inp(port)

参数
port
要读取的端口号。

返回值
指定端口处


-------------------------------------------------------- KeyPgInput ----

Input   输入
  
从键盘读取值列表

语法
Input [;] ["prompt" ,|; ] variable_list

参数
prompt
作为提示写入屏幕的可选字符串文本。如果后跟分号 （），则提示符后面将附加一个问号 （）。如果它后跟逗号，则不会附加任何内容。;"? "
variable_list
逗号分隔的变量列表，用于保存从用户读取的值。

描述
从键盘读取列表值，直到第一个回车符。数值从其字符串表示形式转换为变量列表中的相应类型。字符在键入?


-------------------------------------------------------- KeyPgInputfilemode ----

Input (File Mode)   输入
  
指定要为输入模式打开的文本文件

语法
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行输入的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行读取的文件模式。
此模式允许使用 按顺序读取文本行，或读取 以 逗号分隔的值。
文本文件不能在FreeBASIC中


-------------------------------------------------------- KeyPgInputnum ----

Input()
  
从控制台或文件中读取许多字符

语法
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

用法
result = Input[$]( n [, [#]filenum ] )

参数
n
要读取的字节数。
filenum
绑定文件或设备的文件编号。

返回值
返回读取的字符中的 a 个。String

描述
从 控制台或 指定的绑定文件/设备读取许多字符。
第


-------------------------------------------------------- KeyPgInputPp ----

Input #   输入
  
从文本文件中读取值列表

语法
Input # filenum, variable_list

参数
filenum
为打开的文件或设备的文件编号Input
variable_list
用于保存读取的值的变量列表

描述
通过绑定文件编号从文本文件读取一组以分隔符分隔的值，并按读取顺序将它们写入 中的变量。如果变量是数值，则读取值将从其字符串表示形式转换为相应的类型。



-------------------------------------------------------- KeyPgInstr ----

InStr   字符串搜索
  
查找字符串中子字符串或字符的第一个匹配项

语法
Declare Function InStr ( ByRef str As Const String,  [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

用法
first = InStr( [ start, ] str, [ Any ] substring )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
搜索开始的位置。第一个字符从位置 1 开始。str

返回值
中第一个出现的 的位置。substringstr

描述
定位子字符串或字符在字符串中首次出现的位置。在第一种形式（不带参数）中，搜索从第一个字符开始。
如


-------------------------------------------------------- KeyPgInstrrev ----

InStrRev   字符串搜索反向
  
查找字符串中子字符串或字符的最后一个匹配项

语法
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

用法
last = InStrRev( str, [ Any ] substring [, start ]  )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
搜索开始的位置。第一个字符从位置 1 开始。str

返回值
中最后出现的 的位置。substringstr

描述
定位子字符串或字符在字符串中最后出现的位置。如果未给出参数或小于零，则搜索从最后一个字符开始。
如果出现以下情


-------------------------------------------------------- KeyPgInt ----

Int   数取整
  
返回数字的下限

语法
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

用法
result = Int( number )

参数
number
要舍入的浮点数

返回值
返回 的下限，即小于或等于它的最大整数。number

描述
 Int返回 的底线。例如，将返回 ，并将返回 。对于整数类型，


-------------------------------------------------------- KeyPgInteger ----

Integer   整数型
  
标准数据类型：32 位或 64 位有符号，大小与SizeOf(Any Ptr)

语法
Dim variable As Integer
Dim variable As Integer<bits>

参数
bits
一个数字常量表达式，指示所需大小的整数位。允许的值为 、 或 。8163264

描述
整数是 FreeBASIC 用于整数数学运算和按位运算的主要数据类型。它是数字文本的默认类型。
在第一种形式中，Integer 是 32 位或 64 位有符号整数数据?


-------------------------------------------------------- KeyPgIs ----

Is   是类
  
语句块中的子句。Select Case

语法
Case Is expression

描述
指定将基于表达式（包括大于 （>） 或小于 （<） 运


-------------------------------------------------------- KeyPgIsDate ----

IsDate   是日期
  
测试字符串是否可以转换为日期序列

语法
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

用法
#include "vbcompat.bi"
result = IsDate( stringdate )

参数
stringdate
要测试的字符串

返回值
如果日期字符串可以转换为日期序列，则返回非零 （-1），否则返回零 （0）。

描述
日期字符串必须采用在操作系统的区域设置中设置的格式，才能被视为


-------------------------------------------------------- KeyPgIsredirected ----

IsRedirected   是重定向
  
检查 stdin 或 stdout 是否重定向到文件

语法
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

用法
#include "fbio.bi"
result = IsRedirected( is_input )

参数
is_input
指示要返回的信息类型的 A。Long

返回值
如果 stdin 或 stdout 被重定向，则返回非零 （），否则返回零 （）。-10

描述
IsRedirected 检查 stdin 或 stdout 是否重定向到文件，而不是像往常一样连接到控制台/终端。
如果


-------------------------------------------------------- KeyPgKill ----

Kill   删文件
  
从磁盘/存储介质中删除文件。

语法
Declare Function Kill ( ByRef filename As Const String ) As Long

用法
result = Kill( filename )

参数
filename
文件名是要删除的磁盘文件的名称。如果文件不在当前目录中，则路径也必须指定为 。path/file

返回值
成功时返回零 （），出错时返回非零。0

?


-------------------------------------------------------- KeyPgLbound ----

LBound   数组取下限
  
返回数组维度的下限

语法
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = LBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
要获取 的下限的维度

返回值
返回数组维度的下限。
描述
LBound返回可用作数组特定维度的索引的最小值。
数组维度从一 （） 到 的编号，其中维度的总数。如果未指定，将返回第一个维度的下限。
如果为零 （），


-------------------------------------------------------- KeyPgLcase ----

LCase   字符串小写
  
返回字符串的小写副本

语法
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = LCase[$]( str [ , mode ] )

参数
str
要转换为小写的字符串。
mode
转换模式：0 = 当前区域设置，1 = 仅 ASCII

返回值
的小写副本。str

?


-------------------------------------------------------- KeyPgLeft ----

Left   字符串取左
  
返回字符串最左侧的子字符串

语法
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Left[$]( str, n )

参数
str
源字符串。
n
要从源字符串返回的字符数。

返回值
返回 最左边的子字符串。str

描述
返回从 的左侧（开头）开始的最左侧字


-------------------------------------------------------- KeyPgLen ----

Len   字符串总长
  
返回表达式或数据类型的长度

语法
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer

Declare Operator Len ( ByRef expression As datatype ) As datatype

Declare Function Len ( datatype ) As Integer	

用法
result = Len( expression )
或
result = Len( DataType )

参数
expression
任何类型的表达式。
datatype
数据类型。

返回值
返回表达式或数据类型（包括 UDT 的数据字段）的大小（以字节为单位）。

描述
Len返回表达式的长度或数据类型的大小（以字节为单位）。
在第一种形式中，如果 是 ， 或 ，将返回字符串的长度（以字符为单位?


-------------------------------------------------------- KeyPgLet ----

Let   赋值
  
指示赋值运算符。

语法
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

描述
该命令旨在帮助程序员区分赋值语句（例如）和相等性测试（例如）。由于编译器不需要它，因此通常会省略它。
 let 可以用作左侧运算符，将用户定义类型的成员分配给多个


-------------------------------------------------------- KeyPgLib ----

Lib   库
  
指定可在其中找到子项或函数作为声明的一部分的库

语法
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type

Extern "mangling" lib "libname"
declarative statements
end Extern

Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type


描述
在 或声明中，以及在类方法声明（包括构造函数和析构函数）中，指示包含函数的库。以这种方式指定的库被链接进来，就好像或已经使用过


-------------------------------------------------------- KeyPgLinegraphics ----

Line (Graphics)   画线
  
绘制线条

语法
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

参数
target
指定要在其上绘制的缓冲区
STEP
指示起始坐标是相对的
(x1, y1)
线路的起始坐标
STEP
指示结束坐标是相对的
(x2, y2)
线的结束坐标
color
颜色属性。
B|BF
指定框或框填充模式
style
线条样式

描述
在两点之间绘制直线或框的图形语句。该操作将在通过 设置的当前工作页面上进行，或者如果指定，则在缓冲区/缓冲区上进行。
坐标


-------------------------------------------------------- KeyPgLineinput ----

Line Input   画线
  
从键盘读取一行输入

语法
Line Input [;] [promptstring {;|,} ] stringvariable

参数
promptstring
在等待输入之前显示的可选提示。如果后跟分号 （），则提示符后面将附加一个问号 （）。如果它后跟逗号，则不会附加任何内容。;"? "
stringvariable
用于接收文本行的变量

描述
从键盘读取一行文本并将其存储在字符串变量中。
（如果有） 将写入当前光标位置的屏幕，并且读取的字符在提示符之后?


-------------------------------------------------------- KeyPgLineinputPp ----

Line Input #   画线
  
从文件中读取一行文本

语法
Line Input #file number, string_variable

参数
file number
为其打开的文件的文件编号Input
string_variable
用于接收文本行的变量

描述
从打开的文本文件中读取一行（通过绑定的文件编号打开），并将其存储在字符串变


-------------------------------------------------------- KeyPgLoByte ----

LoByte   单字节低位
  
获取操作数的最低字节。

语法
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

用法
result = LoByte( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低字节值。

描述
此宏将数值


-------------------------------------------------------- KeyPgLoc ----

LOC   文件位置
  
返回上次执行文件读/写操作的文件位置

语法
Declare Function LOC ( ByVal filenum As Long ) As LongInt

用法
result = LOC( filenum )

参数
filenum
打开的文件的文件编号。

返回值
上次执行读/写操作的文件位置。

描述
返回上次执行文件读/写的位置。
该位置在记录中标明：
在随机打开的文件中，打开文件时指定的记录长度用于
文本文件（FOR INPUT|输出|追加，记录


-------------------------------------------------------- KeyPgLocal ----

Local   本地
  
用于设置当前错误处理程序的错误处理语句

语法
On Local Error Goto label

描述
构造中的子句允许在相同或 in 中定义错误处理程序。
 备注：目前，编译器会忽略该子句（仅在 Sub/Function 内部授权），并且错误处理程序可以在 On [Local] Error 所在的同一过程的?


-------------------------------------------------------- KeyPgLocate ----

Locate   光标定位
  
设置当前光标位置

语法
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

用法
Locate [row], [column], [state]

result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

参数
row
控制台中基于 1 的垂直字符位置。
column
控制台中基于 1 的水平字符位置。
state
游标仅在控制台模式下的状态：关闭，打开;文本光标在图形模式下从不可见。01
start
忽视。仅允许 -lang qb 方言兼容性。
stop
忽视。仅允许 -lang qb 方言兼容性。

返回值
返回包含当前游标位置和状态的 32 位。低字的低字节包含列，低字的高字节包含行，高字包含游标状态。
如果任何行、列或状态参数只是由调用 来设置的，则返回值将反映这些新值，而不是以前的值。如果在调用 中省略了


-------------------------------------------------------- KeyPgLock ----

Lock   锁定
  
限制对文件或文件部分的读/写访问

语法
Lock #filenum, record
Lock #filenum, start To end

参数
filenum
用于文件的文件编号。Open
record
要锁定的记录（文件）。Random
start
要从中锁定的第一个字节位置（文件）。Binary
end
要锁定到的最后一个字节位置（文件）。Binary

描述
Lock暂时限制其他线程或程序对文件或文件部?


-------------------------------------------------------- KeyPgLof ----

LOF   文件长度
  
返回打开的磁盘文件的长度

语法
Declare Function LOF ( ByVal filenum As Long ) As LongInt

用法
result = LOF( filenum )

参数
filenum
打开的磁盘文件的文件编号。

返回值
打开的磁盘文件的长度（以字节为单位）。

描述
返回以前使用给?


-------------------------------------------------------- KeyPgLog ----

Log   对数
  
返回给定数字的自然对数

语法
Declare Function Log cdecl ( ByVal number As Double ) As Double

用法
result = Log( number )

参数
number
用于计算自然对数的数字。

返回值
返回以 e 为底数（也称为自然对数）的对数。number

描述
这种符号可能会有些混淆，因为在数学中，自然对数函数通常表示为LN，而以10为底的对数通常表示为LOG。FreeBASIC，像大多数计算机编程语言一样，使用LO


-------------------------------------------------------- KeyPgLong ----

Long   长型
  
标准数据类型：32 位有符号整数

语法
Dim variable As Long

描述
32 位有符号整数数据类型。可以保存从 到 的值?


-------------------------------------------------------- KeyPgLongint ----

LongInt   长整型
  
标准数据类型：64 位有符号

语法
Dim variable As LongInt

描述
64 位有符号整数数据类型。可以保存从 -9 223 372 036 854 775 808 到 9 223 372 0


-------------------------------------------------------- KeyPgLoop ----
Loop   重复
Description



-------------------------------------------------------- KeyPgLoWord ----

LoWord   双字节低位
  
获取操作数的最低 16 位字。

语法
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

用法
result = LoWord( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低字的值。

描述
此宏将数值表?


-------------------------------------------------------- KeyPgLpos ----

LPos   打印位置
  
返回在最后一条语句中发送到打印机端口的字符数。LPrint

语法
Declare Function LPos ( ByVal printer As Long ) As Long

用法
result = LPOS(printer)

参数
printer
0、1、2 或 3。表示打印机端口 （LPT#）

返回值
返回


-------------------------------------------------------- KeyPgLprint ----

LPrint   打印机打印
  
将文本写入默认打印机。

语法
LPrint  [ Using formatstring,] [expressionlist] [(, | ;)] ...

参数
formatstring
指定输出格式的字符串。
expressionlist
要根据指定格式输出的变量列表。

描述
打印到连接到并行端口 LPT1 的打印机，或者如果不存在，则打印到默认打印机。要打印到与缺省打印机不同的打印机，请使用 。
子句的格式根据 。除了UDT，任何


-------------------------------------------------------- KeyPgLset ----

LSet   字符串左齐
  
左对齐字符串

语法
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
LSet dst, src
LSet dst_udt, src_udt

参数
dst
用于接收数据的字符串。String
src
获取数据的源。String
dst_udt
用户定义以接收数据。Type
src_udt
用户定义要从中复制数据。Type

描述
LSetleft 将文本对齐到字符串缓冲区中，用空格填充字符串的左侧，用空格填充右侧部分。不会修改字符串缓冲区大小。
如果文本对于字


-------------------------------------------------------- KeyPgLtrim ----

LTrim   字符串删空格左边
  
删除字符串左侧的周围子字符串或字符

语法
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = LTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的左侧（开头）修剪周围的字符。如果指定，将修剪?


-------------------------------------------------------- KeyPgMemberFunction ----

Function (Member)   函数
  
声明或定义返回值的成员过程

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }

Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

参数
typename 
、或 的名称TypeClassUnion
fieldname 
过程的名称
external_name
外部链接时看到的字段名称
parameters 
要传递给过程的参数
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Function使用或调用返回值的成员过程访问成员过程（也可以通过指定 返回引用）。该过程可以选择性地接受参数或 。 在没有显式使用关键字的情况?


-------------------------------------------------------- KeyPgMemberSub ----

Sub (Member)   过程
  
声明或定义成员过程

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }

Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

参数
typename 
、或 的名称TypeClassUnion
fieldname 
过程的名称
external_name
外部链接时看到的字段名称
parameters 
要传递给过程的参数
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Sub成员使用或调用成员过程进行访问，并且可以选择接受参数或 。 在没有显式使用关键字的情况下重载。
是为其声明和定义方法的类型的名称。的名称?


-------------------------------------------------------- KeyPgMetaDynamic ----

$Dynamic   $动态数组
  
元命令，用于更改数组的分配方式

语法
'$Dynamic
or
Rem $Dynamic

描述
'$Dynamic是一个元命令，它指定以下任何数组声明都是可变长度的，无论它们是否使用常量下标范围声明。这


-------------------------------------------------------- KeyPgMetaInclude ----

$Include   $包含文件
  
元命令语句以包含另一个源文件的内容

语法
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

描述
$Include在元命令出现的位置插入来自另一个文件的源代码。这具有从包含文件编译源代码的效果，就好像它是包含它的源文件的一部分一样。一旦编译器到达包含文件的末尾，原始源文件


-------------------------------------------------------- KeyPgMetaLang ----

$Lang   $语言
  
元命令语句，用于设置编译器方言。

语法
'$lang: "lang"
or
Rem $lang: "lang"

参数
"lang"
要设置的方言，括在双引号中，并且必须是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令行上提供 -forcelang 选项，则可用于设置显示该选项的源模块的方言。最多将在源模块上进行两次传递。在第一次传递时，如果指定的方言不是默认方


-------------------------------------------------------- KeyPgMetaStatic ----

$Static   $静态数组
  
元命令，用于更改数组的分配方式

语法
'$Static
or
Rem $Static

描述
'$Static是覆盖 的行为的元命令，也就是说，使用常量下标范围声明的数组是固定长度的。这对于所使用的模


-------------------------------------------------------- KeyPgMidfunction ----

Mid (Function)   字符串取子串
  
返回字符串的子字符串

语法
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

用法
result = Mid[$]( str, start [, n ] )

参数
str
源字符串。
start
子字符串中的起始位置。第一个字符从位置 1 开始。str
n
子字符串长度，以字符为单位。

描述
返回从 中开始的子字符串。如果 为空，则返回空字符串 （）。如果或然后返回空字符串 （）。



-------------------------------------------------------- KeyPgMidstatement ----

Mid (Statement)   字符串取子串
  
用另一个字符串覆盖一个字符串的子字符串

语法
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

用法
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

参数
text
要使用的字符串。
start
要覆盖的子字符串的起始位置。第一个字符从位置 1 开始。text
length
要覆盖的字符数。

描述
将 的最大字符复制到 中，从 开始。
如果未指定，则复制所有字符串的大小保持不变;如果太大?


-------------------------------------------------------- KeyPgMinute ----

Minute   时间取分
  
从日期序列中获取小时的分钟数 

语法
Declare Function Minute ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Minute( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中返


-------------------------------------------------------- KeyPgMkd ----

MKD   数转字符双精型
  
是否将二进制从变量复制到 ，将其长度设置为 8 个字节DoubleString

语法
Declare Function MKD ( ByVal number As Double ) As String

用法
result = MKD[$]( number )

参数
number
要将变量二进制复制到 .DoubleString

返回值
返回 带有 的二进制副本的 。StringDouble

描述
是否从变量到 的二进制复制将其长度?


-------------------------------------------------------- KeyPgMkdir ----

MkDir   目录新建
  
在本地文件系统上创建文件夹/目录

语法
Declare Function MkDir ( ByRef folder As Const String ) As Long

用法
result = MkDir( folder )

参数
folder
要创建的新默认文件夹/目录，或要创建的子文件夹/子目录的路径。

返回值
成功时返回零 （0），失败时返回负 1 （-1）。

描述
在本地文件系统上创建文件?


-------------------------------------------------------- KeyPgMki ----

MKI   数转字符整型
  
是否从整数变量复制到与输入变量大小长度相同的二进制变量String

语法
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

用法
result = MKI[$]( number )
result = MKI[$]<bits>( number )

参数
number
将 或变量复制到 二进制文件。IntegerInteger<bits>String

返回值
返回 包含 的二进制副本。Stringnumber

描述
是否从 或 变量到 的二进制副本将其长度设置为类型中的字节数。生成的字符串可以使用 或 读回整数类型。
此函数可用于在不使用定义的情


-------------------------------------------------------- KeyPgMkl ----

MKL   数转字符长型
  
是否将二进制从变量复制到 ，将其长度设置为 4 个字节LongString

语法
Declare Function MKL ( ByVal number As Long ) As String

用法
result = MKL( number )

参数
number
要将变量二进制复制到 .LongString

返回值
返回 带有 的二进制副本的 。StringLong

描述
是否将二进制副本从变量复制到 ，将?


-------------------------------------------------------- KeyPgMklongint ----

MKLongInt   数转字符长整型
  
是否将二进制从变量复制到 ，将其长度设置为 8 个字节LongIntString

语法
Declare Function MKLongInt ( ByVal number As LongInt ) As String

用法
result = MKLongInt[$]( number )

参数
number
要将变量二进制复制到 .LongIntString

返回值
返回 带有 的二进制副本的 。StringLongInt

描述
执行从变量到字符串的二进制复制，将其长度设?


-------------------------------------------------------- KeyPgMks ----

MKS   数转字符单精型
  
是否将二进制从变量复制到 ，将其长度设置为 4 个字节SingleString

语法
Declare Function MKS ( ByVal number As Single ) As String

用法
result = MKS[$]( number )

参数
number
要将变量二进制复制到 .SingleString

返回值
返回 带有 的二进制副本的 。StringSingle

描述
是否将二进制副本从变量复制到 ，将其长


-------------------------------------------------------- KeyPgMkshort ----

MKShort   数转字符短型
  
是否将二进制从变量复制到 ，将其长度设置为 2 个字节ShortString

语法
Declare Function MKShort ( ByVal number As Short ) As String

用法
result = MKShort[$](number)

参数
number
要将变量二进制复制到 .ShortString

返回值
返回 带有 的二进制副本的 。StringShort

描述
执行从 SHORT 变量到字符串的二进制复制，


-------------------------------------------------------- KeyPgModuleConstructor ----

Constructor (Module)   构造函数
  
指定在模块级代码之前执行过程

语法
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

描述
关键字在定义中使用（在声明行级别禁止），以强制执行模块级代码之前的过程。定义为构造函数的过程的使用方式可能与普通过程相同，也就是说，可以从模块级代码以及其他过程中调用它们。



-------------------------------------------------------- KeyPgModuleDestructor ----

Destructor (Module)   析构函数
  
指定在程序终止时执行过程

语法
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

描述
定义要从已编译程序的结束代码自动调用的过程。结束代码由编译器生成，并在程序正常终止时执行。定义为析构函数的过程的使用方式可能与普通过程相同，也就是说，可以从模块级代码以及其他?


-------------------------------------------------------- KeyPgMonth ----

Month   日期取月份
  
从日期序列中获取一年中的月份

语法
Declare Function Month ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Month( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回月份编号。
月份值的范围为 1-12，1


-------------------------------------------------------- KeyPgMonthname ----

MonthName   日期月名称
  
从其整数表示形式中获取月份的名称

语法
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

用法
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

参数
month
一年中月份的数字 - 1：1 月到 12：12 月
abbreviate
标志，指示名称应缩写

返回值
从值 1 到 12 返回本地操作系统语言月份名称。month

描述
如果为 true，则返回月份


-------------------------------------------------------- KeyPgMultikey ----

MultiKey   扫描键码
  
通过键盘扫描码检测按键的状态。

语法
Declare Function MultiKey ( ByVal scancode As Long ) As Long

用法
result = MultiKey(scancode)

参数
scancode
要检查的密钥的扫描码。

返回值
如果按下指定扫描代码的键，则返回，否则返回 。-10

描述
MultiKey是一个功能，它将随时检测由扫描码确定的任何密钥的状态。如果按下该键，它将返回，否则它将返回 。
使用时未禁用键盘输入缓冲区;也


-------------------------------------------------------- KeyPgMutexCreate ----

MutexCreate   互斥锁创建
  
创建用于同步线程执行的互斥体

语法
Declare Function MutexCreate ( ) As Any Ptr

用法
result = MutexCreate

返回值
创建的互斥体的句柄，或失败时的空指针 （0）。Any Ptr

描述
互斥体是“互斥”的缩写，是一种在线程内同步共享数据的方法。如果存在多个线程使用的全局变量（或由多个线程多次调用的单个线程使用的局部静态变量），则在


-------------------------------------------------------- KeyPgMutexDestroy ----

MutexDestroy   互斥锁销毁
  
销毁互斥体

语法
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

用法
MutexDestroy( id )

参数
id
要销毁的互斥体的句柄。Any Ptr

描述
Mutexdestroy放弃 由 创建的互斥体。此调用应在使用互斥锁的任何线


-------------------------------------------------------- KeyPgMutexLock ----

MutexLock   互斥锁锁住
  
获取互斥体

语法
Declare Sub MutexLock ( ByVal id As Any Ptr )

用法
MutexLock( id )

参数
id
要锁定的互斥体的句柄。Any Ptr

描述
Mutexlock使用由 生成的互斥体“句柄”停止任何其他线程，直到该句柄被 解锁。
此类已停止的线程将挂起其执行，并且


-------------------------------------------------------- KeyPgMutexUnlock ----

MutexUnlock   互斥锁解锁
  
释放互斥锁

语法
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

用法
MutexUnlock( id )

参数
id
要解锁的互斥体的句柄。Any Ptr

描述
Mutexunlock释放由 创建并用 锁定的互斥体“句柄”。这允许共享互斥体的其他线


-------------------------------------------------------- KeyPgNaked ----

Naked   裸代码
  
编写没有序言/后记代码的函数

语法
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

参数
identifier- 程序的名称。
 - 调用过程的约定 - 可以是 、 或 
 - 过程正文中的代码。用于处理参数和返回值的代码都必须手动完成。请注意，执行这些操作的方法可能会更改，具体取决于调用约定。
 - 要传递给过程的参数。
 - 函数的数据类型。calling_conventioncdeclpascalstdcallasm_statementsparam_l


-------------------------------------------------------- KeyPgName ----

Name
  
重命名磁盘上的文件

语法
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

用法
result = Name( oldname, newname )

参数
oldname
现有文件的名称。
newname
文件的新名称。

返回值
成功时返回零 （），失败时返回非零。0

描述
重命名最初调用的文件或文件夹。
如果存在同名的文件/文件夹，则不能保证该?


-------------------------------------------------------- KeyPgNamespace ----

Namespace   命名空间
  
声明命名空间块。

语法
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

参数
identifier
命名空间的名称（包括嵌套名称说明符）。
aliasname
命名空间的备用外部名称。

描述
命名空间允许将对象（预定义的数据类型和 UDT，包括联合和枚举）和过程（包括其声明）等实体分组到名称下。这样，全局范围可以分为“子范围”，每个子范围都


-------------------------------------------------------- KeyPgNext ----

Next   下步
  
控制流语句以标记循环的结束。For...Next

语法
Next [ identifier_list ]

描述
指示与匹配语句关联的语句块的结尾。
当在没有identifier_list的情况下单独使用时，它将关闭最新的语句块。
是可选的，可以是一个或多个用逗号分隔的变量名称。保留此形式的语句是?


-------------------------------------------------------- KeyPgNow ----

Now   现在
  
以日期序列形式获取当前系统时间 

语法
Declare Function Now ( ) As Double

用法
#include "vbcompat.bi"
result = Now

返回值
返回一个日期序列，其中包含系统在执行时的日期和时间。

描述
由于时间是日期序列的小数部分，如果


-------------------------------------------------------- KeyPgObject ----

Object   对象
  
提供运行时类型信息的内置类型

语法
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

用法
Type typename Extends Object
End Type

Dim variable As Object

描述
Object 是一种内置类型，它为从它派生的所有类型提供运行时类型信息 （RTTI），允许它们与 一起使用，并支持和方法。
扩展内置对象类型允许在 的顶部添加一个额外的隐藏 vtable 指针字?


-------------------------------------------------------- KeyPgOct ----

Oct   八进制
  
将数字转换为八进制表示形式

语法
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String

Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Oct[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
返回的字符串中所需的位数。

返回值
包含 的无符号八进制表示形式的字符串。number

描述
返回 的无符号八进制字符串表示形式。八进制数字的范围从 0 到 7。
如果指定 > 0，则结果字符串将恰好是该长度。如有必要，?


-------------------------------------------------------- KeyPgOffsetof ----

OffsetOf   取偏移值
  
返回类型中字段的偏移量。

语法
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname )	

用法
result = OffsetOf( typename, fieldname )

参数
typename
使用语句定义的类型的名称。Type...End Type
fieldname
在类型（或派生类型的基类型）中定义的字段的名称。

描述
对于非派生类型，将返回位置，作为从 开头开始的偏移量（以字节为单位） 返回。
对于派生类型，将返回


-------------------------------------------------------- KeyPgOnerror ----

On Error   在
  
用于设置当前错误处理程序的错误处理语句

语法
On [Local] Error Goto label

参数
label
发生错误时要跳转到的标签

描述
“出错”上，在发生错误时触发跳转到错误处理程序。此类错误可由内置语句触发，例如 ，或在使用语句时触发。
注： 仅当使用 -e、-ex 或 -exx 选项之一编译程序时，才会


-------------------------------------------------------- KeyPgOngosub ----

On...Gosub
  
基于表达式调用标签

语法
On expression GoSub label1[, ...]

描述
根据表达式的值分支到不同的标签。表达式值 1 将分支到第一个标签，值 2 将分支到第二个标签，依此类推。如果表达式的值为零 （0） 或大于列表中的项目数，则在 后面的下一个语句上继续执行。
此


-------------------------------------------------------- KeyPgOngoto ----

On...Goto
  
跳转到基于表达式的标签。

语法
On expression Goto label1[, ...]

描述
根据表达式的值分支到不同的标签。表达式值 1 将分支到第一个标签，值 2 将分支到第二个标签，依此类推。如果表达式的值为零 （0） 或大


-------------------------------------------------------- KeyPgOpAdd ----

Operator + (Addition)   运算符
  
对两个表达式求和

语法
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer

Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs + rhs

参数
lhs
要求和的左侧表达式。
rhs
要求和的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的总和。

描述
当左侧和右侧表达式是数值时，运算符 + （Add） 将返回两个值的总和。
当左侧和右侧表达式是字符串值时，运算符 +（Add） 连接两个字符串并返回


-------------------------------------------------------- KeyPgOpAnd ----

Operator And (Conjunction)   运算符
  
返回两个数值的按位和（连词）

语法
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs And rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位和（合词）。

描述
此运算符返回其操作数的按位和，这是一个逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔?


-------------------------------------------------------- KeyPgOpAndAlso ----

Operator Andalso (Short Circuit Conjunction)   运算符
  
返回两个数值的短路和（合相）

语法
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs AndAlso rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的短路和（合相）。

描述
此运算符计算左侧表达式。如果结果为零，则立即返回零。如果结果为非零，则计算右侧，并返回其逻辑结果。
 （对


-------------------------------------------------------- KeyPgOpArrayIndex ----

Operator () (Array Index)   运算符
  
返回对数组中元素的引用

语法
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

用法
result = lhs ( rhs [, ...] )
or
lhs ( rhs [, ...] ) = value

参数
lhs
数组。
rhs
数组中元素的索引。
T
任何数据类型。

描述
此运算符返回对数组中元素的引用。对于多维数组，必须指定多个索引（?


-------------------------------------------------------- KeyPgOpAssignment ----

Operator =[>] (Assign)   运算符
  
为变量赋值

语法
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs = rhs
或
lhs => rhs

或者，在 QB方言，

[ Let ] lhs = rhs
或
[ Let ] lhs => rhs

参数
lhs
要分配到的变量。
T1
任何数字、布尔值、字符串或指针类型。
rhs
要分配给 的值。lhs
T2
任何类型均可转换为 。T2

描述
此运算符将其右侧操作数 （） 的值分配给其左侧操作数 （）。右侧操作数必须隐式转换为左侧类型 （）（对于布尔值到整数的转换，false ?


-------------------------------------------------------- KeyPgOpAt ----

Operator @ (Address Of)   运算符
  
返回字符串文本、变量、对象或过程的地址

语法
Declare Operator @ ( ByRef rhs As T ) As T Pointer

用法
result = @ rhs

参数
rhs
要检索其地址的字符串文本、变量、对象或过程。
T
任何标准、用户定义或过程类型。

返回值
返回右侧 （） 操作数的地址。rhs

描述
运算符 @ （地址） 返回其操作数的内存地址。
当操作数为 类型时，将返回内部字符串描述符的地址。使用（字符串


-------------------------------------------------------- KeyPgOpCast ----

Operator Cast   运算符
  
用于将 UDT（用户定义类型）变量转换为指定数据类型的运算符

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

用法
Cast( datatype, expression )

参数
typename 
、或 的名称TypeClassUnion
datatype 
要转换为它的类型的名称、内置数据类型（标准数据类型）或 UDT 不同于typename
expression 
要转换的表达式，实例typename

描述
将（变量）转换为其他 .
必须在 、 、 或 内声明。
与所有非静态成员过程一样，它传递了一个隐藏参数。
当只有返回类?


-------------------------------------------------------- KeyPgOpCombineAdd ----

Operator += (Add And Assign)   运算符
  
向变量添加和赋值

语法
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )

Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

用法
lhs += rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要添加到 的值。lhs
T2
任何数值类型。
T
任何数据类型。

描述
此运算符向变量添加并赋值。它在功能上等效于：
对于数值类型，右侧表达式 （） 将转换为左侧类型 （）。
对于字符串类型，此运算符在功能上等效于 


-------------------------------------------------------- KeyPgOpCombineAnd ----

Operator And= (Conjunction And Assign)   运算符
  
执行按位和（连词）并将结果赋给变量

语法
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs And= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位和（并入）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符按位执行 and 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpCombineConcat ----

Operator &= (Concatenate And Assign)   运算符
  
将一个字符串追加并分配给另一个字符串

语法
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

用法
lhs &= rhs

参数
lhs
要为其分配的字符串。
rhs
要追加到 的值。lhs
T2
任何可以转换为字符串的数字、字符串或用户定义类型。

描述
此运算符将一个字符串追加到另一个字符串上。右侧表达式 （） 在串联之前转换为字符串。它在功能上等效于，
其中结果被分配回左侧字


-------------------------------------------------------- KeyPgOpCombineDivide ----

Operator /= (Divide And Assign)   运算符
  
将值除法并赋给变量

语法
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs /= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要除以的值。lhs
T2
任何数值类型。

描述
此运算符将值除法并赋给变量。它在功能上等效于：
lhs = lhs / rhs

对于使?


-------------------------------------------------------- KeyPgOpCombineEqv ----

Operator Eqv= (Equivalence And Assign)   运算符
  
执行按位 eqv（等效性）并将结果分配给变量

语法
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Eqv= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位 eqv（等效）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 eqv 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpCombineExponentiate ----

Operator ^= (Exponentiate And Assign)   运算符
  
对变量进行幂化并赋值

语法
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

用法
lhs ^= rhs

参数
lhs
要分配到的变量。
rhs
要幂所依据的值。lhs

描述
此运算符对变量进行幂幂赋值。它在功能上等效于：
lhs = lhs ^ rhs

对于使用适当语法作为成员的用户定义类型，可以重载此运算符。
注意：此


-------------------------------------------------------- KeyPgOpCombineImp ----

Operator Imp= (Implication And Assign)   运算符
  
执行按位 imp（隐含）并将结果分配给变量

语法
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Imp= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
使用 执行按位 imp（隐含）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 imp 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpCombineIntegerDivide ----

Operator \= (Integer Divide And Assign)   运算符
  
整数除以变量并将其赋值

语法
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs \= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要除以的值。lhs
T2
任何数值类型。

描述
此运算符除法（整数除法）并为变量赋值。它在功能上等效于：
lhs = lhs \ rhs




-------------------------------------------------------- KeyPgOpCombineModulus ----

Operator Mod= (Modulus And Assign)   运算符
  
除以一个值并将余数赋给变量

语法
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

用法
lhs Mod= rhs

参数
lhs
要分配到的变量。
rhs
要除以的值。lhs

描述
此运算符将两个类型的值除以，并将余数赋给其左侧 （） 变量。它在功能上等效于：Integerlhs
lhs = lhs Mod rhs

对于?


-------------------------------------------------------- KeyPgOpCombineMultiply ----

Operator *= (Multiply And Assign)   运算符
  
将值相乘并赋值给变量

语法
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs *= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要乘以的值。lhs
T2
任何数值类型。

描述
此运算符将值相乘并赋值给变量。它在功能上等效于：
lhs = lhs * rhs

右侧表达式 （） 将转换为左侧类型 


-------------------------------------------------------- KeyPgOpCombineOr ----

Operator Or= (Inclusive Disjunction And Assign)   运算符
  
执行按位或（包括分离）并将结果赋给变量

语法
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Or= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位或（包括断开）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 or 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于?


-------------------------------------------------------- KeyPgOpCombineShiftLeft ----

Operator Shl= (Shift Left And Assign)   运算符
  
向左移动并将值赋给变量

语法
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shl= rhs

参数
lhs
要分配到的变量。
rhs
要向左移动的值。lhs

描述
此运算符将左侧 （） 参数中的位移动其右侧 （） 参数指定的次数，并将结果分配给 。它在功能上等效于：lhsrhslhs
lhs = lhs Shl rhs


-------------------------------------------------------- KeyPgOpCombineShiftRight ----

Operator Shr= (Shift Right And Assign)   运算符
  
向右移动并为变量赋值

语法
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shr= rhs

参数
lhs
要分配到的变量。
rhs
要直接移动的值。lhs

描述
此运算符将左侧 （） 参数中的位移动其右侧 （） 参数指定的次数，并将结果分配给 。它在功能上等效于：lhsrhslhs
lhs = lhs Shr rhs



-------------------------------------------------------- KeyPgOpCombineSub ----

Operator -= (Subtract And Assign)   运算符
  
减去变量并将其赋值

语法
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

用法
lhs -= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要从 中减去的值。lhs
T2
任何数值类型。
T
任何数据类型。

描述
此运算符减去变量并将其赋值。它在功能上等效于：
lhs = lhs - rhs

对于数值类型，右侧表达式 （） 将?


-------------------------------------------------------- KeyPgOpCombineXor ----

Operator Xor= (Exclusive Disjunction And Assign)   运算符
  
执行按位 xor（独占析取）并将结果赋给变量

语法
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Xor= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
使用 执行按位 xor（独占或）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 or 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpConcat ----

Operator + (String Concatenation)   运算符
  
连接两个字符串

语法
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

用法
result = lhs + rhs

参数
lhs
要连接的左侧字符串。
rhs
要连接的右侧字符串。

描述
此运算符连接两个字符串。与 Operator &（带转换的字符串串联）不同，这两个表达式都必须是?


-------------------------------------------------------- KeyPgOpConcatConvert ----

Operator & (String Concatenation With Conversion)   运算符
  
连接两个字符串，根据需要将非字符串转换为字符串

语法
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

用法
result = lhs & rhs

参数
lhs
要连接的左侧表达式。
T
可转换为标准数据类型的任何标准数据类型或用户定义类型。
rhs
要连接的右侧表达式。
U
可转换为标准数据类型的任何标准数据类型或用户定义类型。
V
生成的字符串类型（因操作数而异）。

描述
此运算符连接两个表达式。如果任?


-------------------------------------------------------- KeyPgOpDelete ----

Operator Delete Statement   运算符
  
操作员销毁数据并释放与Operator New Expression

用法
Delete buf
or
Delete[] buf

参数
buf 
指向已由运算符或运算符分配的内存的指针，运算符的数组版本（必须根据要删除的数据类型提供类型化指针）。New ExpressionNew[] ExpressionNew Expression

描述
运算符用于销毁和释放使用运算符创建的对象的内存。删除 TYPE 时，将调用其析构函数。 运算符应仅与从运算符返回的地址一起使用。
运


-------------------------------------------------------- KeyPgOpDeleteOverload ----

Operator Delete Overload   运算符
  
成员运算符，用于在应用于 UDT（用户定义的类型）时提供过载内存解除分配进程部分。Operator Delete Statement

语法
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator delete[] ( buf  As Any Ptr )

参数
buf 
指向已由运算符或运算符（运算符的数组版本）分配的内存的指针。New OverloadNew[] OverloadNew Overload

描述
成员运算符在应用于 UDT（用户定义的类型）时重载运算符提供的内存解除分配进程部分。因此，用户可以定义自己的内存解除分配进?


-------------------------------------------------------- KeyPgOpDivide ----

Operator / (Divide)   运算符
  
除以两个数值表达式

语法
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs / rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回股息和除数的商。

描述
运算符 / （除法）返回股息和除数的商。
这两个操作数都不会以任何方式进行修改。与整数除法不


-------------------------------------------------------- KeyPgOpen ----

Open   文件打开
  
使用文件操作打开磁盘文件以进行读取或写入

语法
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber

Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

用法
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
或
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
或
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len =  record_length] )
或
Open filename For {Input|Output|Append} As filenumber
或
Open filename For Binary Access {Read|Write} As filenumber
或
Open filename For Random Access {Read|Write} As filenumber [Len =  record_length]


参数
filename
要打开的磁盘文件的名称的字符串值。相对文件路径相对于当前目录（请参见）。CurDir
encoding_type
读取或写入文本时要使用的编码可以是：
 Encoding "ascii" （默认使用 ASCII 编码）
 Encoding "utf8" （使用 8 位 Unicode 编码）
 Encoding "utf16" （使用 16 位 Unicode 编码）
 Encoding "utf32" （使用 32 位 Unicode 编码）
access_type
调用进程请求的访问类型。
 Access [Read] [Write] （可以使用读写访问权限，这是默认设置）
lock_type
对来自其他进程（线程或程序）的磁盘文件访问施加限制，可以是：
 Shared （文件可由其他进程自由访问）
 Lock [Read] [Write] （可以拒绝对其他进程的读写访问权限）
filenumber
要绑定到磁盘文件的可用文件编号，可通过 找到该文件。FreeFile
record_length
从磁盘文件读取或写入磁盘文件的每条记录的大小（以字节为单位）。缺?


-------------------------------------------------------- KeyPgOpenCom ----

Open Com   文件打开
  
打开用于输入和输出的串行端口

语法
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

用法
result = Open Com( options[,] As[#] filenumber )

参数
options
一个字符串，包含用于控制端口的选项。
filenumber
要绑定到端口的文件编号。

返回值
Open Com()成功时返回 32 位 ：零 （），否则返回非零错误代码。Long0

描述
此命令打开PC的串行端口，允许使用正常的文件命令发送和接收数据，如，，，...
主要参数是 a，它至少描述了要打开的通信?


-------------------------------------------------------- KeyPgOpenCons ----

Open Cons   ????
  
?????????? ?stdin? ??? ?stdout? ?????????????

??
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

??
result = Open Cons( [For {Input|Output}[,]] As filenumber )
??????QB?????
Open Cons [For {Input|Output}] As filenumber

??
filenumber
???? stdin ? stdout ??????????? ???????FreeFile

???
?????????? 32 ? ??????? ?0?????????????Open Cons()Long

??
Open Cons?????? stdin ? stdout ?????????????????????????????? ? ???????? ??????????
 ?????? stdin ?????????? ????????? stdout ?????????? ?????????????????
 stdin ? stdout ?????????????? OS ????


-------------------------------------------------------- KeyPgOpenErr ----

Open Err   文件打开
  
打开文件操作的标准输入 （stdin） 和标准错误 （stderr） 流。

语法
Open Err [for mode] As [#]filenumber As Long

用法
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

参数
mode
忽视。
filenumber
未使用的文件编号。

返回值
如果成功完成，则返回 32 位 ：零，否则返回非零值以指示失败。LongOpen Err()

描述
此命令打开以读取和写入控制台，从而允许使用普通文件命令执行读取和写入操作。
是不同于允许将错误消息与主控制台输出分开重?


-------------------------------------------------------- KeyPgOpenLpt ----

Open Lpt   文件打开
  
打开打印机设备

语法
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

用法
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

参数
x
指定端口号。如果省略，输出将发送到系统打印后台处理程序。
Printer_Name
要打开的打印机的名称。此参数在 DOS 上被忽略。
TITLE=Doc_Title
打印机后台处理程序看到的打印作业的标题。此参数在 DOS 上被忽略。
EMU=TTY
使用驱动程序文本映像在 Windows GDI 打印机上模拟 TTY 输出。此参数在 DOS 和 Linux 上被忽略。
For Input|Output
子句是允许兼容的，但它被忽略。
filenumber
要分配给设备的未使用文件编号。

返回值
如果成功完成，则返回 32 位 ：，否则返回非零值以指示失败。Long0Open Lpt()

描述
Open Lpt打


-------------------------------------------------------- KeyPgOpenPipe ----

Open Pipe   文件打开
  
打开外部进程的标准输入 （stdin） 或输出 （stdout） 流以进行文件操作。

语法
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

用法
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
或
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
（或类似QB的语法，）
Open Pipe filename For {Input|Output} As filenumber
（或，）
Open Pipe filename For Binary access_type As filenumber

参数
shell_command
要在操作系统命令外壳中执行的外部进程。相对文件路径相对于当前目录（请参见）。为需要在其可执行路径或参数中使用双引号的进程打开管道时，整个管道字符串应嵌套在双引号内。CurDir
access_type
调用进程请求的读取或写入访问权限的类型。
 Access {Read|}（  可以打开外部进程的 stdin 或 stdout 流）Write
filenumber
要绑定到外部进程的 stdin 或 stdout 流的可用文件编号。

返回值
在第一次使用中，返回 32 位 ：成功时返回零 （），否则返回非零错误代码?


-------------------------------------------------------- KeyPgOpenScrn ----

Open Scrn   文件打开
  
直接打开控制台，将输入和输出作为文件

语法
Open Scrn [for mode] As [#]filenumber As Long

用法
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

参数
mode
要么或 .如果省略，则假定为。InputOutputOutput
filenumber
未使用的文件编号。

返回值
如果成功完成，则返回 32 位 ：零 （），否则返回非零值以指示失败。Long0Open Scrn()

描述
此命令将作为文件打开输入和输出控制台，允许使用普通文件命令对其进行读/写。
在某些实现中，此命令可能使用对控制台


-------------------------------------------------------- KeyPgOpEqual ----

Operator = (Equal)   运算符
  
比较两个表达式的相等性

语法
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs = rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式相等，则返回负 1 （-1）;如果表达式不相等，则返回零 （0）。

描述
运算符 = （相等） 是一个二元运算符，它比较两个表达式的相等性并返回结果 - 一个布尔值，主要以： 负 1 （-1）


-------------------------------------------------------- KeyPgOpEqv ----

Operator Eqv (Equivalence)   运算符
  
返回两个数值的按位和（等效）

语法
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Eqv rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位等效性。

描述
此运算符返回其操作数的按位等效性，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布?


-------------------------------------------------------- KeyPgOperator ----

Operator   运算符
  
声明或定义重载运算符。

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator Delete[] ( buf  As Any Ptr )
End { Type | Class | Union }

{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }

Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator typename.[] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf  As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf  As Any Ptr ) [ Export ]

参数
typename 
、 、 或 的名称。TypeClassUnionEnum
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

描述
内置运算符（如 、）在表达式中使用时具有预定义的行为。当运算符的至少一个参数是 、 、 或数据类型时，可以重载这些运算符以执行预定义操作以外的操作。
运算符只是函数。运算符


-------------------------------------------------------- KeyPgOpExponentiate ----

Operator ^ (Exponentiate)   运算符
  
将数值表达式提高到一定功效

语法
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs ^ rhs

参数
lhs
左侧基本表达式。
rhs
右侧指数表达式。

返回值
返回提高到某个指数的基本表达式的幂。

描述
运算符 ^ （幂） 返回基表达式 （） 提高到某个指数表达式 （） 的结果。 仅适用于双浮点数，其他类型的操作数将在执行幂之前转换为双精度。小?


-------------------------------------------------------- KeyPgOpFor ----

Operator For (Iteration)   运算符
  
声明或定义具有用户定义类型变量的循环使用的运算符For...Next

语法
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
end_value
用作循环终止值的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静


-------------------------------------------------------- KeyPgOpGreaterThan ----

Operator > (Greater Than)   运算符
  
比较一个表达式大于另一个表达式

语法
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs > rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于右侧表达式，则返回负 1 （-1）;如果小于或等于，则返回零 （0）。

描述
运算符 > （大于）是


-------------------------------------------------------- KeyPgOpGreaterThanOrEqual ----

Operator >= (Greater Than Or Equal)   运算符
  
比较大于或等于另一个表达式的表达式

语法
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs >= rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于或等于右侧表达式，则返回负 1 （-1）;如果小于，则返回零 （0）。

描述
运算符 >=（大于或等于）是一个二元?


-------------------------------------------------------- KeyPgOpImp ----

Operator Imp (Implication)   运算符
  
返回两个数值的按位和（暗示）

语法
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Imp rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位含义。

描述
此运算符返回其操作数的按位含义，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔值


-------------------------------------------------------- KeyPgOpIntegerDivide ----

Operator \ (Integer Divide)   运算符
  
划分两个表达式Integer

语法
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs \ rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回股息和除数的商。Integer

描述
运算符 \（整数除法）将两个表达式相除并返回结果。浮点数值通过向上或向下舍入转换为，并且生成的商的小数部?


-------------------------------------------------------- KeyPgOpIs ----

Operator Is (Run-Time Type Information)   运算符
  
检查对象是否与从其编译时类型派生的类型
兼容（在继承上下文中）

语法
result = expression Is  typename

参数
expression
要检查的表达式，是直接或间接派生自 使用的 类型的对象。ObjectExtends
typename
要检查的子类型。此类型必须直接或间接派生自表达式类型（对象的编译时类型）。

返回值
如果表达式是实类型的对象或其从表达式类型派生的基类型之一，则返回负 1 （）;如果表达式是不兼容类型的对象，则返回零 （）。-1typename0

描述
该运算符必须与继承结合使用，以便?


-------------------------------------------------------- KeyPgOpLessThan ----

Operator < (Less Than)   运算符
  
比较一个表达式小于另一个表达式

语法
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs < rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于右侧表达式，则返回负 1 （-1）;如果大于或等于，则返回零 （0）。

描述
运算符 < （小于） 是一?


-------------------------------------------------------- KeyPgOpLessThanOrEqual ----

Operator <= (Less Than Or Equal)   运算符
  
比较小于或等于另一个表达式的表达式

语法
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs <= rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于或等于右侧表达式，则返回负 1 （-1）;如果大于，则返回零 （0）。

描述
运算符 <=（小于或等于


-------------------------------------------------------- KeyPgOpLet ----

Operator Let (Assign)   运算符
  
指示重载运算符 = （赋值） 时的赋值运算符

语法
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }

Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

用法
lhs = rhs
或
lhs => rhs

参数
typename 
、 或 的名称。TypeClassUnion
lhs
要分配到的变量。
rhs
要分配的值。

描述
Let用于重载运算符并将其与比较运算符区分开来。
将通过调用 中定义的运算符过程将 分配给 。
这包括通过使用 （或 ） 赋值从函数返回的对象的情况。
目


-------------------------------------------------------- KeyPgOpLetlist ----

Operator Let() (Assignment)   运算符
  
将用户定义类型的字段分配给变量列表

语法
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
或
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

参数
variable1 [, variable2 [, ... ]]
以逗号分隔的变量列表，用于接收变量字段的值。UDT
UDT_var
用户定义的类型变量。

描述
将变量字段中的值分配给变量列表。
当为 a Base 时，由运算符分配?


-------------------------------------------------------- KeyPgOpMemberAccess ----

Operator . (Member Access)   运算符
  
从对对象的引用返回对成员的引用

语法
Declare Operator . ( ByRef lhs As T ) ByRef As U

用法
result = lhs . rhs

参数
lhs
对象。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
引用的类型。rhs

返回值
返回对 指定的成员的引用。rhs

描述
运算符 .（?


-------------------------------------------------------- KeyPgOpModulus ----

Operator Mod (Modulus)   运算符
  
从除法操作中查找剩余部分

语法
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

用法
result = lhs Mod rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回除法操作的其余部分。

描述
运算符 Mod（模数）除以两个表达式并返回余数。?


-------------------------------------------------------- KeyPgOpMultiply ----

Operator * (Multiply)   运算符
  
将两个数值表达式相乘

语法
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs * rhs

参数
lhs
左侧乘数表达式。
rhs
右侧乘数表达式。

返回值
返回两个乘数的乘积。

描述
运算符 * （乘法?


-------------------------------------------------------- KeyPgOpNegate ----

Operator - (Negate)   运算符
  
更改数值表达式的符号

语法
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

用法
result = - rhs

参数
rhs
要否定的右侧数值表达式。

返回值
返回表达式的负数。

描述
运算符 - （否定）是否


-------------------------------------------------------- KeyPgOpNew ----

Operator New Expression   运算符
  
用于动态分配内存并构造指定类型的数据的运算符。

用法
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

参数
datatype
要创建的数据类型的名称。
initializers
变量的初始值。
count
要分配的元素的确切数量。

返回值
数据类型为指向新分配数据的指针，如果内存分配失败，则为空指针。

描述
运算符动态分配内存并构造指定的数据类型。
对于简单类型（如整数），可以给出初始值。对于没有构造函数


-------------------------------------------------------- KeyPgOpNewOverload ----

Operator New Overload   运算符
  
成员运算符，用于过载应用于 UDT（用户定义的类型）时提供的动态内存分配过程部分。Operator New Expression

语法
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

参数
size 
要分配的字节数。
返回值
类型为 Any Ptr 的指针，指向新分配的内存的开始。

描述
成员运算符在应用于 UDT（用户定义类型）时，会重载该运算符提供的动态内存分配进程部分。因此，用户可以定义自己的动态内存分?


-------------------------------------------------------- KeyPgOpNext ----

Operator Next (Iteration)   运算符
  
确定是否应终止循环For...Next

语法
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
cond,end_value
用作循环终止值的对象typename
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静态成员过程一样?


-------------------------------------------------------- KeyPgOpNot ----

Operator Not (Complement)   运算符
  
返回数值的按位非补码

语法
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer

Declare Operator Not ( ByRef rhs As T ) As T

用法
result = Not rhs

参数
rhs
右侧表达式。
T
任何数字或布尔类型。

返回值
返回其操作数的按位补集。

描述
此运算符返回其操作数的按位补集，这是一个逻辑运算，它生成一个值，其位设置取决于操作数的位。
 （对于布尔类型?


-------------------------------------------------------- KeyPgOpNotEqual ----

Operator <> (Not Equal)   运算符
  
比较不等式的两个表达式

语法
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs <> rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式不相等，则返回负 1 （-1）;如果表达式相等，则返回零 （0）。

描述
运算符 <> （不等于） 是一个二元运算符，它比较两个表达式的不等式并返回结果 - ?


-------------------------------------------------------- KeyPgOpOr ----

Operator Or (Inclusive Disjunction)   运算符
  
返回两个数值的按位或（包括析取）

语法
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Or rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位析取。

描述
此运算符返回其操作数的按位析取，这是一种逻辑运算，该操作产生一个值，其位设置取决于操作数的位（对于将布尔值


-------------------------------------------------------- KeyPgOpOrElse ----

Operator Orelse (Short Circuit Inclusive Disjunction)   运算符
  
返回两个数值的短路或（非独占分离）

语法
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs OrElse rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的短路或（包括析取）。

描述
此运算符计算左侧表达式。如果结果为非零，则立即返回（true）。如果结果为零，则计算右侧，并返回其逻辑结


-------------------------------------------------------- KeyPgOpPlacementNew ----

Operator Placement New   运算符
  
用于在指定内存地址处构造对象的运算符。

语法
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

参数
address 
内存中要构造的位置。括号不是可选的。
initializers
变量的初始值。
datatype
要构造的数据类型的名称。
count
要构造的元素数。

返回值
指向新构造数据的类型的指针。datatype

描述
运算符在指定的内存位置构造指定的数据类型。
对于简单类型（如整数），可以给出初始值。对于没有 s 的类型，可


-------------------------------------------------------- KeyPgOpPpConcat ----

Operator ## (Preprocessor Concatenate)   运算符
  
用于连接字符串的预处理器运算符

语法
text##text

描述
此运算符通过连接令牌两侧的文本来创建新令牌。此文本可以被其他宏识别并进一步扩展。一种用途是创建一个宏，该宏根?


-------------------------------------------------------- KeyPgOpPpEscape ----

Operator ! (Escaped String Literal)   运算符
  
显式指示应为转义序列处理字符串文本。

语法
!"text"

参数
!
预处理器转义字符串运算符
"text"	
包含转义字符的字符串文本

描述
此运算符显式指示应处理其后面的字符串文本（用双引号括起来）作为转义序列。这是一个预处理器运算符，只能在编译时与字符串文本一起使用。
字符串文本?


-------------------------------------------------------- KeyPgOpPpNoescape ----

Operator $ (Non-Escaped String Literal)   运算符
  
显式指示不应为转义序列处理字符串文本。

语法
$"text"

参数
$
预处理器非转义运算符
"text"	
字符串文本

描述
此运算符显式指示不应处理其后面的字符串文本（用双引号括起来）作为转义序列。这是一个预处理器运算符，只能在编译时与字符串文本一起使用。
字符串文本的默认?


-------------------------------------------------------- KeyPgOpPpStringize ----

Operator # (Preprocessor Stringize)   运算符
  
用于将宏参数转换为字符串的预处理器运算符

语法
#macro_argument

描述
此运算符将 转换为一个字符串，其值为参数的名称。此替换是在宏扩展期间（编译之前）进行的。
 注意：由于此功能，在宏中使用文件处理语句时应小心。由于采用“#”参数的文件处理?


-------------------------------------------------------- KeyPgOpProcptr ----

Operator Procptr (Procedure Pointer)   运算符
  
返回过程的地址

语法
Declare Operator ProcPtr ( ByRef identifier As proctype [, proctype ] ) As proctype Ptr

用法
result = ProcPtr ( identifier [, proctype ] )

参数
identifier
过程标识符。
proctype
任何类型的过程（子/函数）。

返回值
返回过程的地址。

描述
此运算符返回 或 过程的地址。
使用两个参数语法时，这允许基于子/函数类型获取 过程指针。
这样就可以显式指定子/函数的“类型”，以解决过程重载或检查非


-------------------------------------------------------- KeyPgOpPtrIndex ----

Operator [] (Pointer Index)   运算符
  
返回对来自地址的内存偏移量的引用

语法
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T


用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

参数
lhs
基址。
rhs
从 的有符号偏移量。lhs
T
任何数据类型。

描述
此运算符返回对内存中距基址一定距离的值的引用。它本质上是“”的简写，因为引用可以被认为是具有内存位置“”作为值的指针，并且隐式取消引用;两者都做同样的


-------------------------------------------------------- KeyPgOpPtrMemberAccess ----

Operator -> (Pointer To Member Access)   运算符
  
从指向对象的指针返回对成员的引用

语法
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

用法
result = lhs -> rhs

参数
lhs
对象的地址。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
引用的类型。rhs

返回值
返回对 指定的成员的引用。rhs

描述
运算符 ->（指向成员访问的指针）通过指向某个对象的成员的指针返回对该对象的引用。它具有取消引用指向对象的指针，然后使用 的效?


-------------------------------------------------------- KeyPgOpShiftLeft ----

Operator Shl (Shift Left)   运算符
  
将数值表达式的位向左移动

语法
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shl ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shl ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shl rhs

参数
lhs
左侧表达式。
rhs
右侧偏移表达式。

返回值
返回向左移动次数的结果。lhsrhs

描述
运算符 Shl（向左移）将左侧表达式 （） 中的所有位向左移动，由右侧表达式 （） 指定多次。从数值上讲，结果与 “” 相同。例如，“” 返回二进制数，“


-------------------------------------------------------- KeyPgOpShiftRight ----

Operator Shr (Shift Right)   运算符
  
将数值表达式的位向右移动

语法
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shr ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shr ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shr rhs

参数
lhs
左侧表达式。
rhs
右侧偏移表达式。

返回值
返回右移移次数的结果。lhsrhs

描述
运算符 Shr（向右移动）将左侧表达式 （） 中的所有位向右移动，由右侧表达式 （） 指定多次。从数值上讲，结果与“ / ”相同。例如，“” 返回二进制数，


-------------------------------------------------------- KeyPgOpStep ----

Operator Step (Iteration)   运算符
  
递增循环的迭代器For...Next

语法
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
end_value
用作循环终止值的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静态成员过程一样，


-------------------------------------------------------- KeyPgOpStringIndex ----

Operator [] (String Index)   运算符
  
返回对字符串中字符的数值的引用

语法
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

参数
lhs
字符串（字符串引用，而不是作为本地副本返回的字符串）。
rhs
与第一个字符的从零开始的偏移量。
T
宽字符类型（因平台而异）。

描述
以下运算符返回对字符串中特定字符的数值的引用：
对于一个或一个：StringZString
a（包含字符的 ASCII 值）。UByte
?


-------------------------------------------------------- KeyPgOpStrptr ----

Operator Strptr (String Pointer)   运算符
  
返回字符串的字符数据的地址。

语法
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

用法
result = StrPtr ( lhs )

参数
lhs
字符串。

返回值
向字符串/字符串的字符数据返回 a（如果为空字符串，则为 null 值）。ZString/WString Ptr

描述
此运算符返回指向字符串/字符串的字符数据开头的 。 是获取字符串字符数据地址的正确方法。
如果为空（仅适用于长度可变的字符串），则返回空指


-------------------------------------------------------- KeyPgOpSubtract ----

Operator - (Subtract)   运算符
  
减去两个表达式

语法
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer

Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs - rhs

参数
lhs
要从中减去的左侧表达式。
rhs
要减去的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的减法。

描述
当左侧和右侧表达式是数值时，运算符 - （减去）返回两个值的减法。
如果左侧和右侧表达式都是类型，则对于某种类型，运算符对地址执行指针减?


-------------------------------------------------------- KeyPgOption ----

Option()
  
指定符号的其他属性和/或特征。

语法
Option( "literal-text" )

参数
literal-text
指定选项的文字文本。请参阅说明。

描述
Option()允许程序员指定其他属性或特征。在语法中，需要将字符串括在引号和括号中。无法识别的选项将被忽略。
还可以用作语句来指定其他编译时选项。请参见编译器开关。



-------------------------------------------------------- KeyPgOptionbase ----

Option Base   选项
  
指定数组声明的默认下限

语法
Option Base base_subscript

参数
base_subscript
数字文本值

描述
Option Base是为以下任何数组声明设置默认下限的语句。此默认值对于使用模块的其余部分仍然有效，并且可


-------------------------------------------------------- KeyPgOptionbyval ----

Option ByVal   选项
  
指定默认情况下在过程声明中按值传递参数

语法
Option ByVal

描述
Option ByVal是一个语句，它将过程参数的缺省传递约定设置为按值，就像用 声明一样。此默认


-------------------------------------------------------- KeyPgOptiondynamic ----

Option Dynamic   选项
  
指定可变长度数组声明

语法
Option Dynamic

描述
Option Dynamic是一个语句，它指定任何后续数组声明都是可变长度的，无论它们是否使用常量下标范围声明。这对于所使用的模?


-------------------------------------------------------- KeyPgOptionescape ----

Option Escape   选项
  
指定默认情况下应为类似 C 的转义序列处理字符串文本

语法
Option Escape

描述
Option Escape是一个语句，默认情况下，它会导致针对类似 C 的转义序列处理字符串文本。通常，转义序列在字符串文本中不起作用，除非字符串以 ！ 为前缀。运算符（转义字符串文本


-------------------------------------------------------- KeyPgOptionexplicit ----

Option Explicit   选项
  
强制在使用变量、对象和数组之前对其进行声明

语法
Option Explicit

描述
Option Explicit是一个语句，它强制任何以下变量、对象或数组用法前面加上声明，例如，


-------------------------------------------------------- KeyPgOptiongosub ----

Option Gosub   选项
  

	Enables support for GoSub and On Gosub.

Syntax
Option Gosub

Description
Option Gosub enables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to 


-------------------------------------------------------- KeyPgOptionnogosub ----

Option Nogosub   选项
  
禁用对 和 的支持。GoSubOn Gosub

语法
Option Nogosub

描述
Option Nogosub禁用对 和 的支持（从 gosub）。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为


-------------------------------------------------------- KeyPgOptionnokeyword ----

Option NoKeyword   选项
  
“未定义”保留关键字

语法
Option NoKeyword keyword

参数
keyword
要取消定义的关键字

描述
Option NoKeyword是一个取消定义 FreeBASIC 保留关键字的语句，这意味着它可以用作变量、对象


-------------------------------------------------------- KeyPgOptionprivate ----

Option Private   选项
  
默认情况下为过程声明指定内部链接

语法
Option Private

描述
Option Private是一个语句，默认情况下，它为以下任何过程声明内部链接，就像用 声明一样。此缺省值对于


-------------------------------------------------------- KeyPgOptionstatic ----

Option Static   选项
  
恢复为默认数组声明行为

语法
Option Static

描述
Option Static是一个语句，它覆盖 的行为，即使用常量下标范围声明的数组是固定长度的。这对于所使用的模块的其余部分仍然有效?


-------------------------------------------------------- KeyPgOpValueOf ----

Operator * (Value Of)   运算符
  
取消引用指针

语法
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T


用法
result = * rhs
or
* rhs = value

参数
rhs
要取消引用的地址。
T
任何标准、用户定义或过程类型。

返回值
返回对存储在地址 中的值的引用。rhs

描述
运算符 * （值的）返回对存储在地址处的值的引用，通常称为取消引用运算符。操作数不会以任何方式进行修改。
可以取消引用的任何类型的 ，但 .



-------------------------------------------------------- KeyPgOpVarptr ----

Operator Varptr (Variable Pointer)   运算符
  
返回变量或对象的地址

语法
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

语法
result = VarPtr ( lhs )

参数
lhs
变量或对象。
T
任何数据类型。

返回值
返回变量或对象的地址。

描述
此运算符返回其操作数的地址。
当操作数为 类型时，将返回内部字符串描述符的地址。用于检索字符串数据的地址。
操作数不能是数组，但可以是数组元素。例如


-------------------------------------------------------- KeyPgOpXor ----

Operator Xor (Exclusive Disjunction)   运算符
  
返回两个数值的按位异构（独占析取）

语法
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Xor rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位 xor。

描述
此运算符返回其操作数的按位排除，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔?


-------------------------------------------------------- KeyPgOrGfx ----

Or   或
  
图形语句的参数，该语句使用按位作为 blitting 方法PutOr

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

参数
Or
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有蒙版颜色，尽管颜色值（在全彩色模式下）不会产生


-------------------------------------------------------- KeyPgOut ----

Out   端口输出
  
将值输出到硬件端口。

语法
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

用法
Out port,value

参数
port
要写入的硬件端口。
data
要写入的数?


-------------------------------------------------------- KeyPgOutput ----

Output   输出
  
指定要为输出模式打开的文本文件

语法
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行输出的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行写入的文件模式。
此模式用于写入带有 的文本，或以逗号分隔的值。
文本文件不能在FreeBASIC中同时读取和写


-------------------------------------------------------- KeyPgOverload ----

Overload   对象重载
  
指定过程名称可以重载

语法
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]

Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]

[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程声明中，允许重载过程名称，也就是说，如果其他过程（无论是子过程还是函数）的参数列表是唯一的，则可以使用相同的名称声明其他过程（ 无论它们是子还是函数）。如果两个参数列表包含


-------------------------------------------------------- KeyPgOverride ----

Override   对象覆盖
  
方法属性;指定方法必须覆盖虚拟

语法
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

描述
在方法声明中，可用于指示此方法应重写基类中的虚拟或抽象方法。然后，如果该方法不重写任何内容（只有非静态方法可以重写虚拟或抽象方法），编译器将显示错误。
强烈建议不要强制使用 


-------------------------------------------------------- KeyPgPaint ----

Paint   填充
  
填充由指定颜色的边框分隔的区域

语法
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
用于开始泛光填充（绘画）的像素的坐标
paint
颜色属性或填充图案
 一个数值表示一种颜色，而一个字符串表示一个填充图案
border_color
填充的边界颜色

描述
图形命令，用于填充由指定颜色的边框分隔的区域。也称为“泛水填充”或“油漆桶”。
可以在语句设


-------------------------------------------------------- KeyPgPalette ----

Palette   调色模式
  
使用调色板颜色自定义模式中的颜色

语法
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

参数
Get
指示获取选项板信息，而不是设置选项板信息
index
调色板索引
color
颜色属性
r
红色成分
g
绿色成分
b
蓝色分量
Using
指示使用颜色值数组
arrayname(idx)
用于获取/设置颜色属性的数组和索引

描述
该语句用于检索或自定义颜色深度高达8bpp的图形模式的当前调色板;在具有较高颜色深度的模式下使用时将不起作用


-------------------------------------------------------- KeyPgPascal ----

pascal   pascal
  
在过程声明中指定 Pascal 样式的调用约定

语法
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在 Pascal 调用约定中，任何参数都将以与它们列出的顺序相同的顺序传递（推送到堆栈上），即从左到右。过程不需要保留 或 寄存器，并且必须在堆栈返


-------------------------------------------------------- KeyPgPcopy ----

PCopy   复制P模式
  
将一个图形或文本页面复制到另一个图形或文本页面

语法
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

用法
PCopy [ source ] [, destination ]

参数
source
要从中复制的页面
destination
要复制到的页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
将一个图形或文本视频页面复制到另一个图形或文本视频页面。用于在一个不可见页面上绘制所有图形并将其复制到活动的可见页?


-------------------------------------------------------- KeyPgPeek ----

Peek   内存取地址
  
获取内存中某个地址处的任意类型的值

语法
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

用法
Peek( [ datatype, ] address )

参数
address
内存中要从中获取值的地址。
datatype
要获取的值的类型。如果省略，则假定为。UByte

描述
此过程返回对内存地址在内存中给出的值的引用，并且等效于：
*cast(ubyte ptr, address)
或
*cast(datatype ptr, address)



-------------------------------------------------------- KeyPgPmap ----

PMap   映射P模式
  
映射视图和物理映射之间的坐标。

语法
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

用法
result = PMap( coord, func )

参数
coord
指示要映射的坐标的表达式。
func
要应用于给定坐标的映射函数编号。

返回值
映射的坐标值。

描述
此函数转换视图（由语句定义）和物理（由语句设置）映射之间的坐标。根据 的值，用于计算要由 以下者返回的不同映射：WindowView (Graphic


-------------------------------------------------------- KeyPgPoint ----

Point   点
  
返回指定像素坐标的颜色属性

语法
result = Point( coord_x, coord_y [,buffer] )
or
result = Point( function_index )


用法
coord_x
像素的 x 坐标
coord_y
像素的 y 坐标
buffer
要从中读取的图像缓冲区
function_index
要返回的屏幕坐标类型：值之一 、 、 、0123

返回值
返回数据类型为 .
如果提供了像素的坐标，Point 将返回指定坐标处的颜色属性，作为 8 个 bpp 索引模式下的 8 位调色板索引、16 个 bpp 模式下的 24 位 RGB 值（未使用的前 8 位，R、G，B 的精度有限）以及 32 bpp 模式下的 32 位 RGB 或 RGBA 值（高 8 位未使用或保持 Alpha）。请注意，它不会返回 16 位值（5 位 R + 6 位 G + 5 位 B）。
如果参数是函数索引，则 Point 将返回由最后一个图形命令设置的图形光标坐标之一。ULongx, y

论点返回的值0当前物理 x 坐标。1当前物理 y 坐标。2当前视图 x 坐标。如果尚未使用 WINDOW 语句，则返回与 POINT（0） 函数相同的值。3


-------------------------------------------------------- KeyPgPointCoord ----

PointCoord   点坐标
  
查询的笔在图形模式下的位置Draw

语法
Declare Function PointCoord( ByVal func As Long ) As Single

用法
result = PointCoord( func )

描述
该函数可用于在图形模式下查询笔的 x 和 y 位置。结果值取决于传递的 func 值：PointCoordDraw

函子值：返回值：0x 物理坐标，与 PMap（ 点坐


-------------------------------------------------------- KeyPgPoke ----

Poke   内存读址
  
将值分配给内存中的位置。

语法
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

用法
Poke [ datatype, ] address, value

参数
datatype
指定地址处的数据类型。如果省略，则假定为。UByte
address
内存中要分配到的位置。
value
要分配的值。

描述
Poke为内存中的某个位置赋值。它等效于
*cast(ubyte ptr, address) = value
或
*cast(datatype ptr, address) = value

当 是用户定义的?


-------------------------------------------------------- KeyPgPos ----

Pos   位置
  
返回文本光标的水平（从左到右）位置

语法
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

用法
result = Pos[ ( dummy ) ]

参数
dummy
为向后兼容 QBASIC 而保留的未使用参数。

返回值
返回文本?


-------------------------------------------------------- KeyPgPpassert ----

#assert   #编译中断
  
预处理器条件指令

语法
#assert  condition

参数
condition
假定为真的条件表达式

描述
在编译时断言条件表达式的真实性。如果 为 false，则编译将因错误而停止。
此语


-------------------------------------------------------- KeyPgPpcmdline ----

#Cmdline
  
预处理器指令

语法
#cmdline "args..."

参数
args...
有效且通用选项的参数列表（用空格分隔）。Compiler Options-print-help

描述
#cmdline是一个预处理器指令，允许从第一个指定的 fb 源文件内部进行指定。第一个源文件是在 shell 或 IDE 命令行上调用 fbc 编译器的第一个指定的 '.bas' 文件。 在第一个源?


-------------------------------------------------------- KeyPgPpdefine ----

#define   #预定义
  
用于定义宏的预处理器指令

语法
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

描述
#define允许声明基于文本的预处理器宏。一旦编译器看到 a，它将开始用 替换 的进一步出现。 可能为空。扩展以递归方式完成，直到没有更多要扩展的内容，编译器可以继续分析生成的代码。 可?


-------------------------------------------------------- KeyPgPpelse ----

#else   #否则
  
预处理器条件指令

语法
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

描述
#else可以添加到 、 或 块中，以便为条件


-------------------------------------------------------- KeyPgPpelseif ----

#elseif   #又如
  
预处理器条件指令

语法
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

描述
可以将#elseif?


-------------------------------------------------------- KeyPgPpendif ----

#endif   #结束如果
  
预处理器条件指令

语法
#endif

描述
结束一组条件指令 请参阅
 、?


-------------------------------------------------------- KeyPgPperror ----

#error   #错误
  
预处理器诊断指令

语法
#error error_text

参数
error_text
显示消息

描述
#error中断编译以在编译器找到它时显示，然后解析继续。
此关键字必须由 ...括起来，因此编译器只有在满足时才能访问。



-------------------------------------------------------- KeyPgPpif ----

#if   #如果
  
预处理器条件指令

语法
#if (expression)
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果计算结果为 True（非零），则包括 / 块中包含的语句;如果计算结果为 False （），则包括排除（忽略）。
此条件指


-------------------------------------------------------- KeyPgPpifdef ----

#ifdef   #如果定义
  
预处理器条件指令

语法
#ifdef symbol
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果已定义，则包括块中的语句，如果未定义，则排除（忽略）。
等效于#i


-------------------------------------------------------- KeyPgPpifndef ----

#ifndef   #如果未定义
  
预处理器条件指令

语法
#ifndef symbol
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果未定义，则包括块中的语句，如果未定义符号，则排除（忽略）。
等效


-------------------------------------------------------- KeyPgPplang ----

#lang   #语言
  
用于设置编译器方言的预处理器语句。

语法
#lang "lang"

参数
"lang"
要设置的方言，括在双引号中，并且必须是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令行上提供 -forcelang 选项，则可用于设置显示该选项的源模块的方言。最多将在源模块上进行两次传递。在第一次传递时，如果指定的方言不是默认?


-------------------------------------------------------- KeyPgPplibpath ----

#libpath   #库路径
  
用于添加库搜索路径的预处理器语句

语法
#libpath "path"

描述
将库搜索路径添加到链接器的搜索路径列表中，就像在命令行上使用“-p”选项指定一样。
?


-------------------------------------------------------- KeyPgPpline ----

#line   #行号
  
用于设置当前行号和文件名的预处理器指令

语法
#line number [ "name" ]

参数
number 
新行号
"name"
新文件名（可选）

描述
通知编译器行号和文件名的更改，并相应地更新 和 宏值。
编译时消息和运行时消息都受此指令的影响


-------------------------------------------------------- KeyPgPpmacro ----

#Macro...#Endmacro
  
用于定义多行宏的预处理器指令

语法
#macro identifier [?] ( [ parameters ] )
body
#endmacro

#macro identifier [?] ( [ parameters, ] Variadic_Parameter... )
body
#endmacro

描述
#macro是 的多行版本。
如果在定义语法中使用 可选的问号 （？），则可以调用带有参数的宏，而无需在参数两边使用括号。
 注意：请注意触发的可能性，以免与包含宏名称作为其术语之一的表?


-------------------------------------------------------- KeyPgPpPragma ----

#pragma   #兼容设定
  
预处理器指令

语法
#pragma option [ = value ]
或或
#pragma push ( option [, value ] )

#pragma pop ( option )

参数
和相关 s 的可能值：optionvalue

选择价值描述msbitfields假使用与 gcc 兼容的位字段（默认）msbitfields真使用与 Microsoft C 编译器中使用的位字段兼容的位字段一次不适用导致编译指示的源文件的行为就像它曾经包含在#include一样...固执性假禁用当前源中的“CONST 限定符已丢弃”警告固执性真在当前源中启用“已丢弃 CONST 限定符”警告查找108假对非限定符号名称使用常规符号查找查找108真对非限定符号名称使用 fbc-1.08.x 或更早版本的符号查找
如果未给出值，编译器将假定为 True （-1）。可以使用零 （0） 值代替 False。可以使


-------------------------------------------------------- KeyPgPpPragmaReserve ----

#Pragma Reserve   #兼容设定
  
预处理器指令

语法
#pragma reserve symbol
奥罗罗
#pragma reserve (extern) symbol

#pragma reserve (asm) symbol

#pragma reserve (asm, extern) symbol)或#pragma reserve (extern, asm) symbol)

参数
symbol
要保留的符号名称。

描述
#pragma reserved语句是预处理器指令，允许用户通过访问 fbc 编译器的内部符号表来保留符号名称：
- #pragma reserve symbol
语句将在当前范围/命名空间中保留一个符号名称，如


-------------------------------------------------------- KeyPgPpprint ----

#print   #输出
  
预处理器诊断指令

语法
#print text

描述
使编译器


-------------------------------------------------------- KeyPgPpundef ----

#undef   #取消定义
  
用于取消定义宏的预处理器指令

语法
#undef symbol

描述
取消定义以前用 定义的符号。
可用于确保宏或符号的生存期有限，并且不会与稍后可能在源代码中定义的类似宏定义冲突。
 ?


-------------------------------------------------------- KeyPgPreserve ----

Preserve   数组保留
  
用于保留内容将调整数组大小ReDim

语法
ReDim Preserve array(...) [As datatype]

描述
用于，以便在调整数组大小时，不会重置数据，而是保留数据。这意味着当阵列扩大时，只有新数据被重置，而旧数据保持不变（但不一定在内存中的相同绝对地址）。
 注意：可能无法在所有情?


-------------------------------------------------------- KeyPgPreset ----

PReset   绘制像素
  
绘制单个像素

语法
PReset [target ,] [STEP] (x, y) [,color]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要在其上绘制的缓冲区。 可能是使用 或 创建的映像。如果省略，则目标默认为屏幕的当前工作页面。
是像素的坐标。STEP（如果存在），则表示坐标相


-------------------------------------------------------- KeyPgPrint ----

(Print | ?)
  
将文本写入屏幕

语法
(Print | ?) [ expressionlist ] [ , | ; ]

参数
expressionlist
要打印的项目列表

描述
Print将值列表输出到屏幕。数值将转换为其字符串表示形式，符号的左填充。用户定义类型的对象必须重载 。
表达式列表中的连续值由逗号 （） 或分号 （） 分隔。逗号表示打印应位于下一个


-------------------------------------------------------- KeyPgPrintPp ----

(Print | ?) #
  
将值列表写入文件或设备

语法
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

参数
filenum
为 打开的文件或设备的文件编号。OutputAppend
expressionlist
要写入的值的列表。

描述
Print #将值列表输出到文本文件或设备。数值将转换为其字符串表示形式，符号的左填充。用户定义类型的对象必须重载 。
表达式列表中的连续值由逗号 （） 或分号 （?


-------------------------------------------------------- KeyPgPrintusing ----

(Print | ?) Using
  
将格式化文本输出到屏幕或输出设备。

语法
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

参数
filenum
为 打开的文件或设备的文件编号。（或者，可在适当情况下使用，而不是OutputAppendLPrintPrint #)
printexpressionlist
要打印的项目的可选前面列表，以逗号 （） 或分号 （） 分隔（有关详细信息，请参阅）。,;Print
formatstring
要使用的字符串格式。
expressionlist
要设置格式的项目列表，以分号 （） 分隔。;

描述
使用参数确定的格式打印到屏幕显示各种表达式。在内部，使用 2048 字节的缓冲


-------------------------------------------------------- KeyPgPrivate ----

Private   私有
  
指定具有内部链接的过程

语法
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程定义（在声明行级别禁止）中，指定过程具有内部链接，这意味着其名称对外部模块不可见。
因此，在编译的模块中，如果两个过程都是 ，则可能存在两个具有相同标识符但定义在不同模块内?


-------------------------------------------------------- KeyPgProperty ----

Property   类属性
  
声明或定义类型或类中的属性

语法
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }

Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

参数
typename 
或 的名称TypeClass
fieldname 
属性的名称
new_value 
传递给要分配的属性的值
index 
属性索引值

描述
Property字段用于获取和设置 a 的值，或者以与其他数据字段相同的方式设置 a 的值，只是执行过程，而不是简单地分配到字段或从字段中检索到的值。
是为其声明


-------------------------------------------------------- KeyPgPset ----

PSet   绘点
  
绘制单个像素

语法
PSet [target ,] [STEP] (x, y) [,color]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要在其上绘制的缓冲区。 可能是使用 或 创建的映像。如果省略，则默认为屏幕的当前工作页面。
是像素的坐标。 如果存在，则指示坐标相对于图形光标?


-------------------------------------------------------- KeyPgPsetGfx ----

PSet   绘点
  
选择作为 blitting 方法的图形语句的参数PutPSet

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

参数
PSet
必填。

描述
该方法将源像素值复制到目标像素上。
这是最简单的方法。目标缓冲区中的像素将直接被源缓?


-------------------------------------------------------- KeyPgPtr ----

(Pointer | Ptr)
  
变量声明类型修饰符

语法
... As DataType {Pointer | Ptr}

描述
声明指针变量。
变量类型可以是预定义类型，也可以是用户定义类型。
运算符 或 用于获取变量的地址。运算符用于取消引用指针，即访?


-------------------------------------------------------- KeyPgPublic ----

Public   公共
  
指定具有外部链接的过程。

语法
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程定义（在声明行级别禁止）中，指定过程具有外部链接，这意味着其名称对外部


-------------------------------------------------------- KeyPgPutfileio ----

Put (File I/O)   写入字节
  
将数据从缓冲区写入文件

语法
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

用法
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

参数
filenum
打开文件时传递给的值。Open
position
文件中必须从何处开始的位置。如果文件已打开，则该位置位于记录中，否则以字节为单位给出。如果省略，则从当前文件指针位置开始写入。该位置是从 1 开始的：即文件的第一个记录或字节位于 位置 。
如果省略或为零 （），则文件写入将从当前文件位置开始。PutFor Random1position0
data
从中写入数据的缓冲区。它可以是数值变量、字符串、数组或用户定义的类型。该操作将尝试将完整的变量传输到磁盘，除非给出。
放置数组时，后面应跟一对空的括号：“”。 将写入数组中的所有数据。 是不允许的。
输入 s 时，写入的字节数与字符串数据中的字节数相同。 是不允许的。
注意：如果要从缓冲区写入值，则不应将指针传递到缓冲区;相反，您应该传递缓冲区中的第一个变量（这可以通过取消引用指针来完成）。如果直接传递指针，则将放置指针变量中的内存，而不是它指向的内存。amountdata()PutamountStringamountOperator * (Value Of)Put
amount
使写入文件的连续变量到文件中 - 即它将字?


-------------------------------------------------------- KeyPgPutgraphics ----

Put (Graphics)   写入字节
  
将图像复制到另一个图像或屏幕

语法
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

参数
target
是要在其中绘制图像的缓冲区的地址。如果省略，图像将被模糊到屏幕上。见下文。
[STEP](x, y)
指定从目标缓冲区或屏幕的左上角开始的偏移量，以便将图像绘制到该缓冲区或屏幕。 指示偏移量相对于当前图形光标位置。STEP(x, y)
source
是要绘制的图像的缓冲区的地址。见下文。
(x1, y1)-[STEP](x2, y2)
在源缓冲区中指定要绘制的矩形区域。如果省略，则绘制整个缓冲区。 指示 和 分别相对于 和。STEPx2y2x1y1
method
指定用于将图像绘制到目标缓冲区的方法，并且可以是以下任一方法（默认方法是）：
 与背景无关的方法XOR
PSet：源像素值将复制而不进行修改。
 ：源像素值在复制之前被否定为 1 的补码。
 ：源像素值将复制而不进行修改。不绘制蒙版颜色的源像素。见下文。PRESETTrans
依赖于背景的方法
And：目标像素与源像素按位排列。见下文。
 ：目标像素与源像素按位排列。见下文。
 ：目标像素与源像素按位排列。见下文。
 ：源与参数或图像的单个像素中指定的透明度因子混合。见下文。
 ：源乘以值，并随着饱和度添加到


-------------------------------------------------------- KeyPgRandom ----

Random   随机访问
  
指定要为随机访问模式打开的文件或设备

语法
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

参数
filename
要打开的文件名
access_type
指示文件是可以从中读取、写入文件还是同时读取到两者
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号
record_length
用于文件的记录的大小

描述
打开一个文件或设备，用于读取和/或写入给定文件中的二进制数据，其中包含大小为 的记录。
如果该文件


-------------------------------------------------------- KeyPgRandomize ----

Randomize   随机初始化
  
为随机数生成器设定种子

语法
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

用法
Randomize [ seed ][, algorithm ]

参数
seed
随机数生成器的种子值，但对于除算法 #4 之外的所有算法，小数部分都被剪裁（见下文）。如果省略，将改用基于 的值。DoubleTimer
algorithm
用于选择算法的整数值（有关可用算法，请参阅标准标头“fbmath.bi”）。如果省略，则使用当前语言方言的默认算法。

描述
设置有助于生成随机数的随机种子，并选择要使用的算法。
的常量在 中定义?


-------------------------------------------------------- KeyPgRead ----

Read   读取
  
读取与语句一起存储的值。Data

语法
Read variable_list

描述
使用命令读取存储在应用程序中的数据。
的元素必须是基本类型，数字，字符串或数组和用户定义类型的元素。
程序中的所有语句都表现为单个列表，在读取一个语句的最后一个元素后，将读取以?


-------------------------------------------------------- KeyPgReadFile ----

Read (File Access)   读取
  
文件访问说明符

语法
Open filename As String For Binary Access Read As #filenum As Integer

描述
语句中子句的说明符。 指定


-------------------------------------------------------- KeyPgReadWriteFile ----

Read Write (File Access)   读取
  
文件访问说明符

语法
Open filename As String For Binary Access Read Write As #filenum As Integer

描述
语句中子句的说明符。 指定文件对输入?


-------------------------------------------------------- KeyPgReallocate ----

Reallocate   重分配内存
  
为现有的保留内存块重新分配存储

语法
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

用法
result = Reallocate( pointer, count )

参数
pointer
要重新分配的已分配内存的地址。
count
要重新分配的总字节数。

返回值
重新分配的内存的地址。如果重新分配不成功，并且 所指向的原始内存保持不变，则返回 null （） 指针。0pointer

描述
尝试重新分配以前使用 或 分配的内存的大小。缓冲区的内容将被保留，但如果小于内存块的原始大小，缓


-------------------------------------------------------- KeyPgRedim ----

ReDim   重定义
  
定义可变长度数组或调整其大小

语法
声明动态数组：
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
调整动态数组的大小：
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]
艺术
ReDim [ Preserve ] [ ( ] expression [ ) ] ([subscript [, ...]]) [, ...]

参数
Shared
指定在整个模块中对阵列的共享（文件范围）访问。
Preserve
与现有阵列一起使用时，在调整大小时将保留阵列的内容。请注意，在某些情况下，数据不会保留其原始索引，请参阅下文。Preserve
symbolname
新的或现有的数组标识符。
expression或(expression)
引用现有数组的表达式。这可用于调整作为用户定义类型成员的数组的大小。在某些情况下，有必要在表达式两边指定括号（特别是如果数组表达式本身包含括号） - 请参阅下面的示例。
subscript: [lowerbound To ] upperbound
数组维度的下限和上限范围。下限默认值为零 （），如果未指定，


-------------------------------------------------------- KeyPgRem ----

Rem   注释
  
指示源代码中的注释。

语法
Rem comment

' Comment

/' Multi-line
   comment '/

描述
以 开头的源代码行指示该行是注释，不会进行编译。
单引号字符 （'） 也可用于指示注释，并可能出现在源


-------------------------------------------------------- KeyPgReset ----

Reset   重置
  
关闭所有打开的文件，或重置标准 I/O 句柄。

语法
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

用法
Reset
or
Reset( streamno )

参数
streamno
要重置的流编号，用于 stdin 或 stdout。01

描述
Reset，当调用时不带任何参数时，将关闭所有磁盘文件。
 ，当使用参数调用时，将重置与 stdin （） 或 stdout （） 关联的重定向流或管道流。
 运行时错误：
可以?


-------------------------------------------------------- KeyPgRestore ----

Restore   恢复数据
  
更改与语句一起存储的值的下一个读取位置。Data

语法
Restore [label]

描述
将下一个要读取的数据指针设置为标签之后第一个语句的第一个元素。标签必须包含在与当前正在执行的代码相同的模块中。 改变正常的从上到下的顺序，其中 是 


-------------------------------------------------------- KeyPgResume ----

Resume   恢复行
  
在跳转到错误处理程序后恢复执行的错误处理语句

语法
Resume

描述
Resume在错误处理程序（由 调用）中的传统 QB 错误处理机制中使用，以将执行返回到导致错误的行?


-------------------------------------------------------- KeyPgResumenext ----

Resume Next   恢复行
  
在跳转到错误处理程序后恢复执行的错误处理语句

语法
Resume Next

描述
Resume Next在错误处理程序（由 调用）中的传统 QB 错误处理机制中使用，以将执行返回到导致?


-------------------------------------------------------- KeyPgReturn ----

Return (From Procedure)   返回
  
控制要从过程或 返回的流语句。GoSub

语法
Return expression

描述
Return用于从过程返回。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为从过程返回。启用支持后，将识别为从 gosub 返回。
 （from p


-------------------------------------------------------- KeyPgReturnGosub ----

Return (From Gosub)   返回
  
控制要从过程或 返回的流语句。GoSub

语法
Return [ label ]

描述
Return用于从 gosub 返回。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为从过程返回。启用支持后，将识别为从 gosub 返回。
 （来?


-------------------------------------------------------- KeyPgRgb ----

RGB   RGB
  
计算高/真彩色模式的有效颜色值

语法
#define RGB(r,g,b) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (&hFF000000ul))

用法
result = RGB(red, green, blue)

参数
red
红色分量值
green
绿色分量值
blue
蓝色分量值

返回值
组合颜色。

描述
red和是 -的分量范围为 -。
该函数可用于计算在高/真彩色模式下使用的有效颜色值。它返回一个无符号 long，格式为 ，其中 ，等于以十六进制格式传递给此函数的?


-------------------------------------------------------- KeyPgRgba ----

RGBA   RGBA
  
计算有效的颜色值，包括高/真彩色模式的 alpha（透明度）

语法
#define RGBA(r,g,b,a) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (CUByte(a) Shl 24))

用法
result = RGBA(red, green, blue, alpha)

参数
red
红色分量值
green
绿色分量值
blue
蓝色分量值
alpha
阿尔法分量值

返回值
组合颜色

描述
red、和 是范围为 -的组件。
该函数可用于计算有效的颜色值，包括用于在高/真彩色模式下使用的 Alpha 通道。它返回一个无符号长整型，格式为 ，?


-------------------------------------------------------- KeyPgRight ----

Right   字符串取右边
  
返回字符串最右边的子字符串

语法
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Right[$]( str, n )

参数
str
源字符串。
n
子字符串长度，以字符为单位。

返回值
返回 最右边的子字符串。str

描述
返回从 的右侧（结尾）开始的最右边?


-------------------------------------------------------- KeyPgRmdir ----

RmDir   删目录
  
从文件系统中删除文件夹/目录

语法
Declare Function RmDir ( ByRef folder As Const String ) As Long

用法
result = RmDir( folder )

参数
folder
要删除的文件夹/目录。

返回值
成功时返回零 （0），失败时返回


-------------------------------------------------------- KeyPgRnd ----

Rnd   随机值
  
返回范围中的随机双精度数字[0, 1)

语法
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

用法
result = Rnd( seed )

参数
seed
可选参数。如果的值为零 （），则生成的最后一个随机数为 repeate。对于任何其他数字，将返回一个新的随机数。使用与 QB 兼容的算法，负数将完全重新设定生成器的种子。no 参数的默认值是返回一个新的随机数。Singleseed0.0

返回值
返回生成的随机数。

描述
基于随机种子返回区域中的许多类型（即 ），请参见。
可以使用各种不同的?


-------------------------------------------------------- KeyPgRset ----

RSet   字符串对齐向右
  
右对齐字符串缓冲区中的字符串

语法
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
RSet dst, src

参数
dst
用于将文本复制到其中的缓冲区。StringWString
src
来源或正确证明。StringWString

描述
RSetright 将文本对齐到字符串缓冲区中，用空格填充字符


-------------------------------------------------------- KeyPgRtrim ----

RTrim   字符串删空格右边
  
删除字符串右侧的周围子字符串或字符

语法
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = RTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的右侧（末尾）修剪周围的字符。如果指定，将修剪?


-------------------------------------------------------- KeyPgRun ----

Run   运行
  
将执行转移到外部程序

语法
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

用法
result = Run( program [, arguments ] )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。
arguments
要传递给程序的命令行参数。

返回


-------------------------------------------------------- KeyPgSadd ----

SAdd   取地址
  
返回指向字符串变量数据的指针

语法
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

用法
result = SAdd( str )

参数
str
用于获取 地址的字符串表达式或变量

返回值
指向?


-------------------------------------------------------- KeyPgScope ----

Scope...End Scope
  
用于开始新作用域块的语句

语法
Scope
[statements]
End Scope

描述
Scope 块允许在程序中（重新）定义和在本地使用变量。
当变量在作用域结构内（重新）定义时，可以从其（重新）定义到作用域结束使用此局部工作变量。在此期间，作用域外具有相同名称的任何变?


-------------------------------------------------------- KeyPgScreenCons ----

Screen (Console)   屏幕
  
获取给定位置的字符或颜色属性

语法
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

用法
result = Screen( row, column [, colorflag ] )

参数
row
从控制台左上角开始的从 1 开始的偏移量。
column
从控制台左上角开始的从 1 开始的偏移量。
colorflag
如果等于 0，则返回 ASCII 代码，否则返回 color 属性。如果省略，则默认为 0。

返回值
字符的 ASCII 或颜色属性。

描述
Screen返回在控制台输出的给定位置找到的字符或 color 属性。它在控制台模式和图形模式下工作。
 col


-------------------------------------------------------- KeyPgScreencontrol ----

ScreenControl   屏幕控制
  
设置或获取内部图形库设置

语法
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As Long = &h80000000, ByRef param2 As Long = &h80000000, ByRef param3 As Long = &h80000000, ByRef param4 As Long = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As LongInt, ByRef param2 As LongInt = &h80000000, ByRef param3 As LongInt = &h80000000, ByRef param4 As LongInt = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param As String)

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenControl( what [, [ param1 ] [, [ param2 ] [, [ param3 ] [, param4 ]]]] )
or,
ScreenControl( what , param )
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenControl( what , param1 [, [ param2 ] [, [ param3 ] [, param4 ]]] )
or,
ScreenControl( what , param )

参数
what
指定要执行的功能
param1
第一个整数参数，包含要在进入时设置的值或在退出时获得的值
param2
第二个整数参数，包含要在进入时设置的值或在退出时获得的值
param3
第三个整数参数，包含要在进入时设置的值或在退出时获得的值
param4
第四个整数参数，包含要在进入时设置的值或在退出时获得的值
param
字符串参数，包含要在输入时设置的文本或在退出时获得的文本

描述
此函数可用于设置或获取?


-------------------------------------------------------- KeyPgScreencopy ----

ScreenCopy   屏幕复制
  
将图形页的内容复制到另一个图形页

语法
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

用法
ScreenCopy [ from_page ] [, to_page ]

参数
from_page
要从中复制的页面
to_page
要复制到的页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
from_page是要从中复制的页面。如果省略此参数，则假定当前工作页。 是要复制到的页面。如果省略此参数，则假定当前可见的页面。页


-------------------------------------------------------- KeyPgScreenevent ----

ScreenEvent   屏幕事件
  
查询和检索系统事件。

语法
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

用法
result = ScreenEvent( [ event ] )

参数
event
指定函数应在其中存储事件数据的缓冲区。

返回值
如果有要检索的挂起事件，则返回，否则。-10

描述
此函数从内部 GfxLib 事件队列中返回最新的可用系统事件。例如，我们所说的“事件”是指任何鼠标或键盘活动。
事件数据（如果可用）将被复制


-------------------------------------------------------- KeyPgScreenglproc ----

ScreenGLProc   屏幕GL地址
  
获取 OpenGL 过程的地址

语法
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

参数
procname
要检索 地址的过程的名称

描述
此函数可用于获取任何 OpenGL 过程的地址，以用于检索指向与 OpenGL 扩展关联?


-------------------------------------------------------- KeyPgScreengraphics ----

Screen (Graphics)   屏幕
  
使用类似 QB 的模式编号初始化图形模式

语法
-lang fb|fblite 方言：-lang qb 方言：
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]

Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]
参数
mode 
是 QB 样式图形屏幕模式编号（见下文）。如果为 ，则关闭任何当前设置的图形模式，并且所有函数都将恢复其正常的控制台模式功能。有关可用模式，请参见下文。mode0
depth
是颜色深度（以每像素位数为单位）。这只对模式和更高版本有影响。和 的值是允许的。 也分别允许作为 和 的别名。如果省略，则默认为 。1481632152416328
num_pages
是您想要的视频页面数，见下文。如果省略，则默认为 。1
flags
用于选择几个东西作为图形驱动程序优先级，全屏模式。文件中预定义了一些常量，可供使用。请参阅页面 ScreenRes 以获取可用标志。fbgfx.bi
refresh_rate
请求刷新率。如果它在当前卡中不可用或省略了参数，FreeBASIC 会自动选择速率。
active_page
用于设置活?


-------------------------------------------------------- KeyPgScreeninfo ----

ScreenInfo   屏幕信息
  
检索有关当前视频模式或桌面的信息。

语法
Declare Sub ScreenInfo ( ByRef w As Long = 0, ByRef h As Long = 0, ByRef depth As Long = 0, ByRef bpp As Long = 0, ByRef pitch As Long = 0, ByRef rate As Long = 0, ByRef driver As String = "" )
Declare Sub ScreenInfo ( ByRef w As LongInt, ByRef h As LongInt, ByRef depth As LongInt = 0, ByRef bpp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef rate As LongInt = 0, ByRef driver As String = "" )

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenInfo [ w ] [, [ h ] [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]]
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenInfo w , h [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]

参数
w
宽度。
h
高度。
depth
颜色深度（以位为单位）。
bpp
每像素字节数。
pitch
每条扫描行的字节数。
rate
刷新率。
driver
驱动程序名称。

描述
此功能可用于获取当前模式信息，如图形驱动程序名称、颜色深度、屏幕大小等。
如果未设置图形模式时调用 if，它将返回有关桌面?


-------------------------------------------------------- KeyPgScreenlist ----

ScreenList   屏幕列表
  
查找可用的全屏视频模式

语法
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

用法
result = ScreenList( [ depth ] )

参数
depth
请求模式列表的颜色深度（支持的深度为 、 、 和815162432)

返回值
返回 ，当没有更多要读取的分辨率时。0

描述
它的工作方式与函数类似：对函数的第一次调用需要指定参数，它返回所请求深度的最低支持分辨率。进一步调用无参数将返回下一个解决方案。当?


-------------------------------------------------------- KeyPgScreenlock ----

ScreenLock   屏幕锁定
  
锁定工作页的帧缓冲区

语法
Declare Sub ScreenLock ( )

用法
ScreenLock

描述
FreeBASIC 的所有图形库函数都绘制到帧缓冲区，并且每次绘制时都会自动将帧缓冲区复制到实际的屏幕内存中。如果用户程序执行大量绘图，则自动刷新可能需要花费大量时间。
该功能锁定自动?


-------------------------------------------------------- KeyPgScreenptr ----

ScreenPtr   屏幕指针
  
返回指向当前工作页的帧缓冲区的指针

语法
Declare Function ScreenPtr ( ) As Any Ptr

用法
result = ScreenPtr

返回值
指向当前工作页帧缓冲内存的指针，如果未设置图形模式，则为 NULL （）。0

描述
ScreenPtr提供了一种直接读/写工作页的帧缓冲区的方法。 应在尝试任何读取或写入之前使用。返回的指针在对 或 的任何后续调用之前一直有效，这?


-------------------------------------------------------- KeyPgScreenres ----

ScreenRes   屏幕初化
  
通过指定水平和垂直分辨率来初始化图形模式

语法
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long
用法
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

参数
width,height
分别显示宽度和高度。对于全屏模式，用户应使用 检查分辨率的可用性。ScreenList
depth
颜色深度（以每像素位数为单位）。有效的颜色深度为：、、、、 和 。和 的值也允许分别作为 和 的别名。如果省略，则默认值为每像素 8 位。8 位及以下将给出调色板图像。缺省调色板将是 中使用的 256 色板的第一种颜色。12481632152416322 ^ depthScreen 13
num_pages
要创建的视频页数，缺省情况下为 。（请参阅1Screen)
flags
用于设置屏幕的各种属性，包括全屏模式和图形驱动程序优先级。（有关可用标志，请参阅标准标头“fbgfx.bi”）
refresh_rate
屏幕所需的刷新率仅对全屏模式有影响，并且仅对某些系统和驱动程序有影响。默认为适当的值，?


-------------------------------------------------------- KeyPgScreenset ----

ScreenSet   屏幕设置
  
设置当前工作和可见页面

语法
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

用法
ScreenSet [ work_page ] [, visible_page ]

参数
work_page
工作页面索引
visible_page
可见页面的索引

描述
ScreenSet允许设置当前工作页面和当前可见页面。页码范围从 到 ，其中 是 使用 或 设置图形模式时指定的页数。您可以使用此功能来实现翻页或双缓冲。
如果提供但省略 ，?


-------------------------------------------------------- KeyPgScreensync ----

ScreenSync   屏幕同步
  
将显示器更新与硬件同步

语法
Declare Function ScreenSync ( ) As Long

用法
result = ScreenSync

返回值
如果成功，则为零;如果以前未设置图形模式，则为非零。

描述
此 GfxLib 语句停止程序的执行，直到图形卡发出信号，它已结束跟踪帧并将启动新帧。
如果程序使用帧之间的这一小段时间间隔来重绘图像，则闪烁会大大减少。


-------------------------------------------------------- KeyPgScreenunlock ----

ScreenUnlock   屏幕解锁
  
解锁工作页面的帧缓冲区

语法
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

用法
ScreenUnlock [ start_line ] [, end_line ]

参数
startline
可选参数，指定要更新的第一个屏幕行。如果省略，则假定顶部屏幕行。
endline
指定要更新的最后一个屏幕行的可选参数。如果省略，则假定底部屏幕行。

描述
ScreenUnlock解锁当前工作页面（假设它以前已通过调用锁定），并允许系统重新启动定期更新屏幕。当使用 和 调用时?


-------------------------------------------------------- KeyPgSecond ----

Second   时间取秒
  
从日期序列中获取秒数 

语法
Declare Function Second ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Second( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中返回?


-------------------------------------------------------- KeyPgSeekreturn ----

Seek (Function)   文件定位
  
获取文件或设备的下一个读/写操作的位置

语法
Declare Function Seek ( ByVal filenum As Long ) As LongInt

参数
filenum
打开的文件的文件编号

返回值
下一次读取或写入操作将发生的文件位置。

描述
如果文件是在访问模式下打开的，则该位置在记录?


-------------------------------------------------------- KeyPgSeekset ----

Seek (Statement)   文件定位
  
设置文件上下一个读/写操作的位置

语法
Seek [#]filenum, position

参数
filenum
打开的文件的文件编号
position
i/o 操作的新位置

描述
设置对文件执行下一次读取或写入操作的位置。
如果文件是在访问模式下打开的，则该位置在


-------------------------------------------------------- KeyPgSelectcase ----

Select Case   选择判断
  
条件语句块

语法
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

描述
Select Case根据表达式的值执行特定代码。该表达式计算一次，并按顺序与每个表达式进行比较，直到找到匹配的表达式。执行匹配的 Case 分支中的代码，程序向下跳到块的末尾。 匹配任何尚未匹配的情


-------------------------------------------------------- KeyPgSetdate ----

SetDate   设置日期
  
设置当前系统日期

语法
Declare Function SetDate ( ByRef newdate As Const String ) As Long

用法
result = SetDate( newdate )

参数
newdate
要设置的新日期

返回值
在除 DOS 之外的所有端口上成功时返回零，或在失败时返回非零。

描述
要设置日期，只需按照以下格式之一设置格式并发送到：、、、或（是月份、是日或年）。两位数的年份数字基于 1900 年。
返回的错误代码可以在下一


-------------------------------------------------------- KeyPgSetenviron ----

SetEnviron   设置环境
  
设置系统环境变量

语法
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

用法
result = SetEnviron( varexpression )

参数
varexpression
环境变量的名称和设置采用以下（或等效）形式：varname=varstring。
 （varname 是环境变量的名称，varstring 是要设置的文本值）

返回值
如果成功，则返回零 （0），否则返回非零。

描述
修


-------------------------------------------------------- KeyPgSetmouse ----

SetMouse   设置鼠标
  
设置鼠标光标的位置和可见性

语法
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

用法
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

参数
（对于每个参数，是一个表示“无更改”的特殊值。-1
x
可选 - 设置 x 坐标
y
可选 - 设置 y 坐标
visibility
可选 - 设置可见性：表示可见，表示隐藏10
clip
可选 - 设置剪切：指示鼠标被剪辑到图形窗口，表示没有剪切10

返回值
成功时为零 （），非零表示失败。0

描述
SetMouse将设置鼠标指针的 （， ） 坐标，以及设置其可见性。鼠标位置是使用 an


-------------------------------------------------------- KeyPgSettime ----

SetTime   设置时间
  
设置当前系统时间

语法
Declare Function SetTime ( ByRef newtime As Const String ) As Long

用法
result = SetTime( newtime )

参数
newtime
设置新时间

返回值
在除 DOS 之外的所有端口上成功时返回零，或在失败时返回非零。

描述
要设置时间，请格式化日期并按以下格式之一发送到：、 、 或 （是小时、分钟和秒）。
返回的


-------------------------------------------------------- KeyPgSgn ----

Sgn   数取符号
  
返回数字的符号部分

语法
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

用法
result = Sgn( number )

参数
number
要查找标志的号码

返回值
返回 的符号部分。number
如果数字大于零，则返回 。Sgn1
如果数字等于零，则返回 。Sgn0
如果数字小于零，则返回 。Sgn-1

描述
必需的参数可以是任何有


-------------------------------------------------------- KeyPgShared ----

Shared   共享型
  
变量声明修饰符，用于指定整个模块的可见性

语法
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
[Static] Var Shared ...

描述
Shared使模块级变量在 s 和 s 内可见。
如果未在模块级变量的声明中使用，则该变量仅对该文件中的模块级代码可见（此外，堆栈上仅存储了一个声明了不带修饰符的变量，而不是在命名


-------------------------------------------------------- KeyPgShell ----

Shell   外部程序
  
向系统命令解释器发送命令

语法
Declare Function Shell ( ByRef command As Const String ) As Long

用法
result = Shell( command )

参数
command
指定要发送到命令解释器的命令的字符串。

返回值
如果无法执行该命令，


-------------------------------------------------------- KeyPgShort ----

Short   短整型
  
标准数据类型：16 位有符号

语法
Dim variable As Short

描述
16 位有符号整数数据类型


-------------------------------------------------------- KeyPgSin ----

Sin   正弦
  
返回角度的正弦

语法
Declare Function Sin ( ByVal angle As Double ) As Double

用法
result = Sin( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的正弦值作为 在 的范围内返回。angleDouble-1.01.0

描述
参数以弧度（而不是度）为单位进行度量。
对于


-------------------------------------------------------- KeyPgSingle ----

Single   单精度
  
标准数据类型：32位浮点

语法
Dim variable As Single

描述
Single 是用于存储十进制数的 32 位浮点数据类型。它们可以在 到 的范围内保存正值，也可以在 到 的范围内保存负值，或者保存为 零 （）。它们最多包含 24 位精度，或大约


-------------------------------------------------------- KeyPgSizeof ----

SizeOf   取大小
  
返回变量的大小或类型（以字节为单位）。

语法
SizeOf ( variable | DataType )

描述
运算符返回一个值：或 占用的字节数（包括 UDT 的数据字段）。
与 不同，当与固定长度的字符串（包括固定长度的 s 和 s）一起使用时，它将返回它们使用的字节数，当与可变长度字符?


-------------------------------------------------------- KeyPgSleep ----

Sleep   延迟
  
等待，直到指定的时间过去，或者按下某个键。

语法
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

用法
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

参数
amount
可选的等待毫秒数（默认为等待按键）。
keyflag
可选标志;为它指定一个值，表示正常睡眠，或指定等待不能被按键打断。01

返回值
如果不是有效值（即 or 以外的值）以指示失败或其他值，则返回。1keyflag010

描述
Sleep将等待，直到经过（如果传递了任何值）的毫秒（在 -lang qb 中可以是秒，见下文）或


-------------------------------------------------------- KeyPgSpace ----

Space   字符串空格
  
创建一个给定长度的字符串，其中填充了空格 （" ")

语法
Declare Function Space( ByVal count As Integer ) As String

用法
result = Space[$]( count )

参数
count
一种整数类型，指定要创建的字符串的长度。

返回值
创建


-------------------------------------------------------- KeyPgSpc ----

Spc   字符空格
  
输出功能，用于在写入屏幕或文件时跳过空格

语法
Spc( columns )

用法
Print Spc( spaces ) [(, | ;)] ...

参数
spaces
要跳过的空格数

描述
Spc跳过给


-------------------------------------------------------- KeyPgSqr ----

Sqr   平方根
  
返回数字的平方根

语法
Declare Function Sqr ( ByVal number As Double ) As Double

用法
result = Sqr( number )

参数
number
数字（大于或等于零）

返回值
返回参数 的平方根。
如果等于零，则返回零 （）。
如果 小于零，则返回一个表示“未定义”的特殊值，打印如 “” 或 ，则精确文本与平台相关。numbernumberSqr0.0numberSqrNaN"IND"

描述
这与将参数提高到一半的幂相同：。所需的参数可以是任何大于或等于零的有效数值表达式。
如果 将 or 传递?


-------------------------------------------------------- KeyPgStatic ----

Static   静态
  
定义具有静态存储的变量、对象和数组

语法
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]
or
Static Var symbol1 = expression [, symbol2 = expression, ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

参数
symbol
变量或数组符号名称。
array-dimensions
lower-bound To upper-bound [, ...]
或
 或空。Any [, Any...]
expression
常量表达式或常量表达式数组

描述
指定变量、对象和数组的静态存储;它们在程序启动时分配，并在退出时解除分配。对象在定义时构造一次，并在程序退出时销毁。
声明静态数组时，只能将数字


-------------------------------------------------------- KeyPgStaticMember ----

Static (Member)   静态
  
声明静态成员过程或变量

语法
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type

Dim typename.variablename As DataType [= initializer] [, ...]

[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

描述
静态成员过程
Static方法没有传递给它们的隐式实例参数。这允许它们像普通的非成员过程一样使用（例如，使用回调过程指针）。方法的一个优点是它们封装在命名空间中，因此能够访问 的实例的 


-------------------------------------------------------- KeyPgStdcall ----

stdcall   标准调用
  
在过程声明中指定 stdcall 样式的调用约定

语法
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在调用约定中，任何参数都将以列出它们的相反顺序传递（推送到堆栈上），即从右到左。过程不需要保留 或 寄存器，并且必须在堆栈返回之前清理堆


-------------------------------------------------------- KeyPgStep ----

Step   步进
  
语句修饰符。

语法
For iterator = initial_value To end_value Step increment

Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]

Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]

Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

描述
在语句中，指定循环迭代器与每个循环的增量。
在 或 语句中，指示以下


-------------------------------------------------------- KeyPgStick ----

Stick   游戏操纵杆
  
从连接的游戏设备读取轴位置

语法
Declare Function Stick ( ByVal axis As Long ) As Long

用法
result = Stick( axis )

参数
axis
要查询位置的轴数

返回值
对于指定的 ，返回一个介于 1 和 200 之间的数字，如果未连接设备，则返回零 （0）。axis

描述
Stick将检索第一个和第二个游戏设备上第一个和第二个轴的轴位置。 必须是介于 0 和 3 之间的数字，具有以下含义：axis

轴返回0游?


-------------------------------------------------------- KeyPgStop ----

Stop
  
暂停程序执行，并在结束程序之前等待按键。

语法
Declare Sub Stop ( ByVal retval As Long = 0 )

用法
Stop

参数
retval
错误代码返回系统。

描述
停止程序的执行并待命。它是作为调试的帮助提供的，因为它保留了内存并且不会关闭文件。对于正常的程?


-------------------------------------------------------- KeyPgStr ----

Str   数转字符
  
返回数字、布尔或 Unicode 字符串的字符串表示形式

语法
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

用法
result = Str[$]( number )
or
result = Str( string )

参数
number
要转换为字符串的数值表达式。
string
要转换为字符串的字符串表达式。

描述
Str将数值变量转换为其字符串表示形式。以这种方式使用时，它等效于应用于数值变量，而与函数相反，函数将字符串转换为数字。
将布尔变量?


-------------------------------------------------------- KeyPgStrig ----

Strig   游戏按钮
  
从连接的游戏设备读取按钮状态

语法
Declare Function Strig ( ByVal button As Long ) As Long

用法
result = Strig( button )

参数
button
用于查询状态的按钮

返回值
返回 -1（按下）或 0（未按下）以指示所请求的状态。button

描述
Strig将检索第一个和第二个游戏设备上第一个和第二个按钮的按钮状态。 必须是介于 0 和 7 之间的数字，并具有以下含义：button

按钮要返回的?


-------------------------------------------------------- KeyPgString ----

String   数转字符串
  
标准数据类型：8 位字符串

语法
Dim variable As String [ * size]

描述
A 是字符数组。
不带参数的声明将根据字符串的长度动态调整大小。长度范围可以从 0 字节到 2 GB。描述符包含指向实际字符串、字符串长度以及为其分配的空间量的指针。 将返回指向描述符的


-------------------------------------------------------- KeyPgStringFunction ----

String (Function)   数转字符串
  
创建特定长度的字符串并用特定字符填充

语法
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

用法
result = String[$]( count, ch_code )
或
result = String[$]( count, ch )

参数
count
一个整数，指定要创建的字符串的长度。
ch_code
指定要用于填充字符串的 ASCII 字符代码的长字符代码。
ch
一个字符串，其第一个字符将用于填充字符串。

返回值


-------------------------------------------------------- KeyPgSub ----

Sub   过程
  
定义过程

语法
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub

[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

参数
identifier：子例程
的名称：外部可见的（对链接器）名称括在引号中
：参数[，参数[，...]]
 ：external_identifierparameter_listparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程中引用的变量的名称。如果参数是数组，则标识符后必须跟空括号。
 ：变量
的类型 ：如果调用中未指定任何参数，则参数的值typedefault_value
statements：组成子例程主体的一个或多个语句

描述
子例程是一个代码块，可以随时从程序调用。此代码可能需要多次执行，而子例程提


-------------------------------------------------------- KeyPgSubPtr ----

Sub Pointer   过程
  
存储指向过程的指针的数据类型Sub

语法
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

参数
parameter_list： 参数[， 参数[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程
中引用的变量的名称：变量
的类型：如果调用中未指定任何参数，则参数的值typedefault_value
intializer：要设置为初始值的子例程的地址

描述
指针是存储已编译代码的内存位置的过程指针。如果未给出初始值，则默认初始值为零 （0）。
过程的内存地址可以通过获取


-------------------------------------------------------- KeyPgSwap ----

Swap   交换
  
交换两个变量的值

语法
Declare Sub Swap  ( ByRef a As Any, ByRef b As Any )

参数
a
要交换的变量。
b
要交换的变量。

描述
交换两个变量的值，包括 UDT 实例（交换所有数据成员）。
 注： 当数据由指针单独引用或在描述性结构（例如 UDT）中引用时，仅交换指针的值或描述性结构的内容，而不访?


-------------------------------------------------------- KeyPgSystem ----

System   系统
  
关闭所有打开的文件并结束程序

语法
Declare Sub System ( ByVal retval As Long = 0 )

用法
System( [ retval ] )

参数
retval
错误代码返回系统。

描述
关闭所有打开的文件，退出程序，然后返回到操作系统。可以指定可选的返回值（整数）以向系统返回错误代码。如果未给出返回值，则自动返回值 0。这与 和 此处相同，用于较旧的


-------------------------------------------------------- KeyPgTab ----

Tab
  
写入屏幕或文件时设置列

语法
Tab( col_num )

用法
Print Tab( column ) [(, | ;)] ...

参数
column
1-要移动到的基于列号

描述
Tab在将光标移动到屏幕或文件时将光标移动到给定数字。在新旧光标位置之间跳过的字符单元格保持不变。
如?


-------------------------------------------------------- KeyPgTan ----

Tan   正切
  
返回角度的切线

语法
Declare Function Tan ( ByVal angle As Double ) As Double

用法
result = Tan( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的切线作为 -无穷大到无穷大范围内的一个返回。angleDouble

描述
参数以弧度（而不是度）为单位进行度量?


-------------------------------------------------------- KeyPgThen ----
Then   然
Description



-------------------------------------------------------- KeyPgThis ----

This   本对象
  
将隐藏实例参数传递给 或 中的非静态成员函数TypeClass

语法
This.fieldname
or
With This
.fieldname
End With

描述
This是对 或的实例的引用，该实例（通过隐藏）传递给该类型或类的所有非静态成员函数。非静态成员函数是在 或 的主体内声明的过程，包括 、、、赋值或 和 过程。
附加参数的数据类


-------------------------------------------------------- KeyPgThiscall ----

__Thiscall
  
在成员过程声明中指定 Thiscall 调用约定

语法
Type typename
declare Sub name __Thiscall [Overload] [Alias "alias"] ( parameters )
declare Function name __Thiscall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type
End Type

描述
在成员过程声明中，指定过程将使用调用约定。在 Thiscall 调用约定中，隐式和隐藏的 This 参数在寄存器中传递。
调用约定仅适用于 32 位 x86 目标，并且仅部分实现。它在使用 -gen gcc 后端


-------------------------------------------------------- KeyPgThreadCall ----

ThreadCall   线程调用
  
在单独的执行线程
中启动一个带有参数的用户定义过程 Threadcall 在内部使用 LibFFI：使用此功能编写程序的人应小心遵循 LibFFI 的许可证，该许可证可在 http://github.com/atgreen/libffi/blob/master/LICENSE 中找到。

语法
Function ThreadCall subname([paramlist]) As Any Ptr

用法
threadid = ThreadCall subname([paramlist])

参数
subname
子例程的名称
paramlist
要传递给子例程的参数列表，与普通的子调用一样。

返回值
Threadcall 返回所创建线程的句柄，或在失败时返回空指针 （）。Any Ptr0

描述
例如，Threadcall 创建一个线程，该线程与调用它的代码同时运行。通过?


-------------------------------------------------------- KeyPgThreadCreate ----

ThreadCreate   线程创建
  
在单独的执行线程中启动用户定义过程

语法
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

用法
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

参数
procptr
指向旨在用作线程的指针（请参阅获取指向 sub 的指针）。sub 必须具有以下签名（相同的参数、相同的调用约定）才能与 procptr 兼容：SubOperator Procptr (Procedure Pointer)
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
旨在用作线程的参数。FreeBASIC 期望此参数存在，但不得省略！Any PtrSub
param
Any Ptr将通过其 userdata 参数传递给所指向的线程的参数。例如，这可以是指向结构的指针，也可以是包含各种信息的数组，供线程 sub 使用。如果未给出参数，则 （零） 将改为传递给线程子的 userdata 参数。Subprocptr0
stack_size
要为此线程的堆栈保留的可选字节数。

返回值
ThreadCreate 向创建的线程返回句柄，或在失败时?


-------------------------------------------------------- KeyPgThreadDetach ----

ThreadDetach   线程终止
  
释放线程句柄而不等待线程完成

语法
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

用法
#include "fbthread.bi"
ThreadDetach( id )

参数
id
Any Ptr由 或 创建的线程的句柄ThreadCreateThreadCall

描述
ThreadDetach 释放与 或 返回的线程句柄关联的资源。线程句柄将被 ThreadDetach 销毁，并且无法再使用。
与 不同，ThreadDetach 不会等待线程完成，线程执行会独立继续。


-------------------------------------------------------- KeyPgThreadSelf ----

ThreadSelf
  
返回当前线程的线程句柄。

语法
Declare Function ThreadSelf ( ) As Any Ptr

用法
#include "fbthread.bi"
result = ThreadSelf

返回值
ThreadSelf 返回当前线程的句柄。Any Ptr

描述
ThreadSelf 用于获取当前线程的句柄。
此函数可以唯一标识现有线程：
-如果有多个线程，并且一个线程已完成，则可以重用该句柄。
 - 因此，对于所有仍在运行的唯一线程，句?


-------------------------------------------------------- KeyPgThreadWait ----

ThreadWait   线程等待
  
等待线程完成执行并释放线程句柄

语法
Declare Sub ThreadWait ( ByVal id As Any Ptr )

用法
ThreadWait( id )

参数
id
Any Ptr由 或 创建的线程的句柄ThreadCreateThreadCall

描述
ThreadWait 等待由线程创建或完成执行，然后释放与线程句柄关联的资源。在 指定的线程结束之前，ThreadWait 不会返回。
在等待期间，调用方不会消耗 CPU 时间。
为了释


-------------------------------------------------------- KeyPgTime ----

Time   时间字符
  
以字符串形式返回当前系统时间

语法
Declare Function Time ( ) As String

用法
result = Time[$]

返回值
返回当前系统时间


-------------------------------------------------------- KeyPgTimer ----

Timer   时间计时值
  
返回自静态参考点以来经过的时间量。

语法
Declare Function Timer ( ) As Double

用法
result = Timer

返回值
返回自静态参考点以来的时间（以秒为单位）的精度结果。Double

描述
该函数对于了解一段代码的运行时间或控制代码的计时非常有用。若要了解程序中两点之间经过了多少时间，可以记录起点和终点处的值，然后从结束值中减


-------------------------------------------------------- KeyPgTimeserial ----

TimeSerial   时间序列值
  
获取指定小时、分钟和秒的日期序列

语法
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

用法
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

参数
hour
小时数，在 0-23 范围内
minute
分钟数
second
秒数

返回值
返回一个日期序列，其中包含由 和 参数中的值形成的时间。返回的日期序列没有整数部分。hoursminut


-------------------------------------------------------- KeyPgTimeValue ----

TimeValue   时间数值
  
从时间字符串获取日期序列

语法
Declare Function TimeValue ( ByRef timestring As String ) As Double

用法
#include "vbcompat.bi"
result = TimeValue( timestring )

参数
timestring
要转换的字符串

返回值
从时间字符串返回日期序列。

描述
时间字符串必须采用以下格式，否则
编译器


-------------------------------------------------------- KeyPgTo ----

To   到
  
用于指定范围的语句修饰符。

语法
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

描述
关键字用于定义特定的数值范围。仅当与 和 语句一起使用时，此关键字才有效。
在第一种语法中，关键字定义语句中迭代器的初始值和结束值。
在第二种语法中，关键字定义了用于比较的下限和?


-------------------------------------------------------- KeyPgTransGfx ----

Trans   透明
  
图形语句的参数，该语句选择透明背景作为 blitting 方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

参数
Trans
必填。

描述
Trans选择透明背景作为删除图像缓冲区的方法。这与方法类似，但会跳过包含蒙版颜色的像素。
对于 8 位彩色图像，蒙版颜色为调色板索引 0。对于 16/32 位彩色图像，蒙版颜色为


-------------------------------------------------------- KeyPgTrim ----

Trim   字符串删头尾
  
删除字符串左侧和右侧的周围子字符串或字符

语法
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = Trim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的左侧（开头）和右侧（结尾）修剪周围的字符。如果指定?


-------------------------------------------------------- KeyPgTrue ----

True   真
  
编译器设置的固有常量

语法
Const True As Boolean

描述
在使用位置


-------------------------------------------------------- KeyPgType ----

Type   类型
  
声明用户定义类型。

语法
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type

Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]

Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType

fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]

As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...

Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union

...
End Type

描述
Type用于声明包含一个或多个数据字段的自定义数据类型，包括整数类型、浮点类型、固定大小或可变长度（动态）数组、固定大小或可变长度字符串、位字段或其他用户定义类型。
类型支持与面向对象


-------------------------------------------------------- KeyPgTypeAlias ----

Type (Alias)   类型
  
声明类型的备用名称

语法
Type typename As symbol

参数
typename 
新的备用名称。
symbol 
要与 关联的符号或数据类型声明。typename

描述
symbol可以指任何已声明的数据类型，包括内置数据类型或指针、声明、声明或声明。
类型别名可用于允许在过程声明中对参数进行前向声明，但只能与指针（无论其传递模式


-------------------------------------------------------- KeyPgTypeof ----

TypeOf   取类型
  
返回变量的类型。

语法
TypeOf ( variable | datatype )

参数
variable
任何类型的变量。
datatype
数据类型。

描述
TypeOf是编译器内部函数，它将自身替换为传递给它的变量的类型。它可以用于变量声明（示例1），也可以用于预处理器中进行比较，打印。（示例 2）
还支持传递任何内部数据类型或


-------------------------------------------------------- KeyPgTypeTemp ----

Temporary Types
  
创建用户定义类型的临时副本

语法
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

参数
initializers
类型的初始值（或仅第一个）
typename
或 的名称TypeUnion

返回值
类型的临时副本。

描述
用于创建临时类型。如果未明确给出，则将尽可能从其用法中推断出来。临时副本的用法可能包括将其赋给变量、将其作为参数传递给过程或将其作为过程的值返回。



-------------------------------------------------------- KeyPgUbound ----

UBound   数组取上限
  
返回数组维度的上限

语法
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = UBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
要获取的上限的维度

返回值
返回数组维度的上限。
描述
UBound返回可用作数组特定维度的索引的最大值。
数组维度从一 （） 到 的编号，其中维度的总数。如果未指定，将返回第一个维度的上限。
如果为零 （0）?


-------------------------------------------------------- KeyPgUbyte ----

UByte   无符号字节
  
标准数据类型：8 位无符号。
等效于 。Unsigned Byte

语法
Dim variable As UByte

描述
8 位无符号


-------------------------------------------------------- KeyPgUcase ----

UCase   字符串大写
  
返回字符串的大写副本

语法
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = UCase[$]( str [ , mode ] )

参数
str
要转换为大写的字符串。
mode
转换模式：0 = 当前区域设置，1 = 仅 ASCII

返回值
的大写副本。str



-------------------------------------------------------- KeyPgUinteger ----

UInteger   无符号整型
  
标准数据类型：32 位或 64 位无符号，大小与 相同。
等效于 。SizeOf(Any Ptr)Unsigned Integer

语法
Dim variable As UInteger
Dim variable As UInteger<bits>

参数
bits
一个数值常量表达式，指示所需无符号整数位的大小。允许的值为 、 或 。8163264

描述
32 位或 64 位无符号整数数据类型，具体取决于平台。
如果给定了显式位大小，则提供了一种数据类型，该数据类型最多?


-------------------------------------------------------- KeyPgUlong ----

ULong   无符号长型
  
标准数据类型：32 位无符号整数。
等效于 。Unsigned Long

语法
Dim variable As ULong

描述
32 位无符号整数数据类型。?


-------------------------------------------------------- KeyPgUlongint ----

ULongInt   无符号长整型
  
标准数据类型：64 位无符号。
等效于 。Unsigned LongInt

语法
Dim variable As ULongInt

描述
64 位无符号整数数据类型。可以保存从 0 到 18 4


-------------------------------------------------------- KeyPgUnion ----

Union   联合型
  
声明联合用户定义类型。

语法
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

参数
typename
的名称Union
fieldname
数据字段成员的名称
member function declaration
任何受支持的成员函数

描述
数据元素占用内存中的公用空间（对于 的所有数据元素，内存地址相同）。的数据元素可以是简单的数据字段，也可以是未命名的数据字段块。
的大小是最大数据元素的大


-------------------------------------------------------- KeyPgUnlock ----

Unlock   解锁
  
删除文件上的先前访问限制（锁定）

语法
Unlock #filenum, record
Unlock #filenum, start To end

参数
filenum
用于文件的文件编号。Open
record
要解锁的记录（文件）。Random
start
要解锁的范围中的第一个字节位置（文件）。Binary
end
要解锁的范围中的最后一个字节位置（文件）。Binary

描述
Unlock删?


-------------------------------------------------------- KeyPgUnsigned ----

Unsigned   无符号数
  
整数数据类型修饰符

语法
Dim variable As Unsigned {integer-based data type}

描述
强制基于整数的数据


-------------------------------------------------------- KeyPgUntil ----

Until   直到
  
语句中使用的条件子句。Do..Loop

语法
Do Until condition
or
Loop Until condition

描述
Until与?


-------------------------------------------------------- KeyPgUshort ----

UShort   短整型
  
标准数据类型：16 位无符号。
等效于 。Unsigned Short

语法
Dim variable As UShort

描述
16 位无符号整


-------------------------------------------------------- KeyPgUsing ----

Using (Namespaces)   引用
  
将命名空间符号引入当前范围

语法
Using identifier [, identifier [, ...] ]

参数
identifier：要使用的名称。Namespace

描述
该命令允许访问给定命名空间中的所有符号，而无需该命名空间的名称前缀。与 C++ 不同，但与 C# 不同，在 之后不需要关键字，因为不能从命名空间继承单个符号。
只允许在?


-------------------------------------------------------- KeyPgVaArg ----

va_arg   变参表
  
从变量参数列表中返回当前参数。

语法
variable = va_arg ( argument_list, datatype )

描述
该宏允许在函数中使用可变数量的参数：va_arg
 	va_arg返回列表中的当前参数，其预期数据类型为 。argument_listdatatype
在首次使用之前，必须使用命令进行初始化。va_argargument_li


-------------------------------------------------------- KeyPgVaFirst ----

va_first   变参首个
  
返回指向变量参数列表中第一个参数的指针

语法
pointer_variable = va_first()

描述
该函数提供一个非类型化的指针值，该值指向传递给函数的第一个变量参


-------------------------------------------------------- KeyPgVal ----

Val   数取值
  
将字符串转换为浮点数

语法
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

用法
result = Val( strnum )

参数
strnum
包含要转换的数字的字符串

返回值
返回转换后的精度数字
 如果字符串的第一个字符无效，将返回 。DoubleVal0

描述
Val("10")会回来，还会再来。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。科


-------------------------------------------------------- KeyPgValint ----

ValInt   数取整值
  
将字符串转换为 32 位整数

语法
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

用法
result = ValInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的值 如果字符串
的第一个字符无效，将返回 。LongValInt0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。任?


-------------------------------------------------------- KeyPgVallng ----

ValLng   数取长值
  
将字符串转换为 64 位整数

语法
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

用法
result = ValLng ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的 a 如果字符串
的第一个字符无效，将返回 。LongIntValLng0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。任何


-------------------------------------------------------- KeyPgValuint ----

ValUInt   数取无符整型值
  
将字符串转换为无符号的 32 位整数

语法
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

用法
result = ValUInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的值 如果字符串
的第一个字符无效，将返回 。ULongValUInt0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停


-------------------------------------------------------- KeyPgValulng ----

ValULng   数取无符长型值
  
将字符串转换为无符号的 64 位整数

语法
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

用法
result = ValULng ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的 a 如果字符串
的第一个字符无效，将返回 。ULongIntValULng0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停?


-------------------------------------------------------- KeyPgVaNext ----

va_next   变参次个
  
返回指向变量参数列表中下一个参数的指针

语法
Argument_Pointer = va_next ( Argument_List, datatype )

描述
该宏提供了一个指针值，指向列表中的下一个参数，即当前参数的类型。
使用 时不受支持。使用可?


-------------------------------------------------------- KeyPgVar ----

Var   变量
  
声明一个变量，其类型是从初始值设定项表达式中隐含的

语法
[Static] Var [Shared] symbolname = expression[, symbolname = expression]

描述
Var声明一个变量，其类型是从初始值设定项表达式中隐含的。在声明中指定显式类型是非法的。初始值设定项表达式可以是常量，也可以是任何类型的任何变量。
注意：不支持 ，因为


-------------------------------------------------------- KeyPgViewgraphics ----

View (Graphics)
  
为图形关键字设置新的物理坐标映射和修剪区域

语法
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

参数
x1 As Integer,y1 As Integer
视口的一角相对于屏幕左上角的水平和垂直偏移量（以像素为单位）。
x2 As Integer,y2 As Integer
视口另一角相对于屏幕左上角的水平和垂直偏移量（以像素为单位）。
fill_color As ULong
用于填充新视口的颜色。
border_color As ULong
要在新视口周围绘制的边框的颜色。

描述
视口或剪切区域是图形屏幕的矩形区域，在此区域之外不会执行图形绘制。也就是说，将?


-------------------------------------------------------- KeyPgViewtext ----

View Print
  
设置屏幕的可打印文本区域

语法
View Print [ firstrow To lastrow ]

参数
firstrow
第一行打印区域
lastrow
打印区域的最后一行

描述
将屏幕上的文本打印区域（在控制台模式或图形模式下）的边界设置为从第一个开始到最后一个（包括最后


-------------------------------------------------------- KeyPgVirtual ----

Virtual   虚拟事件
  
声明虚拟方法

语法
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

描述
虚拟方法是可以被从声明它们的类型派生的数据类型覆盖的方法，从而允许动态多态性。与方法相反，虚拟方法必须具有实现，该实现在未覆盖虚拟方法时使用。
派生类型可以通过声明具有相同标识符和?


-------------------------------------------------------- KeyPgVisPrivate ----

Private: (Access Control)
  
在 或 中指定私有成员访问控制TypeClass

语法
Type typename
Private:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Private:表示关注它具有私有访问权限。私有成员只能从 或 的成员函数内部访问（因此，对于从 或 派生的类型或类，不能从成员函数内部访问）。
在给出不同的访问控制说明符?


-------------------------------------------------------- KeyPgVisProtected ----

Protected: (Access Control)
  
在 或 中指定受保护的成员访问控制TypeClass

语法
Type typename
Protected:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Protected:表示关注它具有受保护的访问权限。受保护的成员只能从 or 的成员函数内部访问，也可以从 或 派生的类进行访问。
以下内容受到保护，直到给出不同的访问控制说?


-------------------------------------------------------- KeyPgVisPublic ----

Public: (Access Control)
  
在 或 中指定公共成员访问控制TypeClass

语法
Type typename
Public:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Public:表示关注它具有公共访问权限。公共成员可通过使用 或 访问。
在给出不同的访问控制说明符之前，以下各项是公共的，如果未提供
成员访问控制说明符，则
默?


-------------------------------------------------------- KeyPgWait ----

Wait   等待
  
从带有掩码的硬件端口读取。

语法
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

用法
Wait port, and_value [, xor_value]

参数
port
要读取的端口。
and_mask
掩码值为 和 端口值 与。
xor_mask
掩码值为 Xor 端口值。

返回值
成功时为 0，失败时为 -1。

描述



-------------------------------------------------------- KeyPgWbin ----

WBin   宽字符二进制
  
返回数字的二进制（Unicode）表示形式WString

语法
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString

Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WBin( number [, digits] )

参数
number
计算为整数的整数或表达式。
digits
要返回的可选位数。

返回值
返回 的二进制表示形式 被截断或填充零 （） 以适合位数（如果已指定）。WStringnumber"0"

描述
返回一个 （Unicode），表示整数 的二进制值。二进制数字的范围从 到 。
如果指定 > ，则结果 w


-------------------------------------------------------- KeyPgWchr ----

WChr   取宽字符
  
返回包含一个或多个 Unicode 字符的宽字符字符串

语法
Declare Function Wchr ( ByVal ch As Integer [, ... ] ) As WString

用法
result = WChr( ch0 [, ch1 ... chN ] )

参数
ch
字符的 Unicode 整数值。

返回值
返回宽字符字符串。

描述
WChr返回一个宽字符字符串，其中包含由传递给它的 Unicode 值所表示的字符。
当与数值常量或文本一起使用时，将在编译时计算结果，因此可以在变量


-------------------------------------------------------- KeyPgWeekday ----

Weekday   工作日
  
从日期序列中获取一周中的天数

语法
Declare Function Weekday ( ByVal serial As Double , ByVal firstdayofweek As Long = fbusesystem ) As Long

用法
#include "vbcompat.bi"
result = Weekday( date_serial [, firstdayofweek ] )

参数
date_serial
日期
firstdayofweek
一周的第一天

返回值
从包含日期序列格式的日期的变量中返回星期日编号。

描述
工作日值必须在 1-7 范围内，其含义取决于参数
是可选的。firstdayofweekfirstdayofweek

价值一周的第一天不断省略星期日 0本地设置fb


-------------------------------------------------------- KeyPgWeekdayname ----

WeekdayName   工作日名
  
从其整数表示形式中获取工作日的名称

语法
Declare Function WeekdayName ( ByVal weekday As , ByVal abbreviate As Long = 0, ByVal firstdayofweek As Long = fbUseSystem ) As String

用法
#include "vbcompat.bi"
result = WeekdayName( weekday [, abbreviate [, firstdayofweek ] ] )

参数
weekday
星期几
abbreviate
标志，指示名称应缩写
firstdayofweek
一周的第一天

返回值
从值 1 到 7 返回本地操作系统语言星期几名称。weekday

描述
如何解释取决于参数。
如果为 true，则返回 3 个字母的缩写，如果为 false 或省略，则返回整个名称。
是指定如下的可选参数：weekda


-------------------------------------------------------- KeyPgWend ----

Wend   继续
  
控制流语句。

语法
While [condition]
[statement block]
Wend

描述
Wend指定循环块的


-------------------------------------------------------- KeyPgWhex ----

WHex   宽字符16进制
  
返回数字的十六进制（Unicode）表示形式WString

语法
Declare Function WHex ( ByVal number As UByte ) As WString
Declare Function WHex ( ByVal number As UShort ) As WString
Declare Function WHex ( ByVal number As ULong ) As WString
Declare Function WHex ( ByVal number As ULongInt ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr ) As WString

Declare Function WHex ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WHex( number [, digits ] )

参数
number
计算为整数的整数或表达式。
digits
要返回的可选位数。

返回值
返回 的十六进制表示形式 被截断或填充零 （） 以适合位数（如果已指定）。WStringnumber"0"

描述
十六进制数字的范围为 -或 -。
如果指定 > ，则得到的将恰?


-------------------------------------------------------- KeyPgWhile ----

While   当条件
  
控制流语句。

语法
Do While condition
[statement block]
Loop
or
Do
[statement block]
Loop While condition
or
While [condition]
[statement block]
Wend

描述
While指定循环块在以下计算结果为 true 时将继续。在每次?


-------------------------------------------------------- KeyPgWhilewend ----

While...Wend
  
用于循环的控制流语句

语法
While [condition]
[statement block]
Wend

描述
如果表达式条件的计算结果为 true，则该语句将导致 中的以下一组语句重复执行。
如果在首次执行语句时计算结果为 false，则跳过 ，并在包含语句后立即恢复执行。
如果在语句块内遇到语句，则循


-------------------------------------------------------- KeyPgWidth ----

Width
  
设置或获取显示的行数和列数

语法
Width [columns] [, rows]
Width LPrint columns
Width { #filenum | devicename }, columns
result = Width( )

参数
columns
用于输出的列（以字符为单位）
rows
用于输出的行（以字符为单位）
filenum
要申请的文件编号
devicename
要应用的设备名称

返回值
返回一个 32 位，其中高字是行数，低字是当前设置的列数。Long

描述
设置输出设备（控制台、打印机或文本文件）的最大字符列数。如果发送到设备的文本达到宽度，则会生成自动回车符


-------------------------------------------------------- KeyPgWindow ----

Window   窗口
  
为当前视口设置新的视图坐标映射

语法
Window [ [Screen] ( x1, y1 )-( x2, y2 ) ]

参数
Screen
指定 y 坐标的可选参数从上到下递增。
( x1, y1 )-( x2, y2 )
与当前视口的相对角对应的新浮点值。如果省略，则删除坐标映射。Window

描述
Window用于定义新的坐标系。 并且是要映射到当前视口相对角落的新坐标;传递给图形基元语句的所有未来坐标都将受到此新映射的影响。如果


-------------------------------------------------------- KeyPgWindowtitle ----

WindowTitle   窗口标题
  
设置程序窗口标题

语法
Declare Sub WindowTitle ( ByRef title As Const String )

用法
WindowTitle title

参数
title
要指定为新窗口标题的字符串。

描述
此语句对于更改程序窗口标题很有用。如果程序已在窗口模式下运行，则新标题集将立即变为活动状态，否则将成为由对 or 语句的后续调用产生的任何窗口的新标题。如果在设置新?


-------------------------------------------------------- KeyPgWinput ----

Winput()
  
从控制台或文件中读取大量宽字符

语法
Declare Function WInput( ByVal num As Integer ) As WString
Declare Function WInput( ByVal num As Integer, ByVal filenum As Long = 0 ) As WString

用法
result = WInput( num [, [#]filenum } )

参数
num
要读取的字符数。
filenum
绑定文件或设备的文件编号。

返回值
返回读取的字符的 WString。

描述
从控制台或 指定的绑定文件/设备读取许多宽字符。
第一个版本等待并从键盘缓冲区读取宽


-------------------------------------------------------- KeyPgWith ----

With   关联 
  
语句块，以允许隐式访问用户定义类型变量中的字段

语法
With user_defined_var
statements
End With

描述
该块允许在引用用户定义的变量的字段时省略其名称。然后，可以在字段之前仅使用一个句点（）访问字段，例如，如果包含称为“element”的字段元素，则可以在块中以“”的形式访问?


-------------------------------------------------------- KeyPgWoct ----

WOct   宽字符8进制
  
将数字转换为 Unicode 八进制表示形式

语法
Declare Function WOct ( ByVal number As UByte ) As WString
Declare Function WOct ( ByVal number As UShort ) As WString
Declare Function WOct ( ByVal number As ULong ) As WString
Declare Function WOct ( ByVal number As ULongInt ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr ) As WString

Declare Function WOct ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WOct( number [, digits ] )

参数
number
要转换为八进制表示的数字。
digits
返回的字符串中所需的位数。

返回值
数字的 Unicode 八进制表示形式，截断或用零 （） 填充以适合位数（如果指定）。"0"

描述
返回 的八进制（Unicode）表示形式。八位数字的范围从 到 。
如果指定 > ，则结果字符串将恰好是


-------------------------------------------------------- KeyPgWrite ----

Write   写入
  
将逗号分隔的值列表输出到屏幕

语法
Write [ expressionlist ]

参数
expressionlist
要打印的以逗号分隔的项目列表

描述
将值输出到屏幕。这些值用逗号分隔，字符串括在双引号中。如果绝对值小于 1 的数值，则以零 （） 为前缀（例如，）。绝对值大于或等于 的浮点数，或?


-------------------------------------------------------- KeyPgWriteFile ----

Write (File Access)   写入
  
文件访问说明符

语法
Open filename As String For Binary Access Write As #filenum As Integer

描述
语句中子句的说明符。 指定?


-------------------------------------------------------- KeyPgWritePp ----

Write #   写入
  
将逗号分隔的值列表输出到文本文件或设备

语法
Write # filenum , [ expressionlist ]

参数
filenum
为 或 打开的打开的文件或设备的文件编号。OutputAppend
expressionlist
要打印的以逗号分隔的项目列表

描述
将中的值输出到绑定到 的文本文件或设备中。这些值用逗号分隔，字符串括在双引号中。如果未给出任何值（例如，的值将输出为），则大于零（）和小


-------------------------------------------------------- KeyPgWspace ----

WSpace   宽字符空格
  
创建一个给定长度的 ，其中填充了空格 （WString" ")

语法
Declare Function WSpace( ByVal count As Integer ) As WString

用法
result = WSpace( count )

参数
count
一种整数类型，指定要创建的字符串的长度。

返回值
创建的 .如果 .WStringcount <


-------------------------------------------------------- KeyPgWstr ----

WStr   宽字符转换
  
返回数字或 ASCII 字符串的宽字符字符串表示形式

语法
Declare Function WStr ( ByVal n As Byte ) As WString
Declare Function WStr ( ByVal n As UByte ) As WString
Declare Function WStr ( ByVal n As Short ) As WString
Declare Function WStr ( ByVal n As UShort ) As WString
Declare Function WStr ( ByVal n As Long ) As WString
Declare Function WStr ( ByVal n As ULong ) As WString
Declare Function WStr ( ByVal n As LongInt ) As WString
Declare Function WStr ( ByVal n As ULongInt ) As WString
Declare Function WStr ( ByVal n As Single ) As WString
Declare Function WStr ( ByVal n As Double ) As WString
Declare Function WStr ( ByRef str As Const String ) As WString
Declare Function WStr ( ByVal str As Const WString Ptr ) As WString

用法
result = WStr( number )
or
result = WStr( string )

参数
number
要转换为宽字符字符串的数值表达式。
string
要转换为宽字符字符串的字符串表达式。

返回值
返回数值或字符串表达式的宽字符表示形式。

描述
WStr将数值?


-------------------------------------------------------- KeyPgWstring ----
WStr   宽字?
Description



-------------------------------------------------------- KeyPgWstringFunction ----

Wstring (Function)   宽字符串
  
用特定宽度的某个宽字符的一定长度填充 aWString

语法
Declare Function WString ( ByVal count As Integer, ByVal ch_code As Long ) As WString
Declare Function WString ( ByVal count As Integer, ByRef ch As Const WString ) As WString

用法
result = WString( count, ch_code )
or
result = WString( count, ch )

参数
count
指定要创建的字符串的长度。Integer
ch_code
指定要用于填充字符串的 Unicode 字符。Long
ch
第一个字符将用于填充字符串的 A。WString

返回值
创建的 .如果是空字符串或 ， 则将返回空字符串。WStrin


-------------------------------------------------------- KeyPgXorGfx ----

Xor   异或
  
图形语句的参数，该语句使用按位作为 blitting 方法PutXor

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Xor

参数
Xor
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有蒙版颜色，尽管颜色值（在全彩色模式下）不会产?


-------------------------------------------------------- KeyPgYear ----

Year   日期取年份
  
从日期序列中获取年份

语法
Declare Function Year ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Year( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回年份?


-------------------------------------------------------- KeyPgZstring ----

ZString   Z字符串
  
标准数据类型：8 位字符串

语法
Dim variable As ZString * size
Dim variable As ZString Ptr

描述
A 是 C 样式的固定大小的字符数组。它没有描述符，因此可以更快地计算其长度，以将其作为参数传递给函数。当变量具有固定的（数值常量或可在编译时计算的表达式）时，FreeBASIC 通过将内容截

-------------------------------------------------------- KeyWin32AbnormalTermination ----
AbnormalTermination    AbnormalTermination函数指示尝试  -  最后语句的尝试块是否正常终止。该函数只能从尝试  -  最后语句的最后块内调用。
语法



-------------------------------------------------------- KeyWin32AbortDoc ----
AbortDoc    AbortDoc函数停止当前打印作业，并擦除自上次调用StartDoc函数以来绘制的所有内容。此函数替换ABORTDOC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，则返回值为SP_ERROR。要获取扩展错误信息，请调用GetLastError.
描述
如果发


-------------------------------------------------------- KeyWin32AbortPath ----
AbortPath    AbortPath函数关闭并丢弃指定设备上下文中的任何路径。
语法
参数
【HDC】标识将丢弃路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果在给定的设备上下


-------------------------------------------------------- KeyWin32AbortPrinter ----
AbortPrinter    如果打印机配置为假脱机，AbortPrinter函数将删除打印机的假脱机文件。
语法
参数
【hPrinter】标识从中删除假脱机文件的打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果打


-------------------------------------------------------- KeyWin32AbortProc ----
AbortProc    AbortProc函数是一个应用程序定义的回调函数，在假脱机期间要取消打印作业时调用该函数。
语法
参数
【HDC】标识打印作业的设备上下文。【// error value】指定是否发生错误。如果没有发生错误，该参数为零;如果Windows打印管理器目前磁盘空间不足并且应用程序等待更多的磁盘空间


-------------------------------------------------------- KeyWin32AbortSystemShutdown ----
AbortSystemShutdown    AbortSystemShutdown函数使用InitiateSystemShutdown函数停止系统关机。
语法
参数
【lpMachineName】指向指定要停止关机的计算机的网络名称的以空值终止的字符串的指针。如果【lpMachineName】为NULL或指向空字符串，则该函数将停止本地计算机上的关闭。



-------------------------------------------------------- KeyWin32AccessCheck ----
AccessCheck    服务器应用程序使用AccessCheck函数，以根据与对象关联的访问控制来检查客户端对对象的访问。
语法
参数
【pSecurityDescriptor】指向检查访问的SECURITY_DESCRIPTOR结构的指针。【ClientToken】标识表示客户端尝试访问的访问令牌。必须从通信会话层__获取


-------------------------------------------------------- KeyWin32AccessCheckAndAuditAlarm ----
AccessCheckAndAuditAlarm    AccessCheckAndAuditAlarm函数执行访问验证并生成相应的审核消息。应用程序还可以使用此函数来确定客户端进程是否拥有必需的权限。此函数通常由模拟客户端进程的服务器应用程序使用。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向以null结尾的字符串，指定调用函数__的子系统的名称，例如“DEBUG”或“WIN32”。【HandleId】指向一个唯一的32位值，表示客户端对象的句柄


-------------------------------------------------------- KeyWin32AcsLan ----
AcsLanAcsLan函数用于使用数据链接控制（DLC）协议与其他计算机或网络外围设备（如打印机）进行通信。呼叫者通过填写命令控制块（CCB），然后调用AcsLan来提交请求。通过AcsLan提交的命令可以同步或异步完成。DLC驱动程序，而不是调用者，确定命令如何完成。这与Netbios的 函数不同，例如，它具有按照调用者的请求同步或异步完成的命令。NT DLC和CCB2接口之间有一些区别。最显着的区别是缓冲池必须在开放适配器实例的基础上进行指定，而不是按SAP规定（服务访问点）。使用DIR.OPEN.ADAPTER命令打开适配器后，必须使用BUFFER.CREATE向DLC驱动程序提供缓冲池。
语法
参数
【PCCB】指向LLC_CCB结构的指针，描述正在执行的函数。有关此结构的信息，请参阅IBM LAN的文档。【ppBadCcb】指向LLC_CCB结构的指针。当提交LLC_CCB结构链时使用


-------------------------------------------------------- KeyWin32ActivateKeyboardLayout ----
ActivateKeyboardLayout    Windows 95和Windows NT中的ActivateKeyboardLayout的实现有很大的不同。为了适应这些差异，本参考页首先显示Windows 95实现，其次是Windows NT版本。Windows 95：
语法
参数
【HKL】处理键盘布局或零扩展区域设置标识符。该参数可以是使用LoadKeyboardLayout或GetKeyboardLayoutList函数获得的任何有效的键盘布局句柄或以下值之一：值


-------------------------------------------------------- KeyWin32AddAccessAllowedAce ----
AddAccessAllowedAce    AddAccessAllowedAce函数将一个访问允许的ACE添加到ACL。该访问被授予指定的SID。ACE是一个访问控制条目。ACL是访问控制列表。SID是安全标识符。
语法
参数
【ACL】指向ACL结构。此函数为此ACL添加了访问允许的ACE。ACE以ACCESS_ALLOWED_ACE结构的形式。【dwAceRevision】指定要修改的ACL的修订级别。目前，此


-------------------------------------------------------- KeyWin32AddAccessDeniedAce ----
AddAccessDeniedAce    AddAccessDeniedAce函数将一个访问被拒绝的ACE添加到ACL。访问被拒绝到指定的SID。ACE是一个访问控制条目。ACL是访问控制列表。SID是安全标识符。
语法
参数
【ACL】指向ACL结构。此函数为此ACL添加访问被拒绝的ACE。ACE以ACCESS_DENIED_ACE结构的形式。【dwAceRevision】指定要修改的ACL的修订级别。目前，此值


-------------------------------------------------------- KeyWin32AddAce ----
AddAce    AddAce函数将一个或多个ACE添加到指定的ACL。ACE是一个访问控制条目。ACL是访问控制列表。
语法
参数
【ACL】指向ACL结构。此函数将ACE添加到此ACL。【dwAceRevision】指定要修改的ACL的修订级别。目前，此值必须为ACL_REVISION。【dwStartingAceIn


-------------------------------------------------------- KeyWin32AddAtom ----
AddAtom    AddAtom函数将一个字符串添加到本地atom表中，并返回一个标识字符串的唯一值（atom）。
语法
参数
【lpString】指向要添加的以null结尾的字符串。该字符串的最大长度可以为255字节。仅在情况下不同的字符串被认为是相同的。添加的第一个字符串的情况由GetAtomName函数保留并返


-------------------------------------------------------- KeyWin32AddAuditAccessAce ----
AddAuditAccessAce    AddAuditAccessAce函数将系统审核ACE添加到系统ACL。审核指定SID的访问。ACE是一个访问控制条目。ACL是访问控制列表。SID是安全标识符。
语法
参数
【ACL】指向ACL结构。此函数将此系统审核ACE添加到此ACL。ACE采用SYSTEM_AUDIT_ACE结构的形式。【dwAceRevision】指定要修改的ACL的修订级别。目前，此值


-------------------------------------------------------- KeyWin32AddFontResource ----
AddFontResource    AddFontResource函数将字体资源从指定的文件添加到Windows字体表。该字体随后可用于任何基于Windows的应用程序的文本输出。
语法
参数
【lpszFilenamenl】指向包含有效字体文件filename的以null结尾的字符串。文件名可以指定.FON字体资源文件，.FNT原始位图字体文件，.TTF原始TrueType文件或


-------------------------------------------------------- KeyWin32AddForm ----
AddForm    AddForm函数将表单添加到可以为指定打印机选择的可用表单列表。
语法
参数
【hPrinter】标识支持以指定格式打印的打印机。【水平】指定【P成型】指向的结构的级别。此值必须为1。【P成型】指向FORM_INFO_1结构。
返回值
如果函数成功，返回值不为零。


-------------------------------------------------------- KeyWin32AddJob ----
AddJob    AddJob函数获取一个路径字符串，指定可用于存储假脱机打印作业的文件。
语法
参数
【hPrinter】手动指定打印作业的打印机。这必须是配置为假脱机打印机的本地打印机。如果【hPrinter】是远程打印机连接的句柄，或者如果打印机配置为直接打印，则AddJob函数失败。【


-------------------------------------------------------- KeyWin32AddMonitor ----
AddMonitor    AddMonitor函数安装本地打印机监视器并链接配置，数据和监视器文件。Windows NT的未来版本可能允许远程安装打印机监视器。
语法
参数
【PNAME】指向指定要在其上安装监视器的服务器的名称的以null结尾的字符串的指针。对于此版本的Windows NT，只能在本地安装监视器，因此此字符串应为NULL。【水平】指定【//指向


-------------------------------------------------------- KeyWin32AddPort ----
AddPort    AddPort函数将端口的名称添加到支持的端口列表中。AddPort函数由打印监视器导出。
语法
参数
【PNAME】指向一个零终止字符串的指针，指定端口连接到的服务器的名称。如果此参数为NULL，端口为本地端口。【的hWnd】处理到AddPort对话框的父窗口。【pMonitorName】指


-------------------------------------------------------- KeyWin32AddPrinter ----
AddPrinter    AddPrinter函数将打印机添加到指定服务器支持的打印机列表中。
语法
参数
【PNAME】指向指定要在其上安装打印机打印处理器的服务器的名称的以空值终止的字符串的指针。如果此字符串为NULL，打印处理器将在本地安装。【水平】指定【pPrinter】指向的结构的版本。


-------------------------------------------------------- KeyWin32AddPrinterConnection ----
AddPrinterConnection    AddPrinterConnection函数为当前用户添加了指定打印机的连接。
语法
参数
【PNAME】指向指定当前用户希望建立连接的打印机名称的以空值终止的字符串的指针。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyWin32AddPrinterDriver ----
AddPrinterDriver    AddPrinterDriver函数安装本地或远程打印机驱动程序，并链接配置，数据和驱动程序文件。
语法
参数
【PNAME】指向以空值终止的字符串的指针，指定应安装驱动程序的服务器的名称。如果【PNAME】为NULL，则驱动程序将在本地安装。【水平】指定【pDriverInfo】指向的结构的版本。该


-------------------------------------------------------- KeyWin32AddPrintProcessor ----
AddPrintProcessor    AddPrintProcessor函数在指定的服务器上安装打印处理器，并将打印处理器名称添加到支持的打印处理器的内部列表中。
语法
参数
【PNAME】指向指定要在其上安装打印处理器的服务器的名称的以空值终止的字符串的指针。如果此参数为NULL，打印处理器将在本地安装。【pEnvironment】指向指定环境的以空值终止的字符


-------------------------------------------------------- KeyWin32AddPrintProvidor ----
AddPrintProvidor    AddPrintProvidor函数安装本地打印机提供商并链接配置，数据和提供程序文件。Windows的未来版本可能允许远程安装打印机提供商。
语法
参数
【PNAME】指向以空值终止的字符串，指定应安装提供程序的服务器的名称。对于此版本的Windows 95和Windows NT，提供程序只能在本地安装，因此此参数应为NULL。【水平】指定【


-------------------------------------------------------- KeyWin32AddPropSheetPageProc ----
AddPropSheetPageProc    AddPropSheetPageProc函数指定一个应用程序定义的回调函数，属性表扩展用于将页面添加到属性表。
语法



-------------------------------------------------------- KeyWin32AdjustTokenGroups ----
AdjustTokenGroups    AdjustTokenGroups函数调整指定访问令牌中的组。启用或禁用访问令牌中的组需要TOKEN_ADJUST_GROUPS访问。
语法
参数
【TokenHandle】标识包含要修改的组的访问令牌。【ResetToDefault】指定组是否被设置为默认的启用和禁用状态。如果此值为TRUE，则将组设置为其默认状态，并忽略【NewSt


-------------------------------------------------------- KeyWin32AdjustTokenPrivileges ----
AdjustTokenPrivileges    AdjustTokenPrivileges函数可以在指定的访问令牌中启用或禁用权限。启用或禁用访问令牌中的权限需要TOKEN_ADJUST_PRIVILEGES访问。
语法
参数
【TokenHandle】标识包含要修改的权限的访问令牌。【DisableAllPrivileges】指定该函数是否禁用所有令牌的权限。如果此值为TRUE，该函数将禁用所有权限，并忽略【Ne


-------------------------------------------------------- KeyWin32AdjustWindowRect ----
AdjustWindowRect    AdjustWindowRect函数根据所需的客户矩形大小计算窗口矩形所需的大小。然后可以将窗口矩形传递给CreateWindowEx函数，以创建一个窗口，其客户端区域是所需的大小。
语法
参数
【LPRECT】指向RECT结构的指针，其中包含所需客户区域的左上角和右下角的坐标。当函数返回时，结构包含窗口左上角和右下角的坐标，以适应所需的客户区。【dwStyle】指定要计算所需大小的


-------------------------------------------------------- KeyWin32AdjustWindowRectEx ----
AdjustWindowRectEx    AdjustWindowRectEx函数根据所需的客户端矩形大小计算具有扩展样式的窗口的矩形所需的大小。然后可以将窗口矩形传递给CreateWindowEx函数，以创建一个窗口，其客户端区域是所需的大小。
语法
参数
【LPRECT】指向RECT结构的指针，其中包含所需客户区域的左上角和右下角的坐标。当函数返回时，结构包含窗口左上角和右下角的坐标，以适应所需的客户区。【dwStyle】指定要计算所需大小的


-------------------------------------------------------- KeyWin32AdvancedDocumentProperties ----
AdvancedDocumentProperties    AdvancedDocumentProperties函数显示指定打印机的打印机配置对话框，允许用户配置该打印机。
语法
参数
【的hWnd】标识打印机配置对话框的父窗口。【hPrinter】标识打印机对象。【pDeviceName】指向指定要显示打印机配置对话框的设备名称的以空值终止的字符串的指针。【pDevMod


-------------------------------------------------------- KeyWin32AllocateAndInitializeSid ----
AllocateAndInitializeSid    AllocateAndInitializeSid函数分配和初始化最多八个子权限的安全标识符（SID）。
语法
参数
【pIdentifierAuthority】指向SID_IDENTIFIER_AUTHORITY结构的指针，给出在SID中设置的顶级标识符权限值。【nSubAuthorityCount】指定


-------------------------------------------------------- KeyWin32AllocateLocallyUniqueId ----
AllocateLocallyUniqueId    AllocateLocallyUniqueId函数分配本地唯一标识符（LUID）。
语法
参数
【高声】指向接收分配的LUID的缓冲区。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
LUID仅在单个会


-------------------------------------------------------- KeyWin32AllocConsole ----
AllocConsole    AllocConsole函数为调用进程分配一个新的控制台。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
一个进程只能与一个控制台关联，因此如果调用进


-------------------------------------------------------- KeyWin32AngleArc ----
AngleArc    AngleArc函数绘制一个线段和弧。线段从当前位置绘制到弧的开头。圆弧沿着具有给定半径和中心的圆的周边绘制。弧的长度由给定的起始和扫掠角度定义。
语法
参数
【HDC】标识设备上下文。【X】指定圆的中心的逻辑x坐标。【Y】指定圆的中心的逻辑y坐标。【dwRadius】指定圆的半径（以逻辑为单位）。该值必须为正。【eStartAngle】指定相对于


-------------------------------------------------------- KeyWin32AnimatePalette ----
AnimatePalette    AnimatePalette函数将替换指定逻辑调色板中的条目。
语法
参数
【HPAL】标识逻辑调色板。【iStartIndex】指定要替换的第一个逻辑调色板条目。【cEntries】指定要替换的条目数。【PPE】指向用于替换当前条目的PALETTEENTRY结构数


-------------------------------------------------------- KeyWin32AnsiLower ----
AnsiLowerAnsiLower函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharLower函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiLowerBuff ----
AnsiLowerBuffAnsiLowerBuff函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharLowerBuff函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiNext ----
AnsiNextAnsiNext函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharNext函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiPrev ----
AnsiPrevAnsiPrev函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharPrev函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiToOem ----
AnsiToOem  AnsiToOem函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharToOem函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiToOemBuff ----
AnsiToOemBuff  AnsiToOemBuff函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharToOemBuff函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiUpper ----
AnsiUpperAnsiUpper函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharUpper函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnsiUpperBuff ----
AnsiUpperBuffAnsiUpperBuff函数已过时。为了与16位版本的Windows兼容，此函数实现为调用CharUpperBuff函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32AnyPopup ----
AnyPopup    AnyPopup函数表示屏幕上是否存在拥有，可见，顶级弹出窗口或重叠窗口。该函数搜索整个Windows屏幕，而不仅仅是呼叫应用程序的客户端区域。
语法
参数
此函数无参数。
返回值
如果弹出窗口存在，则返回值不为零，即使弹出窗口被其他窗口完全覆盖。如果弹出窗口不存在，返回值为零。
描述
AnyPopup是Windows版本1.【x】函数，


-------------------------------------------------------- KeyWin32AppendMenu ----
AppendMenu    AppendMenu函数将一个新项目附加到指定的菜单栏，下拉菜单，子菜单或快捷菜单的末尾。您可以使用此函数指定菜单项的内容，外观和行为。InsertMenuItem函数已被InsertMenuItem函数取代。但是，如果您不需要InsertMenuItem的任何扩展函数，您仍然可以使用AppendMenu.
语法
参数
【HMENU】标识要更改的菜单栏，下拉菜单，子菜单或快捷菜单。【uFlags】指定用于控制新菜单项的外观和行为的标志。此参数可以是以下备注部分中列出的值的组合。【uIDNewItem】指定新


-------------------------------------------------------- KeyWin32Arc ----
Arc    弧函数绘制一个椭圆弧。BOOL Arc(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,//边界矩形左上角的x坐标INT 【nTopRect】,//边界矩形左上角的y坐标INT 【nRightRect】,//边界矩形右下角的x坐标INT 【nBottomRect】,//边界矩形右下角的y坐标INT 【nXStartArc】,//第一个径向结束点INT 【nYStartArc】,//第一个径向结束点INT 【nXEndArc】,//第二径向终点INT 【nYEndArc】//第二径向终点);
参数
【HDC】标识出现绘图的设备上下文。【nLeftRect】指定边界矩形左上角的逻辑x坐标。Windows 95： 【nLeftRect】加上【nRightRect】的总和必须小于32768。


-------------------------------------------------------- KeyWin32ArcTo ----
ArcTo    ArcTo函数绘制一个椭圆弧。
语法
参数
【HDC】标识出现绘图的设备上下文。【nLeftRect】指定边界矩形左上角的逻辑x坐标。【nTopRect】指定边界矩形左上角的逻辑y坐标。【nRightRect】指定边界矩形右下角的逻辑


-------------------------------------------------------- KeyWin32AreAllAccessesGranted ----
AreAllAccessesGranted    AreAllAccessesGranted函数检查是否已经授予一组请求的访问权限。访问权限表示为32位访问掩码中的位标志。
语法
参数
【GrantedAccess】一个访问掩码，指定已授予的访问权限。【DesiredAccess】一个访问掩码，指定已请求的访问权限。这个掩码必须已经从通用映射到特定的和标准的访问权限，通常通


-------------------------------------------------------- KeyWin32AreAnyAccessesGranted ----
AreAnyAccessesGranted    AreAnyAccessesGranted函数测试是否已经授予一组请求的访问权限。访问权限表示为32位访问掩码中的位标志。
语法
参数
【GrantedAccess】指定授权的访问掩码。【DesiredAccess】指定要请求的访问掩码。这个掩码必须已经从通用映射到特定的和标准的访问权限，通常通过调用MapGenericMa


-------------------------------------------------------- KeyWin32AreFileApisANSI ----
AreFileApisANSI    AreFileApisANSI函数确定一组Win32文件函数是否使用ANSI或OEM字符集代码页。此函数对于8位控制台输入和输出操作非常有用。
语法
参数
此函数无参数。
返回值
如果一组Win32文件函数正在使用ANSI代码页，则返回值不为零。如果一组Win32文件函数正在使用OEM代码页，返回值为零。
描述
SetFileApisT


-------------------------------------------------------- KeyWin32ArrangeIconicWindows ----
ArrangeIconicWindows    ArrangeIconicWindows函数将排列指定父窗口的所有最小化（图标）子窗口。
语法
参数
【的hWnd】标识父窗口。
返回值
如果函数成功，则返回值是一行图标的高度。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
维护自己的最小化子窗


-------------------------------------------------------- KeyWin32AttachThreadInput ----
AttachThreadInput    AttachThreadInput函数将一个线程的输入处理机制附加到另一个线程的输入处理机制。
语法
参数
【idAttach】指定要附加到另一个线程的线程的标识符。要连接的线程不能是系统线程。【idAttachTo】指定要附加到的线程的标识符。这个线程不能是系统线程。线程不能附加到自身。因此，【


-------------------------------------------------------- KeyWin32BackupEventLog ----
BackupEventLog    BackupEventLog函数将指定的事件日志保存到备份文件。该函数不会清除事件日志。
语法
参数
【hEventLog】标识打开的事件日志。该句柄由OpenEventLog或OpenBackupEventLog函数返回。【lpBackupFileName】指向以空字符结尾的字符串，指定备


-------------------------------------------------------- KeyWin32BackupRead ----
BackupRead    BackupRead函数将与指定文件或目录关联的数据读入缓冲区。您可以使用此函数来备份文件或目录。
语法
参数
【HFILE】处理要备份的文件或目录。该函数读取与此文件相关的数据。通过调用CreateFile函数获取此句柄。如果CreateFile被标记为FILE_FLAG_NO_BUFFERING，


-------------------------------------------------------- KeyWin32BackupSeek ----
BackupSeek    BackupSeek函数通过使用BackupRead或BackupWrite函数初步访问数据流。
语法
参数
【HFILE】标识要备份的文件或目录。该句柄是通过使用CreateFile函数创建的。【dwLowBytesToSeek】指定要寻找的字节数的低32位。【dwHighBytesToSeek】


-------------------------------------------------------- KeyWin32BackupWrite ----
BackupWrite    BackupWrite函数将数据流从缓冲区写入指定的文件或目录。数据必须分为由WIN32_STREAM_ID结构分隔的子流。您可以使用此函数来还原已备份的文件或目录。
语法
参数
【HFILE】处理要恢复的文件或目录。该函数将数据写入此文件。您可以通过调用CreateFile函数获取此句柄。如果CreateFile被标记为FILE_FLAG_NO_BUFFERING，


-------------------------------------------------------- KeyWin32Beep ----
Beep    嘟函数在扬声器上产生简单的音调。函数是同步的在声音完成之前，它不会将控制权返回给其呼叫者。BOOL Beep(DWORD 【dwFreq】,//声音频率，以赫兹为单位DWORD 【dwDuration】//声音持续时间，以毫秒为单位);
参数
【dwFreq】Windows NT：指定频率（赫兹）的声音。该参数必须在37到32,767（0x25到0x7FFF）的范围内。Windows 95：参数被忽略。【dwDuration】Wi


-------------------------------------------------------- KeyWin32BeginDeferWindowPos ----
BeginDeferWindowPos    BeginDeferWindowPos函数为多窗口位置结构分配内存并返回结构的句柄。
语法
参数
【nNumWindows】指定要存储位置信息的初始窗口数。如果需要，DeferWindowPos函数可以增加结构的大小。
返回值
如果函数成功，则返回值标识多窗口位置结构。如果系统资源不


-------------------------------------------------------- KeyWin32BeginPaint ----
BeginPaint    BeginPaint函数准备指定的绘画窗口，并填写PAINTSTRUCT结构，其中包含有关绘画的信息。
语法
参数
【HWND】标识要重画的窗口。【Lppant】指向PAINTSTRUCT结构的指针，将接收绘画信息。
返回值
如果函数成功，则返回值是指定窗口的显示设备上下文的句柄。如果函数失败，则返回


-------------------------------------------------------- KeyWin32BeginPath ----
BeginPath    BeginPath函数在指定的设备上下文中打开路径括号。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
路径括号打开后，应用程序可以开始


-------------------------------------------------------- KeyWin32BeginUpdateResource ----
BeginUpdateResource    BeginUpdateResource函数返回可由UpdateResource函数使用的句柄，以在可执行文件中添加，删除或替换资源。
语法
参数
【pFileName】指向以空值终止的字符串，指定要在其中更新资源的Windows可执行文件。应用程序必须能够获取对此文件的写入权限;它不能当前正在执行。如果【pFileName】未指定完整


-------------------------------------------------------- KeyWin32BitBlt ----
BitBlt    BitBlt函数执行与从指定源设备上下文到目标设备上下文的像素矩形相对应的颜色数据的位块传输。
语法
参数
【hdcDest】标识目标设备上下文。【nXDest】指定目标矩形左上角的逻辑x坐标。【nYDest】指定目标矩形左上角的逻辑y坐标。【nWidth】指定源和目标矩形的逻辑宽度。【nHeig


-------------------------------------------------------- KeyWin32BringWindowToTop ----
BringWindowToTop    BringWindowToTop函数将指定的窗口置于Z顺序的顶部。如果窗口是顶级窗口，它将被激活。如果窗口是子窗口，则与子窗口关联的顶层父窗口将被激活。
语法
参数
【的hWnd】标识要带到Z订单顶部的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
使用BringW


-------------------------------------------------------- KeyWin32BroadcastSystemMessage ----
BroadcastSystemMessage    [Now Supported on Windows NT]BroadcastSystemMessage函数会向指定的收件人发送一条消息。收件人可以是应用程序，可安装的驱动程序，基于Windows的网络驱动程序，系统级设备驱动程序或这些系统组件的任意组合。
语法



-------------------------------------------------------- KeyWin32BrowseCallbackProc ----
BrowseCallbackProc    [Now Supported on Windows NT]指定与SHBrowseForFolder函数一起使用的应用程序定义的回调函数。浏览对话框调用此函数通知它关于事件。BFFCALLBACK类型定义了一个指向此回调函数的指针。int BrowseCallbackProc（HWND【HWND】, UINT【uMsg】, LPARAM【lParam的】, LPARAM 【的lpData】 );
参数
【HWND】处理到浏览对话框。回调函数可以将以下消息发送到此窗口：BFFM_ENABLEOK如果【wParam中】参数为非零，则启用确定按钮，如果【wParam中】为零，则禁用该按钮。BFF


-------------------------------------------------------- KeyWin32BuildCommDCB ----
BuildCommDCB    BuildCommDCB函数使用设备控制字符串中指定的值填充指定的DCB结构。设备控制字符串使用模式命令的语法。
语法
参数
【lpDef】指向指定设备控制信息的以空值终止的字符串的指针。字符串必须与模式命令的命令行参数的格式相同。例如，以下字符串指定波特率1200，无奇偶校验，8位数据位和1位停止位：baud=1


-------------------------------------------------------- KeyWin32BuildCommDCBAndTimeouts ----
BuildCommDCBAndTimeouts    BuildCommDCBAndTimeouts函数将设备定义字符串转换为适当的设备控制块代码，然后将这些代码放入设备控制块。该函数还可以为设备设置超时值，包括无超时的可能性;在这方面，函数的行为根据设备定义字符串的内容而有所不同。
语法
参数
【lpDef】指向指定设备的设备控制信息的空终止字符串的指针。该函数使用此字符串，解析它，然后在【lpDCB】指向的DCB结构中设置适当的值。【lpDCB】指向DCB结构的指针，该函数填充【


-------------------------------------------------------- KeyWin32BuildExplicitAccessWithName ----
BuildExplicitAccessWithName    [New - Windows NT]BuildExplicitAccessWithName函数使用调用者指定的数据初始化EXPLICIT_ACCESS结构。受托人由名称字符串标识。
语法
参数
【pExplicitAccess】指向EXPLICIT_ACCESS结构进行初始化。BuildExplicitAccessWithName不分配任何内存。如果此参数为NULL，则该函数不执行


-------------------------------------------------------- KeyWin32BuildImpersonateExplicitAccessWithName ----
BuildImpersonateExplicitAccessWithName    [New - Windows NT]提供BuildImpersonateExplicitAccessWithName函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyWin32BuildImpersonateTrustee ----
BuildImpersonateTrustee    [New - Windows NT]提供BuildImpersonateTrustee函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyWin32BuildSecurityDescriptor ----
BuildSecurityDescriptor    [New - Windows NT]BuildSecurityDescriptor函数分配和初始化一个新的安全描述符。安全描述符是一个不透明的结构，其中包含与对象相关联的安全信息。该函数可以通过将指定的安全信息与现有安全描述符中的信息合并来初始化新的安全描述符。如果不指定现有安全描述符，则该函数将根据指定的安全性信息初始化新的安全描述符。
语法
参数
【pOwner】指向TRUSTEE结构的指针，用于标识新安全描述符的所有者。如果结构使用TRUSTEE_IS_NAME表单，BuildSecurityDescriptor将查找与指定受托人名


-------------------------------------------------------- KeyWin32BuildTrusteeWithName ----
BuildTrusteeWithName    [New - Windows NT]BuildTrusteeWithName函数初始化TRUSTEE结构。来电者指定受托人姓名。该函数将结构的其他成员设置为默认值。
语法
参数
【pTrustee】指向TRUSTEE结构进行初始化。BuildTrusteeWithName函数不分配任何内存。如果此参数为NULL，则该函数不执行任何操作。【PNAME】指向包含TRUS


-------------------------------------------------------- KeyWin32BuildTrusteeWithSid ----
BuildTrusteeWithSid    [New - Windows NT]BuildTrusteeWithSid函数初始化TRUSTEE结构。来电者指定受托人的安全标识符（SID）。该函数将结构的其他成员设置为默认值。该函数不会查找与SID关联的名称。
语法
参数
【pTrustee】指向TRUSTEE结构进行初始化。BuildTrusteeWithSid函数不分配任何内存。如果此参数为NULL，则该函数不执行任何操作。【PSID】指向识别受托人的SI


-------------------------------------------------------- KeyWin32CallMsgFilter ----
CallMsgFilter    CallMsgFilter函数将指定的消息和挂钩代码传递给与WH_SYSMSGFILTER和WH_MSGFILTER钩子相关联的钩子过程。WH_SYSMSGFILTER或WH_MSGFILTER挂钩过程是一个应用程序定义的回调函数，用于检查和（可选）修改对话框，消息框，菜单或滚动条的消息。
语法
参数
【LPMSG】指向MSG结构的指针，其中包含要传递给挂钩过程的消息。【NCODE】指定钩子过程使用的应用程序定义代码来确定如何处理消息。代码不能与与WH_SYSMSGFILTER和WH_MS


-------------------------------------------------------- KeyWin32CallNamedPipe ----
CallNamedPipe    CallNamedPipe函数连接到消息类型的管道（并且等待管道的实例不可用），写入管道并从管道读取，然后关闭管道。
语法
参数
【lpNamedPipeName】指向指定管道名称的以null结尾的字符串的指针。【lpInBuffer】指向包含写入管道的数据的缓冲区。【nInBufferSize】指定写缓冲区的大小（以


-------------------------------------------------------- KeyWin32CallNextHookEx ----
CallNextHookEx    CallNextHookEx函数将钩子信息传递给当前钩子链中的下一个钩子过程。此函数取代DefHookProc函数。
语法
参数
【HHK】标识当前挂钩。由于以前调用SetWindowsHookEx函数，应用程序会收到此句柄。【NCODE】指定传递给当前挂钩过程的挂钩代码。下一个钩子过程使用此代码来确定如何处理挂钩信息


-------------------------------------------------------- KeyWin32CallWindowProc ----
CallWindowProc    CallWindowProc函数将消息信息传递到指定的窗口过程。
语法
参数
【lpPrevWndFunc】指向上一个窗口过程。如果通过调用GetWindowLong参数设置为GWL_WNDPROC或DWL_DLGPROC的GetWindowLong函数获得此值，则实


-------------------------------------------------------- KeyWin32CallWndProc ----
CallWndProc    CallWndProc挂接过程是一种应用程序定义或库定义的回调函数，只要调用SendMessage函数，系统就会调用该函数。在将消息传递到目标窗口过程之前，系统将消息传递给挂接过程。挂钩过程可以检查消息;它不能修改它。
语法
参数
【NCODE】指定挂接过程是否处理消息。如果【NCODE】为HC_ACTION，则挂接过程必须处理该消息。如果【NCODE】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，


-------------------------------------------------------- KeyWin32CallWndRetProc ----
CallWndRetProc    [Now Supported on Windows NT]CallWndRetProc挂接过程是在调用SendMessage函数后系统调用的应用程序定义或库定义的回调函数。将消息传递到目标窗口过程后，系统将该消息传递给挂钩过程。挂钩过程可以检查消息;它不能修改它。
语法
参数
【NCODE】指定挂接过程是否处理消息。如果【NCODE】为HC_ACTION，则挂接过程必须处理该消息。如果【NCODE】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，


-------------------------------------------------------- KeyWin32CancelDC ----
CancelDC    CancelDC函数取消指定设备上下文（DC）上的任何挂起操作。
语法
参数
【HDC】识别DC。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
多线程应用程序使用CancelDC函数来取消冗长的绘图操作。如果线程A启动长时间的绘图操作


-------------------------------------------------------- KeyWin32CancelIO ----
CancelIO  [New - Windows NT]CancelIO函数取消调用线程为指定的文件句柄发出的所有待处理的输入和输出（I / O）操作。该函数不会取消其他线程为文件句柄发出的I / O操作。
语法
参数
【HFILE】处理文件。该函数取消该文件句柄的所有待处理I / O操作。
返回值
如果函数成功，则返回值为非零由调用线程为文件句柄发出的所有待处理I / O操作已成功取消。如果函数失败，


-------------------------------------------------------- KeyWin32CancelWaitableTimer ----
CancelWaitableTimer    [New - Windows NT]CancelWaitableTimer函数将指定的“等待”定时器设置为非活动状态。
语法
参数
【hTimer】标识定时器对象。CreateWaitableTimer或OpenWaitableTimer函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyWin32CascadeWindows ----
CascadeWindows    [Now Supported on Windows NT]CascadeWindows函数将指定的窗口或指定父窗口的子窗口级联。
语法
参数
【hwndParent】标识父窗口。如果此参数为NULL，则假定桌面窗口。【wHow】指定级联标志。当前可用的唯一标志MDITILE_SKIPDISABLED可防止已禁用MDI子窗口级联。【


-------------------------------------------------------- KeyWin32CBTProc ----
CBTProc    CBTProc挂接过程是系统在激活，创建，销毁，最小化，最大化，移动或调整窗口大小之前调用的应用程序定义或库定义的回调函数;完成系统命令之前;在从系统消息队列中删除鼠标或键盘事件之前;在设置键盘焦点之前;或在与系统消息队列同步之前。挂钩过程返回的值确定Windows是否允许或阻止其中一个操作。基于计算机的培训（CBT）应用程序使用此挂接过程从系统接收有用的通知。
语法
参数
【NCODE】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HCBT_ACTIVATE系统即将激活一个窗口。HCBT_CLICKSKIPPED系统从系统消息队列中删除


-------------------------------------------------------- KeyWin32CCHookProc ----
CCHookProc    一个CCHookProc钩子过程是一个应用程序定义或库定义的回调过程，与Color公共对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理消息所针对的颜色对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有关该消


-------------------------------------------------------- KeyWin32CFHookProc ----
CFHookProc    一个CFHookProc挂接过程是一个应用程序定义或库定义的回调过程，它与Font Common对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理到消息所针对的字体对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有关该


-------------------------------------------------------- KeyWin32ChangeClipboardChain ----
ChangeClipboardChain    ChangeClipboardChain函数从剪贴板查看器链中删除指定的窗口。
语法
参数
【hWndRemove】标识要从链中删除的窗口。必须将句柄传递给SetClipboardViewer函数。【hWndNewNext】标识剪贴板查看器链中【hWndRemove】窗口之后的窗口


-------------------------------------------------------- KeyWin32ChangeDisplaySettings ----
ChangeDisplaySettings    ChangeDisplaySettings函数将显示设置更改为指定的图形模式。
语法
参数
【lpDevMode】指向DEVMODE结构的指针，描述要切换到的图形模式。dmsiz到成员必须初始化为DEVMODE结构的大小（以字节为单位）。使用DEVMODE结构中的以下字段：会员含义


-------------------------------------------------------- KeyWin32ChangeMenu ----
ChangeMenu    ChangeMenu函数已被以下专用函数取代，这些函数在Windows NT和Windows 95上均可用：函数描述AppendMenu将菜单项添加到菜单的末尾。InsertMenu将菜单项插入到菜单中。ModifyMenu修改菜单中的菜单项。RemoveMenu从菜单中删除菜单项;如果是弹出式项目，相应的弹出式菜单将被破坏（989796034）。
Windows 95：而不是使用AppendMenu，InsertMenu和ModifyMenu，专门为Window 95编写的应用程序应该使用以下新函数，这些函数仅在Windows 95上可用。函数描述GetMenuItemInfo获取有关菜单项的信息。InsertMenuItem在菜单栏或弹出菜单中的指定位置插入新的菜单项。SetMenuItemInfo更改有关菜单项的信息。
为Windows 3.0之前版本编写的应用程序可以继续调用ChangeMenu.为Windows 3.0或更高版本编写的应用程序应调用这些新函数。


-------------------------------------------------------- KeyWin32ChangeServiceConfig ----
ChangeServiceConfig    ChangeServiceConfig函数可更改服务的配置参数。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，必须具有SERVICE_CHANGE_CONFIG访问权限。【dwServiceType】一


-------------------------------------------------------- KeyWin32CharLower ----
CharLower    CharLower函数将字符串或单个字符转换为小写。如果操作数是字符串，则该函数将字符转换到位。此函数取代AnsiLower函数。
语法
参数
【lpsz】指向以空值终止的字符串或指定单个字符。如果此参数的高位字为零，则低位字必须包含要转换的单个字符。
返回值
如果操作数是字符串，该函数将返回一个指向转换字符串的指针。由于字符串


-------------------------------------------------------- KeyWin32CharLowerBuff ----
CharLowerBuff    CharLowerBuff函数将缓冲区中的大写字符转换为小写字符。该函数将字符转换到位。该函数取代AnsiLowerBuff函数。
语法
参数
【lpsz】指向包含一个或多个要处理的字符的缓冲区。【cchLength】指定由【lpsz】指向的缓冲区的大小（以字节为单位（ANSI版本）或字符（Unicode版本））。该函数检查每个字符


-------------------------------------------------------- KeyWin32CharNext ----
CharNext    CharNext函数返回一个指向字符串中下一个字符的指针。此函数取代AnsiNext函数。
语法
参数
【lpsz】指向以空字符结尾的字符串中的字符。
返回值
如果函数成功，则返回值是指向字符串中下一个字符的指针，如果在字符串末尾则返回到终止空字符。如果【lpsz】指向终止空字符，则返回值


-------------------------------------------------------- KeyWin32CharNextExA ----
CharNextExA    [Now Supported on Windows NT]CharNextExA函数检索指向字符串中下一个字符的指针。此函数可以处理由单字节或多字节字符组成的字符串。
语法
参数
【CodePage】用于检查前置字节范围的代码页的标识符。可以是Unicode和字符集常量中的“代码页标识符”表中提供的代码页值之一或以下预定义值之一：值含义0使用系统默认的ANSI代码页。


-------------------------------------------------------- KeyWin32CharPrev ----
CharPrev    CharPrev函数返回一个指向字符串中前一个字符的指针。此函数取代AnsiPrev函数。
语法
参数
【lpszStart】指向字符串的开头。【lpszCurrent】指向以空字符结尾的字符串中的字符。
返回值
如果函数成功，则返回值是指向字符串中前一个字符的指针，如果【lpszCurr


-------------------------------------------------------- KeyWin32CharPrevExA ----
CharPrevExA    [Now Supported on Windows NT]CharPrevExA函数检索指向字符串中前一个字符的指针。此函数可以处理由单字节或多字节字符组成的字符串。
语法
参数
【CodePage】用于检查前置字节范围的代码页的标识符。可以是Unicode和字符集常量中的“代码页标识符”表中提供的代码页值之一或以下预定义值之一：值含义0使用系统默认的ANSI代码页。


-------------------------------------------------------- KeyWin32CharToOem ----
CharToOem    CharToOem函数将字符串转换为OEM定义的字符集。（OEM代表原始设备制造商。）此函数取代AnsiToOem函数。
语法
参数
【lpszSrc】指向要终止字符串的空值。【lpszDst】指向缓冲区的翻译字符串。如果CharToOem函数用作ANSI函数，则可以通过将【lpszDst】参数设置为与【lpszSrc】参


-------------------------------------------------------- KeyWin32CharToOemBuff ----
CharToOemBuff    CharToOemBuff函数将字符串中指定数量的字符转换为OEM定义的字符集。（OEM代表原始设备制造商。）此函数取代AnsiToOemBuff函数。
语法
参数
【lpszSrc】指向要终止字符串的空值。【lpszDst】指向缓冲区的翻译字符串。如果CharToOemBuff函数用作ANSI函数，则可以通过将【lpszDst】参数设置为与【lpszS


-------------------------------------------------------- KeyWin32CharUpper ----
CharUpper    CharUpper函数将字符串或单个字符转换为大写。如果操作数是字符串，则该函数将字符转换到位。此函数取代AnsiUpper函数。
语法
参数
【lpsz】指向以空值终止的字符串或指定单个字符。如果此参数的高位字为零，则低位字必须包含要转换的单个字符。
返回值
如果操作数是字符串，该函数将返回一个指向转换字符串的指针。由于字符串


-------------------------------------------------------- KeyWin32CharUpperBuff ----
CharUpperBuff    CharUpperBuff函数将缓冲区中的小写字符转换为大写字符。该函数将字符转换到位。该函数取代AnsiUpperBuff函数。
语法
参数
【lpsz】指向包含一个或多个要处理的字符的缓冲区。【cchLength】指定由【lpsz】指向的缓冲区的大小（以字节为单位（ANSI版本）或字符（Unicode版本））。该函数检查每个字符


-------------------------------------------------------- KeyWin32CheckColorsInGamut ----
CheckColorsInGamut    CheckColorsInGamut函数指示指定的颜色值是否在指定设备的色域内。
语法
参数
【HDC】处理设备上下文。【lpaRGBQuad】指向包含要检查的颜色值的RGBQUAD结构数组的数组。【lpResult】指向接收颜色检查结果的字节数组的指针。【NCOUNT】数组中的元素


-------------------------------------------------------- KeyWin32CheckDlgButton ----
CheckDlgButton    CheckDlgButton函数更改按钮控件的检查状态。
语法
参数
【hDlg】标识包含该按钮的对话框。【nIDButton】标识要修改的按钮。【uCheckig】指定按钮的检查状态。此参数可以是以下值之一：值含义BST_CHECKED设置按钮状态以进行检查


-------------------------------------------------------- KeyWin32CheckMenuItem ----
CheckMenuItem    CheckMenuItem函数将指定菜单项的复选标记属性的状态设置为已选中或未选中。SetMenuItemInfo函数已被SetMenuItemInfo函数取代。但是，如果您不需要SetMenuItemInfo的任何扩展函数，您仍然可以使用CheckMenuItem.
语法
参数
【HMENU】识别感兴趣的菜单。【uIDCheckItem】指定由【uCheckig】参数确定的要设置其复选标记属性的菜单项。【uCheckig】指定控制【uIDCheckItem】参数的解


-------------------------------------------------------- KeyWin32CheckMenuRadioItem ----
CheckMenuRadioItem    [Now Supported on Windows NT]CheckMenuRadioItem函数检查指定的菜单项，并将其设置为无线电项目。同时，该函数取消选中关联组中的所有其他菜单项，并清除这些项目的无线电项目类型标志。
语法
参数
【HMENU】处理到包含一组菜单项的菜单。【idCheck】组中第一个菜单项的标识符或位置。【Handle to the menu that contains the group of me


-------------------------------------------------------- KeyWin32CheckRadioButton ----
CheckRadioButton    CheckRadioButton函数将添加一个复选标记（检查）组中的指定单选按钮，并从组（清除）组中的所有其他单选按钮中删除一个复选标记。
语法
参数
【hDlg】标识包含单选按钮的对话框。【nIDFirstButton】指定组中第一个单选按钮的标识符。【nIDLastButton】指定组中最后一个单选按钮的标识符。【nIDCheckBut


-------------------------------------------------------- KeyWin32ChildWindowFromPoint ----
ChildWindowFromPoint    ChildWindowFromPoint函数确定属于父窗口的子窗口（如果有）包含指定的点。
语法
参数
【hWndParent】标识父窗口。【点】指定定义要检查点的客户端坐标的POINT结构。
返回值
如果函数成功，则返回值是包含该点的子窗口的句柄，即使子窗口被隐藏或禁用。如果该点位于父窗


-------------------------------------------------------- KeyWin32ChildWindowFromPointEx ----
ChildWindowFromPointEx    [Now Supported on Windows NT]ChildWindowFromPointEx函数确定属于指定父窗口的子窗口（如果有）包含指定的点。该函数可以忽略不可见，禁用和透明的子窗口。
语法
参数
【hwndParent】标识父窗口。【pt】指定定义要检查点的客户端坐标的POINT结构。【uFlags】指定要跳过的子窗口。此参数可以是以下值的组合：值含义CWP_ALL不要跳过任何子窗口


-------------------------------------------------------- KeyWin32ChooseColor ----
ChooseColor    ChooseColor函数创建一个“颜色常用”对话框，使用户可以选择颜色。
语法
参数
【LPCC】指向CHOOSECOLOR结构的指针，其中包含用于初始化对话框的信息。当ChooseColor返回时，此结构包含有关用户颜色选择的信息。
返回值
如果用户单击对话框的“确定”


-------------------------------------------------------- KeyWin32ChooseFont ----
ChooseFont    ChooseFont函数创建一个字体公共对话框，使对话框能够为用户选择逻辑字体的属性。这些属性包括字体名称，样式（粗体，斜体或常规），点大小，效果（下划线，删除和文本颜色）以及脚本（或字符集）。
语法
参数
【lpcf】指向CHOOSEFONT结构的指针，其中包含用于初始化对话框的信息。当ChooseFont返回时，此结构包含有关用户字体选择的信息。
返回值
如果用户单击对话框的“确定”按钮


-------------------------------------------------------- KeyWin32Chord ----
和弦    弦函数绘制一个和弦（由椭圆和线段的交点界定的区域，称为“割线”）。通过使用当前笔并使用当前画笔来填充弦。BOOL Chord(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,//边界矩形左上角的x坐标INT 【nTopRect】,//边界矩形左上角的y坐标INT 【nRightRect】,//边界矩形右下角的x坐标INT 【nBottomRect】,//边界矩形右下角的y坐标INT 【nXRadial1】,//第一个径向端点的x坐标INT 【nYRadial1】,//第一个径向端点的y坐标INT 【nXRadial2】,//第二个径向端点的x坐标INT 【nYRadial2】//第二个径向端点的y坐标);
参数
【HDC】标识和弦出现的设备上下文。【nLeftRect】指定边界矩形左上角的x坐标。【nTopRect】指定边界矩形左上角的y坐标。【nRightRect】指定边界矩形右下角的x坐标。【n


-------------------------------------------------------- KeyWin32ClearCommBreak ----
ClearCommBreak    ClearCommBreak函数恢复指定通信设备的字符传输，并将传输线路置于非断开状态。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描


-------------------------------------------------------- KeyWin32ClearCommError ----
ClearCommError    ClearCommError函数检索有关通信错误的信息，并报告通信设备的当前状态。当发生通信错误时调用此函数，并清除设备的错误标志以启用其他输入和输出（I / O）操作。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【// pointer to variable to receive error codes】指向一个32位变量以填充指示错误


-------------------------------------------------------- KeyWin32ClearEventLog ----
ClearEventLog    ClearEventLog函数可清除指定的事件日志，并可选择将日志文件的当前副本保存到备份文件。
语法
参数
【hEventLog】标识要清除的事件日志。该句柄由OpenEventLog函数返回。【lpBackupFileName】指向以null结尾的字符串，指定将放置事件日志文件的当前副本的文件的


-------------------------------------------------------- KeyWin32ClientToScreen ----
ClientToScreen    ClientToScreen函数将指定点的客户端坐标转换为屏幕坐标。
语法
参数
【的hWnd】标识客户端区域用于转换的窗口。【LPPOINT】指向包含要转换的客户端坐标的POINT结构。如果函数成功，新屏幕坐标将被复制到此结构中。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyWin32ClipCursor ----
ClipCursor    ClipCursor函数将光标限定在屏幕上的矩形区域。如果随后的光标位置（由SetCursorPos函数或鼠标设置）位于矩形外部，Windows将自动调整位置以将光标保持在矩形区域内。
语法
参数
【LPRC】指向包含限定矩形左上角和右下角的屏幕坐标的RECT结构。如果此参数为NULL，则光标可自由移动到屏幕上的任何位置。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32CloseClipboard ----
CloseClipboard    CloseClipboard函数关闭剪贴板。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
当窗口完成检查或更改剪贴板时，通过调用Clo


-------------------------------------------------------- KeyWin32CloseDesktop ----
CloseDesktop    CloseDesktop函数关闭桌面对象的打开句柄。桌面是包含在窗口站对象内的安全对象。桌面具有逻辑显示面，并包含窗口，菜单和挂钩。
语法
参数
【//分配给该线程的桌面的句柄】标识要关闭的桌面。该句柄由CreateDesktop和OpenDesktop函数返回。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获


-------------------------------------------------------- KeyWin32CloseEnhMetaFile ----
CloseEnhMetaFile    CloseEnhMetaFile函数关闭增强型图元文件设备上下文，并返回一个标识增强格式的图元文件的句柄。
语法
参数
【HDC】标识增强型图元文件设备上下文。
返回值
如果函数成功，则返回值是增强图元文件的句柄。如果函数失败，返回值为NULL。
描述
应用程序可以使用CloseEnhMetaFile


-------------------------------------------------------- KeyWin32CloseEventLog ----
CloseEventLog    CloseEventLog函数关闭指定的事件日志。
语法
参数
【hEventLog】标识要关闭的事件日志。该句柄由OpenEventLog函数返回。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLa


-------------------------------------------------------- KeyWin32CloseFigure ----
CloseFigure    CloseFigure函数关闭路径中的开放数字。
语法
参数
【HDC】标识图形将关闭的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
CloseFigur


-------------------------------------------------------- KeyWin32CloseHandle ----
CloseHandle    CloseHandle函数关闭一个打开的对象句柄。
语法
参数
【hObject】标识一个打开的对象句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
CloseHan


-------------------------------------------------------- KeyWin32CloseMetaFile ----
CloseMetaFile    CloseMetaFile函数关闭元文件设备上下文并返回一个标识Windows格式的元文件的句柄。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用CloseEnhMetaFile函数。
语法
参数
【HDC】标识用于创建Windows格式的元文件的图元文件设备上下文。
返回值
如果函数成功，则返回值是Windows格式的图元文件的句柄。如果函数失败，返回值为NULL。
描述
W


-------------------------------------------------------- KeyWin32ClosePrinter ----
ClosePrinter    ClosePrinter函数关闭指定的打印机对象。
语法
参数
【hPrinter】处理打印机对象要关闭。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
当ClosePr


-------------------------------------------------------- KeyWin32CloseServiceHandle ----
CloseServiceHandle    CloseServiceHandle函数会关闭OpenSCManager函数返回的服务控制管理器数据库的句柄，或者关闭OpenService或CreateService函数返回的服务对象的句柄。
语法
参数
【hSCObject】标识要关闭的服务控制管理器数据库或服务对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.错误


-------------------------------------------------------- KeyWin32CloseWindow ----
CloseWindow    CloseWindow函数最小化（但不会破坏）指定的窗口。
语法
参数
【的hWnd】标识要最小化的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
通过将窗口缩小到图标的大


-------------------------------------------------------- KeyWin32CloseWindowStation ----
CloseWindowStation    CloseWindowStation函数关闭一个打开的窗口工位句柄。
语法
参数
【hWinSta】识别要关闭的窗口站。该句柄由CreateWindowStation和OpenWindowStation函数返回。
返回值
如果函数成功，返回值不为零。如果函数失败，返回


-------------------------------------------------------- KeyWin32ColorMatchToTarget ----
ColorMatchToTarget    ColorMatchToTarget函数可以启用或禁用指定设备上下文的预览。启用预览时，会显示指定设备上下文的后续输出中的颜色，因为它们将显示在目标设备上。这对于检查目标在图像中映射指定颜色的效果非常有用。要启用预览，必须为目标和预览设备上下文启用图像颜色匹配。
语法



-------------------------------------------------------- KeyWin32CombineRgn ----
CombineRgn    CombineRgn函数组合两个区域，并将结果存储在第三个区域。两个区域根据指定的模式组合。
语法
参数
【hrgnDesten】标识通过组合其他两个区域定义尺寸的新区域。（该地区必须在调用CombineRgn之前存在。）【hrgnSrc1】标识要组合的两个区域中的第一个。【hrgnSrc2】标


-------------------------------------------------------- KeyWin32CombineTransform ----
CombineTransform    CombineTransform函数将两个世界空间与页面空间转换相连接。
语法
参数
【lpxformResult】指向接收组合转换的XFORM结构。【lpxform1】指向XFORM结构的第一个转换。【lpxform2】指向XFORM结构的第二个转换。
返回值
如果函数


-------------------------------------------------------- KeyWin32CommandLineToArgvW ----
CommandLineToArgvW    CommandLineToArgvW函数解析一个宽字符的Unicode命令行字符串。它返回一个指向一组宽字符Unicode参数字符串和参数计数的指针，类似于标准C运行时ARGV和ARGC值。该函数提供了一种从Unicode命令行字符串获取Unicode集ARGV和ARGC值的方法。
语法
参数
【lpCmdLine】指向空终止的Unicode命令行字符串。应用程序通常会直接传递给GetCommandLineW的调用返回的值。【*pNumArgs】指向函数设置为解析参数计数的整数变量


-------------------------------------------------------- KeyWin32CommConfigDialog ----
CommConfigDialog    CommConfigDialog函数显示驱动程序提供的配置对话框。
语法
参数
【lpszName】指向以空字符结尾的字符串，指定应显示对话框的设备的名称。【的hWnd】标识拥有该对话框的窗口。该参数可以是任何有效的窗口句柄，如果对话框没有所有者，则该参数应为NULL。


-------------------------------------------------------- KeyWin32CommDlgExtendedError ----
CommDlgExtendedError    CommDlgExtendedError函数返回一个常见的对话框错误代码。此代码指示在执行以下常见对话框函数之一期间发生的最新错误：ChooseColorGetOpenFileNameChooseFontGetSaveFileNameFindTextPrintDlgReplaceTextPageSetupDlg
语法
参数
此函数无参数。
返回值
如果对公共对话框函数的最近调用成功，则返回值未定义。如果普通对话框函数返回FALSE，因为用户关闭或取消对话框，返回值为零。否则，返回值是非零的错误代码。有关详细


-------------------------------------------------------- KeyWin32CompareFileTime ----
CompareFileTime    CompareFileTime函数可比较两个64位文件时间。
语法
参数
【lpFileTime1】指向指定第一个64位文件时间的FILETIME结构。【lpFileTime2】指向FILETIME结构的第二个64位文件时间。
返回值
如果函数成功，则返回值为


-------------------------------------------------------- KeyWin32CompareString ----
CompareString    CompareString函数将使用由给定标识符指定的区域设置作为比较的基础来比较两个字符串。
语法
参数
【语言环境】指定用于比较的区域设置。此参数可以是以下预定义的区域设置标识符之一：值含义LOCALE_SYSTEM_DEFAULT系统的默认语言环境。LOCALE_USER_DEFAULT当前


-------------------------------------------------------- KeyWin32ConfigurePort ----
ConfigurePort    ConfigurePort函数显示指定服务器端口的端口配置对话框。
语法
参数
【PNAME】指向一个以null结尾的字符串，指定指定端口所在的服务器的名称。如果此参数为NULL，端口为本地端口。【的hWnd】标识端口配置对话框的父窗口。【pPortName】指向一个以


-------------------------------------------------------- KeyWin32ConnectNamedPipe ----
ConnectNamedPipe    ConnectNamedPipe函数使命名管道服务器进程能够等待客户端进程连接到命名管道的实例。客户端进程通过调用CreateFile或CallNamedPipe 函数进行连接。
语法
参数
【hNamedPipe】标识命名管道实例的服务器端。该句柄由CreateNamedPipe函数返回。【lpOverlapped的】指向OVERLAPPED结构。
返回值
如果函数成功，返


-------------------------------------------------------- KeyWin32ConnectToPrinterDlg ----
ConnectToPrinterDlg    ConnectToPrinterDlg函数显示一个对话框，让用户浏览和连接到网络上的打印机。如果用户选择打印机，该函数将尝试创建一个连接;如果服务器上没有安装合适的驱动程序，则可以向用户提供在本地创建打印机的选项。
语法
参数
【HWND】指定对话框的父窗口。【旗】此参数保留供将来使用。将其设置为零。
返回值
如果函数成功并且用户选择打印机，则返回值是所选打印机的句柄。如果函数失败，或者用户在不选择打印机的情况


-------------------------------------------------------- KeyWin32ContinueDebugEvent ----
ContinueDebugEvent    ContinueDebugEvent函数使调试器能够继续先前报告调试事件的线程。
语法
参数
【dwProcessId】标识要继续的过程。【dwThreadId】标识要继续的线程。进程标识符和线程标识符的组合必须标识先前已报告调试事件的线程。【dwContinueStatus】指定如


-------------------------------------------------------- KeyWin32ControlService ----
ControlService    ControlService函数将控制代码发送到Win32服务。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回。此句柄所需的访问取决于所请求的【dwControl】代码。【dwControl】指定所请求的


-------------------------------------------------------- KeyWin32ConvertDefaultLocale ----
ConvertDefaultLocale    ConvertDefaultLocale函数将特殊的默认语言环境值转换为实际的语言环境标识符。
语法
参数
【语言环境】函数转换为实际区域设置标识符的特殊默认区域设置值。以下列表显示特殊的默认语言环境值：值描述LOCALE_SYSTEM_DEFAULT系统的默认语言环境。LOCALE_USER_D


-------------------------------------------------------- KeyWin32ConvertThreadToFiber ----
ConvertThreadToFiber    ConvertTheadToFiber函数将当前线程转换为光纤。您必须将线程转换为光纤，然后再安排其他光纤。LPVOID ConvertThreadToFiber（LPVOID 【lpParameter参数】//新光纤的光纤数据);
参数
【lpParameter参数】指定传递给光纤的单个变量。光纤可以使用GetFiberData 函数检索该值。
返回值
如果函数成功，返回值就是光纤的地址。如果函数失败，返回值为NULL。


-------------------------------------------------------- KeyWin32CopyAcceleratorTable ----
CopyAcceleratorTable    CopyAcceleratorTable函数复制指定的加速器表。该函数用于获取与加速器表句柄相对应的加速器表数据，或用于确定加速器表数据的大小。
语法
参数
【hAccelSrc】标识要复制的加速器表。【lpAccelDst】指向要复制加速器表信息的ACCEL结构数组。【cAccelEntries】指定要复制到【lpAccelDst】参数指向的缓


-------------------------------------------------------- KeyWin32CopyCursor ----
CopyCursor    CopyCursor函数复制光标。
语法
参数
【pcur】标识要复制的光标。
返回值
如果函数成功，则返回值是复制光标的句柄。如果函数失败，返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
CopyC


-------------------------------------------------------- KeyWin32CopyEnhMetaFile ----
CopyEnhMetaFile    CopyEnhMetaFile函数将增强格式的元文件的内容复制到指定的文件。
语法
参数
【hemfSrc】标识源增强图元文件。【lpszFile】指向目的地文件的名称。如果此参数为NULL，则源图元文件将被复制到内存中。
返回值
如果函数成功，则返回值是增强图元文件副本的句


-------------------------------------------------------- KeyWin32CopyFile ----
CopyFile    CopyFile函数将现有文件复制到新文件。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，指定现有文件的名称。【lpNewFileName】指向以空字符结尾的字符串，指定新文件的名称。【bFailIfExists】


-------------------------------------------------------- KeyWin32CopyFileEx ----
CopyFileEx    [New - Windows NT]CopyFileEx函数将现有文件复制到新文件。此函数保留扩展属性，OLE结构化存储，NTFS备用数据流和文件属性。现有文件的安全属性不会复制到新文件中。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，指定现有文件的名称。【lpNewFileName】指向以空字符结尾的字符串，指定新文件的名称。【lpProgressRout


-------------------------------------------------------- KeyWin32CopyIcon ----
CopyIcon    CopyIcon函数将指定的图标从另一个模块复制到当前模块。
语法
参数
【惠康】标识要复制的图标。
返回值
如果函数成功，则返回值是复制图标的句柄。如果函数失败，返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
CopyIco


-------------------------------------------------------- KeyWin32CopyImage ----
CopyImage    CopyImage函数创建一个新图像（图标，光标或位图），并将指定图像的属性复制到新图像。如果需要，该函数将该位延伸以适应新图像的所需大小。
语法
参数
【HINST】标识包含要复制的图像的模块的实例。【UTYPE】指定要复制的图像的类型。此参数可以是以下值之一：值含义IMAGE_BITMAP复制位图。IMAGE_CURSOR复制光标。IMA


-------------------------------------------------------- KeyWin32CopyLZFile ----
CopyLZFile  CopyLZFile函数已过时。它仅用于与16位版本的Windows兼容。对于基于Win32的应用程序，请使用LZCopy函数。


-------------------------------------------------------- KeyWin32CopyMemory ----
CopyMemory    CopyMemory函数将一个内存块从一个位置复制到另一个位置。
语法
参数
【目的地】指向复制块目标的起始地址。【资源】指向要复制的内存块的起始地址。【长度】指定要复制的内存块的大小（以字节为单位）。
返回值
该函数没有返回值。
描述
如果源和目标块重叠，则


-------------------------------------------------------- KeyWin32CopyMetaFile ----
CopyMetaFile    CopyMetaFile函数将Windows格式的元文件的内容复制到指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CopyEnhMetaFile函数。
语法
参数
【hmfSrc】标识源Windows格式的图元文件。【lpszFile】指向目的地文件的名称。如果此参数为NULL，则源图元文件将被复制到内存中。
返回值
如果函数成功，则返回值是Win


-------------------------------------------------------- KeyWin32CopyProgressRoutine ----
CopyProgressRoutine    [New - Windows NT]当CopyFileEx启动的部分复制操作完成时，将调用CopyProgressRoutine函数。此函数是一个应用程序定义的回调例程。
语法
参数
【TotalFileSize】文件的总大小（以字节为单位）。【TotalBytesTransferred】自复制操作开始以来，从源文件传输到目标文件的总字节数。【StreamSize】当前文


-------------------------------------------------------- KeyWin32CopyRect ----
CopyRect    CopyRect函数将一个矩形的坐标复制到另一个矩形。
语法
参数
【lprcDst】指向将接收源矩形的逻辑坐标的RECT结构。【lprcSrc】指向要复制坐标的RECT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误


-------------------------------------------------------- KeyWin32CopySid ----
CopySid    CopySid函数将安全标识符（SID）复制到缓冲区。
语法
参数
【nDestinationSidLength】指定接收SID副本的缓冲区的长度（以字节为单位）。【pDestinationSid】指向缓冲区，接收来源SID结构的副本。【pSourceSid


-------------------------------------------------------- KeyWin32CountClipboardFormats ----
CountClipboardFormats    CountClipboardFormats函数检索剪贴板上当前不同数据格式的数量。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是剪贴板上当前不同数据格式的数量。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32CPlApplet ----
CPlApplet  CPlApplet函数是一个库定义的回调函数，用作控制面板应用程序的入口点。
语法



-------------------------------------------------------- KeyWin32CreateAcceleratorTable ----
CreateAcceleratorTable    CreateAcceleratorTable函数创建一个加速表。
语法
参数
【Lpaklit】指向描述加速器表的ACCEL结构的数组。【cEntries】指定阵列中ACCEL个结构的数量。
返回值
如果函数成功，则返回值是创建的加速器表的句柄;否则为NULL。



-------------------------------------------------------- KeyWin32CreateBitmap ----
CreateBitmap    CreateBitmap函数创建一个具有指定宽度，高度和颜色格式（每个像素的颜色平面和位）的位图。
语法
参数
【nWidth】指定位图宽度（以像素为单位）。【nHeight参数】指定位图高度（以像素为单位）。【// XOR位掩码中的平面数】指定设备使用的色平面数。【cBitsPerPel】指定识别单


-------------------------------------------------------- KeyWin32CreateBitmapIndirect ----
CreateBitmapIndirect    CreateBitmapIndirect函数创建一个具有指定宽度，高度和颜色格式（每个像素的颜色平面和位）的位图。
语法
参数
【LPBM】指向包含位图信息的BITMAP结构。如果应用程序将bmWidth或bmHeight成员设置为零，CreateBitmapIndirect将返回1到1像素的单色位图的句柄。
返回


-------------------------------------------------------- KeyWin32CreateBrushIndirect ----
CreateBrushIndirect    CreateBrushIndirect函数创建一个具有指定样式，颜色和模式的逻辑画笔。
语法
参数
【lplb】指向包含有关画笔信息的LOGBRUSH结构。
返回值
如果函数成功，则返回值标识一个逻辑画笔。如果函数失败，返回值为NULL。
描述
刷子是Windows用于绘制填充形状


-------------------------------------------------------- KeyWin32CreateCaret ----
CreateCaret    CreateCaret函数为系统插入符创建一个新形状，并将插入符的所有权分配给指定的窗口。插入符号形状可以是线，块或位图。
语法
参数
【的hWnd】标识拥有插入符号的窗口。【HBITMAP】标识定义插入符号形状的位图。如果此参数为NULL，则插入符号是固定的。如果此参数为（HBITMAP）1，则插入符号为灰色。如果此参数是


-------------------------------------------------------- KeyWin32CreateColorSpace ----
CreateColorSpace    CreateColorSpace函数创建逻辑颜色空间。
语法
参数
【lpLogColorSpace】指向LOGCOLORSPACE结构。
返回值
如果函数成功，则返回值是标识逻辑颜色空间的句柄。如果函数失败，返回值为NULL。
描述
当您不再需要色


-------------------------------------------------------- KeyWin32CreateCompatibleBitmap ----
CreateCompatibleBitmap    CreateCompatibleBitmap函数创建与与指定设备上下文关联的设备兼容的位图。
语法
参数
【HDC】标识设备上下文。【nWidth】指定位图宽度（以像素为单位）。【nHeight参数】指定位图高度（以像素为单位）。
返回值
如果函数成功，则返回值是位图的句柄。如果函数失败，返


-------------------------------------------------------- KeyWin32CreateCompatibleDC ----
CreateCompatibleDC    CreateCompatibleDC函数创建与指定设备兼容的内存设备上下文（DC）。
语法
参数
【HDC】标识设备上下文。如果此句柄为NULL，则该函数将创建与应用程序当前屏幕兼容的内存设备上下文。
返回值
如果函数成功，则返回值是存储器设备上下文的句柄。如果函数失败，返回值为NU


-------------------------------------------------------- KeyWin32CreateConsoleScreenBuffer ----
CreateConsoleScreenBuffer    CreateConsoleScreenBuffer函数创建一个控制台屏幕缓冲区并返回一个句柄。
语法
参数
【dwDesiredAccess】指定对控制台屏幕缓冲区的所需访问。此参数可以是以下值之一或两者：值含义GENERIC_READ请求访问控制台屏幕缓冲区，使进程能够从缓冲区读取数据。GENE


-------------------------------------------------------- KeyWin32CreateCursor ----
CreateCursor    CreateCursor函数创建具有指定大小，位模式和热点的光标。
语法
参数
【HINST】标识创建光标的应用程序的当前实例。【xHotSpot】指定光标热点的水平位置。【yHotSpot】指定光标热点的垂直位置。【nWidth】指定光标的宽度（以像素为单位）。【nH


-------------------------------------------------------- KeyWin32CreateDC ----
CreateDC    CreateDC函数通过使用指定的名称为设备创建设备上下文（DC）。
语法
参数
【lpszDriver】为早期版本的Windows编写的应用程序使用此参数指定设备驱动程序的文件名（无扩展名）。Windows 95：在基于Win32的应用程序中，此参数将被忽略，并且应为N


-------------------------------------------------------- KeyWin32CreateDesktop ----
CreateDesktop    CreateDesktop函数在与调用进程相关联的窗口工作站上创建一个新的桌面。它返回一个可用于访问新桌面的句柄。调用进程必须具有关联的窗口工作站，由系统在进程创建时分配或由SetProcessWindowStation设置。桌面是包含在窗口站对象内的安全对象。桌面具有逻辑显示面，包含窗口，菜单和挂钩。
语法
参数
【lpszDesktop】指向一个以null结尾的字符串，指定要创建的桌面的名称。桌面名称不区分大小写，不得包含反斜杠字符（\\）。【lpszDevice】保留;桌面使用在引导时加载的默认显


-------------------------------------------------------- KeyWin32CreateDialog ----
CreateDialog    CreateDialog宏从对话框模板资源创建无模式对话框。CreateDialog宏使用CreateDialogParam函数。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplate】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模板的资源


-------------------------------------------------------- KeyWin32CreateDialogIndirect ----
CreateDialogIndirect    CreateDialogIndirect宏从内存中的对话框模板创建无模式对话框。CreateDialogIndirect宏使用CreateDialogIndirectParam函数。
语法
参数
【的hInstance】标识创建对话框的模块的实例。【lpTemplate】指向包含CreateDialogIndirect用于创建对话框的模板的全局内存对象。对话框模板由描述该对话框的标题


-------------------------------------------------------- KeyWin32CreateDialogIndirectParam ----
CreateDialogIndirectParam    CreateDialogIndirectParam函数从内存中的对话框模板创建一个无模式对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法
参数
【的hInstance】标识将创建对话框的模块的实例。【lpTemplate】指向包含CreateDialogIndirectParam用于创建对话框的模板的全局内存对象。对话框模板由描述该


-------------------------------------------------------- KeyWin32CreateDialogParam ----
CreateDialogParam    CreateDialogParam函数从对话框模板资源创建无模式对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplateName】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模


-------------------------------------------------------- KeyWin32CreateDIBitmap ----
CreateDIBitmap    CreateDIBitmap函数从与设备无关的位图（DIB）创建与设备相关的位图（DDB），并可选地设置位图位。
语法
参数
HDC标识设备上下文。lpbmih指向BITMAPINFOHEADER结构。如果fdwInit是CBM_INIT，则该函数使用BITMAPINFOHEADER结构来获取所需的位图宽度和高度以


-------------------------------------------------------- KeyWin32CreateDIBPatternBrush ----
CreateDIBPatternBrush    CreateDIBPatternBrush函数创建一个逻辑画笔，该画笔具有指定的与设备无关的位图（DIB）指定的模式。随后可以将刷子选择到与支持光栅操作的设备相关联的任何设备上下文中。此函数仅适用于为早于3.0的Windows版本编写的应用程序的兼容性。对于基于Win32的应用程序，请使用CreateDIBPatternBrushPt函数。
语法
参数
【hglbDIBPacked】标识一个包含打包DIB的全局内存对象，该DIB由BITMAPINFO结构组成，紧随其后是定义位图像素的字节数组。Windows 95：不支持从位图大于8x8像素


-------------------------------------------------------- KeyWin32CreateDIBPatternBrushPt ----
CreateDIBPatternBrushPt    CreateDIBPatternBrushPt函数创建一个逻辑画笔，其具有由设备无关位图（DIB）指定的模式。
语法
参数
【lpPackedDIB】指向由BITMAPINFO结构组成的压缩DIB，紧跟着定义位图像素的字节数组。Windows 95：不支持从大小不超过8x8像素的位图或DIB创建画笔。如果指定了较


-------------------------------------------------------- KeyWin32CreateDIBSection ----
CreateDIBSection    CreateDIBSection函数创建一个与设备无关的位图（DIB），应用程序可以直接写入。该函数提供了一个指向位图位值位置的指针。您可以为函数用于创建位图的文件映射对象提供句柄，也可以让操作系统为位图分配内存。
语法
参数
【HDC】处理设备上下文。如果【iUsage】的值为DIB_PAL_COLORS，则该函数使用该设备上下文的逻辑调色板初始化与设备无关的位图的颜色。【PBMI】指向BITMAPINFO结构，


-------------------------------------------------------- KeyWin32CreateDirectory ----
CreateDirectory    CreateDirectory函数创建一个新目录。如果底层文件系统支持对文件和目录的安全性，则该函数将指定的安全描述符应用于新目录。请注意，CreateDirectory没有模板参数，而CreateDirectoryEx没有。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定要创建的目录的路径。对于MAX_PATH字符的路径，默认字符串大小限制。此限制与CreateDirectory函数如何解析路径有关


-------------------------------------------------------- KeyWin32CreateDirectoryEx ----
CreateDirectoryEx    CreateDirectoryEx函数创建一个具有指定路径的新目录，该目录保留指定模板目录的属性。如果底层文件系统支持对文件和目录的安全性，则该函数将指定的安全描述符应用于新目录。新目录保留指定模板目录的其他属性。请注意，CreateDirectoryEx有一个模板参数，而CreateDirectory没有。
语法
参数
【lpTemplateDirectory】指向一个以null结尾的字符串，指定创建新目录时用作模板的目录的路径。【lpNewDirectory】指向一个以null结尾的字符串，指定要创建的目


-------------------------------------------------------- KeyWin32CreateDiscardableBitmap ----
CreateDiscardableBitmap    CreateDiscardableBitmap函数创建与指定设备兼容的可丢弃位图。位图具有与像素相同的像素格式和与设备相同的调色板。应用程序可以选择该位图作为与指定设备兼容的存储设备的当前位图。
语法
参数
【HDC】标识设备上下文。【nWidth】指定位图的宽度（以位为单位）。【nHeight参数】指定位图的高度（以位为单位）。
返回值
如果函数成功，则返回值是位图的句柄。如果函数失败，返


-------------------------------------------------------- KeyWin32CreateEllipticRgn ----
CreateEllipticRgn    CreateEllipticRgn函数创建一个椭圆形区域。
语法
参数
【nLeftRect】指定椭圆的边界矩形左上角的x坐标。【nTopRect】指定椭圆的边界矩形左上角的y坐标。【nRightRect】指定椭圆边界矩形右下角的x坐标。【nBottomRect


-------------------------------------------------------- KeyWin32CreateEllipticRgnIndirect ----
CreateEllipticRgnIndirect    CreateEllipticRgnIndirect函数创建一个椭圆形区域。
语法
参数
【LPRC】指向RECT结构，其中包含椭圆的边界矩形的左上角和右下角的坐标。
返回值
如果函数成功，则返回值是该区域的句柄。如果函数失败，返回值为NULL。
描述
边界矩形定义区域的


-------------------------------------------------------- KeyWin32CreateEnhMetaFile ----
CreateEnhMetaFile    CreateEnhMetaFile函数为增强格式的图元文件创建一个设备上下文。该设备上下文可用于存储与设备无关的图片。
语法
参数
【hdcRef】标识增强型图元文件的参考设备。【lpFileName的对象】指向要创建的增强型图元文件的文件名。如果此参数为NULL，则增强型图元文件是基于内存的，并且使用DeleteEnh


-------------------------------------------------------- KeyWin32CreateEvent ----
CreateEvent    CreateEvent函数创建一个命名或未命名的事件对象。
语法
参数
【lpEventAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可由子进程继承。如果【lpEventAttributes】为NULL，则无法


-------------------------------------------------------- KeyWin32CreateFiber ----
CreateFiber    CreateFiber函数分配光纤对象，为其分配堆栈，并将其设置为以指定的起始地址（通常为光纤函数）开始执行。此函数不计划光纤。
语法
参数
【dwStackSize】指定新光纤的堆栈大小（以字节为单位）。如果指定为零，则堆栈大小默认为与主线程大小相同的大小。如果无法提交【dwStackSize】字节，则该函数将失败。请注意，如果


-------------------------------------------------------- KeyWin32CreateFile ----
CreateFile    CreateFile函数创建或打开以下对象并返回可用于访问对象的句柄：*文件*管道*邮筒*通讯资源*磁盘设备（仅限Windows NT）*游戏机*目录（仅打开）
语法
参数
【lpFileName】指向一个以null结尾的字符串，指定要创建或打开的对象（文件，管道，邮槽，通信资源，磁盘设备，控制台或目录）的名称。如果* 【lpFileName】是路径，则默认字符


-------------------------------------------------------- KeyWin32CreateFileMapping ----
CreateFileMapping    CreateFileMapping函数为指定的文件创建一个命名或未命名的文件映射对象。
语法
参数
【HFILE】标识要从中创建映射对象的文件。该文件必须以与【//访问类型保护】参数指定的保护标志兼容的访问模式打开。建议尽管不需要，您打算映射的文件被打开以进行独占访问。如果【HFILE】为


-------------------------------------------------------- KeyWin32CreateFont ----
CreateFont    CreateFont函数创建具有特定特征的逻辑字体。随后可以选择逻辑字体作为任何设备的字体。
语法
参数
【nHeight参数】指定字体的字符单元格或字符的逻辑单位的高度。字符高度值（也称为高度）是字符单元格高度值减去内部前导值。字体映射器以下列方式解释【nHeight参数】中指定的值：值含义>


-------------------------------------------------------- KeyWin32CreateFontIndirect ----
CreateFontIndirect    CreateFontIndirect函数创建具有指定结构中指定的特征的逻辑字体。该字体随后可以被选择为任何设备上下文的当前字体。
语法
参数
【lplf】指向定义逻辑字体特征的LOGFONT结构。
返回值
如果函数成功，则返回值是逻辑字体的句柄。如果函数失败，返回值为NULL。
描述
CreateFontIndirect函


-------------------------------------------------------- KeyWin32CreateHalftonePalette ----
CreateHalftonePalette    CreateHalftonePalette函数为指定的设备上下文创建一个半色调调色板。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值标识一个逻辑半色调调色板。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
当设备上下文


-------------------------------------------------------- KeyWin32CreateHatchBrush ----
CreateHatchBrush    CreateHatchBrush函数创建一个具有指定阴影图案和颜色的逻辑画笔。
语法
参数
【fnStyle】指定刷子的样式.此参数可以是以下值之一：值含义HS_BDIAGONAL从左到右孵化45度HS_CROSS水平和垂直十字线HS_DIAGCROSS45度交叉阴影HS_FDIA


-------------------------------------------------------- KeyWin32CreateIC ----
CreateIC    CreateIC函数创建指定设备的信息上下文。信息上下文提供了一种获取有关设备的信息而不创建设备上下文的快速方式。
语法
参数
【lpszDriver】指向指定设备驱动程序名称（例如“Epson”）的以null结尾的字符串。【lpszDevice】指向一个空值终止的字符串，指定正在使用的特定输出设备的名称，如Prin


-------------------------------------------------------- KeyWin32CreateIcon ----
CreateIcon    CreateIcon函数创建一个具有指定大小，颜色和位模式的图标。
语法
参数
【的hInstance】标识创建图标的模块的实例。【nWidth】指定图标的宽度（以像素为单位）。【nHeight参数】指定图标的高度（以像素为单位）。【// XOR位掩码中的平面数】指定图


-------------------------------------------------------- KeyWin32CreateIconFromResource ----
CreateIconFromResource    CreateIconFromResource函数从描述该图标的资源位创建一个图标或光标。
语法
参数
【presbits】指向包含图标或光标资源位的缓冲区。这些位通常通过调用LookupIconIdFromDirectory（在Windows 95中也可以调用LookupIconIdFrom


-------------------------------------------------------- KeyWin32CreateIconFromResourceEx ----
CreateIconFromResourceEx    [Now Supported on Windows NT]CreateIconFromResourceEx函数从描述该图标的资源位创建一个图标或光标。
语法
参数
【pbIconBits】指向包含图标或光标资源位的缓冲区。这些位通常通过调用LookupIconIdFromDirectoryEx和LoadResource函数加载。【cbIconBits】


-------------------------------------------------------- KeyWin32CreateIconIndirect ----
CreateIconIndirect    CreateIconIndirect函数从ICONINFO结构创建一个图标或光标。
语法
参数
【piconinfo】指向该函数用于创建图标或光标的ICONINFO结构。
返回值
如果函数成功，则返回值是创建的图标或游标的句柄。如果函数失败，返回值为NULL。要获取扩展错误信息，请


-------------------------------------------------------- KeyWin32CreateIoCompletionPort ----
CreateIoCompletionPort    CreateIoCompletionPort函数可以将打开的文件的实例与新创建的或现有的输入/输出完成端口相关联;或者可以创建一个输入/输出完成端口，而不需要将其与文件相关联。将打开的文件的实例与输入/输出完成端口关联使得应用程序接收到涉及该文件的异步输入/输出操作的完成的通知。
语法
参数
【FileHandle】处理到打开的重叠输入/输出完成的文件。当使用CreateFile函数获取这样的句柄时，必须指定FILE_FLAG_OVERLAPPED标志。一旦打开文件的实例与I /


-------------------------------------------------------- KeyWin32CreateMailslot ----
CreateMailslot    CreateMailslot函数创建一个具有指定名称的邮槽，并返回一个邮件服务器可以用来在邮槽上执行操作的句柄。邮槽是创建它的计算机的本地。如果具有指定名称的邮槽已存在，则会发生错误。
语法
参数
【lpName】指向指定邮槽的名称的以null结尾的字符串。该名称必须具有以下形式：\\\\。\\邮筒\\[【path】]【名称】【名称】字段必须是唯一的。该名称可能包含多个由反斜杠分隔的伪


-------------------------------------------------------- KeyWin32CreateMappedBitmap ----
CreateMappedBitmap    CreateMappedBitmap函数创建一个用于工具栏的位图。
语法
参数
【的hInstance】使用包含位图资源的可执行文件处理模块实例。【idBitmap】位图资源的资源标识符。【wFlags】位图标志。该参数可以为零或以下值：值含义CMB_MASKED使用位


-------------------------------------------------------- KeyWin32CreateMenu ----
CreateMenu    CreateMenu函数创建一个菜单。菜单最初为空，但可以使用InsertMenuItem，AppendMenu和InsertMenu函数填充菜单项。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是新建菜单的句柄。如果函数失败，返回值为NULL。
描述
与分配给窗口的菜单相关联的资源将自动释放。如果菜单未分配到窗口，应用程序必须在


-------------------------------------------------------- KeyWin32CreateMetaFile ----
CreateMetaFile    CreateMetaFile函数为Windows格式的图元文件创建一个设备上下文。提供此函数以兼容早期的16位版本的Microsoft Windows。基于Win32的应用程序应使用CreateEnhMetaFile函数。
语法
参数
【lpszFile】指向要创建的Windows格式图元文件的文件名。如果此参数为NULL，Windows格式的图元文件是基于内存的，并且通过使用DeleteMetaFile函数将其内容丢失。


-------------------------------------------------------- KeyWin32CreateMutex ----
CreateMutex    CreateMutex函数创建一个命名或未命名的互斥对象。
语法
参数
【lpMutexAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可以由子进程继承。如果【lpMutexAttributes】为NULL，则无


-------------------------------------------------------- KeyWin32CreateNamedPipe ----
CreateNamedPipe    CreateNamedPipe函数创建一个命名管道的实例，并返回一个后续管道操作的句柄。命名管道服务器进程使用此函数来创建特定命名管道的第一个实例，并建立其基本属性或创建现有命名管道的新实例。
语法
参数
【lpName】指向唯一标识管道的以null结尾的字符串。字符串必须具有以下格式：\\\\。\\管\\【\\管\\】该名称的【\\管\\】部分可以包括除反斜杠之外的任何字符，包括数字和特殊字


-------------------------------------------------------- KeyWin32CreatePalette ----
CreatePalette    CreatePalette函数创建一个逻辑调色板。
语法
参数
【lplgpl】指向LOGPALETTE结构，其中包含有关逻辑调色板中颜色的信息。
返回值
如果函数成功，则返回值是标识逻辑调色板的句柄。如果函数失败，返回值为NULL。要获取扩展错误信


-------------------------------------------------------- KeyWin32CreatePatternBrush ----
CreatePatternBrush    CreatePatternBrush函数创建具有指定位图模式的逻辑画笔。位图不能是由CreateDIBSection函数创建的DIB部分位图。
语法
参数
【骨形态发生蛋白】标识要用于创建逻辑画笔的位图。Windows 95：不支持从位图大于8x8像素的DIB创建画笔。如果指定了较大的位图，则仅使用位图的一部分。
返回值
如果函数成功，则返


-------------------------------------------------------- KeyWin32CreatePen ----
CreatePen    CreatePen函数创建一个具有指定样式，宽度和颜色的逻辑笔。笔可以随后被选择到设备上下文中，并用于绘制线条和曲线。
语法
参数
【fnPenStyle】指定钢笔风格。它可以是以下值之一：样式描述PS_SOLID笔是坚实的PS_DASH笔被打破了。仅当设备单位的笔宽为1或更小时，此样式才有效。PS_DOT笔点缀仅当设备


-------------------------------------------------------- KeyWin32CreatePenIndirect ----
CreatePenIndirect    CreatePenIndirect函数创建一个逻辑的化妆笔，它具有在结构中指定的样式，宽度和颜色。
语法
参数
【If the function succeeds, the return value is a handle that identifies a logical cosmetic pen.


-------------------------------------------------------- KeyWin32CreatePipe ----
CreatePipe    CreatePipe函数创建一个匿名管道，并返回到管道的读取和写入端的句柄。
语法
参数
【hReadPipe】指向接收管道读取句柄的变量。【hWritePipe】指向接收管道写入句柄的变量。【lpPipeAttributes】指向SECURITY_ATTRIBUTES结构的指针


-------------------------------------------------------- KeyWin32CreatePolygonRgn ----
CreatePolygonRgn    CreatePolygonRgn函数创建一个多边形区域。
语法
参数
【LPPT】指向定义多边形顶点的POINT结构数组。多边形被推定为封闭。每个顶点只能指定一次。【cPointsen】指定数组中的点数。【fnPolyFillMode】指定用于确定区域中哪些像


-------------------------------------------------------- KeyWin32CreatePolyPolygonRgn ----
CreatePolyPolygonRgn    CreatePolyPolygonRgn函数创建一个由一系列多边形组成的区域。多边形可以重叠。
语法
参数
【LPPT】指向定义多边形顶点的POINT结构数组。多边形连续指定。每个多边形被假定为封闭，每个顶点只被指定一次。【lpPolyCounts】指向一个整数数组，每个整数指定由【LPPT】指向


-------------------------------------------------------- KeyWin32CreatePopupMenu ----
CreatePopupMenu    CreatePopupMenu函数创建一个下拉菜单，子菜单或快捷菜单。菜单最初是空的。您可以使用InsertMenuItem函数插入或附加菜单项。您还可以使用InsertMenu函数插入菜单项，并使用AppendMenu函数附加菜单项。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是新建菜单的句柄。如果函数失败，返回值为NULL。
描述
应用程序可以将新菜单添加到现有菜单中，也可以通过调用TrackPopupMen


-------------------------------------------------------- KeyWin32CreatePrivateObjectSecurity ----
CreatePrivateObjectSecurity    CreatePrivateObjectSecurity函数为新的受保护服务器的对象分配并初始化一个自相关的安全描述符。当创建新的受保护的服务器对象时，将调用此函数。
语法
参数
【ParentDescriptor】指向正在创建新对象的父目录的安全描述符。如果没有父目录，则此参数可以为NULL。【CreatorDescriptor】指向由对象的创建者提供的安全描述符。


-------------------------------------------------------- KeyWin32CreateProcess ----
CreateProcess    CreateProcess函数创建一个新进程及其主线程。新进程执行指定的可执行文件。
语法
参数
【lpApplicationName】指向指定要执行的模块的以空值终止的字符串的指针。该字符串可以指定要执行的模块的完整路径和文件名。字符串可以指定部分名称。在这种情况下，该函数使用当前驱动


-------------------------------------------------------- KeyWin32CreateProcessAsUser ----
CreateProcessAsUser    CreateProcessAsUser函数创建一个新进程及其主线程。然后，新进程执行指定的可执行文件。CreateProcessAsUser函数类似于CreateProcess函数，但新进程在由【hToken】参数表示的用户的安全上下文中运行。默认情况下，新进程是非交互式的，即它运行在不可见的桌面上，无法接收用户输入。此外，默认情况下，新进程继承调用进程的环境，而不是与指定用户关联的环境。
语法
参数
【hToken】处理代表用户的主令牌。由令牌表示的用户必须具有对由【lpApplicationName】或【lpCommandLine】参数指定的应用程序的读取和执行访问权限。如果您的进程具


-------------------------------------------------------- KeyWin32CreatePropertySheetPage ----
CreatePropertySheetPage    CreatePropertySheetPage函数为属性表创建一个新页面。
语法
参数
【If the function succeeds, the return value is the handle to the new property sheet.】指向定义要包含在属性


-------------------------------------------------------- KeyWin32CreateRectRgn ----
CreateRectRgn    CreateRectRgn函数创建一个矩形区域。
语法
参数
【nLeftRect】指定区域左上角的x坐标。【nTopRect】指定区域左上角的y坐标。【nRightRect】指定区域右下角的x坐标。【nBottomRect】指定区域右下角的y坐标。



-------------------------------------------------------- KeyWin32CreateRectRgnIndirect ----
CreateRectRgnIndirect    CreateRectRgnIndirect函数创建一个矩形区域。
语法
参数
【LPRC】指向RECT结构，其中包含定义区域的矩形的左上角和右下角的坐标。
返回值
如果函数成功，则返回值是该区域的句柄。如果函数失败，返回值为NULL。
描述
该区域将不包括底部


-------------------------------------------------------- KeyWin32CreateRemoteThread ----
CreateRemoteThread    CreateRemoteThread函数创建一个在另一个进程的地址空间中运行的线程。
语法
参数
【hProcess】标识要创建线程的进程。Windows NT：句柄必须具有PROCESS_CREATE_THREAD访问权限。有关详细信息，请参阅过程对象.【lpThreadAttribu


-------------------------------------------------------- KeyWin32CreateRoundRectRgn ----
CreateRoundRectRgn    CreateRoundRectRgn函数创建一个带圆角的矩形区域。
语法
参数
【nLeftRect】指定区域左上角的x坐标。【nTopRect】指定区域左上角的y坐标。【nRightRect】指定区域右下角的x坐标。【nBottomRect】指定区域右下角的y坐标。【


-------------------------------------------------------- KeyWin32CreateScalableFontResource ----
CreateScalableFontResource    CreateScalableFontResource函数创建可缩放字体的字体资源文件。
语法
参数
【fdwHidden】指定字体是否为只读嵌入字体。此参数可以是以下值之一：值含义0字体具有读写权限。1该字体具有只读权限，并且应该隐藏在系统中的其他应用程序中。设置此标志时，该字体不会由En


-------------------------------------------------------- KeyWin32CreateSemaphore ----
CreateSemaphore    CreateSemaphore函数创建一个命名或未命名的信号量对象。
语法
参数
【lpSemaphoreAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可由子进程继承。如果【lpSemaphoreAttributes】为


-------------------------------------------------------- KeyWin32CreateService ----
CreateService    CreateService函数创建一个服务对象，并将其添加到指定的服务控制管理器数据库。
语法
参数
hSCManager标识服务控制管理器数据库。必须使用具有SC_MANAGER_CREATE_SERVICE访问权限的OpenSCManager打开该句柄。lpServiceName指向以空


-------------------------------------------------------- KeyWin32CreateSolidBrush ----
CreateSolidBrush    CreateSolidBrush函数创建一个具有指定纯色的逻辑画笔。
语法
参数
【crColor】指定画笔的颜色。
返回值
如果函数成功，则返回值标识一个逻辑画笔。如果函数失败，返回值为NULL。
描述
一个实心的画笔是Windows用来绘制填充形状内部的位图。


-------------------------------------------------------- KeyWin32CreateTapePartition ----
CreateTapePartition    CreateTapePartition函数重新格式化磁带。
语法
参数
【hDevice】标识要创建新分区的设备。该句柄是通过使用CreateFile函数创建的。【dwPartitionMethod】指定要创建的分区类型。要确定您的设备支持什么类型的分区，请参阅


-------------------------------------------------------- KeyWin32CreateThread ----
CreateThread    CreateThread函数创建一个在调用进程的地址空间内执行的线程。
语法
参数
【lpThreadAttributes】指向SECURITY_ATTRIBUTES结构的指针，用于确定返回的句柄是否可由子进程继承。如果【lpThreadAttributes】为NULL，则


-------------------------------------------------------- KeyWin32CreateToolbarEx ----
CreateToolbarEx    CreateToolbarEx函数创建一个工具栏窗口，并将指定的按钮添加到工具栏。
语法
参数
【HWND】处理工具栏的父窗口。【ws】工具栏的窗口样式。此参数必须至少指定WS_CHILD样式。它还可以包括工具栏和相关主题中讨论的风格的组合。【wID】控制工具栏的标识符。【dyButt


-------------------------------------------------------- KeyWin32CreateUpDownControl ----
CreateUpDownControl    CreateUpDownControl函数创建一个上下控制。
语法



-------------------------------------------------------- KeyWin32CreateWaitableTimer ----
CreateWaitableTimer    [New - Windows NT]CreateWaitableTimer函数创建一个“等待”定时器对象。
语法
参数
【lpTimerAttributes】指向SECURITY_ATTRIBUTES结构的指针，指定新定时器对象的安全描述符，并确定子进程是否可以继承返回的句柄。如果【lpTimerAttrib


-------------------------------------------------------- KeyWin32CreateWindow ----
CreateWindow    CreateWindow函数创建一个重叠的弹出窗口或子窗口。它指定窗口类，窗口标题，窗口样式和（可选）窗口的初始位置和大小。该函数还指定窗口的父项或所有者（如果有）以及窗口的菜单。
语法
参数
【lpClassName】指向一个空值终止的字符串或是一个整数原子。如果这个参数是一个原子，它必须是由先前调用GlobalAddAtom函数创建的全局原子。原子，小于0xC000的16位值必


-------------------------------------------------------- KeyWin32CreateWindowEx ----
CreateWindowEx    CreateWindowEx函数创建一个具有扩展样式的重叠，弹出窗口或子窗口;否则，此函数与CreateWindow函数相同。有关创建窗口和CreateWindowEx其他参数的完整说明的更多信息，请参阅CreateWindow.
语法
参数
【dwExStyle】指定窗口的扩展样式。此参数可以是以下值之一：样式含义WS_EX_ACCEPTFILES指定使用此样式创建的窗口接受拖放文件。WS_EX_APPWINDOW当窗口最小化时


-------------------------------------------------------- KeyWin32CreateWindowStation ----
CreateWindowStation    CreateWindowStation函数创建一个窗口站对象。它返回一个可用于访问窗口站的句柄。窗口站是包含一组全局原子，剪贴板和一组桌面对象的安全对象。
语法
参数
【lpwinstafy】指向指定要创建的窗口站的名称的以null结尾的字符串。窗口站名称不区分大小写，不能包含反斜杠字符（\\）。只允许管理员组的成员指定名称。如果【lpwinstafy】为


-------------------------------------------------------- KeyWin32CryptAcquireContext ----
CryptAcquireContext    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptAcquireContext函数用于获取特定CSP中特定密钥容器的句柄。这个返回的句柄然后可以用来调用所选的CSP。此函数执行两个操作。它首先尝试找到具有【dwProvType】和【pszProvider】参数中描述的特性的CSP。如果找到CSP，则该函数尝试在CSP中找到与【pszContainer】参数指定的名称匹配的密钥容器。此函数也可用于创建和销毁密钥容器，具体取决于【dwFlags中】参数的值。
语法
参数
【phProv】[out]函数将手柄复制到CSP的地址。【pszContainer】[in]密钥容器名称。这是一个零终止的字符串，用于标识CSP的密钥容器。此名称与用于存储密钥的方法无关。一


-------------------------------------------------------- KeyWin32CryptCreateHash ----
CryptCreateHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptCreateHash函数用于启动数据流的散列。它向调用者返回CSP散列对象的句柄。该句柄也可用于后续调用CryptHashData和CryptHashSessionKey，以便对数据流和会话密钥进行散列。
语法
参数
【pbBuffer】[in] CSP使用的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【寒冷的】[in]要使用的散列算法的算法标识符。此参数的有效值将有所不同，具


-------------------------------------------------------- KeyWin32CryptDecrypt ----
CryptDecrypt    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDecrypt函数用于解密先前通过CryptEncrypt函数加密的数据。
语法
参数
【的hKeyru-Latn】[in]用于解密的密钥的句柄。应用程序使用CryptGenKey或CryptImportKey函数获取该句柄。该键指定使用的解密算法。【马】[in]散列对象的句柄


-------------------------------------------------------- KeyWin32CryptDeriveKey ----
CryptDeriveKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDeriveKey函数生成从基础数据导出的加密密钥。该函数保证从相同的基本数据生成的所有密钥将相同，只要使用相同的CSP和算法即可。基本数据可以是密码或任何其他用户数据。此函数与CryptGenKey相同，只是生成的会话密钥来自基本数据而不是随机的。另一个区别是CryptDeriveKey函数不能用于生成公钥/私钥对。会话密钥的句柄在【phKey】中返回。然后可以根据需要使用任何其他需要密钥句柄的CryptoAPI函数。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【寒冷的】[in]要生成密钥的算法的标识符。此参数的有效值将有所不同，具


-------------------------------------------------------- KeyWin32CryptDestroyHash ----
CryptDestroyHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDestroyHash函数会破坏由【马】参数引用的散列对象。一旦哈希对象被破坏，它将不能再被使用，并且它的句柄从那时起是没有用的。当应用程序完成后，所有散列对象都应使用CryptDestroyHash函数进行销毁。
语法
参数
【马】[in]要销毁的哈希对象的句柄。
描述
当哈希对象被破坏时，许多CSP将擦除CSP中保存哈希对象的内存。然后CSP内存被释放。在CryptCreateHash和CryptDestr


-------------------------------------------------------- KeyWin32CryptDestroyKey ----
CryptDestroyKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptDestroyKey函数释放由【的hKeyru-Latn】参数引用的句柄。一旦钥匙把手被释放，它将变得无效，不能再次使用。如果句柄是指通过CryptImportKey导入到CSP的会话密钥或公钥，则此函数会销毁该密钥，并释放该密钥所占用的内存。许多CSP将在释放钥匙之前擦洗记忆。另一方面，如果句柄是指公钥/私钥对（从CryptGetUserKey获得），那么这个函数不会破坏基础密钥对。只有手柄被摧毁。
语法
参数
【的hKeyru-Latn】[in]要被销毁的钥匙的句柄。
描述
键占用操作系统内存空间和CSP内存空间。一些CSP将以非常有限的内存资源在硬件中实现。因此，使用CryptDestroy


-------------------------------------------------------- KeyWin32CryptEncrypt ----
CryptEncrypt    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptEncrypt函数用于加密数据。用于加密数据的算法由CSP模块保存的密钥指定，由【的hKeyru-Latn】参数引用。
语法
参数
【的hKeyru-Latn】[in]用于加密的密钥的句柄。应用程序通过使用CryptGenKey或CryptImportKey函数获取该句柄。此键指定使用的加密算法。【马】[in]散列对象的


-------------------------------------------------------- KeyWin32CryptExportKey ----
CryptExportKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptExportKey函数用于以安全的方式从加密服务提供商导出加密密钥。要导出的键的句柄被传递到函数中，该函数向调用者返回一个键blob。这个关键点可以通过非安全运输方式发送或存储在非安全存储位置。直到预期的收件人使用CryptImportKey函数之后，关键的blob才是无用的，然后将其导入到收件人的CSP中。
语法
参数
【的hKeyru-Latn】[in]要导出的键的句柄。【hExpKey】[in]属于目标用户的加密密钥的句柄。使用此密钥对创建的密钥块中的关键数据进行加密。这确保只有目标用户才能使用密钥bl


-------------------------------------------------------- KeyWin32CryptGenKey ----
CryptGenKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGenKey函数生成用于CSP模块的随机加密密钥。钥匙的句柄在【phKey】中返回。然后可以根据需要使用任何其他需要密钥句柄的CryptoAPI函数。调用此函数时需要调用应用程序来指定算法。由于该算法类型与密钥保持捆绑，所以当执行实际的加密操作时，应用程序不需要稍后指定算法。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【寒冷的】[in]要生成密钥的算法的标识符。此参数的有效值将有所不同，具


-------------------------------------------------------- KeyWin32CryptGenRandom ----
CryptGenRandom    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGenRandom函数用随机字节填充缓冲区。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【This function is often used to gene


-------------------------------------------------------- KeyWin32CryptGetHashParam ----
CryptGetHashParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetHashParam函数允许应用程序检索管理散列对象操作的数据。也可以使用此函数检索实际的哈希值。
语法
参数
【马】[in]查询参数的哈希对象的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[out]参数数据缓冲区。该函数将指定的参数数据复制到此缓冲区。


-------------------------------------------------------- KeyWin32CryptGetKeyParam ----
CryptGetKeyParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetKeyParam函数允许应用程序检索管理键操作的数据。请注意，本函数或任何其他函数无法获得基本键控材料。
语法
参数
【的hKeyru-Latn】[in]查询参数的键的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[out]参数数据缓冲区。该函数将指定的参数数据


-------------------------------------------------------- KeyWin32CryptGetProvParam ----
CryptGetProvParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetProvParam函数允许应用程序检索管理CSP操作的参数。
语法
参数
【pbBuffer】[in]查询参数的CSP的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[out]参数数据缓冲区。该函数将指定的参数数据复制


-------------------------------------------------------- KeyWin32CryptGetUserKey ----
CryptGetUserKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptGetUserKey函数检索永久用户密钥对的句柄，例如用户的签名密钥对。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【dwKeySpec】[in]要检索的密钥的规范。以下密钥可从几乎所有的


-------------------------------------------------------- KeyWin32CryptHashData ----
CryptHashData    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptHashData函数用于计算数据流上的加密散列。此函数和CryptHashSessionKey可以多次调用，以计算长流或不连续流上的散列。在调用此函数之前，必须调用CryptCreateHash函数来获取哈希对象的句柄。
语法
参数
【马】[in]散列对象的句柄。应用程序使用CryptCreateHash函数获取此句柄。【pbData】[in]要散列的数据的地址。【dwDataLen】[in]要散列的数据的字节数。如果设


-------------------------------------------------------- KeyWin32CryptHashSessionKey ----
CryptHashSessionKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptHashSessionKey函数用于计算密钥对象上的密码散列。可以使用相同的散列句柄多次调用此函数来计算多个键上的散列。致电CryptHashSessionKey可以穿插到CryptHashData的电话。在调用此函数之前，必须调用CryptCreateHash函数来获取哈希对象的句柄。
语法
参数
【马】[in]散列对象的句柄。应用程序使用CryptCreateHash函数获取此句柄。【的hKeyru-Latn】[in]要哈希的关键对象的句柄。【dwFlags中】[in]标志值。此参数


-------------------------------------------------------- KeyWin32CryptImportKey ----
CryptImportKey    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptImportKey函数用于将密钥从密钥块传输到CSP。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。应用程序使用CryptAcquireContext函数获取此句柄。【pbData】[in]包含键blob的缓冲区。该关键点是由CryptE


-------------------------------------------------------- KeyWin32CryptReleaseContext ----
CryptReleaseContext    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptReleaseContext函数用于释放CSP和密钥容器的句柄。当应用程序使用CSP完成时，应该执行此操作。调用此函数后，【pbBuffer】参数指定的CSP句柄将不再有效。密钥容器和任何密钥对都不会被此函数破坏。
语法
参数
【pbBuffer】[in]应用程序的CSP的句柄。这是使用CryptAcquireContext函数获取的应用程序的句柄。【dwFlags中】[in]标志值。此参数保留供将来使用，并且应始


-------------------------------------------------------- KeyWin32CryptSetHashParam ----
CryptSetHashParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]在理论上，CryptSetHashParam函数允许应用程序自定义散列对象的操作。目前，该函数只定义了一个参数。
语法
参数
【马】[in]要设置参数的哈希对象的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[in]参数数据缓冲区。在调用CryptSetHashPara


-------------------------------------------------------- KeyWin32CryptSetKeyParam ----
CryptSetKeyParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]通过CryptSetKeyParam函数，应用程序可以自定义按键操作的各个方面。通常，此函数用于设置对称密钥上的会话特定参数。请注意，此函数无法访问基本密钥材料。Microsoft RSA Base Provider在密钥交换或签名密钥上没有可设置的参数。然而，定制提供者可以定义可以在这些键上设置的参数。
语法
参数
【的hKeyru-Latn】[in]设置参数的键的句柄。【dwParam】[in]参数号。有关参数的列表，请参阅“备注”部分。【pbData】[in]参数数据缓冲区。在调用CryptSetK


-------------------------------------------------------- KeyWin32CryptSetProvider ----
CryptSetProvider    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSetProvider函数用于指定当前用户默认的CSP。调用此函数后，此用户随后发出的任何调用CryptAcquireContext指定【dwProvType】提供程序类型，但不提供程序名称，将导致【pszProvName】提供程序被使用。
语法
参数
【pszProvName】[in]新的默认CSP的名称。这个CSP应该已经安装在电脑上了。【dwProvType】[in] 【pszProvName】参数指定的CSP的提供者类型。
描述



-------------------------------------------------------- KeyWin32CryptSetProvParam ----
CryptSetProvParam    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSetProvParam函数允许应用程序自定义CSP的操作。
语法
参数
【pbBuffer】[in] CSP的句柄，用于设置参数。【dwParam】[in]要设置的参数号。当此参数设置为PP_CLIENT_HWND时，【pbData】缓冲区应包含一个DWORD值


-------------------------------------------------------- KeyWin32CryptSignHash ----
CryptSignHash    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptSignHash函数用于签署一条数据。因为所有的签名算法都是不对称的，因此非常慢，CryptoAPI不会直接对数据进行签名。相反，您必须先对数据进行散列，然后使用CryptSignHash对哈希值进行签名。
语法
参数
【马】[in]要签名的哈希对象的句柄。【dwKeySpec】[in]用于签署哈希的密钥对。可以指定以下键：* AT_KEYEXCHANGE __ Exchange私钥* AT_SIGNATU


-------------------------------------------------------- KeyWin32CryptVerifySignature ----
CryptVerifySignature    [New - Windows NT][New - Windows 95, OEM Service Release 2]CryptVerifySignature函数用于验证哈希对象的签名。在调用此函数之前，必须调用CryptCreateHash函数来获取哈希对象的句柄。然后使用CryptHashData和/或CryptHashSessionKey函数将数据和/或会话密钥添加到散列对象。一旦这个函数完成，可以使用【马】句柄调用的唯一哈希函数是CryptDestroyHash函数。
语法
参数
【马】[in]要验证的哈希对象的句柄。【pbSignature】[in]要验证的签名数据的地址。【dwSigLen】[in] 【pbSignature】签名数据中的字节数。【hPubKey】


-------------------------------------------------------- KeyWin32DdeAbandonTransaction ----
DdeAbandonTransaction    DdeAbandonTransaction函数放弃指定的异步事务并释放与事务相关联的所有资源。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hConv】标识交易发起的对话。如果此参数为0L，则所有事务都将被放弃（即【idTransactio


-------------------------------------------------------- KeyWin32DdeAccessData ----
DdeAccessData    DdeAccessData函数可以访问指定的动态数据交换（DDE）对象中的数据。当应用程序已完成访问对象中的数据时，必须调用DdeUnaccessData函数。
语法
参数
【HDATA】标识要访问的DDE对象。【pcbDataSize】指向接收由【HDATA】参数标识的DDE对象的大小（以字节为单位）的变量。如果此参数为NULL，则不返回大小信息。
返回值



-------------------------------------------------------- KeyWin32DdeAddData ----
DdeAddData    DdeAddData函数将数据添加到指定的动态数据交换（DDE）对象。应用程序可以从与对象开头的任何偏移开始添加数据。如果新数据与对象中已经存在的数据重叠，则新数据会覆盖发生重叠的字节中的旧数据。未写入的对象中的位置的内容未定义。
语法
参数
【HDATA】标识接收附加数据的DDE对象。【PSRC】指向包含要添加到DDE对象的数据的缓冲区。【cb】指定要添加到DDE对象的数据的长度（以字节为单位）。【cbOff】指定从DDE对象开


-------------------------------------------------------- KeyWin32DdeCallback ----
DdeCallback    DdeCallback函数是一个应用程序定义的回调函数，用于响应其他应用程序的动态数据交换管理库（DDEML）调用，处理发送到函数的动态数据交换（DDE）事务。
语法
参数
【UTYPE】指定当前事务的类型。此参数由事务类标志和事务类型标志的组合组成。下表描述了每个事务类，并提供了每个类中事务类型的列表。有关特定交易类型的信息，请参阅该类型的单个描述。类含义XC


-------------------------------------------------------- KeyWin32DdeClientTransaction ----
DdeClientTransaction    DdeClientTransaction函数开始客户端和服务器之间的数据事务。只有动态数据交换（DDE）客户端应用程序可以调用此函数，只有在与服务器建立对话之后，应用才可以使用它。
语法
参数
【的pData】指向客户端必须传递到服务器的数据的开头。可选地，应用程序可以指定传递给服务器的数据句柄（HDDEDATA），在这种情况下，【cbData】参数应设置为0xFFFFFFFF。仅


-------------------------------------------------------- KeyWin32DdeCmpStringHandles ----
DdeCmpStringHandles    DdeCmpStringHandles函数比较两个字符串句柄的值。字符串句柄的值与关联字符串的情况无关。
语法
参数
【hsz1plpl】标识第一个字符串。【hsz2plpl】标识第二个字符串。
返回值
返回值可以是以下值之一：值含义-1【hsz1plpl】的值为0或小于【hsz2plpl】的值。0【h


-------------------------------------------------------- KeyWin32DdeConnect ----
DdeConnect    DdeConnect函数与支持指定服务名称和主题名称对的服务器应用程序建立对话。如果存在多个这样的服务器，则系统仅选择一个。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hszService】标识指定要建立会话的服务器应用程序的服务名称的字符串。此句柄必须先前调用Dde


-------------------------------------------------------- KeyWin32DdeConnectList ----
DdeConnectList    DdeConnectList函数与支持指定服务名称和主题名称对的所有服务器应用程序建立对话。应用程序也可以使用此函数通过将函数传递给现有的会话句柄来获取会话句柄的列表。动态数据交换管理库从对话列表中删除任何终止对话的句柄。所产生的会话列表包含支持指定的服务名称和主题名称的所有当前建立的会话的句柄。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hszService】标识指定要建立会话的服务器应用程序的服务名称的字符串。如果此参数为0L，系统将


-------------------------------------------------------- KeyWin32DdeCreateDataHandle ----
DdeCreateDataHandle    DdeCreateDataHandle函数创建动态数据交换（DDE）对象，并使用指定缓冲区的数据填充对象。DDE应用程序在涉及将数据传递给合作伙伴应用程序的事务期间使用此函数。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【PSRC】指向包含要复制到DDE对象的数据的缓冲区。如果此参数为NULL，则不会将数据复制到对象。【


-------------------------------------------------------- KeyWin32DdeCreateStringHandle ----
DdeCreateStringHandle    DdeCreateStringHandle函数创建一个句柄，用于标识【PES】参数指向的字符串。动态数据交换（DDE）客户端或服务器应用程序可以将字符串句柄作为参数传递给其他动态数据交换管理库（DDEML）函数。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【PES】指向包含要为其创建句柄的以null结尾的字符串的缓冲区。此字符串最多可以包含255个字符。这


-------------------------------------------------------- KeyWin32DdeDisconnect ----
DdeDisconnect    DdeDisconnect函数终止由DdeConnect或DdeConnectList函数启动的对话，并使指定的会话句柄无效。
语法
参数
【hConv】识别要终止的活动对话。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。错误DdeGetLastError函数可用于获取错误代码，可能是以下值之一：DMLER


-------------------------------------------------------- KeyWin32DdeDisconnectList ----
DdeDisconnectList    DdeDisconnectList函数会销毁指定的会话列表，并终止与列表关联的所有会话。
语法
参数
【hConvList】标识会话列表。此句柄必须由先前调用DdeConnectList函数创建。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。错误DdeGetLastEr


-------------------------------------------------------- KeyWin32DdeEnableCallback ----
DdeEnableCallback    DdeEnableCallback函数启用或禁用特定会话或由呼叫应用程序当前建立的所有会话的交易。在禁用会话的事务后，操作系统将该会话的事务放置在与应用程序关联的事务队列中。该应用程序应尽快重新启用会话，以避免丢失排队的事务。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【hConv】标识要启用或禁用的会话。如果此参数为NULL，该函数将影响所有对话。【WCMD】指定函数


-------------------------------------------------------- KeyWin32DdeFreeDataHandle ----
DdeFreeDataHandle    DdeFreeDataHandle函数释放动态数据交换（DDE）对象并删除与对象关联的数据句柄。
语法
参数
【HDATA】标识要释放的DDE对象。此句柄必须由先前调用DdeCreateDataHandle函数创建或由DdeClientTransaction函数返回。
返回值
如果函数成功，返回


-------------------------------------------------------- KeyWin32DdeFreeStringHandle ----
DdeFreeStringHandle    DdeFreeStringHandle函数释放调用应用程序中的字符串句柄。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【帖子】标识要释放的字符串句柄。此句柄必须先前调用DdeCreateStringHandle函数创建。


-------------------------------------------------------- KeyWin32DdeGetData ----
DdeGetData    DdeGetData函数将数据从指定的动态数据交换（DDE）对象复制到指定的本地缓冲区。
语法
参数
【HDATA】标识包含要复制的数据的DDE对象。【pDst】指向接收数据的缓冲区。如果此参数为NULL，则DdeGetData函数返回要复制到缓冲区的数据量（以字节为单位）。【CBMAX】指


-------------------------------------------------------- KeyWin32DdeGetLastError ----
DdeGetLastError    DdeGetLastError函数返回由动态数据交换管理库（DDEML）函数失败设置的最新错误代码，并将错误代码重置为DMLERR_NO_ERROR。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。
返回值
如果函数成功，则返回值是最后一个错误代码。以下是可能的DDEML错误代码：值含义DMLE


-------------------------------------------------------- KeyWin32DdeImpersonateClient ----
DdeImpersonateClient    DdeImpersonateClient函数在DDE客户端会话中模拟动态数据交换（DDE）客户端应用程序。
语法
参数
【hConv】标识要模拟的DDE客户端对话。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
模拟是一个进程


-------------------------------------------------------- KeyWin32DdeInitialize ----
DdeInitialize    DdeInitialize函数使用动态数据交换管理库（DDEML）注册应用程序。调用任何其他DDEML函数之前，应用程序必须调用此函数。
语法
参数
【pidInst】指向应用程序实例标识符。初始化时，该参数应指向0。如果函数成功，则该参数指向应用程序的实例标识符。该值应该在需要它的所有其他DDEML函数中作为【idInst】参数传递。如


-------------------------------------------------------- KeyWin32DdeKeepStringHandle ----
DdeKeepStringHandle    DdeKeepStringHandle函数会增加与指定句柄关联的使用次数。此函数使应用程序可以将传递到应用程序的动态数据交换（DDE）回调函数的字符串句柄保存。否则，当回调函数返回时，传递给回调函数的字符串句柄被删除。此函数也应用于保留由DdeQueryConvInfo函数返回的CONVINFO结构引用的字符串句柄的副本。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【帖子】标识要保存的字符串句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32DdeNameService ----
DdeNameService    DdeNameService函数注册或注销动态数据交换（DDE）服务器支持的服务名称。此函数使系统向其他正在运行的动态数据交换管理库（DDEML）客户端应用程序发送XTYP_REGISTER或XTYP_UNREGISTER事务。服务器应用程序应该调用此函数来注册它支持的每个服务名称，并注销以前注册但不再支持的名称。服务器也应该调用此函数在终止前取消注册其服务名称。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【hsz1plpl】标识指定服务器正在注册或取消注册的服务名称的字符串。注销所有服务名称的应用程序应将


-------------------------------------------------------- KeyWin32DdePostAdvise ----
DdePostAdvise    DdePostAdvise函数使系统向每个客户端的主叫（服务器）应用程序的动态数据交换（DDE）回调函数发送XTYP_ADVREQ事务，并在指定的主题和项目上使用一个主动的建议循环。每当与主题名称或项目名称对相关联的数据发生变化时，服务器应用程序都应调用此函数。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获取的应用程序实例标识符。【hszTopic】标识指定主题名称的字符串。要通过主动建议循环发送所有主题的通知，应用程序可以将此参


-------------------------------------------------------- KeyWin32DdeQueryConvInfo ----
DdeQueryConvInfo    DdeQueryConvInfo函数获取有关动态数据交换（DDE）交易以及交易发生的对话的信息。
语法
参数
【hConv】识别对话。【idTransaction】指定事务。对于异步事务，此参数应为DdeClientTransaction函数返回的事务标识符。对于同步事务，此参数应为QID_SYNC


-------------------------------------------------------- KeyWin32DdeQueryNextServer ----
DdeQueryNextServer    DdeQueryNextServer函数获取指定会话列表中的下一个会话句柄。
语法
参数
【hConvList】标识会话列表。此句柄必须由先前调用DdeConnectList函数创建。【hConvPrev】标识此函数以前返回的会话句柄。如果此参数为0L，该函数将返回列表中的第一个


-------------------------------------------------------- KeyWin32DdeQueryString ----
DdeQueryString    DdeQueryString函数将与字符串句柄关联的文本复制到缓冲区中。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。【帖子】标识要复制的字符串。此句柄必须由先前调用DdeCreateStringHandle函数创建。【


-------------------------------------------------------- KeyWin32DdeReconnect ----
DdeReconnect    DdeReconnect函数允许客户端动态数据交换管理库（DDEML）应用程序尝试重新建立与终止与客户端会话的服务的会话。当对话重新建立时，DDEML尝试重新建立任何预先存在的建议循环。
语法
参数
【hConv】确定要重新建立的对话。客户端必须先前调用DdeConnect函数或从XTYP_DISCONNECT事务获取会话句柄。
返回值
如果函数成功，则返回值是重新建立的会话的句柄。


-------------------------------------------------------- KeyWin32DdeSetQualityOfService ----
DdeSetQualityOfService    DdeSetQualityOfService函数指定原始DDE应用程序希望启动的未来DDE会话的服务质量。指定的服务质量适用于在这些设置到位时开始的任何对话。DDE对话的服务质量在谈话期间持续;在给定对话期间调用DdeSetQualityOfService函数不会影响对话的服务质量。
语法
参数
【hwndClient】标识指定客户端将要发送的WM_DDE_INITIATE消息来启动DDE会话的DDE客户端窗口。【pqosNew】指向SECURITY_QUALITY_OF_SERVI


-------------------------------------------------------- KeyWin32DdeSetUserHandle ----
DdeSetUserHandle    DdeSetUserHandle函数将应用程序定义的32位值与会话句柄或事务标识符相关联。这对于简化异步事务的处理非常有用。应用程序可以使用DdeQueryConvInfo函数来检索此值。
语法
参数
【hConv】识别对话。【id】指定与【房屋da】参数指定的值关联的事务标识符。应用程序应将此参数设置为QID_SYNC以将【房屋da】与由【hConv】参数标识的会话相关联。【房屋da】标


-------------------------------------------------------- KeyWin32DdeUnaccessData ----
DdeUnaccessData    DdeUnaccessData函数无法处理动态数据交换（DDE）对象。应用程序在完成访问对象后必须调用此函数。
语法
参数
【HDATA】标识DDE对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。错误DdeGetLastError函数可用于获取错误代码，可能是以下值之一：DMLERR_D


-------------------------------------------------------- KeyWin32DdeUninitialize ----
DdeUninitialize    所有DdeUninitialize函数可以释放与调用应用程序相关联的所有动态数据交换管理库（DDEML）资源。
语法
参数
【idInst】指定通过先前调用DdeInitialize函数获得的应用程序实例标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
DdeUninitia


-------------------------------------------------------- KeyWin32DebugActiveProcess ----
DebugActiveProcess    DebugActiveProcess函数允许调试器附加到活动进程，然后进行调试。
语法
参数
【dwProcessId】指定要调试的进程的标识符。调试器可以调试对进程的访问，就像使用DEBUG_ONLY_THIS_PROCESS标志创建进程一样。
返回值
如果函数成功，返回值不为


-------------------------------------------------------- KeyWin32DebugBreak ----
DebugBreak    DebugBreak函数导致在当前进程中发生断点异常，以便调用线程可以发信号通知调试器并强制它采取一些措施。如果没有调试进程，则使用标准异常处理程序的搜索逻辑。在大多数情况下，这会导致调用进程由于未处理的断点异常而终止。
语法
参数
此函数无参数。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32DebugProc ----
DebugProc    DebugProc挂接过程是一个应用程序定义或库定义的回调函数，Windows调用与任何其他类型的钩子关联的钩子过程之前调用。系统将有关要调用的钩子的信息传递给DebugProc挂钩过程，该过程检查信息并确定是否允许调用挂钩。
语法
参数
【NCODE】指定挂接过程是否处理消息。如果【NCODE】为HC_ACTION，则挂接过程必须处理该消息。如果【NCODE】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，


-------------------------------------------------------- KeyWin32DefDlgProc ----
DefDlgProc    DefDlgProc函数对属于应用程序定义的对话框类的窗口过程执行默认消息处理。
语法
参数
【hDlg】标识对话框。【消息】指定消息号。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
返回值指定消息处理的结果，并取决于发送的消息。



-------------------------------------------------------- KeyWin32DeferWindowPos ----
DeferWindowPos    DeferWindowPos函数更新指定窗口的指定多窗口位置结构。该函数然后将句柄返回到更新的结构。EndDeferWindowPos函数使用此结构中的信息同时更改多个窗口的位置和大小。BeginDeferWindowPos函数创建结构。
语法
参数
【hWinPosInfo】识别包含一个或多个窗口的大小和位置信息的多窗口位置结构。此结构由BeginDeferWindowPos或最近调用DeferWindowPos返回。【的hWnd】标识


-------------------------------------------------------- KeyWin32DefFrameProc ----
DefFrameProc    DefFrameProc函数为多文档界面（MDI）框架窗口的窗口过程不处理的任何窗口消息提供默认处理。窗口过程未显式处理的所有窗口消息必须传递给DefFrameProc函数，而不是DefWindowProc函数。
语法
参数
【的hWnd】标识MDI框架窗口。【hWndMDIClient】标识MDI客户端窗口。【uMsg】指定要处理的消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息


-------------------------------------------------------- KeyWin32DefHookProc ----
DefHookProc  DefHookProc函数已过时。它仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用CallNextHookEx函数。


-------------------------------------------------------- KeyWin32DefineDosDevice ----
DefineDosDevice    DefineDosDevice函数允许应用程序定义，重新定义或删除MS-DOS设备名称。MS-DOS设备名称作为符号链接存储在32位版本的Windows中的对象名称空间中。将MS-DOS路径转换为32位版本的Windows中的相应路径的代码将使用这些符号链接映射MS-DOS设备和驱动器号。DefineDosDevice函数提供了一种基于Win32的应用程序可以修改用于实现MS-DOS设备名称空间的符号链接的机制。
语法
参数
【dwFlags中】指定DefineDosDevice函数的几个可控方面。可以使用以下一个或多个值：值含义DDD_RAW_TARGET_PATH如果指定了此值，该函数不会将【lpTarget


-------------------------------------------------------- KeyWin32DefineHandleTable ----
DefineHandleTable  DefineHandleTable函数已过时。它被提供为一个宏，以简化16位Windows应用程序的移植。在评估其参数后，它将扩展为TRUE。没有其他的效果。


-------------------------------------------------------- KeyWin32DefMDIChildProc ----
DefMDIChildProc    DefMDIChildProc函数为多文档界面（MDI）子窗口的窗口过程不处理的任何窗口消息提供默认处理。窗口过程未处理的窗口消息必须传递给DefMDIChildProc函数，而不是DefWindowProc函数。
语法
参数
【的hWnd】标识MDI子窗口。【uMsg】指定要处理的消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
返回值指定消息处理的结果，并取


-------------------------------------------------------- KeyWin32DefScreenSaverProc ----
DefScreenSaverProc    DefScreenSaverProc函数为屏幕保护程序应用程序不处理的任何消息提供默认处理。
语法
参数
【的hWnd】标识屏幕保护程序窗口。【味精】指定要处理的消息。DefScreenSaverProc函数将响应影响屏幕保护程序操作的消息，如“备注”部分所述。如果屏幕保护程序应用程序必须对这些


-------------------------------------------------------- KeyWin32DefWindowProc ----
DefWindowProc    DefWindowProc函数调用默认窗口过程来为应用程序未处理的任何窗口消息提供默认处理。此函数可确保每个消息都被处理。使用窗口过程接收的相同参数调用DefWindowProc.
语法
参数
【的hWnd】标识接收消息的窗口过程。【消息】指定消息。【wParam中】指定附加消息信息。该参数的内容取决于【消息】参数的值。【lParam的】指定附加消息信息。该参数的内容取决于【消息】


-------------------------------------------------------- KeyWin32DeleteAce ----
DeleteAce    DeleteAce函数从ACL中删除ACE。ACE是一个访问控制条目。ACL是访问控制列表。
语法
参数
【ACL】指向ACL结构。由【dwAceIndex】参数指定的ACE将从此ACL中删除。【dwAceIndex】指定要删除的ACE。值为0对应于ACL中的第一个ACE，1对应于第二个ACE，


-------------------------------------------------------- KeyWin32DeleteAtom ----
DeleteAtom    DeleteAtom函数减少本地字符串原子的引用计数。如果原子的引用计数减少为零，DeleteAtom将从本地原子表中删除与原子关联的字符串。
语法
参数
【纳多马斯】标识要删除的原子和字符串。
返回值
如果函数成功，返回值为零。如果函数失败，则返回值为【纳多马斯】参数。要获取扩展错误信息，请调用GetLastError.
描述
字符串


-------------------------------------------------------- KeyWin32DeleteColorSpace ----
DeleteColorSpace    DeleteColorSpace函数删除指定的颜色空间，释放与其关联的所有内部资源。
语法



-------------------------------------------------------- KeyWin32DeleteCriticalSection ----
DeleteCriticalSection    DeleteCriticalSection函数释放由未知的关键部分对象使用的所有资源。
语法
参数
【lpCriticalSection】指向临界区对象。
返回值
此函数不返回值。
描述
删除关键的部分对象会释放对象使用的所有系统资源。删除后，无法在EnterCriticalSec


-------------------------------------------------------- KeyWin32DeleteDC ----
DeleteDC    DeleteDC函数删除指定的设备上下文（DC）。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
应用程序不得通过调用GetDC函数删除获取句柄的设备上下文。相反，它必须调用Rele


-------------------------------------------------------- KeyWin32DeleteEnhMetaFile ----
DeleteEnhMetaFile    DeleteEnhMetaFile函数删除增强格式的图元文件或增强格式的图元文件句柄。
语法
参数
【HEMF】识别增强的图元文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
如果【HEMF】参数识别存储在内存中的增强型图元文件，则DeleteEnhMe


-------------------------------------------------------- KeyWin32DeleteFiber ----
DeleteFiber    DeleteFiber函数删除现有光纤。
语法
参数
【//指向要删除的光纤的指针】指定要删除的光纤的地址。
返回值
此函数不返回值。
描述
DeleteFiber函数删除与光纤相关联的所有数据。该数据包括堆栈，寄存器的子集和光纤数据。


-------------------------------------------------------- KeyWin32DeleteFile ----
DeleteFile    DeleteFile函数删除现有文件。
语法
参数
【lpFileName】指向指定要删除的文件的以null结尾的字符串。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.


-------------------------------------------------------- KeyWin32DeleteForm ----
DeleteForm    DeleteForm函数从支持的表单列表中删除表单名称。
语法
参数
【hPrinter】表示要执行此函数的打开的打印机手柄。【pFormName】指向要删除的表单名称。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请


-------------------------------------------------------- KeyWin32DeleteMenu ----
DeleteMenu    DeleteMenu函数从指定的菜单中删除一个项目。如果菜单项打开菜单或子菜单，此函数会销毁菜单或子菜单的句柄，并释放菜单或子菜单使用的内存。
语法
参数
【HMENU】标识要更改的菜单。【uPositionbs】指定要删除的菜单项，由【uFlags】参数确定。【uFlags】指定如何解释【uPositionbs】参数。此参数必须是以下值之一：


-------------------------------------------------------- KeyWin32DeleteMetaFile ----
DeleteMetaFile    DeleteMetaFile函数删除Windows格式的图元文件或Windows格式的图元文件句柄。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用DeleteEnhMetaFile函数。
语法
参数
【HMF】标识Windows格式的图元文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
Windows格式的图元文件不支持新的曲线，路径和转换函数，例如P


-------------------------------------------------------- KeyWin32DeleteMonitor ----
DeleteMonitor    DeleteMonitor函数删除由AddMonitor函数添加的打印机监视器。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中删除监视器的服务器的名称。如果此参数为NULL，则本地将删除打印机监视器。【pEnvironment】指向以空字符结尾的字符串，指定要从中删


-------------------------------------------------------- KeyWin32DeleteObject ----
DeleteObject    DeleteObject函数删除逻辑笔，画笔，字体，位图，区域或调色板，释放与对象相关联的所有系统资源。删除对象后，指定的句柄将不再有效。
语法
参数
【hObject】标识逻辑笔，画笔，字体，位图，区域或调色板。
返回值
如果函数成功，返回值不为零。如果指定的句柄无效或当前被选择到设备上下文中，则返回值为零。
描述
当它仍被选择到


-------------------------------------------------------- KeyWin32DeletePort ----
DeletePort    DeletePort函数显示一个对话框，允许用户删除端口名称。
语法
参数
【PNAME】指向零终止字符串的指针，指定应删除该端口的服务器的名称。如果此参数为NULL，则删除本地端口。【的hWnd】处理到端口删除对话框的父窗口。【pPortName】指向一个零终止的


-------------------------------------------------------- KeyWin32DeletePrinter ----
DeletePrinter    DeletePrinter函数删除指定的打印机对象。
语法
参数
【hPrinter】标识将被删除的打印机对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
打印机手柄【


-------------------------------------------------------- KeyWin32DeletePrinterConnection ----
DeletePrinterConnection    DeletePrinterConnection函数删除与通过呼叫AddPrinterConnection或ConnectToPrinterDlg建立的打印机的连接。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要删除的打印机连接的名称。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.


-------------------------------------------------------- KeyWin32DeletePrinterData ----
DeletePrinterData    [New - Windows NT]DeletePrinterData函数删除打印机的指定配置数据。打印机的配置数据由一组命名和类型值组成。DeletePrinterData函数删除其值之一指定的值之一。
语法
参数
【hPrinter】处理要删除其配置数据的打印机。通过调用OpenPrinter函数获取此打印机句柄。【pValueName】指向要删除的配置数据值的以null结尾的名称。回报值如果函数成功


-------------------------------------------------------- KeyWin32DeletePrinterDriver ----
DeletePrinterDriver    DeletePrinterDriver函数从服务器支持的驱动程序的名称列表中删除指定的打印机驱动程序名称。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中删除驱动程序的服务器的名称。如果此参数为NULL，则打印机驱动程序名称将在本地删除。【pEnvironment】指向以空字符结尾的字符串，指


-------------------------------------------------------- KeyWin32DeletePrintProcessor ----
DeletePrintProcessor    DeletePrintProcessor函数删除由AddPrintProcessor函数添加的打印机处理器。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中移除处理器的服务器的名称。如果此参数为NULL，则打印机处理器在本地被删除。【pEnvironment】指向以空字符结尾的字符串，指定要从中


-------------------------------------------------------- KeyWin32DeletePrintProvidor ----
DeletePrintProvidor    DeletePrintProvidor函数删除由AddPrintProvidor函数添加的打印机提供商。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定要从中删除提供程序的服务器的名称。如果此参数为NULL，打印机提供程序将在本地删除。【pEnvironment】指向一个空值终止的字符串，指定要从


-------------------------------------------------------- KeyWin32DeleteService ----
DeleteService    DeleteService函数从服务控制管理器数据库中标记要删除的指定服务。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有DELETE访问权限。
返回值
如果函数成功，返回值不为零。如果函数失败，返


-------------------------------------------------------- KeyWin32DeregisterEventSource ----
DeregisterEventSource    DeregisterEventSource函数关闭RegisterEventSource函数返回的句柄。
语法
参数
【hEventLog】标识由RegisterEventSource返回句柄的事件日志。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLa


-------------------------------------------------------- KeyWin32DestroyAcceleratorTable ----
DestroyAcceleratorTable    DestroyAcceleratorTable函数会销毁加速器表。在应用程序关闭之前，它必须使用此函数来销毁使用CreateAcceleratorTable函数创建的每个加速表。
语法
参数
【HACCEL】标识要销毁的加速器表。此句柄必须是通过调用CreateAcceleratorTable函数创建的。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyWin32DestroyCaret ----
DestroyCaret    DestroyCaret函数会消除插入符当前的形状，从窗口中释放插入符号，并从屏幕中删除插入符号。如果插入符号形状基于位图，DestroyCaret不会释放位图。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
DestroyCaret仅当当前任务中的窗口


-------------------------------------------------------- KeyWin32DestroyCursor ----
DestroyCursor    DestroyCursor函数会销毁由CreateCursor函数创建的游标，并释放光标所占用的任何内存。不要使用此函数来销毁没有使用CreateCursor函数创建的游标。
语法
参数
【HCURSORpt】标识要销毁的光标。光标不能被使用。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32DestroyIcon ----
DestroyIcon    DestroyIcon函数会销毁图标，并释放图标占用的任何内存。
语法
参数
【惠康】标识要销毁的图标。该图标不得使用。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
只需要为Crea


-------------------------------------------------------- KeyWin32DestroyMenu ----
DestroyMenu    DestroyMenu函数会销毁指定的菜单，并释放菜单所占用的任何内存。
语法
参数
【HMENU】标识要销毁的菜单。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
关闭前，应用程序必须使用D


-------------------------------------------------------- KeyWin32DestroyPrivateObjectSecurity ----
DestroyPrivateObjectSecurity    DestroyPrivateObjectSecurity函数删除受保护的服务器对象的安全描述符。必须通过调用CreatePrivateObjectSecurity函数创建此安全描述符。
语法
参数
【ObjectDescriptor】指向要删除的SECURITY_DESCRIPTOR结构的指针。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调


-------------------------------------------------------- KeyWin32DestroyPropertySheetPage ----
DestroyPropertySheetPage    DestroyPropertySheetPage函数会销毁属性表页面。对于尚未传递给PropertySheet函数的页面，应用程序必须调用此函数。
语法
参数
【hPSPage】处理到属性表页面删除。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32DestroyWindow ----
DestroyWindow    DestroyWindow函数会破坏指定的窗口。该函数将WM_DESTROY和WM_NCDESTROY消息发送到窗口以停用它并从中删除键盘焦点。该函数还会破坏窗口的菜单，刷新线程消息队列，破坏定时器，删除剪贴板所有权，并打破剪贴板查看器链（如果窗口位于查看器链的顶部）。如果指定的窗口是父窗口或所有者窗口，则DestroyWindow会在销毁父窗口或所有者窗口时自动销毁相关联的子窗口或拥有的窗口。该函数首先销毁子窗口或拥有的窗口，然后破坏父窗口或所有者窗口。
语法
参数
【的hWnd】标识要销毁的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
线程不能使用Destroy


-------------------------------------------------------- KeyWin32DeviceCapabilities ----
DeviceCapabilities    DeviceCapabilities函数可检索打印机设备驱动程序的函数。
语法
参数
【pDevice】指向包含打印机名称的以null结尾的字符串。请注意，这是打印机的名称，而不是打印机驱动程序。【pPort】指向包含设备连接到的端口名称的空终止字符串的指针，例如“LPT1”


-------------------------------------------------------- KeyWin32DeviceIoControl ----
DeviceIoControl    DeviceIoControl函数将控制代码直接发送到指定的设备驱动程序，使相应的设备执行指定的操作。
语法
参数
【hDevice】处理要执行操作的设备。调用CreateFile函数获取设备句柄。【dwIoControlCode】指定操作的控制代码。该值标识要执行的具体操作和要执行操作的设备类型。定义了


-------------------------------------------------------- KeyWin32DialogBox ----
DialogBox    DialogBox宏从对话框模板资源创建一个模态对话框。DialogBox不会返回控制，直到指定的回调函数通过调用EndDialog函数终止模态对话框。DialogBox宏使用DialogBoxParam函数。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplate】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模板的资源


-------------------------------------------------------- KeyWin32DialogBoxIndirect ----
DialogBoxIndirect    宏DialogBoxIndirect从内存中的对话框模板创建一个模态对话框。DialogBoxIndirect不会返回控制，直到指定的回调函数通过调用EndDialog函数终止模态对话框。DialogBoxIndirect宏使用DialogBoxIndirectParam函数。
语法
参数
【的hInstance】标识创建对话框的模块的实例。【lpTemplate】指向包含DialogBoxIndirect用于创建对话框的模板的全局内存对象。对话框模板由描述该对话框的标题组成，


-------------------------------------------------------- KeyWin32DialogBoxIndirectParam ----
DialogBoxIndirectParam    DialogBoxIndirectParam函数从内存中的对话框模板创建一个模态对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法



-------------------------------------------------------- KeyWin32DialogBoxParam ----
DialogBoxParam    DialogBoxParam函数从对话框模板资源创建一个模态对话框。在显示对话框之前，该函数将应用程序定义的值传递给对话框过程作为WM_INITDIALOG消息的【lParam的】参数。应用程序可以使用此值初始化对话框控件。
语法
参数
【的hInstance】标识可执行文件包含对话框模板的模块实例。【lpTemplateName】标识对话框模板。该参数是指向空值终止的字符串的指针，该字符串指定对话框模板的名称或指定对话框模


-------------------------------------------------------- KeyWin32DialogProc ----
DialogProc    DialogProc函数是一个应用程序定义的回调函数，用于处理发送到模态或无模式对话框的消息。
语法
参数
【hwndDlg】标识对话框。【uMsg】指定消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
除了响应WM_INITDIALOG消息之


-------------------------------------------------------- KeyWin32DisableThreadLibraryCalls ----
DisableThreadLibraryCalls    DisableThreadLibraryCalls函数禁用由【hLibModule】指定的动态链接库（DLL）的DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知。这可以减少一些应用程序的工作代码集的大小。
语法
参数
【hLibModule】指定要禁用DLL_THREAD_ATTACH和DLL_THREAD_DETACH通知的动态链接库模块。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32DisconnectNamedPipe ----
DisconnectNamedPipe    DisconnectNamedPipe函数将命名管道实例的服务器端与客户端进程断开连接。
语法
参数
【hNamedPipe】标识命名管道的一个实例。此句柄必须由CreateNamedPipe函数创建。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请


-------------------------------------------------------- KeyWin32DispatchMessage ----
DispatchMessage    DispatchMessage函数将消息分派给窗口过程。它通常用于调度由GetMessage函数检索到的消息。
语法
参数
【LPMSG】指向包含该消息的MSG结构。
返回值
返回值指定窗口过程返回的值。虽然其含义取决于要分派的消息，但通常忽略返回值。
描述
MSG结构必须包含有效的消息值。如果【LPMS


-------------------------------------------------------- KeyWin32DlgDirList ----
DlgDirList    DlgDirList函数使用与指定路径或文件名匹配的所有文件的名称填充指定的列表框。
语法
参数
【hDlg】标识包含列表框的对话框。【lpPathSpec】指向包含路径或文件名的以null结尾的字符串。DlgDirList修改此字符串，该字符串应足够长以包含修改。有关此参数的详细信息，


-------------------------------------------------------- KeyWin32DlgDirListComboBox ----
DlgDirListComboBox    DlgDirListComboBox函数使用目录列表填充指定的组合框。它使用与指定属性和路径字符串匹配的所有文件，驱动器和子目录的名称填充列表。
语法
参数
【hDlg】标识包含组合框的对话框。【lpPathSpec】指向以下形式的以null结尾的字符串：[【drive】:][\]][【directory】\[...]][【filename】]如


-------------------------------------------------------- KeyWin32DlgDirSelectComboBoxEx ----
DlgDirSelectComboBoxEx    DlgDirSelectComboBoxEx函数从使用DlgDirListComboBox函数填充的组合框中检索当前选择。选择被解释为驱动器盘符，文件或目录名称。
语法
参数
【hDlg】标识包含组合框的对话框。【lpString】指向要接收所选路径的缓冲区。【NCOUNT】指定【lpString】参数指向的缓冲区的长度（以字符为单位）。【nIDComboBox】


-------------------------------------------------------- KeyWin32DllEntryPoint ----
DllEntryPoint    DllEntryPoint函数是进入动态链接库（DLL）的可选方法。如果使用该函数，则当进程和线程被初始化和终止时，或在调用LoadLibrary和FreeLibrary函数时，系统会调用该函数。DllEntryPoint是库定义函数名称的占位符。实际名称必须在构建时指定。有关更多信息，请参阅开发工具附带的文档。
语法
参数
【hinstDLL】DLL的句柄。该值是DLL的基址。DLL的HINSTANCE与DLL的HMODULE相同，因此【hinstDLL】可用于后续调用GetModuleFileName函数和其


-------------------------------------------------------- KeyWin32DocumentProperties ----
DocumentProperties    DocumentProperties函数检索或修改打印机初始化信息或显示指定打印机的打印机配置对话框。
语法
参数
【的hWnd】标识打印机配置对话框的父窗口。【hPrinter】标识打印机对象。【pDeviceName】指向以null结尾的字符串，指定要显示打印机配置对话框的设备的名称。【pDevMod


-------------------------------------------------------- KeyWin32DosDateTimeToFileTime ----
DosDateTimeToFileTime    DosDateTimeToFileTime函数将MS-DOS日期和时间值转换为64位文件时间。
语法
参数
【wFatDate】指定MS-DOS日期。日期是一个包装的16位值，格式如下：位内容0-4当天（1-31）5-8Month (1 = January, 2 = February, and s


-------------------------------------------------------- KeyWin32DPtoLP ----
DPtoLP    DPtoLP函数将设备坐标转换为逻辑坐标。转换取决于设备上下文的映射模式，窗口和视口的起点和扩展区的设置以及世界变换。
语法
参数
【HDC】标识设备上下文。【lpPoints】指向POINT结构的数组。每个POINT结构中包含的x坐标和y坐标将被转换。【NCOUNT】指定数组中的点数。
返回值
如果函数成功，返回值


-------------------------------------------------------- KeyWin32DragAcceptFiles ----
DragAcceptFiles    DragAcceptFiles函数注册窗口是否接受删除的文件。
语法
参数
【的hWnd】标识窗口是否接受丢弃的文件。【fAccept】指定由【的hWnd】参数标识的窗口是否接受删除的文件。该值为TRUE以接受丢弃的文件;停止接受丢弃的文件是FALSE。
返回值



-------------------------------------------------------- KeyWin32DragDetect ----
DragDetect    [Now Supported on Windows NT]DragDetect函数捕获鼠标并跟踪其移动，直到用户释放左按钮，按ESC键或将鼠标移动到指定点周围的“拖动矩形”之外。拖动矩形的宽度和高度由GetSystemMetrics函数返回的SM_CXDRAG和SM_CYDRAG值指定。
语法
参数
【HWND】处理窗口接收鼠标输入。【pt】鼠标的初始位置，屏幕坐标。该函数通过使用该点确定拖动矩形的坐标。
返回值
如果用户将鼠标悬停在拖动矩形的外部，同时向左按住左按钮，则返回值不为零


-------------------------------------------------------- KeyWin32DragFinish ----
DragFinish    DragFinish函数释放Windows分配用于将文件名传送到应用程序的内存。
语法
参数
【HDROP】标识描述删除文件的结构。从WM_DROPFILES消息的【wParam中】参数检索该句柄。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32DragQueryFile ----
DragQueryFile    DragQueryFile函数检索已删除文件的文件名。
语法
参数
【HDROP】标识包含已删除文件的文件名的结构。【iFile的en】指定要查询的文件的索引。如果【iFile的en】参数的值为0xFFFFFFFF，则DragQueryFile返回丢弃的文件


-------------------------------------------------------- KeyWin32DragQueryPoint ----
DragQueryPoint    DragQueryPoint函数在文件删除时检索鼠标指针的位置。
语法
参数
【HDROP】标识描述丢弃文件的结构。【LPPT】指向POINT结构，该函数在文件删除时填充鼠标指针的坐标。
返回值
如果在窗口的客户区中发生了丢弃，则返回值不为零。如果在窗口的客户端区


-------------------------------------------------------- KeyWin32DrawAnimatedRects ----
DrawAnimatedRects    [Now Supported on Windows NT]DrawAnimatedRects函数绘制一个线框矩形，并将其动画化，以指示图标的打开或窗口的最小化或最大化。
语法
参数
【HWND】处理矩形被剪切的窗口。如果此参数为NULL，则使用屏幕的工作区域。【拘留】该参数是保留的，必须为零。【lprcTo】指向SMALL_RECT结构，指定图标或最小化窗口的位置和大小


-------------------------------------------------------- KeyWin32DrawCaption ----
DrawCaption    [Now Supported on Windows NT]DrawCaption函数绘制一个窗口标题。
语法
参数
【HWND】处理窗口的窗口，为窗口标题提供文本和图标。【HDC】处理设备上下文。该函数将窗口标题绘制到此设备上下文中。【LPRC】指向RECT结构的指针，用于指定窗口标题的边界矩形。【uFl


-------------------------------------------------------- KeyWin32DrawEdge ----
DrawEdge    DrawEdge函数绘制一个或多个矩形边。
语法
参数
【HDC】标识设备上下文。【QRC】指向包含矩形的逻辑坐标的RECT结构。【边缘】指定要绘制的内边缘和外边缘的类型。此参数必须是一个内部边框标志和一个外部边框标志的组合。内部边界标志如下：值


-------------------------------------------------------- KeyWin32DrawEscape ----
DrawEscape    DrawEscape函数访问通过图形设备界面（GDI）无法直接使用的视频显示的绘图函数。
语法



-------------------------------------------------------- KeyWin32DrawFocusRect ----
DrawFocusRect    DrawFocusRect函数在用于指示矩形具有焦点的样式中绘制一个矩形。
语法
参数
【hDC】标识设备上下文。【LPRC】指向RECT结构，指定矩形的逻辑坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastErr


-------------------------------------------------------- KeyWin32DrawFrameControl ----
DrawFrameControl    DrawFrameControl函数绘制指定类型和样式的框架控件。
语法
参数
【HDC】标识要绘制控件的窗口的设备上下文。【LPRC】指向RECT结构，其中包含框架控制的边界矩形的逻辑坐标。【UTYPE】指定要绘制的框架控件的类型。此参数可以是以下值之一：值含义DFC


-------------------------------------------------------- KeyWin32DrawIcon ----
DrawIcon    DrawIcon函数在指定设备上下文的窗口的客户区中绘制一个图标。
语法
参数
【hDC】标识窗口的设备上下文。【X】指定图标左上角的逻辑x坐标。【Y】指定图标左上角的逻辑y坐标。【惠康】标识要绘制的图标。Windows NT：图标资源以前必须使用LoadIcon函数加


-------------------------------------------------------- KeyWin32DrawIconEx ----
DrawIconEx    DrawIconEx函数在指定的设备上下文的窗口的客户区中绘制一个图标或光标，执行指定的栅格操作，并按指定的方式拉伸或压缩图标或光标。
语法
参数
【HDC】标识窗口的设备上下文。【xLeft】指定图标或光标左上角的逻辑x坐标。【的y topsv】指定图标或光标左上角的逻辑y坐标。【惠康】标识要绘制的图标或光标。该参数可以识别动画光标。


-------------------------------------------------------- KeyWin32DrawInsert ----
DrawInsert    DrawInsert函数在指定的拖动列表框的父窗口中绘制插入图标。
语法



-------------------------------------------------------- KeyWin32DrawMenuBar ----
DrawMenuBar    DrawMenuBar函数重新绘制指定窗口的菜单栏。如果Windows创建窗口后菜单栏发生更改，则必须调用此函数来绘制更改的菜单栏。
语法
参数
【的hWnd】标识其菜单栏需要重新绘制的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32DrawState ----
DrawState    [Now Supported on Windows NT]DrawState函数显示图像并应用视觉效果来指示状态，例如禁用或默认状态。
语法
参数
【HDC】标识要绘制的设备上下文。【HBR】如果【fuFlags】参数指定的状态为DSS_MONO，则标识用于绘制图像的画笔。其他状态忽略此参数。【lpOutputFunc】指向用于呈现图像


-------------------------------------------------------- KeyWin32DrawStateProc ----
DrawStateProc    [Now Supported on Windows NT]DrawStateProc函数是一个应用程序定义的回调函数，它为DrawState函数呈现复杂的图像。
语法
参数
【HDC】标识要绘制的设备上下文。设备上下文是选择位图的存储设备上下文，其尺寸至少与【cx】和【cy】参数指定的尺寸一样大。【LDATA】指定应用程序传递给DrawState的图像信息。【W


-------------------------------------------------------- KeyWin32DrawStatusText ----
DrawStatusText    DrawStatusText函数以具有边框的状态窗口的样式绘制指定的文本。
语法
参数
【HDC】处理窗口的显示上下文。【LPRC】指向RECT结构的指针，其中包含在客户端坐标中绘制文本的矩形的位置。该函数将边框绘制在指定矩形边缘的内侧。【pszText】指向指定要显示的文本的


-------------------------------------------------------- KeyWin32DrawText ----
DrawText    DrawText函数在指定的矩形中绘制格式化的文本。它根据指定的方法格式化文本（展开选项卡，调整字符，断开线等）。
语法
参数
【hDC】标识设备上下文。【lpString】指向要绘制的字符串。如果【NCOUNT】参数为-1，则字符串必须为空终止。【NCOUNT】指定字符串中的字符数。如果【NCOUNT】为-1，则【


-------------------------------------------------------- KeyWin32DrawTextEx ----
DrawTextEx    [Now Supported on Windows NT]DrawTextEx函数在指定的矩形中绘制格式化的文本。
语法
参数
【HDC】标识要绘制的设备上下文。【lpchText】指向字符串绘制。如果【cchText】参数为-1，则该字符串必须为空终止。【cchText】指定由【lpchText】参数指定的字符串的


-------------------------------------------------------- KeyWin32DuplicateHandle ----
DuplicateHandle    DuplicateHandle函数复制对象句柄。
语法
参数
【hSourceProcessHandle】标识包含要复制的句柄的过程。手柄必须具有PROCESS_DUP_HANDLE访问权限。有关详细信息，请参阅过程对象.【hSourceHandle】


-------------------------------------------------------- KeyWin32DuplicateToken ----
DuplicateToken    DuplicateToken函数创建一个新的访问令牌，可以复制已存在的一个。
语法
参数
【ExistingTokenHandle】标识使用TOKEN_DUPLICATE访问权限打开的访问令牌。【ImpersonationLevel】指定一个提供新令牌的模拟级别的SECURITY


-------------------------------------------------------- KeyWin32DuplicateTokenEx ----
DuplicateTokenEx    [New - Windows NT]DuplicateTokenEx函数创建一个新的访问令牌，它与现有令牌重复。此函数可以创建主令牌或模拟令牌。
语法
参数
【hExistingToken】标识使用TOKEN_DUPLICATE访问权限打开的访问令牌。【dwDesiredAccess】指定新令牌的请求的访问权限。DuplicateTokenEx函


-------------------------------------------------------- KeyWin32EditWordBreakProc ----
EditWordBreakProc    一个EditWordBreakProc函数是一个应用程序定义的回调函数。类型为EDITWORDBREAKPROC的值是指向此类函数的指针。
语法
参数
【LPCH】指向编辑控件的文本。【ichCurrent】指定文本缓冲区中字符位置的索引，该文本标识函数应该开始检查分词的点。【CCHen】指定编辑控件文本中的字符数。【码】指定回调函数要执行


-------------------------------------------------------- KeyWin32EditWordBreakProcEx ----
EditWordBreakProcEx    [Now Supported on Windows NT]一个应用程序提供的回调函数，用于确定单词中断的字符索引，或指定文本中字符的字符类和分词标志。LONG EditWordBreakProcEx烧焦 【* pchText】, LONG 【cchText】, BYTE 【bCharSet】, INT 【码】 );
参数
【pchText】指向当前位置的文本。如果【码】指定向左移动，那么文本将在元素【pchText】 [-1]至【pchText】 [-【cchText】]和【pchText】 [0]中定义。对


-------------------------------------------------------- KeyWin32Ellipse ----
Ellipse    椭圆函数绘制一个椭圆。椭圆的中心是指定的边界矩形的中心。使用当前笔勾画椭圆，并使用当前画笔填充椭圆。BOOL Ellipse(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,// x-coord。边框的左上角INT 【nTopRect】,//的y坐标。边框的左上角INT 【nRightRect】,// x-coord。边框的右下角INT 【nBottomRect】//的y坐标。边框矩形的右下角);
参数
【HDC】标识设备上下文。【nLeftRect】指定边界矩形左上角的x坐标。【nTopRect】指定边界矩形左上角的y坐标。【nRightRect】指定边界矩形右下角的x坐标。【nBotto


-------------------------------------------------------- KeyWin32EmptyClipboard ----
EmptyClipboard    EmptyClipboard函数清空剪贴板，并释放剪贴板中数据的句柄。然后，该函数将剪贴板的所有权分配给当前打开剪贴板的窗口。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
在致电EmptyClipboard之前，应用


-------------------------------------------------------- KeyWin32EnableEUDC ----
EnableEUDC    [Now Supported on Windows NT]EnableEUDC函数启用或禁用最终用户定义的字符（EUDC）。启用EUDC允许文本输出函数从EUDC字体中检索有关最终用户定义字符的信息。禁用EUDC可防止输出函数访问这些字体。
语法
参数
【fEnableEUDC】动作标志可以为TRUE启用EUDC或FALSE以禁用它。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
应用程序在添加，修改或删除E


-------------------------------------------------------- KeyWin32EnableMenuItem ----
EnableMenuItem    EnableMenuItem函数启用，禁用或灰化指定的菜单项。
语法
参数
【HMENU】标识菜单。【uIDEnableItem】指定由【uEnable】参数确定的要启用，禁用或灰色的菜单项。此参数指定菜单栏，菜单或子菜单中的项目。【uEnable】指定控制【uID


-------------------------------------------------------- KeyWin32EnableScrollBar ----
EnableScrollBar    EnableScrollBar函数启用或禁用一个或两个滚动条箭头。
语法
参数
【的hWnd】根据【wSBflags】参数的值标识窗口或滚动条控件。【wSBflags】指定滚动条类型。此参数可以是以下值之一：值含义SB_BOTH启用或禁用与指定窗口相关联的水平和垂直滚动


-------------------------------------------------------- KeyWin32EnableWindow ----
EnableWindow    EnableWindow函数启用或禁用鼠标和键盘输入到指定的窗口或控件。当禁用输入时，窗口不会接收到诸如鼠标点击和按键之类的输入。当启用输入时，窗口接收所有输入。
语法
参数
【的hWnd】标识要启用或禁用的窗口。【bEnableid】指定是否启用该窗口。如果此参数为TRUE，则启用该窗口。如果参数为FALSE，窗口将被禁用。
返回值
如果窗口以前被禁用，则返


-------------------------------------------------------- KeyWin32EndDeferWindowPos ----
EndDeferWindowPos    EndDeferWindowPos函数在单个屏幕刷新周期中同时更新一个或多个窗口的位置和大小。
语法
参数
【hWinPosInfo】识别包含一个或多个窗口的大小和位置信息的多窗口位置结构。该内部结构由BeginDeferWindowPos函数或最近调用DeferWindowPos函数返回。
返


-------------------------------------------------------- KeyWin32EndDialog ----
EndDialog    EndDialog函数会销毁模态对话框，导致系统结束对话框的任何处理。
语法
参数
【hDlg】标识要销毁的对话框。【如果函数失败，返回值为-1。】从创建对话框的函数中指定要返回给应用程序的值。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述



-------------------------------------------------------- KeyWin32EndDoc ----
EndDoc    EndDoc函数结束打印作业。此函数替代ENDDOC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，返回值小于或等于零。要获取扩展错误信息，请调用GetLastError.
描述
完成打印作业后


-------------------------------------------------------- KeyWin32EndDocPrinter ----
EndDocPrinter    EndDocPrinter函数结束指定打印机的打印作业。
语法
参数
【hPrinter】标识应结束打印作业的打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果通过调


-------------------------------------------------------- KeyWin32EndPage ----
EndPage    EndPage函数通知设备应用程序已完成写入页面。此函数通常用于指示设备驱动程序前进到新页面。此函数将替换NEWFRAME打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，返回值小于或等于零。要获取扩展错误信息，请调用GetLastError.
描述
调用EndPa


-------------------------------------------------------- KeyWin32EndPagePrinter ----
EndPagePrinter    EndPagePrinter函数指示一页的结束和指定打印机的下一页的开头。
语法
参数
【hPrinter】标识页面将结束的打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
打印机对象句柄


-------------------------------------------------------- KeyWin32EndPaint ----
EndPaint    EndPaint函数在指定的窗口中标记绘画结束。每个调用BeginPaint函数都需要此函数，但只有在绘制完成之后。
语法
参数
【的hWnd】标识已重新绘制的窗口。【Lppant】指向PAINTSTRUCT结构，其中包含BeginPaint检索到的绘画信息。
返回值
返回值始终为零。
描述
如果BeginPa


-------------------------------------------------------- KeyWin32EndPath ----
EndPath    EndPath函数关闭路径括号，并将括号中定义的路径选择到指定的设备上下文中。
语法
参数
【HDC】标识选择新路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会返


-------------------------------------------------------- KeyWin32EndUpdateResource ----
EndUpdateResource    EndUpdateResource函数结束可执行文件中的资源更新。
语法
参数
【更新】指定更新句柄。该句柄由BeginUpdateResource函数返回。【// write flag】指定是否将资源更新写入可执行文件。如果此参数为TRUE，则不会对可执行文件进行任何


-------------------------------------------------------- KeyWin32EnhMetaFileProc ----
EnhMetaFileProc    EnhMetaFileProc函数是一个应用程序定义的回调函数，用于处理增强格式的图元文件记录。该函数由EnumEnhMetaFile函数调用。
语法
参数
【hDC】标识传递给EnumEnhMetaFile的设备上下文。【lpHTable】指向与图元文件中的图形对象（笔，画笔等）相关联的句柄表。第一个条目包含增强型元文件句柄。【lpEMFR】指


-------------------------------------------------------- KeyWin32EnumCalendarInfo ----
EnumCalendarInfo    EnumCalendarInfo函数枚举指定区域设置的日历信息。【CalType】参数指定要枚举的日历信息的类型。该函数将根据【日历】参数的值返回指定的日历信息，用于该区域设置或单个请求的日历的所有适用日历。
语法
参数
【lpCalInfoEnumProc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumCalendarInfoProc回调函数。【语言环境】指定检索日历信息的区域设置。此参数可以是由


-------------------------------------------------------- KeyWin32EnumChildProc ----
EnumChildProc    EnumChildProc函数是一个应用程序定义的回调函数，它通过调用EnumChildWindows函数来接收子窗口句柄。
语法
参数
【HWND】标识EnumChildWindows中指定的父窗口的子窗口。【lParam的】指定EnumChildWindows中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须返


-------------------------------------------------------- KeyWin32EnumChildWindows ----
EnumChildWindows    EnumChildWindows函数通过将每个子窗口的句柄传递给应用程序定义的回调函数来枚举属于指定父窗口的子窗口。EnumChildWindows继续，直到最后一个子窗口被枚举或回调函数返回FALSE。
语法
参数
【hWndParent】标识要窗口子窗口的父窗口。【lpEnumFunc】指向应用程序定义的回调函数。有关回调函数的更多信息，请参阅EnumChildProc回调函数。【lParam的】指定


-------------------------------------------------------- KeyWin32EnumClipboardFormats ----
EnumClipboardFormats    EnumClipboardFormats函数可以枚举剪贴板上当前可用的数据格式。剪贴板数据格式存储在有序列表中。要执行剪贴板数据格式的枚举，您可以对EnumClipboardFormats函数进行一系列调用。对于每个呼叫，【格式】参数指定可用的剪贴板格式，该函数返回下一个可用的剪贴板格式。
语法
参数
【格式】指定已知可用的剪贴板格式。要启动剪贴板格式的枚举，请将【格式】设置为零。当【格式】为零时，该函数将检索第一个可用的剪贴板格式。对于枚举期间的后续呼叫，将【格式】设置为上一次EnumC


-------------------------------------------------------- KeyWin32EnumCodePagesProc ----
EnumCodePagesProc    一个EnumCodePagesProc函数是一个应用程序定义的回调函数。作为调用EnumSystemCodePages 函数的结果，它被调用，并且接收到一个指向包含代码页标识符的字符串缓冲区的指针。
语法
参数
【lpCodePageString】指向包含空值终止的代码页标识符字符串的字符串缓冲区。
返回值
要继续枚举，回调函数应该返回TRUE。要停止枚举，回调函数应返回FALSE。
描述



-------------------------------------------------------- KeyWin32EnumDateFormats ----
EnumDateFormats    EnumDateFormats函数枚举可用于指定区域设置的长日期格式或短日期格式，包括任何备用日历的日期格式。【dwFlags中】参数的值确定是否列举长日期或短日期格式。该函数通过将日期格式字符串指针（每次一个）传递给指定的应用程序定义的回调函数来枚举日期格式。这将继续，直到找到最后的日期格式或回调函数返回FALSE。
语法
参数
【lpDateFmtEnumProc】指向应用程序定义的回调函数。EnumDateFormats函数通过重复调用此回调函数来枚举日期格式。有关详细信息，请参阅EnumDateFormatsP


-------------------------------------------------------- KeyWin32EnumDateFormatsProc ----
EnumDateFormatsProc    一个EnumDateFormatsProc函数是一个应用程序定义的回调函数。它被调用为调用EnumDateFormats函数的结果，并且接收到包含日期格式字符串的字符串缓冲区的指针。
语法
参数
【lpDateFormatString】指向包含以null结尾的日期格式字符串的字符串缓冲区。该字符串是长或短日期格式，具体取决于传递给EnumDateFormats的【dwFlags中】参


-------------------------------------------------------- KeyWin32EnumDependentServices ----
EnumDependentServices    EnumDependentServices函数枚举依赖于另一个指定服务的服务;也就是指定的服务必须在枚举服务运行之前运行。提供每个从属服务的名称和状态。
语法
参数
【hService】处理标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_ENUMERATE_DEPENDENTS访问权限。【dwSe


-------------------------------------------------------- KeyWin32EnumDesktopProc ----
EnumDesktopProc    EnumDesktopProc函数是一个应用程序定义的回调函数，它通过调用EnumDesktops函数接收桌面名称。
语法
参数
【lpszDesktop】指向桌面的以null结尾的名称。【lParam的】指定EnumDesktops函数中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须返回TRUE。要停止


-------------------------------------------------------- KeyWin32EnumDesktops ----
EnumDesktops    EnumDesktops函数枚举分配给呼叫进程的窗口台中的所有桌面。该函数通过将每个桌面的名称依次传递给应用程序定义的回调函数来实现。
语法
参数
【hwinsta】指定要列举桌面的窗口台的句柄。CreateWindowStation，GetProcessWindowStation和OpenWindowStation函数返回一个窗口工位


-------------------------------------------------------- KeyWin32EnumDesktopWindows ----
EnumDesktopWindows    EnumDesktopWindows函数通过将每个窗口的句柄依次传递给应用程序定义的回调函数来枚举桌面中的所有窗口。
语法
参数
【//分配给该线程的桌面的句柄】指定要将窗口枚举的桌面的句柄。CreateDesktop，OpenDesktop和GetThreadDesktop函数返回一个桌面句柄。【lpfn】指向应用程


-------------------------------------------------------- KeyWin32EnumDisplaySettings ----
EnumDisplaySettings    EnumDisplaySettings函数获取有关显示设备的图形模式之一的信息。您可以通过对此函数进行一系列调用来获取所有显示设备的图形模式的信息。
语法
参数
【lpszDeviceName】指向以空值终止的字符串，指定显示设备，其显示模式的函数将获取有关的信息。此参数可以为NULL。NULL值指定计算机上正在运行调用线程的当前显示设备。如果【lp


-------------------------------------------------------- KeyWin32EnumEnhMetaFile ----
EnumEnhMetaFile    EnumEnhMetaFile函数通过检索每个记录并将其传递给指定的回调函数来枚举增强格式的图元文件中的记录。应用程序提供的回调函数根据需要处理每个记录。枚举继续，直到最后一个记录被处理或当回调函数返回零时。
语法
参数
【HDC】标识设备上下文。该句柄被传递给回调函数。【HEMF】识别增强的图元文件。【lpEnhMetaFunc】指向应用程序提供的回调函数。有关详细信息，请参阅EnhMetaFileProc


-------------------------------------------------------- KeyWin32EnumFontFamExProc ----
EnumFontFamExProc    [Now Supported on Windows NT]EnumFontFamExProc函数是一个应用程序提供的回调函数，用于处理EnumFontFamiliesEx函数枚举的字体。系统为每个枚举的字体调用一次这个回调函数。
语法
参数
【lpelfe】指向包含有关字体逻辑属性的信息的ENUMLOGFONTEX结构。【lpntme】指向包含有关字体的物理属性的信息的结构。该函数对于TrueType字体使用NEWTEXTMET


-------------------------------------------------------- KeyWin32EnumFontFamilies ----
EnumFontFamilies    EnumFontFamilies函数枚举指定设备上可用的指定字体系列中的字体。此函数取代EnumFonts函数。
语法
参数
【HDC】标识设备上下文。【lpszFamily】指向指定所需字体的家族名称的以null结尾的字符串。如果【lpszFamily】为NULL，则EnumFontFamilies随机选择并枚举


-------------------------------------------------------- KeyWin32EnumFontFamiliesEx ----
EnumFontFamiliesEx    [Now Supported on Windows NT]EnumFontFamiliesEx函数枚举系统中符合LOGFONT结构指定的字体特征的所有字体。EnumFontFamiliesEx枚举基于字体名称，字符集或两者的字体。建议基于Win32的应用程序使用此函数而不是EnumFontFamilies列举字体。
语法
参数
【HDC】标识设备上下文。【lpLogfont】指向LOGFONT结构，其中包含有关要枚举的字体的信息。该函数检查这些成员：会员描述为lfcharset如果设置为DEFAULT_CHARSE


-------------------------------------------------------- KeyWin32EnumFontFamProc ----
EnumFontFamProc    EnumFontFamProc函数是一个应用程序定义的回调函数，用于检索描述可用字体的数据。
语法
参数
【lpelf】指向包含有关字体逻辑属性的信息的ENUMLOGFONT结构。此结构在本地定义。【lpntm】指向NEWTEXTMETRIC结构，其中包含有关字体的物理属性的信息，如果该字体是T


-------------------------------------------------------- KeyWin32EnumFonts ----
EnumFonts    EnumFonts函数列举指定设备上可用的字体。对于具有指定字体名称的每个字体，EnumFonts函数检索有关该字体的信息，并将其传递给应用程序定义的回调函数。该回调函数可以根据需要处理字体信息。枚举继续，直到没有更多的字体或回调函数返回零。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用EnumFontFamilies函数。
语法
参数
【HDC】标识设备上下文。【lpFaceName】指向一个以null结尾的字符串，指定所需字体的字体名称。如果【lpFaceName】为NULL，则EnumFonts随机选择并枚举每种可用字


-------------------------------------------------------- KeyWin32EnumFontsProc ----
EnumFontsProc    EnumFontsProc函数是一个应用程序定义的回调函数，用于处理来自EnumFonts函数的字体数据。
语法
参数
【lplf】指向LOGFONT结构，其中包含有关字体逻辑属性的信息。【lptm】指向包含有关字体的物理属性的信息的TEXTMETRIC结构。【dwType】指定字体的类型。此参数可以是以下值


-------------------------------------------------------- KeyWin32EnumForms ----
EnumForms    EnumForms函数枚举指定打印机支持的表单。
语法
参数
【hPrinter】标识应列举表单的打印机。【水平】指定【P成型】指向的结构的版本。此值必须为1。【P成型】指向FORM_INFO_1结构。【cbBuf】指定【P成型】指向的缓冲区的大小（以


-------------------------------------------------------- KeyWin32EnumICMProfiles ----
EnumICMProfiles    EnumICMProfiles函数枚举系统支持的不同颜色配置文件，用于指定的设备上下文。
语法
参数
【HDC】处理设备上下文。【lpICMEnumFunc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumICMProfilesProc函数。【lParam的】应用程序提供的数据。将数


-------------------------------------------------------- KeyWin32EnumICMProfilesProc ----
EnumICMProfilesProc    EnumICMProfilesProc函数是一个应用程序定义的回调函数，用于处理来自EnumICMProfiles函数的颜色配置文件数据。
语法
参数
【lpszFilenamenl】指向指定颜色配置文件文件名称的以空值终止的字符串的指针。【lParam的】应用程序提供的数据由EnumICMProfiles函数传递。
返回值
返回一个正


-------------------------------------------------------- KeyWin32EnumJobs ----
EnumJobs    EnumJobs函数初始化JOB_INFO_1或JOB_INFO_2结构的数组，其中包含描述指定打印机的指定打印作业的数据。
语法
参数
【hPrinter】处理打印机对象，该打印机对象的函数将枚举打印作业。【FirstJob】指定要列举的第一个打印作业的打印队列中的从零开始的位置。例如，值为0表示枚举应从打印队列中的第一个打


-------------------------------------------------------- KeyWin32EnumLocalesProc ----
EnumLocalesProc    一个EnumLocalesProc函数是一个应用程序定义的回调函数。作为调用EnumSystemLocales 函数的结果，它被调用，并且接收到一个指向包含区域设置标识符的字符串缓冲区的指针。
语法
参数
【lpLocaleString】指向包含空值终止的区域设置标识符字符串的字符串缓冲区。请注意，【lpLocaleString】应为EnumLocalesProc的Unicode（W）版本的L


-------------------------------------------------------- KeyWin32EnumMetaFile ----
EnumMetaFile    EnumMetaFile函数通过检索每个记录并将其传递给指定的回调函数来枚举Windows格式的图元文件中的记录。应用程序提供的回调函数根据需要处理每个记录。枚举继续，直到最后一个记录被处理或当回调函数返回零时。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用EnumEnhMetaFile函数。
语法
参数
【HDC】标识设备上下文。该句柄被传递给回调函数。【HMF】标识Windows格式的图元文件。【lpMetaFunc】指向应用程序提供的回调函数。有关详细信息，请参阅EnumMetaFile


-------------------------------------------------------- KeyWin32EnumMetaFileProc ----
EnumMetaFileProc    EnumMetaFileProc函数是一个应用程序定义的回调函数，用于处理Windows格式的图元文件记录。该函数由EnumMetaFile函数调用。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用EnhMetaFileProc和EnumEnhMetaFile函数。
语法
参数
【hDC】标识传递给EnumMetaFile的设备上下文。【lpHTable】指向与图元文件中的图形对象（笔，画笔等）相关联的句柄表。【lpMFR】指向图元文件中的一个记录。不应修改此记录。


-------------------------------------------------------- KeyWin32EnumMonitors ----
EnumMonitors    EnumMonitors函数使用描述指定服务器的监视器的数据初始化结构数组。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定监视器所在的服务器的名称。如果此参数为NULL，则枚举本地监视器。【水平】指定【//指向监视器信息的指针。结构体】指向的结构的版本。【//指向监视


-------------------------------------------------------- KeyWin32EnumObjects ----
EnumObjects    EnumObjects函数枚举可用于指定设备上下文的笔或画笔。该函数为每个可用对象调用一次应用程序定义的回调函数，提供描述该对象的数据。EnumObjects继续调用回调函数，直到回调函数返回零或直到所有对象都被枚举为止。
语法
参数
【HDC】标识设备上下文。【nObjectType】指定对象类型。该参数可以是OBJ_BRUSH或OBJ_PEN。【lpObjectFunc】指向应用程序定义的回调函数的指针。有关回调函数的


-------------------------------------------------------- KeyWin32EnumObjectsProc ----
EnumObjectsProc    EnumObjectsProc函数是一个应用程序定义的回调函数，用于处理由EnumObjects函数提供的对象数据。
语法
参数
【lpLogObject】指向描述对象属性的LOGPEN或LOGBRUSH结构。【的lpData】指向由EnumObjects函数传递的应用程序定义的数据。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32EnumPorts ----
EnumPorts    EnumPorts函数枚举可用于在指定服务器上打印的端口。
语法
参数
【PNAME】指向以空值终止的字符串，指定要打印端口的服务器的名称。如果【PNAME】为NULL，则该函数枚举本地计算机的打印机端口。【水平】指定【pports】指向的数据结构类型。该值可以


-------------------------------------------------------- KeyWin32EnumPrinterData ----
EnumPrinterData    [New - Windows NT]EnumPrinterData函数枚举指定打印机的配置数据。打印机的配置数据由一组命名和类型值组成。EnumPrinterData函数可以在每次调用它时获取这些值之一及其名称和类型代码。连续调用EnumPrinterData函数以获取打印机的所有配置数据值。打印机配置数据存储在注册表中。列举打印机配置数据时，应避免调用可能更改数据的注册表函数。
语法
参数
【hPrinter】处理要获取配置数据的打印机。通过调用OpenPrinter函数获取此打印机句柄。【dwIndex】指定要检索的配置数据值的索引值。对于给定的打印机句柄，首次调用EnumP


-------------------------------------------------------- KeyWin32EnumPrinterDrivers ----
EnumPrinterDrivers    EnumPrinterDrivers函数列举了指定打印机服务器上安装的所有打印机驱动程序。
语法
参数
【PNAME】指向以空值终止的字符串，指定要列举打印机驱动程序的服务器的名称。如果【PNAME】为NULL，则该函数枚举本地计算机的打印机驱动程序。【pEnvironment】指向指定环境的


-------------------------------------------------------- KeyWin32EnumPrinters ----
EnumPrinters    EnumPrinters函数列举了可用的打印机，打印服务器，域或打印提供商。
语法
参数
【旗】指定函数应枚举的打印对象的类型。该值可以是以下常量的组合：值含义PRINTER_ENUM_LOCAL该函数忽略【名称】参数，并枚举本地安装的打印机。Windows 95：该函数还将枚举


-------------------------------------------------------- KeyWin32EnumPrintProcessorDatatypes ----
EnumPrintProcessorDatatypes    EnumPrintProcessorDatatypes函数枚举指定的打印处理器支持的数据类型。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定打印处理器所在的服务器的名称。如果此参数为NULL，则枚举本地打印处理器的数据类型。【pPrintProcessorName】指向一个空值终止的字


-------------------------------------------------------- KeyWin32EnumPrintProcessors ----
EnumPrintProcessors    EnumPrintProcessors函数列举了指定服务器上安装的打印处理器。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定打印处理器所在的服务器的名称。如果此参数为NULL，则枚举本地打印处理器。【pEnvironment】指向指定环境的以null结尾的字符串。例如，


-------------------------------------------------------- KeyWin32EnumProps ----
EnumProps    EnumProps函数通过将它们逐个传递给指定的回调函数来枚举窗口的属性列表中的所有条目。EnumProps继续，直到最后一个条目被枚举，或者回调函数返回FALSE。
语法
参数
【的hWnd】标识要枚举属性列表的窗口。【lpEnumFunc】指向回调函数。有关回调函数的更多信息，请参阅PropEnumProc函数。
返回值
返回值指定回调函数返回的最后一个值。如


-------------------------------------------------------- KeyWin32EnumPropsEx ----
EnumPropsEx    EnumPropsEx函数通过将它们逐个传递给指定的回调函数来枚举窗口的属性列表中的所有条目。EnumPropsEx继续，直到最后一个条目被枚举，或者回调函数返回FALSE。
语法
参数
【的hWnd】标识要枚举属性列表的窗口。【lpEnumFunc】指向回调函数。有关回调函数的更多信息，请参阅PropEnumProcEx函数。【lParam的】包含要传递给回调函数的应用程序


-------------------------------------------------------- KeyWin32EnumRegisterWordProc ----
EnumRegisterWordProc    EnumRegisterWordProc函数是一个应用程序定义的回调函数，用于处理来自ImmEnumRegisterWord函数的寄存器字符串的数据。
语法
参数
【lpszReading】指向指定匹配的读取字符串的以null结尾的字符串的指针。【dwStyle】寄存器字符串的样式【lpszStringhu】指向指定匹配寄存器字符串的以null结尾的字


-------------------------------------------------------- KeyWin32EnumResLangProc ----
EnumResLangProc    EnumResLangProc函数是一个应用程序定义的回调函数，它通过调用EnumResourceLanguages函数接收资源语言。
语法
参数
【HMODULE】标识可执行文件包含要列举语言的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源语言。【lpszType】指向一个以null结束的字符串，指定要枚


-------------------------------------------------------- KeyWin32EnumResNameProc ----
EnumResNameProc    EnumResNameProc函数是一个应用程序定义的回调函数，它通过调用EnumResourceNames函数接收资源名称。
语法
参数
【HMODULE】标识可执行文件包含名称被枚举的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源名称。【lpszType】指向一个以null结尾的字符串，指定名称


-------------------------------------------------------- KeyWin32EnumResourceLanguages ----
EnumResourceLanguages    EnumResourceLanguages函数在模块中搜索指定类型和名称的每个资源，并将其定位的每个资源的语言传递给定义的回调函数。
语法
参数
【HMODULE】标识可执行文件包含要列举语言的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源语言。【//值类型缓冲区的地址】指向一个以null结尾的字符串，指


-------------------------------------------------------- KeyWin32EnumResourceNames ----
EnumResourceNames    EnumResourceNames函数在模块中搜索指定类型的每个资源，并将其定位的每个资源的名称传递给应用程序定义的回调函数。
语法
参数
【HMODULE】标识可执行文件包含要枚举名称的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源名称。【lpszType】指向一个以null结尾的字符串，指定名称


-------------------------------------------------------- KeyWin32EnumResourceTypes ----
EnumResourceTypes    EnumResourceTypes函数在模块中搜索资源，并将其找到的每种资源类型传递给应用程序定义的回调函数。
语法
参数
【HMODULE】标识可执行文件包含要枚举类型的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源类型。【lpEnumFunc】指向每个枚举资源类型的回调函数。有关


-------------------------------------------------------- KeyWin32EnumResTypeProc ----
EnumResTypeProc    EnumResTypeProc函数是一个应用程序定义的回调函数，它通过调用EnumResourceTypes函数接收资源类型。
语法
参数
【HMODULE】标识可执行文件包含要枚举类型的资源的模块。如果此参数为NULL，则该函数枚举用于创建当前进程的模块中的资源类型。【lpszType】指向一个以null结尾的字符串，指定要枚


-------------------------------------------------------- KeyWin32EnumServicesStatus ----
EnumServicesStatus    EnumServicesStatus函数枚举指定的服务控制管理器数据库中的服务。提供每个服务的名称和状态。
语法
参数
【hSCManager】标识服务控制管理器数据库。OpenSCManager函数返回此句柄，该句柄必须具有SC_MANAGER_ENUMERATE_SERVICE访问权限。【dwServic


-------------------------------------------------------- KeyWin32EnumSystemCodePages ----
EnumSystemCodePages    EnumSystemCodePages函数枚举系统上安装或支持的代码页。【dwFlags中】参数确定函数是枚举已安装或支持的代码页。该函数通过将代码页标识符（一次一个）传递给指定的应用程序定义的回调函数来枚举代码页。这将继续，直到所有已安装或支持的代码页标识符都传递给回调函数，或者回调函数返回FALSE。
语法
参数
【lpCodePageEnumProc】指向应用程序定义的回调函数。EnumSystemCodePages函数通过重复调用此回调函数来枚举代码页。有关详细信息，请参阅EnumCodePage


-------------------------------------------------------- KeyWin32EnumSystemLocales ----
EnumSystemLocales    EnumSystemLocales函数枚举系统上安装或支持的区域设置。【dwFlags中】参数确定函数是枚举已安装或支持的系统区域设置。该函数通过将locale标识符（一次一个）传递给指定的应用程序定义的回调函数来枚举语言环境。这将继续，直到所有已安装或受支持的区域设置标识符已传递到回调函数或回调函数返回FALSE。
语法
参数
【lpLocaleEnumProc】指向应用程序定义的回调函数。EnumSystemLocales函数通过重复调用此回调函数来枚举语言环境。有关详细信息，请参阅EnumLocalesProc


-------------------------------------------------------- KeyWin32EnumTaskWindows ----
EnumTaskWindows  EnumTaskWindows函数已过时。它已被EnumThreadWindows函数所取代。为了保持16位应用程序的兼容性，EnumTaskWindows已被替换为调用EnumThreadWindows的宏。之前的应用程序可以继续调用EnumTaskWindows，但新的应用程序应该使用EnumThreadWindows.


-------------------------------------------------------- KeyWin32EnumThreadWindows ----
EnumThreadWindows    EnumThreadWindows函数通过将每个窗口的句柄传递给应用程序定义的回调函数来枚举与线程相关联的所有非小时窗口。EnumThreadWindows继续，直到最后一个窗口被枚举或回调函数返回FALSE。要枚举特定窗口的子窗口，请使用EnumChildWindows函数。此函数取代EnumTaskWindows函数。
语法
参数
【dwThreadId】标识要列举窗口的线程。【lpfn】指向应用程序定义的回调函数。有关回调函数的更多信息，请参阅EnumThreadWndProc回调函数。【lParam的】指定要传递给


-------------------------------------------------------- KeyWin32EnumThreadWndProc ----
EnumThreadWndProc    EnumThreadWndProc函数是一个应用程序定义的回调函数，它通过调用EnumThreadWindows函数接收与线程关联的窗口句柄。
语法
参数
【HWND】标识与EnumThreadWindows函数中指定的线程相关联的窗口。【lParam的】指定EnumThreadWindows函数中给出的应用程序定义值。
返回值
要继续枚举


-------------------------------------------------------- KeyWin32EnumTimeFormats ----
EnumTimeFormats    EnumTimeFormats函数枚举可用于指定区域设置的时间格式。该函数通过将指针传递给包含应用程序定义回调函数的时间格式的字符串缓冲区来枚举时间格式。它继续这样做，直到找到最后一个格式或回调函数返回FALSE。
语法
参数
【lpTimeFmtEnumProc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumTimeFormatsProc回调函数。【语言环境】指定区域设置以检索时间格式信息。此参数可以是


-------------------------------------------------------- KeyWin32EnumTimeFormatsProc ----
EnumTimeFormatsProc    一个EnumTimeFormatsProc函数是一个应用程序定义的回调函数。它被称为调用EnumTimeFormats函数的结果，并且接收到一个指向包含时间格式字符串的字符串缓冲区的指针。
语法
参数
【lpTimeFormatString】指向包含空终止时间格式字符串的字符串缓冲区。请注意，【lpTimeFormatString】应为EnumTimeFormatsProc的Unicode


-------------------------------------------------------- KeyWin32EnumWindows ----
EnumWindows    EnumWindows函数通过将每个窗口的句柄依次传递给应用程序定义的回调函数来枚举屏幕上的所有顶级窗口。EnumWindows继续，直到最后一个顶级窗口被枚举或回调函数返回FALSE。
语法
参数
【lpEnumFunc】指向应用程序定义的回调函数。有关详细信息，请参阅EnumWindowsProc回调函数。【lParam的】指定要传递给回调函数的32位应用程序定义值。
返回值
如


-------------------------------------------------------- KeyWin32EnumWindowsProc ----
EnumWindowsProc    EnumWindowsProc函数是一个应用程序定义的回调函数，它通过调用EnumWindows或EnumDesktopWindows函数接收顶级窗口句柄。
语法
参数
【HWND】标识顶级窗口。【lParam的】指定EnumWindows或EnumDesktopWindows中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须返回TRUE;要停止


-------------------------------------------------------- KeyWin32EnumWindowStationProc ----
EnumWindowStationProc    EnumWindowStationProc函数是一个应用程序定义的回调函数，它通过调用EnumWindowStations函数接收窗口站名称。
语法
参数
【lpszWindowStation】指向一个窗口站的空终止名称。【lParam的】指定EnumWindowStations函数中给出的应用程序定义值。
返回值
要继续枚举，回调函数必须


-------------------------------------------------------- KeyWin32EnumWindowStations ----
EnumWindowStations    EnumWindowStations函数通过将每个窗口站的名称依次传递给应用程序定义的回调函数来枚举系统中的所有窗口。
语法
参数
【lpEnumFunc】指向应用程序定义的EnumWindowStationProc回调函数。【lParam的】指定要传递给回调函数的32位应用程序定义值。
返回值
如果函数成功，返回值


-------------------------------------------------------- KeyWin32EqualPrefixSid ----
EqualPrefixSid    EqualPrefixSid函数测试两个安全标识符（SID）前缀值以获得相等性。SID前缀是除最后一个子权限值之外的整个SID。
语法
参数
【pSid1】指向第一个SID结构进行比较。这种结构被认为是有效的。【pSid2】指向第二个SID结构进行比较。它也被认为是有效的。
返回值
如果SID前缀相等，则返回值不为零。如果SI


-------------------------------------------------------- KeyWin32EqualRect ----
EqualRect    EqualRect函数通过比较其左上角和右下角的坐标来确定两个指定的矩形是否相等。
语法
参数
【lprc2】指向包含第一个矩形的逻辑坐标的RECT结构。【If the two rectangles are identical, the return value is nonzero.


-------------------------------------------------------- KeyWin32EqualRgn ----
EqualRgn    EqualRgn函数检查两个指定的区域，以确定它们是否相同。如果它们的大小和形状相等，则该函数考虑两个区域相同。
语法
参数
【hSrcRgn1】识别一个地区。【hSrcRgn2】识别一个地区。
返回值
如果两个区域相等，则返回值不为零。如果两个区域不相等，返回值为零。返回值ERROR表示区域句柄中的至少一个无


-------------------------------------------------------- KeyWin32EqualSid ----
EqualSid    EqualSid函数测试两个安全标识符（SID）值以获得相等性。两个SID必须完全匹配以被认为是相等的。
语法
参数
【pSid1】指向第一个SID结构进行比较。这种结构被认为是有效的。【pSid2】指向第二个SID结构进行比较。它也被认为是有效的。
返回值
如果SID结构相等，则返回值不为零。如果SI


-------------------------------------------------------- KeyWin32EraseTape ----
EraseTape    EraseTape函数会删除磁带的全部或部分。
语法
参数
【hDevice】标识要擦除磁带的设备。该句柄是通过使用CreateFile函数创建的。【dwEraseType】指定擦除技术。此参数可以是以下值之一：值描述TAPE_ERASE_LONG将


-------------------------------------------------------- KeyWin32Escape ----
Escape    Escape函数允许应用程序访问不能通过GDI直接使用的特定设备的函数。由应用程序进行的Escape呼叫转换并发送给驱动程序。
语法
参数
【HDC】标识设备上下文。【nEscape】指定要执行的转义函数。此参数必须是预定义的转义值之一。如果应用程序定义私有转义值，请使用ExtEscape函数。【cbInput】指定【lpvIn


-------------------------------------------------------- KeyWin32EscapeCommFunction ----
EscapeCommFunction    EscapeCommFunction函数指示指定的通信设备执行扩展函数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【dwFunc】指定要执行的扩展函数的代码。此参数可以是以下值之一：值含义CLRDTR清除DTR（数据终端就绪）信号。CLRR


-------------------------------------------------------- KeyWin32ExcludeClipRect ----
ExcludeClipRect    ExcludeClipRect函数创建一个新的裁剪区域，由现有裁剪区域减去指定的矩形组成。
语法
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的逻辑x坐标。【nTopRect】指定矩形左上角的逻辑y坐标。【nRightRect】指定矩形右下角的逻辑x坐标。【nBotto


-------------------------------------------------------- KeyWin32ExcludeUpdateRgn ----
ExcludeUpdateRgn    ExcludeUpdateRgn函数通过从剪切区域中排除窗口中的更新区域来防止在窗口的无效区域内绘制。
语法
参数
【hDC】标识与裁剪区域相关联的设备上下文。【的hWnd】标识要更新的窗口。
返回值
返回值指定排除区域的复杂度;它可以是以下值之一：值含义COMPLEXREGION区域由多个矩形组成。


-------------------------------------------------------- KeyWin32ExitProcess ----
ExitProcess    ExitProcess函数结束进程及其所有线程。
语法
参数
【uExitCode】指定进程的退出代码以及由于此调用而终止的所有线程。使用GetExitCodeProcess函数来检索进程的退出值。使用GetExitCodeThread函数来检索线程的


-------------------------------------------------------- KeyWin32ExitThread ----
ExitThread    ExitThread函数结束线程。
语法
参数
【dwExitCode】指定调用线程的退出代码。使用GetExitCodeThread函数检索线程的退出代码。
返回值
此函数不返回值。
描述
ExitThread是退出线程的首选方


-------------------------------------------------------- KeyWin32ExitWindows ----
ExitWindows    ExitWindows函数将关闭当前用户。
语法
参数
【//保留，必须设置为零】Reserved; must be zero.【Windows does not allow new applications to start up during


-------------------------------------------------------- KeyWin32ExitWindowsEx ----
ExitWindowsEx    ExitWindowsEx函数注销，关闭或关闭并重新启动系统。
语法
参数
【uFlags】指定关机类型。此参数必须是以下值的某种组合：值含义EWX_FORCE强制进程终止。设置此标志时，Windows不会将消息WM_QUERYENDSESSION和WM_ENDSE


-------------------------------------------------------- KeyWin32ExpandEnvironmentStrings ----
ExpandEnvironmentStrings    ExpandEnvironmentStrings函数扩展环境变量字符串，并用它们定义的值替换它们。
语法



-------------------------------------------------------- KeyWin32ExtCreatePen ----
ExtCreatePen    ExtCreatePen函数创建一个具有指定样式，宽度和画笔属性的逻辑化妆或几何笔。
语法
参数
【dwPenStyle】指定类型，样式，端点和连接属性的组合。通过使用按位OR运算符（|）组合来自每个类别的值。笔类型可以是以下值之一：类型描述PS_GEOMETRIC笔是几何。PS_COS


-------------------------------------------------------- KeyWin32ExtensionPropSheetPageProc ----
ExtensionPropSheetPageProc    ExtensionPropSheetPageProc函数指定一个应用程序定义的回调函数，它接收AddPropSheetPageProc函数的地址，该函数驻留在创建属性表的模块中。属性表扩展名必须导出ExtensionPropSheetPageProc函数。
语法
参数
【LPV】指向应用程序定义值的指针，该值描述要为其创建属性表页面的项目。此参数可以为NULL。【lpfnAddPropSheetPageProc】指向AddPropSheetPageProc


-------------------------------------------------------- KeyWin32ExtEscape ----
ExtEscape    ExtEscape函数允许应用程序访问通过GDI不可用的特定设备的函数。
语法
参数
【HDC】标识设备上下文。【nEscape】指定要执行的转义函数。【cbInput】指定【lpszInData】参数指向的数据的字节数。【lpszInData】指向指定转义所需的输入结构。【


-------------------------------------------------------- KeyWin32ExtFloodFill ----
ExtFloodFill    ExtFloodFill函数使用当前画笔填充显示表面的一个区域。
语法
参数
【HDC】标识设备上下文。【nXStart】指定填充开始点的逻辑x坐标。【nYStart】指定要开始填充的点的逻辑y坐标。【crColor】指定要填充的边界或区域的颜色。【crColor】的


-------------------------------------------------------- KeyWin32ExtractAssociatedIcon ----
ExtractAssociatedIcon    ExtractAssociatedIcon函数返回在相关可执行文件中找到的文件或图标中找到的索引图标的句柄。
语法
参数
【HINST】指定调用函数的应用程序的实例。【lpIconPath】指向一个字符串，指定需要图标的文件的完整路径和文件名。该函数从该文件或与该文件相关联的可执行文件中提取图标句柄。如果从可执


-------------------------------------------------------- KeyWin32ExtractIcon ----
ExtractIcon    ExtractIcon函数从指定的可执行文件，动态链接库（DLL）或图标文件中检索图标的句柄。
语法



-------------------------------------------------------- KeyWin32ExtractIconEx ----
ExtractIconEx    ExtractIconEx函数从指定的可执行文件，动态链接库（DLL）或图标文件中检索图标的句柄。
语法
参数
【lpszFile】指向以空值终止的字符串，指定可执行文件，DLL或图标文件的名称。【nIconIndex】指定要检索的图标的索引。如果该值为0，则该函数返回指定文件中第一个图标的句柄。如果


-------------------------------------------------------- KeyWin32ExtSelectClipRgn ----
ExtSelectClipRgn    ExtSelectClipRgn函数通过使用指定的模式将指定的区域与当前的剪切区域进行组合。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要选择的区域。当指定RGN_COPY模式时，此句柄只能为NULL。【fnMode】指定要执行的操作。它必须是以下值之一：值含义RGN_AND新剪辑区


-------------------------------------------------------- KeyWin32ExtTextOut ----
ExtTextOut    ExtTextOut函数使用当前选定的字体绘制一个字符串。可以提供一个可选的矩形，用于剪裁，不透明或两者。
语法
参数
【HDC】标识设备上下文。【X】指定用于定位字符串的参考点的逻辑x坐标。【Y】指定用于定位字符串的参考点的逻辑y坐标。【fuOptions】指定如何使用应用程序定义的矩形。此参数可以是以下值


-------------------------------------------------------- KeyWin32FatalAppExit ----
FatalAppExitFatalAppExit函数显示一个消息框，并在消息框关闭时终止应用程序。如果Windows使用内核调试器运行，则消息框给用户终止应用程序或取消消息框并返回到调用FatalAppExit的应用程序的机会。
语法
参数
【uAction】Reserved; must be zero.【lpMessageText】指向消息框中显示的以空字符结尾的字符串。消息显示在一行。为了适应低分辨率屏幕，字符串的长度不能超


-------------------------------------------------------- KeyWin32FatalExit ----
FatalExit    FatalExit函数将执行控制传递给调试器。此后调试器的行为特定于所使用的调试器的类型。
语法
参数
【ExitCode】指定与退出相关联的错误代码。
返回值
此函数不返回值。
描述
应用程序只能使用FatalExit进行调试。它不应该调用应用程序的零售版本中的函数，因为这样做会终止


-------------------------------------------------------- KeyWin32FileIOCompletionRoutine ----
FileIOCompletionRoutine    当异步输入和输出（I / O）函数（ReadFileEx或WriteFileEx）完成并且调用线程处于等待警报状态（使用SleepEx，WaitForSingleObjectEx）时，将调用FileIOCompletionRoutine函数，或WaitForMultipleObjectsEx函数，【的fAlertable】标志设置为TRUE）。
语法
参数
【dwErrorCode】指定I / O完成状态。此参数可能是以下值之一：值含义0I / O成功。ERROR_HANDLE_EOFReadFileEx函数尝试读取文件的最后一行。
【dwN


-------------------------------------------------------- KeyWin32FileTimeToDosDateTime ----
FileTimeToDosDateTime    FileTimeToDosDateTime函数将64位文件时间转换为MS-DOS日期和时间值。
语法
参数
【lpFileTime】指向FILETIME结构，包含64位文件时间转换为MS-DOS日期和时间格式。FILETIME结构具有以下形式：typedef struct _FILETIME { 


-------------------------------------------------------- KeyWin32FileTimeToLocalFileTime ----
FileTimeToLocalFileTime    FileTimeToLocalFileTime函数将基于协调世界时（UTC）的文件时间转换为本地文件时间。
语法
参数
【lpFileTime】指向FILETIME结构，其中包含将基于UTC的文件时间转换为本地文件时间。【lpLocalFileTime】指向FILETIME结构以接收转换的本地文件时间。此参数


-------------------------------------------------------- KeyWin32FileTimeToSystemTime ----
FileTimeToSystemTime    FileTimeToSystemTime函数将64位文件时间转换为系统时间格式。
语法
参数
【lpFileTime】指向FILETIME结构的指针，其中包含转换为系统日期和时间格式的文件时间。FileTimeToSystemTime函数仅适用于小于0x800000000000000


-------------------------------------------------------- KeyWin32FillConsoleOutputAttribute ----
FillConsoleOutputAttribute    FillConsoleOutputAttribute函数设置指定数量的字符单元格的文本和背景颜色属性，从屏幕缓冲区中的指定坐标开始。
语法
参数
【hConsoleOutput】标识一个屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【wAttribute】指定要写入屏幕缓冲区的前景色和背景颜色属性。可以指定以下值的任意组合：


-------------------------------------------------------- KeyWin32FillConsoleOutputCharacter ----
FillConsoleOutputCharacter    FillConsoleOutputCharacter函数从指定的坐标开始，将一个字符写入屏幕缓冲区指定的次数。
语法
参数
【hConsoleOutput】标识一个屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【// character to write】指定要写入屏幕缓冲区的字符。【nLength】指


-------------------------------------------------------- KeyWin32FillMemory ----
FillMemory    FillMemory函数用指定的值填充一个内存块。
语法
参数
【目的地】指向要填写的内存块的起始地址。【长度】指定要填充的内存块的大小（以字节为单位）。【填】指定用于填充内存块的字节值。
返回值
该函数没有返回值。



-------------------------------------------------------- KeyWin32FillPath ----
FillPath    FillPath函数可以关闭当前路径中的任何打开的图形，并使用当前画笔和多边形填充模式填充路径的内部。
语法
参数
【HDC】标识包含有效路径的设备上下文（DC）。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastErro


-------------------------------------------------------- KeyWin32FillRect ----
FillRect    FillRect函数使用指定的画笔填充一个矩形。此函数包括左侧和上边界，但不包括矩形的右侧和底部边框。
语法
参数
【hDC】标识设备上下文。【LPRC】指向RECT结构，其中包含要填充的矩形的逻辑坐标。【HBR】标识用于填充矩形的画笔。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32FillRgn ----
FillRgn    FillRgn函数使用指定的画笔填充区域。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要填充的区域。该区域的坐标被推定为逻辑单位。【HBR】标识用于填充区域的画笔。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32FindAtom ----
FindAtom    FindAtom函数在本地atom表中搜索指定的字符串，并检索与该字符串关联的原子。
语法
参数
【lpString】指向要搜索的以null结尾的字符串。
返回值
如果函数成功，则返回值是与给定字符串相关联的原子。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastEr


-------------------------------------------------------- KeyWin32FindClose ----
FindClose    FindClose函数关闭指定的搜索句柄。FindFirstFile和FindNextFile函数使用搜索句柄来查找名称与给定名称相匹配的文件。
语法
参数
【hFindFile】标识搜索句柄。此句柄以前必须由FindFirstFile函数打开。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetL


-------------------------------------------------------- KeyWin32FindCloseChangeNotification ----
FindCloseChangeNotification    FindCloseChangeNotification函数停止更改通知句柄监视。
语法
参数
【hChangeHandle】标识由FindFirstChangeNotification函数创建的更改通知句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyWin32FindClosePrinterChangeNotification ----
FindClosePrinterChangeNotification    FindClosePrinterChangeNotification函数关闭通过调用FindFirstPrinterChangeNotification函数创建的更改通知对象。与更改通知对象关联的打印机或打印服务器将不再被该对象监视。
语法
参数
【H更改】处理更改通知对象要关闭。这是通过调用FindFirstPrinterChangeNotification函数创建的句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回


-------------------------------------------------------- KeyWin32FindExecutable ----
FindExecutable    FindExecutable函数检索与指定文件名关联的可执行文件（.EXE）的名称和句柄。
语法
参数
【lpFile】指向指定文件名的以null结尾的字符串的指针。这可以是文档或可执行文件。【lpDirectory】指向指定默认目录的以空值终止的字符串的指针。【lpResult】当函数返回时


-------------------------------------------------------- KeyWin32FindFirstChangeNotification ----
FindFirstChangeNotification    FindFirstChangeNotification函数创建更改通知句柄并设置初始更改通知过滤器条件。当在指定的目录或子树中发生与过滤条件匹配的更改时，通知处理的等待成功。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定要观看的目录的路径。【bWatchSubtree】指定该函数是否监视目录或目录树。如果此参数为TRUE，则该函数将监视指定目录下的


-------------------------------------------------------- KeyWin32FindFirstFile ----
FindFirstFile    FindFirstFile函数在目录中搜索名称与指定文件名匹配的文件。FindFirstFile检查子目录名称以及文件名。
语法
参数
【lpFileName】Windows 95：指向一个空值终止的字符串，指定一个有效的目录或路径和文件名，可以包含通配符（*和？）。该字符串不得超过MAX_PATH个字符。指向一个空值终止的


-------------------------------------------------------- KeyWin32FindFirstFileEx ----
FindFirstFileEx    [New - Windows NT]FindFirstFileEx函数在目录中搜索名称和属性与函数调用中指定的名称和属性相匹配的文件。
语法
参数
【lpFileName】指向一个空值终止的字符串，指定一个有效的目录或路径和文件名，可以包含通配符（*和？）。【fInfoLevelId】指定返回数据的信息级别。如果使用FindExInfo


-------------------------------------------------------- KeyWin32FindFirstFreeAce ----
FindFirstFreeAce    FindFirstFreeAce函数检索访问控制列表（ACL）中第一个空闲字节的指针。
语法
参数
【ACL】指向ACL结构。【步伐】指向该函数返回时创建的ACL中第一个空闲位置的指针。如果ACL无效，则该参数为NULL。如果ACL已满，则该参数指向ACL后面的字节。
返回值
如果函数


-------------------------------------------------------- KeyWin32FindFirstPrinterChangeNotification ----
FindFirstPrinterChangeNotification    FindFirstPrinterChangeNotification函数创建一个更改通知对象并返回对象的句柄。然后，您可以在调用其中一个等待函数来监视打印机或打印服务器的更改时使用此句柄。
语法
参数
【hPrinter】处理到要监视的打印机或打印服务器。该句柄通过调用OpenPrinter函数获取。【The system sets one or more of the following


-------------------------------------------------------- KeyWin32FindNextChangeNotification ----
FindNextChangeNotification    FindNextChangeNotification函数请求操作系统在下次检测到适当的更改时发出更改通知手动信号。
语法
参数
【hChangeHandle】标识由FindFirstChangeNotification函数创建的更改通知句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyWin32FindNextFile ----
FindNextFile    FindNextFile函数将继续从以前调用FindFirstFile函数的文件搜索。
语法
参数
【hFindFile】标识先前调用FindFirstFile函数返回的搜索句柄。【lpFindFileData】指向WIN32_FIND_DATA结构的接收有关找到的文件或子目录的信息。该结


-------------------------------------------------------- KeyWin32FindNextPrinterChangeNotification ----
FindNextPrinterChangeNotification    FindNextPrinterChangeNotification函数检索有关与打印机或打印服务器关联的更改通知对象的最新更改通知的信息。当对更改通知对象进行等待操作时，调用此函数。该函数还将更改通知对象重置为未通知状态。然后，您可以在另一个等待操作中使用该对象来继续监视打印机或打印服务器。下一次打印机或打印服务器发生一组特定更改时，操作系统将将对象设置为信号状态。FindFirstPrinterChangeNotification函数创建更改通知对象，并指定要监视的更改集。
语法
参数
【H更改】处理与打印机或打印服务器关联的更改通知对象。通过调用FindFirstPrinterChangeNotification函数获得这样的句柄。当操作系统检测到对象的更改通知过滤器中指


-------------------------------------------------------- KeyWin32FindResource ----
FindResource    FindResource函数确定指定模块中具有指定类型和名称的资源的位置。
语法
参数
【HMODULE】可执行文件包含资源的模块的句柄。值为NULL指定与操作系统用于创建当前进程的映像文件相关联的模块句柄。【lpName】指定资源的名称。有关详细信息，请参阅备注部分。【//值


-------------------------------------------------------- KeyWin32FindResourceEx ----
FindResourceEx    FindResourceEx函数确定指定模块中具有指定类型，名称和语言的资源的位置。
语法
参数
【HMODULE】标识可执行文件包含资源的模块。如果此参数为NULL，则该函数将搜索用于创建当前进程的模块。【// address of buffer for value type】指向指定


-------------------------------------------------------- KeyWin32FindText ----
FindText    FindText函数创建一个系统定义的无模式对话框，允许用户指定要搜索的字符串以及在文档中搜索文本时使用的选项。
语法
参数
【LPFR】指向FINDREPLACE结构的指针，其中包含用于初始化对话框的信息。该对话框使用此结构将有关用户输入的信息发送到您的应用程序。有关详细信息，请参阅以下备注部分。
返回值
如


-------------------------------------------------------- KeyWin32FindWindow ----
FindWindow    FindWindow函数检索顶级窗口的句柄，其类名和窗口名称与指定的字符串相匹配。此函数不搜索子窗口。
语法
参数
【lpClassName】指向指定类名的空值终止的字符串，或者是标识类名字符串的原子。如果这个参数是一个原子，它必须是由先前调用GlobalAddAtom函数创建的全局原子。原子，16位值，


-------------------------------------------------------- KeyWin32FindWindowEx ----
FindWindowEx    [Now Supported on Windows NT]FindWindowEx函数检索其类名和窗口名称与指定字符串匹配的窗口的句柄。该函数搜索子窗口，从给定的子窗口之后开始。
语法
参数
【hwndParent】标识要搜索子窗口的父窗口。如果【hwndParent】为NULL，该函数将使用桌面窗口作为父窗口。该函数将在桌面的子窗口的窗口中进行搜索。【hwndChildAfte


-------------------------------------------------------- KeyWin32FixBrushOrgEx ----
FixBrushOrgEx  Win32 API中没有实现FixBrushOrgEx函数。它提供与Win32s的兼容性。如果被调用，函数什么也不做，返回FALSE。
另请参见
GetBrushOrgEx, SetBrushOrgEx


-------------------------------------------------------- KeyWin32FlashWindow ----
FlashWindow    FlashWindow函数会闪烁一次指定的窗口。
语法



-------------------------------------------------------- KeyWin32FlattenPath ----
FlattenPath    FlattenPath函数将所选路径中的任何曲线转换为当前设备上下文（DC），将每条曲线转换为一系列线。
语法
参数
【HDC】标识包含有效路径的DC。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会返回以


-------------------------------------------------------- KeyWin32FloodFill ----
FloodFill    FloodFill函数使用当前画笔填充显示表面的一个区域。该区域被假定为由【crFill】参数指定的有界。
语法
参数
【HDC】标识设备上下文。【nXStart】指定填充开始点的逻辑x坐标。【nYStart】指定要开始填充的点的逻辑y坐标。【crFill】指定要填充的边界或区域的颜色。
返回值
如果函数


-------------------------------------------------------- KeyWin32FlushConsoleInputBuffer ----
FlushConsoleInputBuffer    FlushConsoleInputBuffer函数刷新控制台输入缓冲区。当前输入缓冲区中的所有输入记录都被丢弃。
语法
参数
【hConsoleInput】标识控制台输入缓冲区。句柄必须具有GENERIC_WRITE权限。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用


-------------------------------------------------------- KeyWin32FlushFileBuffers ----
FlushFileBuffers    FlushFileBuffers函数清除指定文件的缓冲区，并将所有缓冲的数据写入文件。
语法
参数
【HFILE】一个打开的文件句柄。该函数刷新该文件的缓冲区。文件句柄必须对该文件具有GENERIC_WRITE权限。如果【HFILE】是通信设备的句柄，则该函数仅刷新发送缓冲区。如果【HFI


-------------------------------------------------------- KeyWin32FlushInstructionCache ----
FlushInstructionCache    FlushInstructionCache函数刷新指定进程的指令高速缓存。
语法



-------------------------------------------------------- KeyWin32FlushViewOfFile ----
FlushViewOfFile    FlushViewOfFile函数将文件的映射视图中的字节范围写入磁盘。
语法
参数
【lpBaseAddress】指向要刷新到映射文件的磁盘表示的字节范围的基址。【dwNumberOfBytesToFlush】指定要刷新的字节数。如果【dwNumberOfBytesToFl


-------------------------------------------------------- KeyWin32FMExtensionProc ----
FMExtensionProc    FMExtensionProc函数是一个应用程序定义的回调函数，用于处理发送到文件管理器扩展动态链接库（DLL）的菜单命令和消息。
语法



-------------------------------------------------------- KeyWin32FoldString ----
FoldString    FoldString函数将一个字符串映射到另一个字符串，执行指定的转换选项。
语法
参数
【dwMapFlags】一组位标志，指示在映射期间要使用的转换类型。该值可以是以下位标志常量的组合：选项含义MAP_FOLDCZONE将兼容区域字符串折成标准的Unicode等价物。有关兼容


-------------------------------------------------------- KeyWin32ForegroundIdleProc ----
ForegroundIdleProc    ForegroundIdleProc挂接过程是一个应用程序定义的回调函数，系统在32位前台线程即将变为空闲时调用。
语法
参数
【码】指定挂接过程是否处理消息。如果【码】为HC_ACTION，挂接过程必须处理该消息。如果【码】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，无需进一步处理，并返回Ca


-------------------------------------------------------- KeyWin32FormatMessage ----
FormatMessage    FormatMessage函数格式化消息字符串。该函数需要一个消息定义作为输入。消息定义可以来自传递到函数中的缓冲区。它可以来自已加载模块中的消息表资源。或者呼叫者可以要求该函数在系统的消息表资源中搜索消息定义。该函数基于消息标识符和语言标识符在消息表资源中查找消息定义。该函数将格式化的消息文本复制到输出缓冲区，如果请求，则处理任何嵌入的插入序列。
语法
参数
【dwFlags中】包含一组位标志，用于指定格式化过程的各个方面以及如何解释【// pointer to  message source】参数。【dwFlags中】的低位字节指定函数如何处理


-------------------------------------------------------- KeyWin32FrameRect ----
FrameRect    FrameRect函数使用指定的画笔在指定的矩形周围绘制一个边框。边框的宽度和高度总是一个逻辑单位。
语法
参数
【hDC】标识绘制边框的设备上下文。【LPRC】指向包含矩形左上角和右下角的逻辑坐标的RECT结构。【HBR】标识用于绘制边框的画笔。
返回值
如果函数成功，返回值为TRUE。如果函数失


-------------------------------------------------------- KeyWin32FrameRgn ----
FrameRgn    FrameRgn函数使用指定的画笔在指定区域周围绘制一个边框。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要封闭在边框中的区域。该区域的坐标被推定为逻辑单位。【HBR】标识用于绘制边框的画笔。【nWidth】以逻辑单位指定纵向画笔笔画的宽度。【nHeig


-------------------------------------------------------- KeyWin32FreeConsole ----
FreeConsole    FreeConsole函数从其控制台分离调用进程。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
如果其他进程共享控制台，则控制台不会被销毁，


-------------------------------------------------------- KeyWin32FreeDDElParam ----
FreeDDElParam    FreeDDElParam函数释放由发布的DDE消息的【lParam的】参数指定的内存。收到发布的DDE消息的应用程序在使用UnpackDDElParam函数打开【lParam的】值后应调用此函数。
语法
参数
【味精】指定发布的DDE消息。【lParam的】指定发布的DDE消息的【lParam的】参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
一个应用程序应该


-------------------------------------------------------- KeyWin32FreeEnvironmentStrings ----
FreeEnvironmentStrings    FreeEnvironmentStrings函数释放一个环境字符串。
语法
参数
【lpszEnvironmentBlock】指向一个环境字符串的块。必须通过调用GetEnvironmentStrings函数获取指向块的指针。
返回值
如果函数成功，返回值不为零。如果


-------------------------------------------------------- KeyWin32FreeLibrary ----
FreeLibrary    FreeLibrary函数减少加载的动态链接库（DLL）模块的引用计数。当引用计数达到零时，模块将从调用进程的地址空间中取消映射，并且句柄不再有效。此函数取代FreeModule函数。
语法
参数
【hLibModule】标识加载的库模块。LoadLibrary或GetModuleHandle函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展


-------------------------------------------------------- KeyWin32FreeLibraryAndExitThread ----
FreeLibraryAndExitThread    FreeLibraryAndExitThread函数将加载的动态链接库（DLL）的引用计数减1，然后调用ExitThread终止调用线程。该函数不返回。
语法
参数
【hLibModule】指定函数递减的引用计数的动态链接库模块。【dwExitCode】指定调用线程的退出代码。
返回值
该函数没有返回值。该函数不返回。【hLibModule】句柄无效


-------------------------------------------------------- KeyWin32FreeModule ----
FreeModule  FreeModule函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用FreeLibrary函数。


-------------------------------------------------------- KeyWin32FreePrinterNotifyInfo ----
FreePrinterNotifyInfo    FreePrinterNotifyInfo函数释放由FindNextPrinterChangeNotification函数返回的系统分配的缓冲区。
语法
参数
【pPrinterNotifyInfo】指向FindNextPrinterChangeNotification函数的调用返回的PRINTER_NOTIFY_INFO缓冲区。FreePrint


-------------------------------------------------------- KeyWin32FreeProcInstance ----
FreeProcInstance  FreeProcInstance函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序不应该使用此函数;它在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32FreeResource ----
FreeResource  FreeResource函数已过时。它提供了简化16位Windows应用程序的移植。基于Win32的应用程序不需要使用LoadResource函数来释放加载的资源。
另请参见
LoadResource, LockResource


-------------------------------------------------------- KeyWin32FreeSid ----
FreeSid    FreeSid函数通过使用AllocateAndInitializeSid函数释放先前分配的安全标识符（SID）。
语法
参数
【PSID】指向SID结构免费。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32FRHookProc ----
FRHookProc    一个FRHookProc挂接过程是一个应用程序定义或库定义的回调过程，与“查找和替换”常用对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理查找或替换消??息所针对的公共对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。确切的含义取决于【uiMsg】参数的值。【lParam


-------------------------------------------------------- KeyWin32FSCTL_DISMOUNT_VOLUME ----
FSCTL_DISMOUNT_VOLUME    FSCTL_DISMOUNT_VOLUME DeviceIoControl 操作将卸载卷。dwIoControlCode = FSCTL_DISMOUNT_VOLUME;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize ;   //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;  //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32FSCTL_GET_COMPRESSION ----
FSCTL_GET_COMPRESSION    FSCTL_GET_COMPRESSION DeviceIoControl操作获取文件系统支持每流压缩的卷上的文件或目录的当前压缩状态。dwIoControlCode = FSCTL_GET_COMPRESSION;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针nOutBufferSize ;   //输出缓冲区的大小lpBytesReturned ;  //指向输出的实际字节
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32FSCTL_LOCK_VOLUME ----
FSCTL_LOCK_VOLUME    FSCTL_LOCK_VOLUME DeviceIoControl 操作将锁定卷。只能通过锁定卷的文件对象（* 【hDevice】）的句柄来访问锁定卷。dwIoControlCode = FSCTL_LOCK_VOLUME;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize ;   //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;  //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32FSCTL_SET_COMPRESSION ----
FSCTL_SET_COMPRESSION    FSCTL_SET_COMPRESSION DeviceIoControl操作设置文件系统支持每卷文件和每目录压缩的卷上的文件或目录的压缩状态。您可以使用此操作压缩或解压缩此卷上的文件或目录。dwIoControlCode = FSCTL_SET_COMPRESSION;   //操作代码lpInBuffer ;        //指向输入缓冲区的指针nInBufferSize ;     //输入缓冲区的大小lpOutBuffer = NULL; //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;   //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向包含指定文件或目录的新压缩状态的USHORT的缓冲区。定义了以下值：值含义COMPRESSION_FORMAT_NONE解压文件或目录。COMPRESSION_F


-------------------------------------------------------- KeyWin32FSCTL_UNLOCK_VOLUME ----
FSCTL_UNLOCK_VOLUME    FSCTL_UNLOCK_VOLUME DeviceIoControl操作会解锁一个卷。dwIoControlCode = FSCTL_UNLOCK_VOLUME;   //操作代码lpInBuffer = NULL; //指向输入缓冲区的指针;不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;      //指向输出缓冲区的指针;不曾用过;必须为NULLnOutBufferSize ;   //输出缓冲区的大小不曾用过;必须为零lpBytesReturned ;  //指向由DeviceIoControl函数使用的DWORD的指针
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32GdiComment ----
GdiComment    GdiComment函数将注释从缓冲区复制到指定的增强格式的图元文件中。
语法
参数
【HDC】标识增强型图元文件设备上下文。【CBSIZE】指定注释缓冲区的长度（以字节为单位）。【的lpData】指向包含注释的缓冲区。
返回值
如果函数成功，返回值不为零。如果函数失败，


-------------------------------------------------------- KeyWin32GdiFlush ----
GdiFlush    GdiFlush函数刷新调用线程的当前批处理。
语法
参数
此函数无参数。
返回值
如果当前批处理中的所有函数成功，则返回值不为零。如果当前批处理中的所有函数都不成功，返回值为零，表示至少有一个函数返回错误。
描述
批处理通过最小化调用返回布


-------------------------------------------------------- KeyWin32GdiGetBatchLimit ----
GdiGetBatchLimit    GdiGetBatchLimit函数返回可以在调用线程的当前批处理中累积的最大函数调用数。超出此限制时，系统将刷新当前批次。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值为批量限制。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
使用GdiSetBatchLimit函


-------------------------------------------------------- KeyWin32GdiSetBatchLimit ----
GdiSetBatchLimit    GdiSetBatchLimit函数设置调用线程当前批处理中可累积的最大函数数。超出此限制时，系统将刷新当前批次。
语法
参数
【// batch limit】指定要设置的批量限制。值0设置默认限制。值为1将禁用批处理。
返回值
如果函数成功，则返回值为上一个批量限制。如果函数失败，返回值为零。要获取扩展错误信息


-------------------------------------------------------- KeyWin32GenerateConsoleCtrlEvent ----
GenerateConsoleCtrlEvent    GenerateConsoleCtrlEvent函数将指定的信号发送到共享与调用进程相关联的控制台的控制台进程组。
语法
参数
【dwCtrlEvent】指定要生成的信号的类型。指定以下值之一：值含义CTRL_C_EVENT产生一个CTRL + C信号。CTRL_BREAK_EVENT产生一个CTRL + BREAK


-------------------------------------------------------- KeyWin32GetAce ----
GetAce    GetAce函数获取指向ACL中ACE的指针。ACE是访问控制条目。ACL是访问控制列表。
语法
参数
【ACL】指向包含要检索的ACE的ACL结构。【dwAceIndex】指定检索指针的ACE。值为0对应于ACL中的第一个ACE，1对应于第二个ACE，依此类推。【步伐】指向函数设置为ACE地


-------------------------------------------------------- KeyWin32GetAclInformation ----
GetAclInformation    GetAclInformation函数检索有关访问控制列表（ACL）的信息。
语法
参数
【ACL】指向ACL结构。该函数检索有关此ACL的信息。【pAclInformation】指向缓冲区，接收请求的信息。放入缓冲区的结构取决于【dwAclInformationClass】参数


-------------------------------------------------------- KeyWin32GetACP ----
GetACP    GetACP函数检索系统的当前ANSI代码页标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统的当前ANSI代码页标识符，如果没有代码页是当前的，则返回默认标识符。
描述
以下是ANSI代码页标识符：识别码含义874泰国93


-------------------------------------------------------- KeyWin32GetActiveWindow ----
GetActiveWindow    GetActiveWindow函数检索与调用该函数的线程相关联的活动窗口的窗口句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是与调用该函数的线程相关联的活动窗口的句柄。如果调用线程没有活动窗口，则返回值为NULL。



-------------------------------------------------------- KeyWin32GetArcDirection ----
GetArcDirection    GetArcDirection函数返回指定设备上下文的当前弧方向。圆弧和矩形函数使用圆弧方向。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定当前的圆弧方向。以下是有效的返回值：值含义AD_COUNTERCLOCKWISE逆时针绘制弧形和矩形。AD_CLOCKWIS


-------------------------------------------------------- KeyWin32GetAspectRatioFilterEx ----
GetAspectRatioFilterEx    GetAspectRatioFilterEx函数检索当前宽高比滤镜的设置。
语法
参数
【HDC】标识设备上下文。【lpAspectRatio】指向SIZE结构，接收当前的宽高比过滤器。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调


-------------------------------------------------------- KeyWin32GetAsyncKeyState ----
GetAsyncKeyState    GetAsyncKeyState函数确定在调用函数时键是上下还是关闭，以及在先前调用GetAsyncKeyState之后是否按下了该键。
语法
参数
【V键】指定256个可能的虚拟键代码之一。Windows NT：您可以使用左右区分常量来指定某些键。有关详细信息，请参阅
描述
部分。Windows 95： Windows 95不支持在


-------------------------------------------------------- KeyWin32GetAtomName ----
GetAtomName    GetAtomName函数检索与指定的本地原子相关联的字符串的副本。此函数将替换GetAtomHandle函数。
语法
参数
【纳多马斯】指定标识要检索的字符串的本地原子。【lpBuffer】指向字符串的缓冲区。【服务提供商】指定缓冲区的大小（以字符为单位）。
返回值
如果函数成功，则返回值是复制到缓冲区的字符


-------------------------------------------------------- KeyWin32GetAuditedPermissionsFromAcl ----
GetAuditedPermissionsFromAcl    [New - Windows NT]GetAuditedPermissionsFromAcl函数返回指定受托人的审计访问权限。被审核的权限基于指定的访问控制列表（ACL）的访问控制条目（ACE）。经审计的访问权限指示导致系统在系统事件日志中生成审核记录的访问尝试的类型。经审核的权利包括ACL为受托人或受托人所属的任何组指定的权利。在确定被审核权限时，该函数不考虑受托人所持有的安全特权。
语法
参数
【ACL】指向获取受托人审核访问权限的ACL。【pTrustee】指向标识受托人的TRUSTEE结构的指针。受托人可以是用户，组或程序（如Windows NT服务）。您可以使用名称或安全标识


-------------------------------------------------------- KeyWin32GetBinaryType ----
GetBinaryType    GetBinaryType函数确定文件是否可执行，如果是，则是可执行文件的类型。最后一个属性确定可执行文件在哪个子系统下运行。
语法



-------------------------------------------------------- KeyWin32GetBitmapBits ----
GetBitmapBits  GetBitmapBits函数将指定位图的位图位复制到缓冲区中。Win32 API中没有实现GetBitmapBits函数。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用GetDIBits函数。


-------------------------------------------------------- KeyWin32GetBitmapDimensionEx ----
GetBitmapDimensionEx    GetBitmapDimensionEx函数检索位图的尺寸。检索到的维度必须由SetBitmapDimensionEx函数设置。GetMapDimensionEx函数替换GetMapDimension函数。
语法
参数
【HBITMAP】标识位图。【// address of structure receiving dimensions】指向SIZE结构以接收位图维度。
返回值
如果函数成功，返回值不为


-------------------------------------------------------- KeyWin32GetBkColor ----
GetBkColor    GetBkColor函数返回指定设备上下文的当前背景颜色。
语法
参数
【HDC】标识要返回背景颜色的设备上下文。
返回值
如果函数成功，则返回值为当前背景颜色的COLORREF值。如果函数失败，返回值为CLR_INVALID。



-------------------------------------------------------- KeyWin32GetBkMode ----
GetBkMode    GetBkMode函数返回指定设备上下文的当前后台混合模式。设备背景的背景混合模式影响不是实线的文本，阴影画笔和笔风格。
语法
参数
【HDC】标识要返回背景模式的设备上下文。
返回值
如果函数成功，则返回值指定当前的背景混合模式，OPAQUE或TRANSPARENT。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetBoundsRect ----
GetBoundsRect    GetBoundsRect函数获取指定设备上下文的当前累积边界矩形。Windows为每个应用程序维护一个累积的边界矩形。应用程序可以检索和设置此矩形。
语法
参数
【HDC】标识函数将返回的边界矩形的设备上下文。【lprcBounds】指向将接收当前边界矩形的RECT结构。应用程序的矩形以逻辑坐标返回，Windows矩形返回屏幕坐标。【旗】指定GetB


-------------------------------------------------------- KeyWin32GetBrushOrgEx ----
GetBrushOrgEx    GetBrushOrgEx函数检索指定设备上下文的当前画笔原点。此函数将替换GetBrushOrg函数。
语法
参数
【HDC】标识设备上下文。【LPPT】指向设备坐标中接收画笔原点的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyWin32GetCapture ----
GetCapture    GetCapture函数检索捕获鼠标的窗口（如果有）的句柄。一次只能有一个窗口可以捕捉鼠标;该窗口接收鼠标输入，无论光标是否在其边框内。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是与当前线程相关联的捕获窗口的句柄。如果线程中没有窗口捕获到鼠标，则返回值为NULL。
描述
NULL返回值并不意味着系统中没有其他线程


-------------------------------------------------------- KeyWin32GetCaretBlinkTime ----
GetCaretBlinkTime    GetCaretBlinkTime函数返回反转插入符号像素所需的经过时间（以毫秒为单位）。用户可以使用控制面板设置此值。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值为闪烁时间，单位为毫秒。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32GetCaretPos ----
GetCaretPos    GetCaretPos函数将客户端坐标中的插入符的位置复制到指定的POINT结构。
语法
参数
【LPPOINT】指向要接收插入符号的客户端坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32GetCharABCWidths ----
GetCharABCWidths    GetCharABCWidths函数以当前TrueType字体检索给定范围内连续字符的逻辑单位宽度。此函数只能使用TrueType字体。
语法
参数
【HDC】标识设备上下文。【uFirstChar】指定当前字体的连续字符组中的第一个字符。【uLastChar】指定当前字体的连续字符组中的最后一个字符。【lpabc】指向ABC结构的数组，


-------------------------------------------------------- KeyWin32GetCharABCWidthsFloat ----
GetCharABCWidthsFloat    GetCharABCWidthsFloat函数以逻辑单位检索当前字体在指定范围内的连续字符的宽度。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定寻找ABC宽度的连续字符组中的第一个字符的代码点。【iLastChar】指定寻找ABC宽度的连续字符组中最后一个字符的代码点。这个范围是


-------------------------------------------------------- KeyWin32GetCharacterPlacement ----
GetCharacterPlacement    [Now Supported on Windows NT]GetCharacterPlacement函数检索有关字符串的信息，例如字符宽度，插入符号定位，字符串中的排序和字形渲染。返回的信息类型取决于【dwFlags中】参数，并且基于给定显示上下文中当前选定的字体。该函数将信息复制到指定的GCP_RESULTS结构或由结构指定的一个或多个数组。
语法
参数
【HDC】标识设备上下文。【lpString】指向要处理的字符串。【NCOUNT】指定字符串中的字符数。【nMaxExtent】指定字符串处理的最大范围（以逻辑单位）。如果被处理的字符超出这


-------------------------------------------------------- KeyWin32GetCharWidth ----
GetCharWidth    GetCharWidth函数以逻辑坐标检索当前字体在指定范围内的连续字符的宽度。维护GetCharWidth以兼容16位版本的Windows。基于Win32的应用程序应该调用GetCharWidth32函数，它提供更准确的结果。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定连续字符组中的第一个字符。【iLastChar】指定连续字符组中的最后一个字符，不能在指定的第一个字符之前。【lpBuffer】指向缓冲


-------------------------------------------------------- KeyWin32GetCharWidth32 ----
GetCharWidth32    GetCharWidth32函数以逻辑坐标检索当前字体在指定范围内的连续字符的宽度。此函数取代GetCharWidth函数。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定连续字符组中的第一个字符。【iLastChar】指定连续字符组中的最后一个字符，不能在指定的第一个字符之前。【lpBuffer】指向缓冲


-------------------------------------------------------- KeyWin32GetCharWidthFloat ----
GetCharWidthFloat    GetCharWidthFloat函数从当前字体中检索指定范围内连续字符的分数宽度。
语法
参数
【HDC】标识设备上下文。【iFirstChar】指定连续字符组中第一个字符的代码点。【iLastChar】指定连续字符组中最后一个字符的代码点。【pxBuffer】指向缓冲区以接收字符宽度


-------------------------------------------------------- KeyWin32GetClassInfo ----
GetClassInfo    GetClassInfo函数检索有关窗口类的信息。GetClassInfoEx函数已被GetClassInfoEx函数取代。但是，如果您不需要关于班级小图标的信息，您仍然可以使用GetClassInfo.
语法
参数
【的hInstance】标识创建该类的应用程序的实例。要检索有关Windows定义的类的信息（如按钮或列表框），请将此参数设置为NULL。【lpClassName】指向包含类名称的以null


-------------------------------------------------------- KeyWin32GetClassInfoEx ----
GetClassInfoEx    GetClassInfoEx函数检索有关窗口类的信息，包括与窗口类相关联的小图标的句柄。GetClassInfo函数不会检索小图标的句柄。
语法
参数
【HINST】标识创建该类的应用程序的实例。要检索有关Windows定义的类的信息（如按钮或列表框），请将此参数设置为NULL。【lpszClasspl】指向包含类名称的以null结尾的字符


-------------------------------------------------------- KeyWin32GetClassLong ----
GetClassLong    GetClassLong函数从与指定窗口相关联的WNDCLASS结构中检索指定的32位（长）值。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的32位值。要从额外的类内存中检索一个32位值，请指定要检索的值的正零，基于零的字节偏移量。有效值范围为零，通过


-------------------------------------------------------- KeyWin32GetClassName ----
GetClassName    GetClassName函数检索指定窗口所属的类的名称。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【lpClassName】指向要接收类名字符串的缓冲区。【nMaxCount】指定【lpClassName】参数指向的缓冲区的长度（以字符为单


-------------------------------------------------------- KeyWin32GetClassWord ----
GetClassWord    GetClassWord函数将指定偏移量下的16位（字）值检索到指定窗口所属窗口类的额外类内存中。除了GCW_ATOM和GCW_HICONSM之外，GCW_值在Win32 API中已经过时了。您必须使用GetClassLong函数来检索窗口的类值。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的值的基于零的字节偏移量。有效值范围为零，通过类内存的字节数减去2;例如，如果您指定了10个或更多字节的额外类别


-------------------------------------------------------- KeyWin32GetClientRect ----
GetClientRect    GetClientRect函数检索窗口的客户区域的坐标。客户端坐标指定客户区域的左上角和右下角。由于客户端坐标相对于窗口客户区域的左上角，左上角的坐标为（0,0）。
语法
参数
【的hWnd】标识要检索客户端坐标的窗口。【LPRECT】指向接收客户端坐标的RECT结构。剩下和最佳成员为零。对和底部成员包含窗口的宽度和高度。
返回值
如果函数成功，返回值不为零。如


-------------------------------------------------------- KeyWin32GetClipboardData ----
GetClipboardData    GetClipboardData函数以指定的格式从剪贴板中检索数据。剪贴板以前必须打开。
语法
参数
【UFormat】指定剪贴板格式。有关剪贴板格式的说明，请参阅SetClipboardData函数。
返回值
如果函数成功，则返回值是指定格式的剪贴板对象的句柄。如果函数失败，返回值为N


-------------------------------------------------------- KeyWin32GetClipboardFormatName ----
GetClipboardFormatName    GetClipboardFormatName函数从剪贴板中检索指定注册格式的名称。该函数将该名称复制到指定的缓冲区。
语法
参数
【格式】指定要检索的格式类型。此参数不能指定任何预定义的剪贴板格式。【lpszFormatName】指向要接收格式名称的缓冲区。【cchMaxCount】指定要复制到缓冲区的字符串的最大长度


-------------------------------------------------------- KeyWin32GetClipboardOwner ----
GetClipboardOwner    GetClipboardOwner函数检索剪贴板当前所有者的窗口句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是拥有剪贴板的窗口的句柄。如果剪贴板不拥有，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
即使剪贴板当


-------------------------------------------------------- KeyWin32GetClipboardViewer ----
GetClipboardViewer    GetClipboardViewer函数检索剪贴板查看器链中第一个窗口的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是剪贴板查看器链中第一个窗口的句柄。如果没有剪贴板查看器，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32GetClipBox ----
GetClipBox    GetClipBox函数检索可以围绕设备当前可见区域绘制的最紧密的边界矩形的尺寸。可视区域由当前剪辑区域或剪辑路径以及任何重叠窗口定义。
语法
参数
【HDC】标识设备上下文。【LPRC】指向要接收矩形维度的RECT结构。
返回值
如果函数成功，则返回值指定剪切框的复杂度，可以是以下值之一：值含义NULLREGION区域是空的SIMP


-------------------------------------------------------- KeyWin32GetClipCursor ----
GetClipCursor    GetClipCursor函数检索限制光标的矩形区域的屏幕坐标。
语法
参数
【LPRECT】指向接收限定矩形的屏幕坐标的RECT结构。如果光标不限于矩形，则结构将接收屏幕的尺寸。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，


-------------------------------------------------------- KeyWin32GetClipRgn ----
GetClipRgn    GetClipRgn函数检索标识指定设备上下文的当前应用程序定义的剪切区域的句柄。
语法
参数
【HDC】标识设备上下文。【HRGN】在调用函数之前标识一个现有区域。函数返回后，此参数标识当前裁剪区域的副本。
返回值
如果函数成功，并且给定设备上下文没有剪切区域，则返回值为零。如果


-------------------------------------------------------- KeyWin32GetColorAdjustment ----
GetColorAdjustment    GetColorAdjustment函数检索指定设备上下文的颜色调整值。
语法
参数
【HDC】标识设备上下文。【LPCA】指向接收颜色调整值的COLORADJUSTMENT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用G


-------------------------------------------------------- KeyWin32GetColorSpace ----
GetColorSpace    GetColorSpace函数从指定的设备上下文中检索逻辑颜色空间的当前句柄。
语法
参数
【HDC】处理设备上下文。
返回值
如果函数成功，则返回值是逻辑颜色空间的当前句柄。如果函数失败，返回值为NULL。



-------------------------------------------------------- KeyWin32GetCommandLine ----
GetCommandLine    GetCommandLine函数返回一个指向当前进程的命令行字符串的指针。
语法
参数
此函数无参数。
返回值
返回值是指向当前进程的命令行字符串的指针。
描述
使用C编写的非Unicode控制台进程可以使用ARGC和ARGV参数来访问命令行参数。命令行字符串的参数（不


-------------------------------------------------------- KeyWin32GetCommConfig ----
GetCommConfig    [Now Supported on Windows NT]GetCommConfig函数获取通信设备的当前配置。
语法
参数
【hCommDev】标识开放的通信设备。【lpCC】指向接收COMMCONFIG结构的缓冲区。【lpdwSize】指向32位变量，指定由【lpCC】指向的缓冲区的大小（以字节为单位）。当函数


-------------------------------------------------------- KeyWin32GetCommMask ----
GetCommMask    GetCommMask函数检索指定通信设备的事件掩码值。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpEvtMask】指向32位变量以填充当前启用的事件掩码。此参数可以是以下值中的一个或多个：值含义EV_BREAK输入时检


-------------------------------------------------------- KeyWin32GetCommModemStatus ----
GetCommModemStatus    GetCommModemStatus函数检索调制解调器控制寄存器值。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpModemStat】指向一个32位变量，指定调制解调器控制寄存器值的当前状态。此参数可以是以下值的组合：值含义MS_CT


-------------------------------------------------------- KeyWin32GetCommProperties ----
GetCommProperties    GetCommProperties函数填充缓冲区，其中包含有关指定通信设备的通信属性的信息。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpCommProp】指向返回通信属性信息的COMMPROP结构。此信息可用于以后调用SetCommState，SetCom


-------------------------------------------------------- KeyWin32GetCommState ----
GetCommState    GetCommState函数使用指定通信设备的当前控制设置填充设备控制块（DCB结构）。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpDCB】指向返回控制设置信息的DCB结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展


-------------------------------------------------------- KeyWin32GetCommTimeouts ----
GetCommTimeouts    GetCommTimeouts函数检索指定通信设备上所有读取和写入操作的超时参数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpCommTimeouts】指向返回超时信息的COMMTIMEOUTS结构。
返回值
如果函数成功，返回值不为零。如果


-------------------------------------------------------- KeyWin32GetCompressedFileSize ----
GetCompressedFileSize    GetCompressedFileSize函数获取指定文件的压缩大小（以字节为单位）。
语法
参数
【lpFileName】指向指定文件名称的以空值终止的字符串的指针。【lpFileSizeHigh】指向DWORD变量的指针，该变量将该函数设置为压缩文件大小的高位双字。函数的返回值是压缩文


-------------------------------------------------------- KeyWin32GetComputerName ----
GetComputerName    GetComputerName函数检索当前系统的计算机名称。该名称在系统启动时，从注册表初始化时建立。
语法
参数
【lpBuffer】指向缓冲区以接收包含计算机名称的以null结尾的字符串。【服务提供商】指向一个变量，指定缓冲区的最大大小（以字符为单位）。该值应足够大以包含MAX_COMPUTERNAM


-------------------------------------------------------- KeyWin32GetConsoleCP ----
GetConsoleCP    Windows NT： GetConsoleCP函数返回与调用进程关联的控制台使用的输入代码页的标识。控制台使用其输入代码页将键盘输入转换为相应的字符值。
语法
参数
此函数无参数。
返回值
返回值是标识代码页的代码。
描述
代码页将256个字符代码映射到单个字符。不同的代码页包括不同的特殊字符，通常是针对一种语言或一组语言定制的。要设置控制台的输


-------------------------------------------------------- KeyWin32GetConsoleCursorInfo ----
GetConsoleCursorInfo    GetConsoleCursorInfo函数检索有关指定控制台屏幕缓冲区的游标的大小和可见性的信息。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpConsoleCursorInfo】指向CONSOLE_CURSOR_INFO结构，其中


-------------------------------------------------------- KeyWin32GetConsoleMode ----
GetConsoleMode    GetConsoleMode函数报告控制台输入缓冲区的当前输入模式或控制台屏幕缓冲区的当前输出模式。
语法
参数
【hConsoleHandle】标识控制台输入缓冲区或屏幕缓冲区。句柄必须具有GENERIC_READ权限。【//当前模式标志】指向一个32位变量，指示指定缓冲区的当前模式。如果【hCons


-------------------------------------------------------- KeyWin32GetConsoleOutputCP ----
GetConsoleOutputCP    Windows NT： GetConsoleOutputCP函数返回与调用进程关联的控制台使用的输出代码页的标识。控制台使用其输出代码页将由各种输出函数写入的字符值转换为控制台窗口中显示的图像。
语法
参数
此函数无参数。
返回值
返回值是标识代码页的代码。
描述
代码页将256个字符代码映射到单个字符。不同的代码页包括不同的特殊字符，通常是针对一种语言或一组语言定制的。要设置控制台的输


-------------------------------------------------------- KeyWin32GetConsoleScreenBufferInfo ----
GetConsoleScreenBufferInfo    GetConsoleScreenBufferInfo函数检索有关指定控制台屏幕缓冲区的信息。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpConsoleScreenBufferInfo】指向返回屏幕缓冲区信息的CONSOLE_


-------------------------------------------------------- KeyWin32GetConsoleTitle ----
GetConsoleTitle    GetConsoleTitle函数检索当前控制台窗口的标题栏字符串。
语法
参数
【lpConsoleTitle】指向一个缓冲区，接收一个空值终止的字符串，其中包含控制台窗口标题栏中显示的文本。【服务提供商】指定由【lpConsoleTitle】参数指向的缓冲区的大小（以


-------------------------------------------------------- KeyWin32GetCPInfo ----
GetCPInfo    GetCPInfo函数检索有关任何有效的已安装或可用代码页的信息。
语法
参数
【CodePage】指定要检索哪些信息的代码页。您可以为任何已安装或可用的代码页指定代码页标识符，也可以指定以下预定义值之一：值含义CP_ACP使用系统默认的ANSI代码页CP_MACCP使


-------------------------------------------------------- KeyWin32GetCurrencyFormat ----
GetCurrencyFormat    GetCurrencyFormat函数将数字字符串格式化为指定区域设置的货币字符串。
语法
参数
【语言环境】指定要格式化货币字符串的区域设置。如果【lpFormat】为NULL，则该函数将根据该区域设置的货币格式格式化该字符串。如果【lpFormat】不为NULL，则该函数仅对CURR


-------------------------------------------------------- KeyWin32GetCurrentDirectory ----
GetCurrentDirectory    GetCurrentDirectory函数检索当前进程的当前目录。
语法
参数
【nBufferLength】指定当前目录字符串的缓冲区的长度（以字符为单位）。缓冲区长度必须包含终止空字符的空间。【lpBuffer】指向当前目录字符串的缓冲区。这个以null结尾的字符串


-------------------------------------------------------- KeyWin32GetCurrentFiber ----
GetCurrentFiber    GetCurrentFiber函数返回当前光纤的地址。
语法
参数
此函数无参数。
返回值
返回值是当前正在运行的光纤的地址。
描述
创建光纤时，CreateFiber和ConvertThreadToFiber函数返回光纤地址。GetCurrentF


-------------------------------------------------------- KeyWin32GetCurrentHwProfile ----
GetCurrentHwProfile    [New - Windows NT]GetCurrentHwProfile函数检索有关本地计算机的当前硬件配置文件的信息。
语法
参数
【lpHwProfileInfo】指向HW_PROFILE_INFO结构的指针，其中函数返回有关当前硬件配置文件的信息。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零


-------------------------------------------------------- KeyWin32GetCurrentObject ----
GetCurrentObject    GetCurrentObject函数返回指定类型的当前选定对象。
语法
参数
【HDC】标识设备上下文。【uObjectType】指定要查询的对象类型。此参数可以是以下值之一：值含义OBJ_PEN返回当前选择的笔。OBJ_BRUSH返回当前所选画笔。OBJ_PAL返回


-------------------------------------------------------- KeyWin32GetCurrentPositionEx ----
GetCurrentPositionEx    GetCurrentPositionEx函数以逻辑坐标检索当前位置。
语法
参数
【HDC】标识设备上下文。【LPPOINT】指向POINT结构，它接收当前位置的坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetCurrentProcess ----
GetCurrentProcess    GetCurrentProcess函数返回当前进程的伪句柄。
语法
参数
此函数无参数。
返回值
返回值是当前进程的伪手柄。
描述
伪句柄是一个特殊的常量，被解释为当前的进程句柄。当需要进程句柄时，调用进程可以使用该句柄来指定自己的进程。伪句柄不是由子进程


-------------------------------------------------------- KeyWin32GetCurrentProcessId ----
GetCurrentProcessId    GetCurrentProcessId函数返回调用进程的进程标识符。
语法
参数
此函数无参数。
返回值
返回值是调用进程的进程标识符。
描述
在进程终止之前，进程标识符唯一地标识整个系统中的进程。



-------------------------------------------------------- KeyWin32GetCurrentThread ----
GetCurrentThread    GetCurrentThread函数返回当前线程的伪句柄。
语法
参数
此函数无参数。
返回值
返回值是当前线程的伪句柄。
描述
伪句柄是一个特殊常量，被解释为当前的线程句柄。当需要线程句柄时，调用线程可以使用此句柄来指定自身。伪句柄不是由子进程继承的。


-------------------------------------------------------- KeyWin32GetCurrentThreadId ----
GetCurrentThreadId    GetCurrentThreadId函数返回调用线程的线程标识符。
语法
参数
此函数无参数。
返回值
返回值是调用线程的线程标识符。
描述
直到线程终止，线程标识符唯一地标识整个系统中的线程。



-------------------------------------------------------- KeyWin32GetCurrentTime ----
GetCurrentTime    GetCurrentTime已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用GetTickCount函数或在注册表项HKEY_PERFORMANCE_DATA中的性能数据中查找“系统启动时间”计数器。


-------------------------------------------------------- KeyWin32GetCursor ----
GetCursor    GetCursor函数检索当前游标的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值就是当前光标的句柄。如果没有游标，则返回值为NULL。



-------------------------------------------------------- KeyWin32GetCursorPos ----
GetCursorPos    GetCursorPos函数以屏幕坐标取得光标的位置。
语法
参数
【LPPOINT】指向接收光标屏幕坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
光


-------------------------------------------------------- KeyWin32GetDateFormat ----
GetDateFormat    GetDateFormat函数将日期格式指定为指定区域设置的日期字符串。该函数格式化指定的日期或本地系统日期。
语法
参数
【语言环境】指定要格式化日期字符串的区域设置。如果【lpFormat】为NULL，则该函数根据该语言环境的日期格式对该字符串进行格式化。如果【lpFormat】不为NULL，则该函数仅对格式


-------------------------------------------------------- KeyWin32GetDC ----
GetDC    GetDC函数检索指定窗口的客户端区域的显示设备上下文（DC）的句柄。显示设备上下文可用于随后的GDI函数，以绘制窗口的客户区。此函数根据为指定窗口指定的类样式检索公共，类或私有设备上下文。对于常见的设备上下文，GetDC每次检索时都会将默认属性分配给设备上下文。对于类和私有设备上下文，GetDC保留先前分配的属性不变。
语法
参数
【的hWnd】标识要检索其设备上下文的窗口。
返回值
如果函数成功，则返回值标识给定窗口客户区的设备上下文。如果函数失败，返回值为NULL。
描述
在使用公共设备上下文绘制后，必须调


-------------------------------------------------------- KeyWin32GetDCEx ----
GetDCEx    GetDCEx函数检索指定窗口的显示设备（DC）上下文的句柄。显示设备上下文可用于随后的GDI函数，以绘制客户区。此函数是GetDC函数的扩展，使应用程序能够更好地控制客户端区域中是否发生裁剪。
语法
参数
【的hWnd】标识出现绘图的窗口。【hrgnClip】指定可与客户端窗口的可见区域组合的裁剪区域。【旗】指定如何创建设备上下文。此参数可以是以下值的组合：值含义DCX_WINDOW返回与窗口


-------------------------------------------------------- KeyWin32GetDCOrgEx ----
GetDCOrgEx    GetDCOrgEx函数获取指定设备上下文（DC）的最终转换起始点。最终翻译来源指定Windows用于将设备坐标转换为客户端坐标（对于应用程序窗口中的坐标）的偏移量。此函数取代GetDCOrg函数。
语法
参数
【HDC】指定要检索其最终翻译原点的设备上下文。【LPPOINT】指向POINT结构，该函数将在设备坐标中设置为最终翻译原点。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32GetDefaultCommConfig ----
GetDefaultCommConfig    [Now Supported on Windows NT]GetDefaultCommConfig函数获取通信设备的默认配置。
语法
参数
【lpszName】指向指定设备名称的以null结尾的字符串。【lpCC】指向接收COMMCONFIG结构的缓冲区。【lpdwSize】指向32位变量，指定由【lpCC】指向的缓冲区的大小（


-------------------------------------------------------- KeyWin32GetDesktopWindow ----
GetDesktopWindow    GetDesktopWindow函数返回Windows桌面窗口的句柄。桌面窗口覆盖整个屏幕。桌面窗口是其上所有图标和其他窗口的区域。
语法
参数
此函数无参数。
返回值
返回值是桌面窗口的句柄。



-------------------------------------------------------- KeyWin32GetDeviceCaps ----
GetDeviceCaps    GetDeviceCaps函数检索有关指定设备的特定于设备的信息。
语法
参数
【HDC】标识设备上下文。【参数nIndex】指定要返回的项目。此参数可以是以下值之一：指数含义DRIVERVERSION设备驱动程序版本。TECHNOLOGY设备技术。它可以是以下值之一：


-------------------------------------------------------- KeyWin32GetDeviceGammaRamp ----
GetDeviceGammaRamp    GetDeviceGammaRamp函数检索直接彩色显示板上的伽马斜坡。
语法
参数
【HDC】处理设备上下文。【lpRamp】指向一组256字节元素的三个数组。这些数组是帧缓冲器和DAC值之间的颜色值之间的映射。第一个数组是红色，下一个是绿色，最后一个是蓝色。
返回值



-------------------------------------------------------- KeyWin32GetDialogBaseUnits ----
GetDialogBaseUnits    GetDialogBaseUnits函数返回Windows使用的对话框基本单位，以创建对话框。Windows和应用程序都使用这些单元将对话框和控件的宽度和高度从对话框模板中转换为像素，反之亦然。
语法
参数
此函数无参数。
返回值
返回值是包含对话框基本单位的32位值。返回值的低位字包含水平对话框基本单位，高位字包含垂直对话框基本单位。
描述
水平基本单位等于系统字体中字符的平均宽度（以


-------------------------------------------------------- KeyWin32GetDIBits ----
GetDIBits    GetDIBits函数检索指定位图的位，并使用指定的格式将它们复制到缓冲区中。
语法
参数
【HDC】标识设备上下文。【骨形态发生蛋白】标识位图。【uStartScan】指定要检索的第一条扫描线。【cScanLines】指定要检索的扫描线数。【lpvBits】指向缓冲区以接收位图数


-------------------------------------------------------- KeyWin32GetDiskFreeSpace ----
GetDiskFreeSpace    GetDiskFreeSpace函数检索有关指定磁盘的信息，包括磁盘上的可用空间量。
语法
参数
【lpRootPathName】指向一个以null结尾的字符串，指定磁盘的根目录以返回有关的信息。如果【lpRootPathName】为NULL，则该函数使用当前目录的根。【lpSector


-------------------------------------------------------- KeyWin32GetDiskFreeSpaceEx ----
GetDiskFreeSpaceEx    [New - Windows NT][New - Windows 95, OEM Service Release 2]GetDiskFreeSpaceEx函数获取有关磁盘卷上可用空间量的信息：空间总量，可用空间总量以及与调用线程相关联的用户可用空间总量。
语法
参数
【lpDirectoryName】指向一个以空值终止的字符串，指定感兴趣的磁盘上的目录。该字符串可以是UNC名称。如果【lpDirectoryName】为NULL，则GetDiskFreeS


-------------------------------------------------------- KeyWin32GetDlgCtrlID ----
GetDlgCtrlID    GetDlgCtrlID函数返回指定控件的标识符。
语法
参数
【//控制柄】标识控件。
返回值
如果函数成功，返回值就是控件的标识符。如果函数失败，返回值为NULL。例如，【//控制柄】参数的无效值将导致该函数失败。
描述
GetDlgCtrl


-------------------------------------------------------- KeyWin32GetDlgItem ----
GetDlgItem    GetDlgItem函数在指定的对话框中检索控件的句柄。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定要检索的控件的标识符。
返回值
如果函数成功，则返回值是给定控件的窗口句柄。如果函数失败，则返回值为NULL，表示无效的对话


-------------------------------------------------------- KeyWin32GetDlgItemInt ----
GetDlgItemInt    GetDlgItemInt函数将对话框中指定控件的文本转换为整数值。
语法
参数
【hDlg】处理包含感兴趣的控件的对话框。【nIDDlgItem】对话框项目标识符，指定要翻译其文本的控件。【lpTranslated】指向接收函数成功/失败值的布尔变量。TRUE表示成功，


-------------------------------------------------------- KeyWin32GetDlgItemText ----
GetDlgItemText    GetDlgItemText函数在对话框中检索与控件相关联的标题或文本。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定要检索其标题或文本的控件的标识符。【lpString】指向缓冲区以接收标题或文本。【nMaxCount】指定要复制到【lpStr


-------------------------------------------------------- KeyWin32GetDoubleClickTime ----
GetDoubleClickTime    GetDoubleClickTime函数检索鼠标当前的双击时间。双击鼠标是两次点击鼠标，第二次在第一次指定的时间后发生。双击时间是双击的第一次和第二次点击之间可能发生的最大毫秒数。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值指定当前的双击时间（以毫秒为单位）。



-------------------------------------------------------- KeyWin32GetDriveType ----
GetDriveType    GetDriveType函数确定磁盘驱动器是可移动的，固定的，CD-ROM，RAM磁盘还是网络驱动器。
语法
参数
【lpRootPathName】指向一个以null结尾的字符串，指定磁盘的根目录以返回有关的信息。如果【lpRootPathName】为NULL，则该函数使用当前目录的根。
返回值
返回


-------------------------------------------------------- KeyWin32GetEffectiveClientRect ----
GetEffectiveClientRect    GetEffectiveClientRect函数计算客户区域中矩形的尺寸。此函数的实用性有限。
语法
参数
【的hWnd】处理到有客户区要检查的窗口。【LPRC】指向接收矩形尺寸的RECT结构的指针。【lpinfoit】指向客户区域中控件的16位控制标识符数组。每个控件需要两个数组元素。第一个元素


-------------------------------------------------------- KeyWin32GetEffectiveRightsFromAcl ----
GetEffectiveRightsFromAcl    [New - Windows NT]GetEffectiveRightsFromAcl函数检索ACL允许指定的受托人的有效访问权限。受托人的有效访问权限是ACL授予受托人或受托人所属组织的访问权限。该函数不考虑受托人在确定有效访问权限时所持有的安全特权。
语法
参数
【ACL】指向获取受托人有效访问权限的ACL。【pTrustee】指向TRUSTEE结构的指针，用于标识受托人。受托人可以是用户，组或程序（如Windows NT服务）。您可以使用名称或安全


-------------------------------------------------------- KeyWin32GetEnhMetaFile ----
GetEnhMetaFile    GetEnhMetaFile函数创建一个句柄，用于标识存储在指定文件中的增强格式的元文件。
语法
参数
【lpszMetaFile】指向以空值终止的字符串，指定增强型图元文件的名称。
返回值
如果函数成功，则返回值是增强的图元文件的句柄。如果函数失败，返回值为NULL。
描述
当应用程


-------------------------------------------------------- KeyWin32GetEnhMetaFileBits ----
GetEnhMetaFileBits    GetEnhMetaFileBits函数检索指定的增强格式的图元文件的内容并将其复制到缓冲区中。
语法
参数
【HEMF】识别增强的图元文件。【cbBuffer】指定接收数据的缓冲区的大小（以字节为单位）。【lpbBuffer】指向缓冲区以接收元文件数据。缓冲区必须足够大以容纳数据。如果【lpbBu


-------------------------------------------------------- KeyWin32GetEnhMetaFileDescription ----
GetEnhMetaFileDescription    GetEnhMetaFileDescription函数从增强格式的图元文件中检索可选文本描述，并将该字符串复制到指定的缓冲区。
语法
参数
【HEMF】识别增强的图元文件。【cchBuffer】指定接收数据的缓冲区的大小（以字符为单位）。只有这么多人物才会被复制。【XNUM】指向缓冲区以接收可选文本描述。
返回值
如果可选文


-------------------------------------------------------- KeyWin32GetEnhMetaFileHeader ----
GetEnhMetaFileHeader    GetEnhMetaFileHeader函数检索包含指定增强格式图元文件的标题的记录。
语法
参数
【HEMF】标识要检索标题的增强型图元文件。【cbBuffer】指定接收数据的缓冲区的大小（以字节为单位）。只会复制这么多字节。【lpemhsq】指向ENHMETAHEADER结构以接收头记


-------------------------------------------------------- KeyWin32GetEnhMetaFilePaletteEntries ----
GetEnhMetaFilePaletteEntries    GetEnhMetaFilePaletteEntries函数从指定的增强型图元文件中检索可选的调色板条目。
语法
参数
【HEMF】识别增强的图元文件。【cEntries】指定要从可选调色板检索的条目数。【LPPE】指向一系列PALETTEENTRY结构以接收调色板颜色。该数组必须至少包含与【cEntries


-------------------------------------------------------- KeyWin32GetEnvironmentStrings ----
GetEnvironmentStrings    GetEnvironmentStrings函数返回当前进程的环境块地址。此函数将替换GetDOSEnvironment函数。
语法
参数
此函数无参数。
返回值
返回值是指向当前进程的环境块的指针。
描述
不要使用GetEnvironmentStrings的返回值来获取或设置环境变量。而是使用GetEnvironmen


-------------------------------------------------------- KeyWin32GetEnvironmentVariable ----
GetEnvironmentVariable    GetEnvironmentVariable函数从调用进程的环境块中检索指定变量的值。该值以空字符结尾的字符串的形式。
语法
参数
【lpName】指向指定环境变量的以null结尾的字符串。【lpBuffer】指向缓冲区以接收指定环境变量的值。【服务提供商】指定【lpBuffer】参数指向的缓冲区的大小（以字符为单位）。


-------------------------------------------------------- KeyWin32GetExceptionCode ----
GetExceptionCode    GetExceptionCode函数检索一个代码，该代码标识发生的异常类型。该函数只能从尝试  -  除异常处理程序的过滤器表达式或异常处理程序块中调用。
语法
参数
此函数无参数。
返回值
返回值标识异常的类型。以下是由于常见的编程错误而可能发生的异常代码：值含义EXCEPTION_ACCESS_VIOLATION  线程尝试从不具有适当访问权限的虚


-------------------------------------------------------- KeyWin32GetExceptionInformation ----
GetExceptionInformation    GetExceptionInformation函数检索与机器无关的异常描述，以及有关发生异常时针对线程存在的计算机状态的信息。只能从尝试  -  除异常处理程序的过滤器表达式中调用此函数。
语法
参数
此函数无参数。
返回值
返回值是一个指向EXCEPTION_POINTERS结构的指针，其中包含两个其他结构的指针：包含异常描述的EXCEPTION_RECORD结构和包含机器状态信息的


-------------------------------------------------------- KeyWin32GetExitCodeProcess ----
GetExitCodeProcess    GetExitCodeProcess函数检索指定进程的终止状态。
语法
参数
【hProcess】标识过程。Windows NT：句柄必须具有PROCESS_QUERY_INFORMATION权限。有关详细信息，请参阅过程对象.【lpExitCode】指向32位变量以


-------------------------------------------------------- KeyWin32GetExitCodeThread ----
GetExitCodeThread    GetExitCodeThread函数检索指定线程的终止状态。
语法
参数
【hThread】标识线程。Windows NT：句柄必须具有THREAD_QUERY_INFORMATION权限。有关详细信息，请参阅线程对象.【lpExitCode】指向32位变量以接收


-------------------------------------------------------- KeyWin32GetExpandedName ----
GetExpandedName    如果通过使用Microsoft文件压缩实用程序（COMPRESS.EXE）压缩了该文件并且指定了/r选项，则GetExpandedName函数将检索压缩文件的原始名称。
语法



-------------------------------------------------------- KeyWin32GetExplicitEntriesFromAcl ----
GetExplicitEntriesFromAcl    [New - Windows NT]GetExplicitEntriesFromAcl函数检索描述访问控制列表（ACL）中访问控制条目（ACE）的EXPLICIT_ACCESS结构的数组。
语法
参数
【ACL】指向获取ACE信息的ACL。【pcCountOfExplicitEntries】指向【pListOfExplicitEntries数组。】中返回的EXPLICIT_ACCESS结构


-------------------------------------------------------- KeyWin32GetFiberData ----
GetFiberData    GetFiberData函数返回与当前光纤相关联的光纤数据。
语法
参数
此函数无参数。
返回值
返回值是当前运行光纤的光纤数据。
描述
光纤数据是传递给【lpParameter参数】参数中CreateFiber或ConvertThreadToFiber函


-------------------------------------------------------- KeyWin32GetFileAttributes ----
GetFileAttributes    GetFileAttributes函数返回指定文件或目录的属性。
语法
参数
【lpFileName】指向一个以空字符结尾的字符串，指定文件或目录的名称。Windows NT：对于MAX_PATH字符的路径，默认字符串大小限制。此限制与GetFileAttribute


-------------------------------------------------------- KeyWin32GetFileAttributesEx ----
GetFileAttributesEx    [New - Windows NT]GetFileAttributesEx函数获取有关指定文件或目录的属性信息。此函数类似于GetFileAttributes函数。GetFileAttributes返回一组FAT样式的属性信息。GetFileAttributesEx旨在获取其他文件或目录属性信息集。目前，GetFileAttributeEx获得了一组作为FAT样式属性信息超集的标准属性。
语法
参数
【lpFileName】指向指定文件或目录的以空值终止的字符串的指针。默认情况下，此字符串限制为MAX_PATH个字符。限制与GetFileAttributesEx函数如何解析路径有关。通过


-------------------------------------------------------- KeyWin32GetFileInformationByHandle ----
GetFileInformationByHandle    GetFileInformationByHandle函数检索有关指定文件的信息。
语法
参数
【HFILE】处理您要获取有关信息的文件。该手柄不应该是管道手柄。GetFileInformationByHandle函数不适用于管道手柄。【lpFileInformation】指向BY_H


-------------------------------------------------------- KeyWin32GetFileSecurity ----
GetFileSecurity    GetFileSecurity函数获取有关文件或目录安全性的指定信息。所获得的信息受到呼叫者的访问权限和权限的约束。
语法
参数
【lpFileName】指向以null结尾的字符串，指定检索安全信息的文件或目录。【RequestedInformation】指定一个SECURITY_INFORMATION结构，用于标识正


-------------------------------------------------------- KeyWin32GetFileSize ----
GetFileSize    GetFileSize函数检索指定文件的大小（以字节为单位）。
语法
参数
【HFILE】指定要返回大小的文件的打开句柄。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建句柄。【lpFileSizeHigh】指向返回文件大小高位字的变量。如


-------------------------------------------------------- KeyWin32GetFileTime ----
GetFileTime    GetFileTime函数检索文件创建，上次访问和上次修改的日期和时间。
语法
参数
【HFILE】标识要获取日期和时间的文件。必须使用GENERIC_READ访问该文件创建文件句柄。【lpCreationTime】指向FILETIME结构以接收文件创建的日期和时间。如果应用


-------------------------------------------------------- KeyWin32GetFileTitle ----
GetFileTitle    GetFileTitle函数返回由【lpszFile】参数标识的文件的名称。
语法
参数
【lpszFile】指向文件的名称和位置。【lpszTitle】指向缓冲区的指针，其中函数将复制文件的名称。【cbBuf】指定【lpszTitle】参数指向的缓冲区的长度（以字符为单位）。



-------------------------------------------------------- KeyWin32GetFileType ----
GetFileType    GetFileType函数返回指定文件的类型。
语法
参数
【HFILE】标识一个打开的文件句柄。
返回值
返回值是以下值之一：值含义FILE_TYPE_UNKNOWN指定文件的类型是未知的。FILE_TYPE_DISK指定的文件是磁盘文件。FI


-------------------------------------------------------- KeyWin32GetFileVersionInfo ----
GetFileVersionInfo    GetFileVersionInfo函数返回有关指定文件的版本信息。与其他文件安装函数一样，GetFileVersionInfo仅适用于Win32文件映像。它不适用于16位Windows文件映像。
语法
参数
【lptstrFilename】指向指定感兴趣文件的以null结尾的文件名字符串的指针。【dwHandle】此参数被忽略。【This function is often used to ge


-------------------------------------------------------- KeyWin32GetFileVersionInfoSize ----
GetFileVersionInfoSize    GetFileVersionInfoSize函数确定操作系统是否可以获取有关指定文件的版本信息。如果版本信息可用，GetFileVersionInfoSize返回该信息的字节大小。与其他文件安装函数一样，GetFileVersionInfo仅适用于Win32文件映像。它不适用于16位Windows文件映像。
语法
参数
【lptstrFilename】指向指定感兴趣文件的以null结尾的文件名字符串的指针。【lpdwHandlexh】指向函数设置为零的变量的指针。
返回值
如果函数成功，则返回值是文件版


-------------------------------------------------------- KeyWin32GetFocus ----
GetFocus    如果窗口与调用线程的消息队列相关联，则GetFocus函数将检索具有键盘焦点的窗口的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是具有键盘焦点的窗口的句柄。如果调用线程的消息队列没有与键盘焦点关联的窗口，则返回值为NULL。
描述
即使GetFocus返回NULL


-------------------------------------------------------- KeyWin32GetFontData ----
GetFontData    GetFontData函数检索TrueType字体的字体度量数据。
语法
参数
【HDC】标识设备上下文。【dwTable】指定要从中检索字体数据的字体度量表的名称。此参数可以标识由Microsoft Corporation发布的TrueType字体文件规范中记录的度量


-------------------------------------------------------- KeyWin32GetFontLanguageInfo ----
GetFontLanguageInfo    [Now Supported on Windows NT]GetFontLanguageInfo函数返回有关指定显示上下文的当前选定字体的信息。应用程序通常使用此信息和GetCharacterPlacement函数来准备一个字符串进行显示。
语法
参数
【HDC】处理显示上下文。
返回值
返回值标识当前所选字体的特征。如果字体为“标准化”，该函数返回0，并将其视为简单的拉丁字体;如果发生错误，它返回GCP_ERROR。否则，函数返回以下


-------------------------------------------------------- KeyWin32GetForegroundWindow ----
GetForegroundWindow    GetForegroundWindow函数返回前台窗口的句柄（用户当前正在使用的窗口）。系统为创建前台窗口的线程分配比其他线程稍高的优先级。
语法
参数
此函数无参数。
返回值
返回值是前台窗口的句柄。



-------------------------------------------------------- KeyWin32GetForm ----
GetForm    GetForm函数使用描述打印机指定表单的数据初始化FORM_INFO_1结构。
语法
参数
【hPrinter】标识打印机。【pFormName】指向指定表单名称的以null结尾的字符串。【水平】指定【P成型】指向的结构的版本。此值必须为1。【P成型】指向接收初始化FORM_INF


-------------------------------------------------------- KeyWin32GetFreeSpace ----
GetFreeSpace  GetFreeSpace函数已过时。它提供了简化16位Windows应用程序的移植。基于Win32的应用程序应使用GlobalMemoryStatus函数。


-------------------------------------------------------- KeyWin32GetFullPathName ----
GetFullPathName    GetFullPathName函数检索指定文件的完整路径和文件名。
语法
参数
【lpFileName】指向一个空值终止的字符串，指定一个有效的文件名。该字符串可以使用短（8.3格式）或长文件名。【nBufferLength】指定驱动器和路径的缓冲区的大小（以字符为单位


-------------------------------------------------------- KeyWin32GetGlyphOutline ----
GetGlyphOutline    GetGlyphOutline函数检索在指定设备上下文中选择的TrueType字体中的字符的轮廓或位图。
语法
参数
【HDC】标识设备上下文。【飞行】指定要返回数据的字符。【UFormat】指定函数检索的数据格式。使用以下值之一：值含义GGO_BITMAP该函数检索字形位图。有关内存分配的信息，请参阅以下


-------------------------------------------------------- KeyWin32GetGraphicsMode ----
GetGraphicsMode    GetGraphicsMode函数检索指定设备上下文的当前图形模式。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值就是当前的图形模式。它可以是以下值之一：值含义GM_COMPATIBLE当前的图形模式是兼容的图形模式，这是与Windows 3.


-------------------------------------------------------- KeyWin32GetHandleInformation ----
GetHandleInformation    GetHandleInformation函数获取有关对象句柄的某些属性的信息。信息作为一组位标志获得。
语法
参数
【hObject】指定对象的句柄。GetHandleInformation函数获取有关该对象句柄的信息。【lpdwFlagsaf】指向一个变量以接收一组指定对象句柄属性的位标志。定义了以下标


-------------------------------------------------------- KeyWin32GetICMProfile ----
GetICMProfile    GetICMProfile函数检索与指定设备上下文关联的设备的颜色配置文件的名称。
语法
参数
【HDC】处理设备上下文。【lpcbName】指向DWORD的指针，其中包含接收文件名的缓冲区的大小（以字节或字符为单位），具体取决于是使用ANSI或Unicode版本的函数。如果缓冲区太小


-------------------------------------------------------- KeyWin32GetIconInfo ----
GetIconInfo    GetIconInfo函数检索有关指定图标或光标的信息。
语法
参数
【惠康】标识图标或光标。要检索有关标准图标或游标的信息，请指定以下值之一：值含义IDC_ARROW箭头光标IDC_IBEAMI-beam光标IDC_WAIT沙漏光标IDC_CROSS十字准线


-------------------------------------------------------- KeyWin32GetInputState ----
GetInputState    GetInputState函数确定调用线程的消息队列中是否有鼠标按钮或键盘消息。
语法
参数
此函数无参数。
返回值
如果队列包含一个或多个新的鼠标按钮或键盘消息，则返回值不为零。如果队列中没有新的鼠标按钮或键盘消息，则返回值为零。



-------------------------------------------------------- KeyWin32GetJob ----
GetJob    GetJob函数检索指定打印机的打印作业数据。
语法
参数
【hPrinter】标识检索打印作业数据的打印机。【JobId】标识应检索数据的打印作业。【水平】指定【pJob】指向的结构的级别。该值必须是1或2。【pJob】指向包含JOB_INFO_1


-------------------------------------------------------- KeyWin32GetKBCodePage ----
GetKBCodePage    提供GetKBCodePage函数以兼容早期版本的Windows。在Win32应用程序编程接口（API）中，它只调用GetOEMCP函数。新应用程序应使用GetOEMCP函数。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是OEM代码页标识符，如果注册表值不可读，则它是默认标识符。有关OEM代码页标识符的列表，请参阅GetOEMCP.



-------------------------------------------------------- KeyWin32GetKernelObjectSecurity ----
GetKernelObjectSecurity    GetKernelObjectSecurity函数检索保护内核对象的安全描述符的副本。
语法
参数
【处理】标识一个内核对象。【RequestedInformation】指定一个SECURITY_INFORMATION结构，用于标识正在请求的安全信息。【pSecurityDescripto


-------------------------------------------------------- KeyWin32GetKerningPairs ----
GetKerningPairs    GetKerningPairs函数检索指定设备上下文当前选定字体的字符间距对。
语法
参数
【HDC】标识设备上下文。【nNumPairs】指定适合【lpkrnpair】数组的对数。如果字体超过【nNumPairs】字距对，则返回错误。【lpkrnpair】指向KERNINGPAI


-------------------------------------------------------- KeyWin32GetKeyboardLayout ----
GetKeyboardLayout    [Now Supported on Windows NT]GetKeyboardLayout函数检索指定线程的活动键盘布局。如果【dwLayout】参数为零，则返回活动线程的布局。
语法
参数
【dwLayout】标识要查询的线程或当前线程为零。
返回值
返回值是线程的键盘布局句柄。低字包含标识输入语言的区域标识符，高字包含识别键盘的物理布局的设备句柄。



-------------------------------------------------------- KeyWin32GetKeyboardLayoutList ----
GetKeyboardLayoutList    [Now Supported on Windows NT]GetKeyboardLayoutList函数检索与系统中当前输入区域设置集相对应的键盘布局句柄。该函数将句柄复制到给定的缓冲区。
语法
参数
【nBuff】指定缓冲区可以容纳的最大句柄数。【lpList】指向缓冲区，一个接收键盘布局句柄的数组。
返回值
如果函数成功，则返回值是复制到缓冲区的布局句柄数，或者如果【nBuff】为


-------------------------------------------------------- KeyWin32GetKeyboardLayoutName ----
GetKeyboardLayoutName    GetKeyboardLayoutName函数检索活动键盘布局的名称。
语法
参数
【pwszKLID】指向至少KL_NAMELENGTH个字符的缓冲区，用于接收键盘布局的名称，包括NULL终止符。这将是提供给LoadKeyboardLayout函数的字符串的副本，除非进行


-------------------------------------------------------- KeyWin32GetKeyboardState ----
GetKeyboardState    GetKeyboardState函数将256个虚拟键的状态复制到指定的缓冲区。
语法
参数
【lpKeyState】指向将接收每个虚拟键的状态数据的256字节数组。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError


-------------------------------------------------------- KeyWin32GetKeyboardType ----
GetKeyboardType    GetKeyboardType函数检索有关当前键盘的信息。
语法



-------------------------------------------------------- KeyWin32GetKeyNameText ----
GetKeyNameText    GetKeyNameText函数检索表示键名称的字符串。
语法



-------------------------------------------------------- KeyWin32GetKeyState ----
GetKeyState    GetKeyState函数检索指定虚拟键的状态。该状态指定键是上，下还是切换（每次按下键时__交替关闭）。
语法
参数
【nVirtKey】指定虚拟键。如果所需的虚拟键是字母或数字（A到Z，a到z或0到9），则必须将【nVirtKey】设置为该字符的ASCII值。对于其他键，它必须是虚拟键代码。如果使用非英文


-------------------------------------------------------- KeyWin32GetLargestConsoleWindowSize ----
GetLargestConsoleWindowSize    根据当前的字体和显示的大小，GetLargestConsoleWindowSize函数返回最大可能的控制台窗口的大小。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。
返回值
如果函数成功，则返回值是一个COORD结构，它指定了最大可能的控制台窗口中的字符单元行数（X成员）和列（Y成员）的数量。否


-------------------------------------------------------- KeyWin32GetLastActivePopup ----
GetLastActivePopup    GetLastActivePopup函数确定指定窗口拥有的弹出窗口最近处于活动状态。
语法
参数
【的hWnd】标识所有者窗口。
返回值
返回值标识最近活动的弹出窗口。返回值与【的hWnd】参数相同，如果满足以下任一条件：* 【的hWnd】标识的窗口最近是活动的。* 【的hWnd】标


-------------------------------------------------------- KeyWin32GetLastError ----
GetLastError    GetLastError函数返回调用线程的最后一个错误代码值。最后一个错误代码基于每个线程进行维护。多个线程不会覆盖彼此的最后一个错误代码。
语法
参数
此函数无参数。
返回值
返回值是调用线程的最后一个错误代码值。函数通过调用SetLastError函数设置此值。每个参考页面的回报值部分说明了函数设置最后一个错误代码的条件。
描述



-------------------------------------------------------- KeyWin32GetLengthSid ----
GetLengthSid    GetLengthSid函数返回有效SID结构的长度（以字节为单位）。SID是安全标识符。
语法
参数
【PSID】指向返回长度的SID结构。该结构被认为是有效的。
返回值
如果函数成功，则返回值为SID结构的长度（以字节为单位）。如果SID结构无效，则返回值未定义。要获取扩展错误信息，请


-------------------------------------------------------- KeyWin32GetLocaleInfo ----
GetLocaleInfo    GetLocaleInfo函数检索有关区域设置的信息。
语法
参数
【语言环境】指定检索信息的区域设置。此参数可以是由MAKELCID宏或以下预定义值之一创建的区域设置标识符：LOCALE_SYSTEM_DEFAULT默认系统区域设置。LOCALE_USER


-------------------------------------------------------- KeyWin32GetLocalTime ----
GetLocalTime    GetLocalTime函数检索当前的本地日期和时间。
语法
参数
【lpSystemTime】指向SYSTEMTIME结构以接收当前的当地日期和时间。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32GetLogColorSpace ----
GetLogColorSpace    GetLogColorSpace函数检索由指定句柄标识的逻辑颜色空间的信息。
语法
参数
【hColorSpace】处理逻辑色彩空间。【lpBuffer】指向接收逻辑颜色空间信息的LOGCOLORSPACE结构的指针。【服务提供商】缓冲区的最大大小（以字节为单位）。
返回值



-------------------------------------------------------- KeyWin32GetLogicalDrives ----
GetLogicalDrives    GetLogicalDrives函数返回表示当前可用磁盘驱动器的位掩码。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是表示当前可用磁盘驱动器的位掩码。位位置0（最低有效位）为驱动器A，位位置1为驱动器B，位位置2为驱动器C，依此类推。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32GetLogicalDriveStrings ----
GetLogicalDriveStrings    GetLogicalDriveStrings函数使用指定系统中有效驱动器的字符串填充缓冲区。
语法
参数
【nBufferLength】指定【lpBuffer】指向的缓冲区的最大大小（以字符为单位）。此大小不包括终止空字符。【lpBuffer】指向缓冲区，该缓冲区接收一系列以null结尾的字符串


-------------------------------------------------------- KeyWin32GetMailslotInfo ----
GetMailslotInfo    GetMailslotInfo函数检索有关指定邮槽的信息。
语法
参数
【hMailslot】标识一个邮槽。CreateMailslot函数必须创建此句柄。【lpMaxMessageSize】指向缓冲区，指定函数返回时允许此邮槽的最大邮件大小（以字节为单位）。该


-------------------------------------------------------- KeyWin32GetMapMode ----
GetMapMode    GetMapMode函数检索当前的映射模式。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定映射模式。如果函数失败，返回值为零。
描述
以下列表描述了各种映射模式：值描述MM_ANISOTROPIC逻辑单位通过任


-------------------------------------------------------- KeyWin32GetMenu ----
GetMenu    GetMenu函数检索分配给给定窗口的菜单的句柄。
语法
参数
【的hWnd】标识检索其菜单句柄的窗口。
返回值
如果函数成功，返回值就是菜单的句柄。如果给定的窗口没有菜单，则返回值为NULL。如果窗口是子窗口，返回值是未定义的。



-------------------------------------------------------- KeyWin32GetMenuCheckMarkDimensions ----
GetMenuCheckMarkDimensions    此函数已过时。使用具有CXMENUCHECK和CYMENUCHECK值的GetSystemMetrics来检索位图维度。GetMenuCheckMarkDimensions函数返回默认复选标记位图的尺寸。Windows在检查菜单项旁边显示此位图。在调用SetMenuItemBitmaps函数替换菜单项的默认复选标记位图之前，应用程序必须通过调用GetMenuCheckMarkDimensions来确定正确的位图大小。
语法
参数
此函数无参数。
返回值
返回值指定默认复选标记位图的高度和宽度（以像素为单位）。高位词包含高度;低位字包含宽度。



-------------------------------------------------------- KeyWin32GetMenuContextHelpId ----
GetMenuContextHelpId    GetMenuContextHelpId函数检索与指定菜单相关联的帮助上下文标识符。
语法
参数
【HMENU】处理要检索帮助上下文标识符的菜单。
返回值
如果菜单有一个或另一个则返回帮助上下文标识符。



-------------------------------------------------------- KeyWin32GetMenuDefaultItem ----
GetMenuDefaultItem    [Now Supported on Windows NT]GetMenuDefaultItem函数确定指定菜单上的默认菜单项。
语法
参数
【HMENU】处理到要检索默认菜单项的菜单。【fByPos】指定是否检索菜单项的标识符或其位置的值。如果此参数为FALSE，则返回标识符。否则返回位置。【gmdiFlags】指定函数如何搜索


-------------------------------------------------------- KeyWin32GetMenuItemCount ----
GetMenuItemCount    GetMenuItemCount函数确定指定菜单中的项目数。
语法
参数
【HMENU】标识要检查的菜单的句柄。
返回值
如果函数成功，则返回值指定菜单中的项目数。如果函数失败，返回值为-1。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32GetMenuItemID ----
GetMenuItemID    GetMenuItemID函数检索位于菜单中指定位置的菜单项的菜单项标识符。
语法
参数
【HMENU】标识包含其标识符要检索的项目的菜单。【nPos】指定要检索其标识符的菜单项的基于零的相对位置。
返回值
如果函数成功，则返回值指定给定菜单项的标识符。如果菜单项标识符为NU


-------------------------------------------------------- KeyWin32GetMenuItemInfo ----
GetMenuItemInfo    [Now Supported on Windows NT]GetMenuItemInfo函数检索有关菜单项的信息。
语法
参数
【HMENU】处理包含菜单项的菜单。【藤】要获取有关信息的菜单项的标识符或位置。该参数的含义取决于【fByPosition】的值。【fByPosition】指定【藤】的含义的值。如果此参数为


-------------------------------------------------------- KeyWin32GetMenuItemRect ----
GetMenuItemRect    [Now Supported on Windows NT]GetMenuItemRect函数检索指定菜单项的边界矩形。
语法
参数
【的hWnd】处理到包含菜单的窗口。【HMENU】处理菜单。【藤】基于零的菜单项的位置。【Handle to a menu.】指向RECT结构的指针，该结构接收以屏幕坐标表示的指定菜单项的边


-------------------------------------------------------- KeyWin32GetMenuState ----
GetMenuState    GetMenuState函数检索与指定菜单项相关联的菜单标志。如果菜单项打开子菜单，此函数也返回子菜单中的项目数。GetMenuItemInfo函数已被GetMenuItemInfo函数取代。但是，如果您不需要GetMenuItemInfo的任何扩展函数，您仍然可以使用GetMenuState.
语法
参数
【HMENU】标识包含要检索其标志的菜单项的菜单。【的uId】指定由【uFlags】参数确定的要检索菜单标志的菜单项。【uFlags】指定如何解释【的uId】参数。此参数可以是以下值之一：值


-------------------------------------------------------- KeyWin32GetMenuString ----
GetMenuString    GetMenuString函数将指定菜单项的文本字符串复制到指定的缓冲区中。
语法
参数
【HMENU】标识菜单。【uIDItem】指定要更改的菜单项，由【//菜单标志】参数确定。【lpString】指向要接收空终止字符串的缓冲区。如果【lpString】为NULL，则该函数返回


-------------------------------------------------------- KeyWin32GetMessage ----
GetMessage    GetMessage函数从调用线程的消息队列中检索消息，并将其放在指定的结构中。此函数可以检索与指定窗口相关联的消息和通过PostThreadMessage 函数发布的线程消息。该函数检索位于指定的消息值范围内的消息。GetMessage不检索属于其他线程或应用程序的Windows的邮件。
语法
参数
【LPMSG】指向从线程的消息队列接收消息信息的MSG结构。【的hWnd】标识要检索其消息的窗口。一个值具有特殊意义：值含义NULLGetMessage通过PostThreadMessage


-------------------------------------------------------- KeyWin32GetMessageExtraInfo ----
GetMessageExtraInfo    GetMessageExtraInfo函数检索与GetMessage或PeekMessage函数检索到的最后一条消息相关联的额外信息。该信息可以被驱动程序添加到指示设备或键盘的消息中。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值指定额外的信息。额外信息的含义是具体的设备。



-------------------------------------------------------- KeyWin32GetMessagePos ----
GetMessagePos    GetMessagePos函数返回一个长的值，它给出了屏幕坐标中的光标位置。此位置是由GetMessage函数检索到的最后一条消息时光标所占据的位置。
语法
参数
此函数无参数。
返回值
返回值指定光标位置的x坐标和y坐标。x坐标在LOWORD中，y坐标在HIWORD中。
描述
如上所述，x坐标在返回值的低位字中; y坐标在高位字中。如果将返回


-------------------------------------------------------- KeyWin32GetMessageTime ----
GetMessageTime    GetMessageTime函数返回当前线程的消息队列中GetMessage函数检索到的最后一条消息的消息时间。时间是一个长整型，指定从系统启动时间到消息创建时间（即放置在线程的消息队列中）的经过时间（以毫秒为单位）。
语法
参数
此函数无参数。
返回值
返回值指定消息时间。
描述
来自GetMessageTime函数的返回值不一定在后续消息之间增加，因为如果定时器计数超过长整数的最大值，则值将返回为零。要计算


-------------------------------------------------------- KeyWin32GetMetaFile ----
GetMetaFile  GetMetaFile函数创建一个标识给定Windows格式的元文件的句柄。Win32 API中没有实现GetMetaFile函数。此函数用于与16位版本的Microsoft Windows兼容。基于Win32的应用程序应使用GetEnhMetaFile函数。


-------------------------------------------------------- KeyWin32GetMetaFileBitsEx ----
GetMetaFileBitsEx    GetMetaFileBitsEx函数检索Windows格式的图元文件的内容，并将它们复制到指定的缓冲区。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用GetEnhMetaFileBits函数。
语法
参数
【HMF】标识Windows格式的图元文件。【服务提供商】指定接收数据的缓冲区的大小（以字节为单位）。【// address of metafile data】指向缓冲区以接收元文件数据。缓


-------------------------------------------------------- KeyWin32GetMetaRgn ----
GetMetaRgn    GetMetaRgn函数检索指定设备上下文的当前配额。
语法
参数
【HDC】标识设备上下文。【HRGN】在调用函数之前标识一个现有区域。函数返回后，此参数标识当前区域的副本。
返回值
如果函数成功，则返回值为1。如果函数失败，返回值为零。
描述
如


-------------------------------------------------------- KeyWin32GetMiterLimit ----
GetMiterLimit    GetMiterLimit函数返回指定设备上下文的斜角限制。
语法
参数
【HDC】标识设备上下文。【// address of variable receiving miter limit】指向将返回当前斜角限制的浮点值。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyWin32GetModuleFileName ----
GetModuleFileName    GetModuleFileName函数检索包含指定模块的可执行文件的完整路径和文件名。
语法
参数
【HMODULE】标识正在请求其可执行文件名的模块。如果此参数为NULL，则GetModuleFileName返回用于创建调用进程的文件的路径。【lpFileName的对象】指向填充有给定模


-------------------------------------------------------- KeyWin32GetModuleHandle ----
GetModuleHandle    如果文件已被映射到调用进程的地址空间，GetModuleHandle函数将返回指定模块的模块句柄。
语法
参数
【lpModuleName】指向一个以空字符结尾的字符串，命名一个Win32模块（一个.DLL或.EXE文件）。如果省略了文件扩展名，则附加默认库扩展名.DLL。文件名字符串可以包括一个尾点


-------------------------------------------------------- KeyWin32GetMsgProc ----
GetMsgProc    GetMsgProc挂接过程是应用程序定义或库定义的回调函数，只要GetMessage函数从应用程序消息队列中检索到消息，系统就会调用该函数。在将检索到的消息传递到目标窗口过程之前，系统将该消息传递给挂钩过程。
语法
参数
【码】指定挂接过程是否处理消息。如果【码】为HC_ACTION，则挂接过程必须处理消息。如果【码】小于零，挂钩过程必须将消息传递给CallNextHookEx函数，无需进一步处理，并应返回C


-------------------------------------------------------- KeyWin32GetMultipleTrustee ----
GetMultipleTrustee    [New - Windows NT]提供GetMultipleTrustee函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyWin32GetMultipleTrusteeOperation ----
GetMultipleTrusteeOperation    [New - Windows NT]提供GetMultipleTrusteeOperation函数供将来使用。不要在Windows NT版本4.0上调用它。


-------------------------------------------------------- KeyWin32GetNamedPipeHandleState ----
GetNamedPipeHandleState    GetNamedPipeHandleState函数检索有关指定命名管道的信息。返回的信息可以在命名管道的实例的生命周期内变化。
语法
参数
【hNamedPipe】标识需要信息的命名管道。句柄必须具有对命名管道的GENERIC_READ访问权限。【lpState】指向一个32位变量，指示句柄的当前状态。如果不需要此信息，此参数可


-------------------------------------------------------- KeyWin32GetNamedPipeInfo ----
GetNamedPipeInfo    GetNamedPipeInfo函数检索有关指定命名管道的信息。
语法
参数
【hNamedPipe】标识命名的管道实例。句柄必须具有对命名管道的GENERIC_READ访问权限。【的lpFlags】指向一个32位变量，指示命名管道的类型。如果不需要此信息，此参数可以


-------------------------------------------------------- KeyWin32GetNamedSecurityInfo ----
GetNamedSecurityInfo    [New - Windows NT]GetNamedSecurityInfo函数检索由name指定的对象的安全描述符副本。
语法
参数
【pObjectName】指向以null结尾的字符串，指定从中检索安全信息的对象的名称。有关不同对象类型的字符串格式的说明，请参阅SE_OBJECT_TYPE.【ObjectType】指定S


-------------------------------------------------------- KeyWin32GetNearestColor ----
GetNearestColor    GetNearestColor函数返回从系统调色板中标识颜色的颜色值，该颜色值将在使用指定的颜色值时显示。
语法
参数
【HDC】标识设备上下文。【crColor】指定标识所请求颜色的颜色值。
返回值
如果函数成功，则返回值会从系统调色板中识别与给定颜色值对应的颜色。如果函数失败，返回值为CLR_INVA


-------------------------------------------------------- KeyWin32GetNearestPaletteIndex ----
GetNearestPaletteIndex    GetNearestPaletteIndex函数检索最接近匹配指定颜色值的指定逻辑调色板中条目的索引。
语法
参数
【HPAL】标识逻辑调色板。【crColor】指定要匹配的颜色。
返回值
如果函数成功，则返回值是逻辑调色板中条目的索引。如果函数失败，返回值为CLR_INVALID。要获取扩展错误信息


-------------------------------------------------------- KeyWin32GetNextDlgGroupItem ----
GetNextDlgGroupItem    GetNextDlgGroupItem函数检索对话框中指定控件之前（或后）的一组控件中的第一个控件的句柄。
语法
参数
【hDlg】标识正在搜索的对话框。【HCTL】标识要用作搜索起点的控件。如果此参数为NULL，该函数将使用对话框中的最后一个（或第一个）控件作为搜索的起始点。【bPrevious】指定该函数


-------------------------------------------------------- KeyWin32GetNextDlgTabItem ----
GetNextDlgTabItem    GetNextDlgTabItem函数检索具有指定控件之前（或后）的WS_TABSTOP样式的第一个控件的句柄。
语法
参数
【hDlg】标识要搜索的对话框。【HCTL】标识要用作搜索起点的控件。如果此参数为NULL，该函数将使用对话框中的最后一个（或第一个）控件作为搜索的起始点。【bPrevious】指定函数如何


-------------------------------------------------------- KeyWin32GetNextWindow ----
GetNextWindow    GetNextWindow函数检索Z订单中下一个或上一个窗口的句柄。下一个窗口在指定的窗口下方;以前的窗口在上面。如果指定的窗口是最上面的窗口，则该函数将检索下一个（或上一个）最上面的窗口的句柄。如果指定的窗口是顶级窗口，则该函数将检索下一个（或上一个）顶级窗口的句柄。如果指定的窗口是子窗口，则该函数将搜索下一个（或上一个）子窗口的句柄。
语法
参数
【的hWnd】标识一个窗口根据【WCMD】参数的值，检索到的窗口句柄相对于此窗口。【WCMD】指定函数是否返回下一个窗口或上一个窗口的句柄。此参数可以是以下值之一：值含义GW_HWNDNEX


-------------------------------------------------------- KeyWin32GetNumberFormat ----
GetNumberFormat    GetNumberFormat函数将数字字符串格式化为为指定区域设置定制的数字字符串。
语法
参数
【语言环境】指定要格式化数字字符串的区域设置。如果【lpFormat】为NULL，则该函数根据该区域设置的数字格式对字符串进行格式化。如果【lpFormat】不为NULL，则该函数仅对NUM


-------------------------------------------------------- KeyWin32GetNumberOfConsoleInputEvents ----
GetNumberOfConsoleInputEvents    GetNumberOfConsoleInputEvents函数检索控制台输入缓冲区中未读输入记录的数量。
语法
参数
【hConsoleInput】标识控制台输入缓冲区。句柄必须具有GENERIC_READ权限。【lpcNumberOfEvents】指向接收控制台输入缓冲区中未读输入记录数的32位变量。



-------------------------------------------------------- KeyWin32GetNumberOfConsoleMouseButtons ----
GetNumberOfConsoleMouseButtons    GetNumberOfConsoleMouseButtons函数检索当前控制台使用的鼠标上的按钮数量。
语法
参数
【lpNumberOfMouseButtons】指向接收鼠标按钮数量的32位变量。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyWin32GetNumberOfEventLogRecords ----
GetNumberOfEventLogRecords    GetNumberOfEventLogRecords函数检索指定事件日志中的记录数。
语法
参数
【hEventLog】标识打开的事件日志。该句柄由OpenEventLog或OpenBackupEventLog函数返回。【NumberOfRecords】指向接收给定事件日志中记录数的变量


-------------------------------------------------------- KeyWin32GetObject ----
GetObject    GetObject函数获取有关指定图形对象的信息。根据图形对象，该函数将填充BITMAP，DIBSECTION，EXTLOGPEN，LOGBRUSH，LOGFONT或LOGPEN结构或表条目数（对于逻辑调色板），进入指定的缓冲区。
语法
参数
【hgdiobj】感兴趣的图形对象的句柄。这可以是以下之一的句柄：通过调用CreateDIBSection函数创建的逻辑位图，画笔，字体，调色板，笔或与设备无关的位图。【cbBuffer】指


-------------------------------------------------------- KeyWin32GetObjectType ----
GetObjectType    GetObjectType标识指定对象的类型。
语法
参数
【h】标识对象。
返回值
如果函数成功，则返回值标识对象。该值可以是以下之一：值含义OBJ_BITMAP位图OBJ_BRUSH刷OBJ_FONT字形OBJ_PAL调色板OBJ_PEN钢笔


-------------------------------------------------------- KeyWin32GetOEMCP ----
GetOEMCP    GetOEMCP函数检索系统的当前OEM代码页标识符。（OEM代表原始设备制造商。）
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统的当前OEM代码页标识符，如果没有代码页是当前的，则返回默认标识符。
描述
以下是OEM代码页标识符：识别码含义437MS-DOS


-------------------------------------------------------- KeyWin32GetOldestEventLogRecord ----
GetOldestEventLogRecord    GetOldestEventLogRecord函数检索指定事件日志中最早记录的绝对记录号。
语法
参数
【hEventLog】标识打开的事件日志。该句柄由OpenEventLog或OpenBackupEventLog函数返回。【OldestRecord】指向接收给定事件日志中最早记录的绝对记录


-------------------------------------------------------- KeyWin32GetOpenClipboardWindow ----
GetOpenClipboardWindow    GetOpenClipboardWindow函数检索当前打开剪贴板的窗口的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是打开剪贴板的窗口的句柄。如果没有窗口打开剪贴板，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.
描述
如果应


-------------------------------------------------------- KeyWin32GetOpenFileName ----
GetOpenFileName    GetOpenFileName函数创建一个“打开”公共对话框，该对话框允许用户指定要打开的文件或文件集的驱动器，目录和名称。
语法
参数
【lpofn】指向OPENFILENAME结构的指针，其中包含用于初始化对话框的信息。当GetOpenFileName返回时，此结构包含有关用户文件选择的信息。
返回值
如果用户指定文件


-------------------------------------------------------- KeyWin32GetOutlineTextMetrics ----
GetOutlineTextMetrics    GetOutlineTextMetrics函数检索TrueType字体的文本度量。
语法
参数
【HDC】标识设备上下文。【cbData】指定要在其中返回文本度量的数组的大小（以字节为单位）。【lpOTM】指向OUTLINETEXTMETRIC结构的数组。如果此参数为NULL，则该函数


-------------------------------------------------------- KeyWin32GetOverlappedResult ----
GetOverlappedResult    GetOverlappedResult函数返回指定文件（名称为管道或通信设备）上的重叠操作的结果。
语法
参数
【HFILE】标识文件，命名管道或通信设备。这是通过调用ReadFile WriteFile，ConnectNamedPipe，TransactNamedPipe，DeviceIoContr


-------------------------------------------------------- KeyWin32GetPaletteEntries ----
GetPaletteEntries    GetPaletteEntries函数从给定的逻辑调色板中检索指定范围的调色板条目。
语法
参数
【HPAL】标识逻辑调色板。【iStartIndex】指定要检索的逻辑调色板中的第一个条目。【的nentries】指定要检索的逻辑调色板中的条目数。【LPPE】指向PALETTEENTRY结


-------------------------------------------------------- KeyWin32GetParent ----
GetParent    GetParent函数检索指定的子窗口的父窗口的句柄。
语法
参数
【的hWnd】标识要检索父窗口句柄的窗口。
返回值
如果函数成功，则返回值是父窗口的句柄。如果窗口没有父窗口，则返回值为NULL。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32GetPath ----
GetPath    GetPath函数检索定义线路端点的坐标以及在指定设备上下文中选择的路径中找到的曲线的控制点。
语法
参数
【HDC】标识包含封闭路径的设备上下文。【lpPoints】指向包含线路端点和曲线控制点的POINT结构数组。【// address of array of path vertex type


-------------------------------------------------------- KeyWin32GetPixel ----
GetPixel    GetPixel函数检索指定坐标处的像素的红色，绿色，蓝色（RGB）颜色值。
语法
参数
【HDC】标识设备上下文。【nXPos】指定要检查的像素的逻辑x坐标。【nYPos】指定要检查的像素的逻辑y坐标。
返回值
如果函数成功，则返回值为RGB值。如果像素在当前剪辑区域之外，


-------------------------------------------------------- KeyWin32GetPolyFillMode ----
GetPolyFillMode    GetPolyFillMode函数检索当前的多边形填充模式。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定多边形填充模式，可以是以下值之一：值含义ALTERNATE选择交替模式（在每条扫描线上填充奇数和偶数多边形之间的面积）。WI


-------------------------------------------------------- KeyWin32GetPrinter ----
GetPrinter    GetPrinter函数检索有关指定打印机的信息。
语法
参数
【hPrinter】处理感兴趣的打印机【水平】指定函数存储到【pPrinter】指向的缓冲区中的PRINTER_INFO_*结构的级别或类型。Windows 95：此值可以是1，2或5。Wi


-------------------------------------------------------- KeyWin32GetPrinterData ----
GetPrinterData    GetPrinterData函数检索指定打印机的打印机配置数据。
语法
参数
【hPrinter】标识应检索哪个配置数据的打印机。【pValueName】指向一个以null结尾的字符串，指定函数应该检索的数据类型。【PTYPE】指向接收SetPrinterData函数


-------------------------------------------------------- KeyWin32GetPrinterDriver ----
GetPrinterDriver    GetPrinterDriver函数检索指定打印机的驱动程序数据。
语法
参数
【hPrinter】标识应检索驱动程序数据的打印机。【pEnvironment】指向指定环境的以null结尾的字符串。例如，“Windows NT x86”指定在Intel 80386或80


-------------------------------------------------------- KeyWin32GetPrinterDriverDirectory ----
GetPrinterDriverDirectory    GetPrinterDriverDirectory函数检索打印机驱动程序目录的路径。
语法
参数
【PNAME】指向以空字符结尾的字符串，指定打印机驱动程序所在的服务器的名称。如果此参数为NULL，则检索本地驱动程序目录路径。【pEnvironment】指向指定环境的以null结尾的字符


-------------------------------------------------------- KeyWin32GetPrintProcessorDirectory ----
GetPrintProcessorDirectory    GetPrintProcessorDirectory函数检索指定服务器上打印处理器的路径。
语法
参数
【PNAME】指向指定服务器名称的以null结尾的字符串。如果此参数为NULL，则返回本地路径。【pEnvironment】指向指定环境的以null结尾的字符串。例如，“Windows NT


-------------------------------------------------------- KeyWin32GetPriorityClass ----
GetPriorityClass    GetPriorityClass函数返回指定进程的优先级。该值与进程每个线程的优先级值一起确定每个线程的基本优先级。
语法
参数
【hProcess】标识过程。Windows NT：句柄必须具有PROCESS_QUERY_INFORMATION权限。有关详细信息，请参阅过程对象.
返回值
如果函数成功，则返回值是指


-------------------------------------------------------- KeyWin32GetPriorityClipboardFormat ----
GetPriorityClipboardFormat    GetPriorityClipboardFormat函数返回指定列表中第一个可用的剪贴板格式。
语法
参数
【paFormatPriorityList】指向按照优先顺序标识剪贴板格式的无符号整数数组。有关剪贴板格式的说明，请参阅SetClipboardData函数。【cFormats】指定【paF


-------------------------------------------------------- KeyWin32GetPrivateObjectSecurity ----
GetPrivateObjectSecurity    GetPrivateObjectSecurity从受保护的服务器对象的安全描述符中检索信息。
语法
参数
【ObjectDescriptor】指向SECURITY_DESCRIPTOR结构。这是要查询的安全描述符。【SecurityInformation】指定一个SECURITY_INFORMA


-------------------------------------------------------- KeyWin32GetPrivateProfileInt ----
GetPrivateProfileIntGetPrivateProfileInt函数检索与给定初始化文件的指定部分中的键相关联的整数。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向包含初始化文件中的段名称的以null结尾的字符串。【lpKeyName】指向包含要检索其值的键名称的以null结尾的字符串。此值为字符串的形式; GetPrivat


-------------------------------------------------------- KeyWin32GetPrivateProfileSection ----
GetPrivateProfileSectionGetPrivateProfileSection函数从初始化文件中检索指定部分的所有键和值。此函数用于与为Windows编写的16位应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向包含初始化文件中的段名称的以null结尾的字符串。【lpReturnedString】指向缓冲区，接收与命名部分关联的密钥名称和值对。缓冲区填充一个或多个以null


-------------------------------------------------------- KeyWin32GetPrivateProfileSectionNames ----
GetPrivateProfileSectionNamesGetPrivateProfileSectionNames函数检索初始化文件中所有部分的名称。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpszReturnBuffer】指向缓冲区，接收与命名文件关联的段名称。缓冲区填充一个或多个以null结尾的字符串;最后一个字符串后跟一个第二个空字符。【服务提供商】指定由【lpszRe


-------------------------------------------------------- KeyWin32GetPrivateProfileString ----
GetPrivateProfileStringGetPrivateProfileString函数从初始化文件中的指定部分检索一个字符串。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结尾的字符串，指定包含键名称的部分。如果此参数为NULL，则GetPrivateProfileString函数将文件中的所有段名称复制到提供的缓冲区。


-------------------------------------------------------- KeyWin32GetPrivateProfileStruct ----
GetPrivateProfileStructGetPrivateProfileStruct函数检索与初始化文件给定部分中指定键相关联的数据。当它检索数据时，该函数计算校验和，并将其与数据添加到文件时由WritePrivateProfileStruct函数计算的校验和进行比较。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpszSection】指向包含初始化文件中的段名称的以null结尾的字符串。【lpszKey】指向包含要检索其数据的键名称的以null结尾的字符串。【定义了与值名称一起使用的以下控制代码


-------------------------------------------------------- KeyWin32GetProcAddress ----
GetProcAddress    GetProcAddress函数返回指定的导出动态链接库（DLL）函数的地址。
语法
参数
【HMODULE】标识包含该函数的DLL模块。LoadLibrary或GetModuleHandle函数返回此句柄。【lpProcName】指向包含函数名的空值终止的字符串，或指定函数的序数


-------------------------------------------------------- KeyWin32GetProcessAffinityMask ----
GetProcessAffinityMask    GetProcessAffinityMask函数获取指定进程的进程关联掩码和系统的系统关联掩码。进程关联掩码是一个位向量，其中每个位表示允许进程运行的处理器。系统相似性掩码是一个位向量，其中每个位表示配置到系统中的处理器。进程关联掩码是系统相关性掩码的一个适当子集。一个进程只允许在配置到系统中的处理器上运行。
语法
参数
【hProcess】需要亲和力掩模的过程的打开句柄。Windows NT：此句柄必须具有PROCESS_QUERY_INFORMATION权限。有关详细信息，请参阅过程对象.【lpProce


-------------------------------------------------------- KeyWin32GetProcessHeap ----
GetProcessHeap    GetProcessHeap函数获取调用进程的堆的句柄。然后可以在HeapAlloc，HeapReAlloc，HeapFree和HeapSize函数的呼叫中使用该句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是调用进程的堆的句柄。如果函数失败，返回值为NULL。
描述
GetProcessHeap允许基于Win32的应用程序从进程堆分配内存，


-------------------------------------------------------- KeyWin32GetProcessHeaps ----
GetProcessHeaps    GetProcessHeaps函数获取对调用进程有效的所有堆的句柄。
语法
参数
【NumberOfHeaps】指定可以存储到【ProcessHeaps】指向的缓冲区中的最大堆处理数。【ProcessHeaps】指向缓冲区以接收堆数组的句柄。
返回值
返回值是对调用进


-------------------------------------------------------- KeyWin32GetProcessPriorityBoost ----
GetProcessPriorityBoost    [New - Windows NT]GetProcessPriorityBoost函数返回指定进程的优先级提升控制状态。
语法
参数
hProcess处理过程。该句柄必须具有PROCESS_QUERY_INFORMATION访问权限。有关详细信息，请参阅过程对象.pDisablePriorityBoost指向接收优先级提升


-------------------------------------------------------- KeyWin32GetProcessShutdownParameters ----
GetProcessShutdownParameters    GetProcessShutdownParameters函数检索当前调用进程的关闭参数。
语法
参数
lpdwLevel指向接收关闭优先级的变量。较高的水平首先关闭。系统级关机命令是为系统组件保留的。较高的数字首先关闭。以下是级别约定：值含义000-0FF系统保留上次关机范围。100-1FF


-------------------------------------------------------- KeyWin32GetProcessTimes ----
GetProcessTimes    GetProcessTimes函数获取有关指定进程的时间信息。
语法
参数
【hProcess】一个打开的句柄，指定寻找定时信息的进程。必须使用PROCESS_QUERY_INFORMATION访问权限创建此句柄。有关详细信息，请参阅过程对象.【lpCreation


-------------------------------------------------------- KeyWin32GetProcessVersion ----
GetProcessVersion    GetProcessVersion函数获取指定进程期望运行的Windows版本的主版本号和次版本号。
语法



-------------------------------------------------------- KeyWin32GetProcessWindowStation ----
GetProcessWindowStation    GetProcessWindowStation函数返回与调用进程相关联的窗口工作站的句柄。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是与调用进程相关联的窗口工作站的句柄。如果函数失败，返回值为NULL。如果调用进程不是为Windows NT编写的应用程序，则可能会发生这种


-------------------------------------------------------- KeyWin32GetProcessWorkingSetSize ----
GetProcessWorkingSetSize    GetProcessWorkingSetSize函数获取指定进程的最小和最大工作集大小。进程的“工作集”是物理RAM存储器中进程当前可见的一组内存页面。这些页面是驻留的，可供应用程序使用，而不会触发页面错误。进程的工作集大小以字节指定。最小和最大工作集大小影响进程的虚拟内存分页行为。
语法
参数
【hProcess】打开一个可以获得工作集大小的进程的句柄。句柄必须具有PROCESS_QUERY_INFORMATION访问权限。有关详细信息，请参阅过程对象.【lpMinimumWork


-------------------------------------------------------- KeyWin32GetProfileInt ----
GetProfileIntGetProfileInt函数从WIN.INI文件的给定部分中的指定键名称中检索整数。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结尾的字符串，指定包含键名称的部分。【lpKeyName】指向包含要检索其值的键名称的以null结尾的字符串。此值为字符串的形式; GetProfil


-------------------------------------------------------- KeyWin32GetProfileSection ----
GetProfileSectionGetProfileSection函数检索WIN.INI文件的指定部分的所有键和值。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向包含WIN.INI文件中的段名称的以null结尾的字符串。【lpReturnedString】指向缓冲区，接收与命名部分相关联的键和值。缓冲区填充一个或多个以nul


-------------------------------------------------------- KeyWin32GetProfileString ----
GetProfileStringGetProfileString函数检索WIN.INI文件给定部分中与指定键相关联的字符串。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向指定包含该键的部分的以空值终止的字符串的指针。如果此参数为NULL，则该函数将文件中的所有段名称复制到提供的缓冲区。【lpKeyName】指向包含要检索其关联字符串


-------------------------------------------------------- KeyWin32GetProp ----
GetProp    GetProp函数从给定窗口的属性列表中检索数据句柄。给定的字符串标识要检索的句柄。字符串和句柄必须通过先前调用SetProp函数添加到属性列表中。
语法
参数
【的hWnd】标识要搜索其属性列表的窗口。【lpString】指向以null结尾的字符串或包含标识字符串的原子。如果此参数是原子，则必须使用GlobalAddAtom函数创建。原子，16位值


-------------------------------------------------------- KeyWin32GetQueuedCompletionStatus ----
GetQueuedCompletionStatus    GetQueuedCompletionStatus函数尝试从指定的输入/输出完成端口出发I / O完成数据包。如果没有完成数据包排队，该函数将等待与完成端口关联的挂起输入/输出操作完成。该函数可以在完成数据包出队时返回，或者当函数超时时可以返回。如果由于I / O操作完成而返回该函数，则它将设置几个变量，以提供有关操作的信息。
语法
参数
【CompletionPort】处理感兴趣的输入/输出完成端口。I / O完成端口由CreateIoCompletionPort函数创建。【lpNumberOfBytesTransferre


-------------------------------------------------------- KeyWin32GetQueueStatus ----
GetQueueStatus    GetQueueStatus函数返回指示在调用线程的消息队列中找到的消息类型的标志。
语法
参数
【旗】指定队列状态标志，给出要检查的消息类型。此参数可以是以下值的组合：值含义QS_ALLEVENTS队列中输入的WM_TIMER，WM_PAINT，WM_HOTKEY或已发邮件。QS_AL


-------------------------------------------------------- KeyWin32GetRasterizerCaps ----
GetRasterizerCaps    GetRasterizerCaps函数返回指示TrueType字体是否安装在系统中的标志。
语法
参数
【LPRS】指向RASTERIZER_STATUS结构以接收有关光栅化器的信息。【cb】指定要复制到【LPRS】参数指向的结构中的字节数。
返回值
如果函数成功，返回值不为零。如果函数失


-------------------------------------------------------- KeyWin32GetRegionData ----
GetRegionData    GetRegionData函数使用描述区域的数据填充指定的缓冲区。该数据包括组成该区域的矩形的尺寸。
语法
参数
【HRGN】识别该地区。【dwCount】指定【lpRgnData】缓冲区的大小（以字节为单位）。【lpRgnData】指向接收信息的RGNDATA结构。如果此参数为NULL，则返回值包含区


-------------------------------------------------------- KeyWin32GetRgnBox ----
GetRgnBox    GetRgnBox函数检索指定区域的边界矩形。
语法
参数
【HRGN】识别该地区。【LPRC】指向接收边界矩形的RECT结构。
返回值
返回值指定区域的复杂度。它可以是以下值之一：值含义NULLREGION区域是空的SIMPLEREGION区域


-------------------------------------------------------- KeyWin32GetROP2 ----
GetROP2    GetROP2函数检索指定设备上下文的前台混合模式。混合模式指定笔或内部颜色和屏幕上已经组合的颜色，以产生新颜色。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定前台混合模式。如果函数失败，返回值为零。
描述
以下是前景混合模式：混合模式描述R2_BLACK像素始终为0。R2_CO


-------------------------------------------------------- KeyWin32GetSaveFileName ----
GetSaveFileName    GetSaveFileName函数创建一个保存公共对话框，允许用户指定要保存的文件的驱动器，目录和名称。
语法
参数
【lpofn】指向OPENFILENAME结构的指针，其中包含用于初始化对话框的信息。当GetSaveFileName返回时，此结构包含有关用户文件选择的信息。
返回值
如果用户指定文件


-------------------------------------------------------- KeyWin32GetScrollInfo ----
GetScrollInfo    GetScrollInfo函数检索滚动条的参数，包括最小和最大滚动位置，页面大小和滚动框（拇指）的位置。
语法
参数
【HWND】根据【fnBar】参数的值标识滚动条控件或带有标准滚动条的窗口。【fnBar】指定要检索参数的滚动条的类型。此参数可以是以下值之一：值含义SB_CTL检索滚动条控件的参数。【HW


-------------------------------------------------------- KeyWin32GetScrollPos ----
GetScrollPos    GetScrollPos函数在指定的滚动条中检索滚动框（thumb）的当前位置。当前位置是一个取决于当前滚动范围的相对值。例如，如果滚动范围为0到100，滚动条位于条的中间，则当前位置为50。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或带有标准滚动条的窗口。【NBAR】指定要检查的滚动条。此参数可以是以下值之一：值含义SB_CTL在滚动条控件中检索滚动框的位置。【的h


-------------------------------------------------------- KeyWin32GetScrollRange ----
GetScrollRange    GetScrollRange函数检索指定滚动条的当前最小和最大滚动条（拇指）位置。对于Windows 95，GetScrollRange函数与兼容于4.0之前的操作系统版本存在。使用版本4.0或更高版本，请使用GetScrollInfo函数。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或具有标准滚动条的窗口。【NBAR】指定检索位置的滚动条。此参数可以是以下值之一：值含义SB_CTL检索滚动条控件的位置。【的hWnd】


-------------------------------------------------------- KeyWin32GetSecurityDescriptorControl ----
GetSecurityDescriptorControl    GetSecurityDescriptorControl函数检索安全描述符的控制和修订信息。
语法
参数
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR结构，其函数检索的控制和修订信息。【PControl则】指向SECURITY_DESCRIPTOR_CON


-------------------------------------------------------- KeyWin32GetSecurityDescriptorDacl ----
GetSecurityDescriptorDacl    GetSecurityDescriptorDacl函数检索指定安全描述符中自由访问控制列表（ACL）的指针。
语法
参数
【pSecurityDescriptor】指向包含自由ACL的SECURITY_DESCRIPTOR结构。该函数检索一个指向它的指针。【lpbDaclPresent】指向一个标志，该函数用于


-------------------------------------------------------- KeyWin32GetSecurityDescriptorGroup ----
GetSecurityDescriptorGroup    GetSecurityDescriptorGroup函数从安全描述符中检索主组信息。
语法
参数
【pSecurityDescriptor】指向函数检索的主组信息的SECURITY_DESCRIPTOR结构。【PGROUP】指向指向SID结构的指针，该结构在函数返回时标识主组。（SID是


-------------------------------------------------------- KeyWin32GetSecurityDescriptorLength ----
GetSecurityDescriptorLength    GetSecurityDescriptorLength函数返回结构有效SECURITY_DESCRIPTOR结构的长度（以字节为单位）。长度包括所有关联结构的长度，例如SID和ACL结构。
语法
参数
【pSecurityDescriptor】指向函数返回长度的SECURITY_DESCRIPTOR结构。假设SECURITY_DESCRIPTOR结构是有效的。
返回值
如果函数成功，则


-------------------------------------------------------- KeyWin32GetSecurityDescriptorOwner ----
GetSecurityDescriptorOwner    GetSecurityDescriptorOwner函数从安全描述符中检索所有者信息。
语法
参数
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR结构，其函数检索的所有者信息。【pOwner】指向指向SID结构的指针，该结构在函数返回时标识所有者。（S


-------------------------------------------------------- KeyWin32GetSecurityDescriptorSacl ----
GetSecurityDescriptorSacl    GetSecurityDescriptorSacl函数将在指定的安全描述符中检索指向系统访问控制列表（ACL）的指针。
语法
参数
【pSecurityDescriptor】指向SECURITY_DESCRIPTOR结构，其中包含该函数检索指针的系统ACL。【lpbSaclPresent】指向一个标志，该函数设置为指示在


-------------------------------------------------------- KeyWin32GetSecurityInfo ----
GetSecurityInfo    [New - Windows NT]GetSecurityInfo函数检索由句柄指定的对象的安全描述符的副本。
语法
参数
【处理】用于检索安全信息的对象的句柄。【ObjectType】指定SE_OBJECT_TYPE枚举中指示由【pObjectName】参数命名的对象的类型的值。【SecurityInfo】一组


-------------------------------------------------------- KeyWin32GetServiceDisplayName ----
GetServiceDisplayName    GetServiceDisplayName函数获取与特定服务名称相关联的显示名称。服务名称与服务的注册表项名称相同。
语法
参数
【hSCManager】处理机器的服务控制管理器数据库。此参数是由OpenSCManager函数返回的RPC服务器句柄。【lpServiceName】指向以null结尾的服务名称字符串。该名


-------------------------------------------------------- KeyWin32GetServiceKeyName ----
GetServiceKeyName    GetServiceKeyName函数获取与特定服务的显示名称相关联的服务名称。服务名称与服务的注册表项名称相同。
语法
参数
【hSCManager】处理计算机的服务控制管理器数据库。此参数是由OpenSCManager返回的远程过程调用（RPC）服务器句柄。【lpDisplayName】指向以null结尾的服务显


-------------------------------------------------------- KeyWin32GetShortPathName ----
GetShortPathName    GetShortPathName函数获取指定输入路径的短路径形式。
语法
参数
【lpszLongPath】指向以null结尾的路径字符串。该函数获取此路径的简短形式。【lpszShortPath】指向缓冲区以接收由【lpszLongPath】指定的路径的空终止短格式。


-------------------------------------------------------- KeyWin32GetSidIdentifierAuthority ----
GetSidIdentifierAuthority    GetSidIdentifierAuthority函数返回指定安全标识符（SID）中SID_IDENTIFIER_AUTHORITY 结构的地址。
语法
参数
【PSID】指向返回SID_IDENTIFIER_AUTHORITY结构的地址的SID结构。
返回值
如果函数成功，则返回值是指定SID结构的SID_IDENTIFIER_AUTHORI


-------------------------------------------------------- KeyWin32GetSidLengthRequired ----
GetSidLengthRequired    GetSidLengthRequired函数返回以指定数量的子权限存储SID结构所需的缓冲区长度（以字节为单位）。
语法
参数
【nSubAuthorityCount】指定要存储在SID结构中的子权限的数量。
返回值
返回值是存储SID结构所需的缓冲区的长度（以字节为单位）。此函数不能失败。



-------------------------------------------------------- KeyWin32GetSidSubAuthority ----
GetSidSubAuthority    GetSidSubAuthority函数返回SID结构中指定的次授权的地址。次授权值是相对标识符（RID）。SID是安全标识符。
语法
参数
【PSID】指向要从其返回次授权地址的SID结构。【nSubAuthority】指定标识子函数数组元素的索引值，该函数将返回其地址。该函数不对该值执行验证测试。应用程序可以调用GetSidS


-------------------------------------------------------- KeyWin32GetSidSubAuthorityCount ----
GetSidSubAuthorityCount    GetSidSubAuthorityCount函数返回包含子权限计数的SID结构中的字段的地址。SID是安全标识符。
语法
参数
【PSID】指向SID结构，从中返回指向次授权计数的指针。
返回值
如果函数成功，则返回值是指向SID结构的子注册计数的指针。如果函数失败，则返回值未定义。如果指定的SID结构无效，该函


-------------------------------------------------------- KeyWin32GetStartupInfo ----
GetStartupInfo    GetStartupInfo函数检索创建调用进程时指定的STARTUPINFO结构的内容。
语法
参数
【lpStartupInfo】指向由该函数填充的STARTUPINFO结构。
返回值
此函数不返回值。
描述
STARTUPINFO结构由创建调用进程的进程指定。它可以用于指定与调用


-------------------------------------------------------- KeyWin32GetStdHandle ----
GetStdHandle    GetStdHandle函数返回标准输入，标准输出或标准错误装置的句柄。
语法
参数
【nStdHandle】指定要返回句柄的设备。此参数可以具有以下值之一：值含义STD_INPUT_HANDLE标准输入手柄STD_OUTPUT_HANDLE标准输出手柄STD_ERROR_H


-------------------------------------------------------- KeyWin32GetStockObject ----
GetStockObject    GetStockObject函数检索一个预定义库存笔，笔刷，字体或调色板的句柄。
语法
参数
【fnObject】指定库存对象的类型。此参数可以是以下值之一：值含义BLACK_BRUSH黑色刷子DKGRAY_BRUSH深灰色刷子GRAY_BRUSH灰色刷。HOLLOW_BRUSH空心


-------------------------------------------------------- KeyWin32GetStretchBltMode ----
GetStretchBltMode    GetStretchBltMode函数检索当前的拉伸模式。拉伸模式定义当调用StretchBlt函数时，如何将颜色数据添加到或从位图中删除，这些位图被拉伸或压缩。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值为当前的拉伸模式。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetStringTypeA ----
GetStringTypeA    GetStringTypeA函数返回指定源字符串中字符的字符类型信息。对于字符串中的每个字符，该函数设置输出数组的相应16位元素中的一个或多个位。每个位都标识给定的字符类型，例如字符是字母，数字还是两者。
语法
参数
【语言环境】指定区域设置标识符。此值唯一地定义用于将由【lpSrcStr】指向的字符串从ANSI转换为Unicode的ANSI代码页。该函数然后分析每个Unicode字符的字符类型信息。此参


-------------------------------------------------------- KeyWin32GetStringTypeEx ----
GetStringTypeEx    GetStringTypeEx函数返回指定源字符串中字符的字符类型信息。对于字符串中的每个字符，该函数设置输出数组的相应16位元素中的一个或多个位。每个位都标识给定的字符类型，例如字符是字母，数字还是两者。与其近亲GetStringTypeA和GetStringTypeW不同，GetStringTypeEx通过使用#define UNICODE交换机展示了合适的A或W行为。这是推荐的Win32函数。
语法
参数
【语言环境】指定区域设置标识符。此值唯一地定义用于将由【lpSrcStr】指向的字符串从ANSI转换为Unicode的ANSI代码页。该函数然后分析每个Unicode字符的字符类型信息。请注


-------------------------------------------------------- KeyWin32GetStringTypeW ----
GetStringTypeW    GetStringTypeW函数返回指定源字符串中字符的字符类型信息。对于字符串中的每个字符，该函数设置输出数组的相应16位元素中的一个或多个位。每个位都标识给定的字符类型，例如字符是字母，数字还是两者。
语法
参数
【dwInfoType】指定用户想要检索的字符信息的类型。各种类型分为不同的级别（有关每种类型中包含的信息的列表，请参阅以下备注部分）。此参数可以指定以下字符类型标志之一：CT_CTYPE1


-------------------------------------------------------- KeyWin32GetSubMenu ----
GetSubMenu    GetSubMenu函数检索由指定的菜单项激活的下拉菜单或子菜单的句柄。
语法
参数
【HMENU】标识菜单。【nPos】指定激活下拉菜单或子菜单的项目的给定菜单中的从零开始的相对位置。
返回值
如果函数成功，则返回值是由菜单项激活的下拉菜单或子菜单的句柄。如果菜单项未激


-------------------------------------------------------- KeyWin32GetSysColor ----
GetSysColor    GetSysColor函数检索指定的显示元素的当前颜色。显示元素是窗口的部分和显示在系统显示屏幕上的Windows显示。
语法
参数
【参数nIndex】指定要检索其颜色的显示元素。此参数必须是以下值之一：值含义COLOR_3DDKSHADOW三维显示元素的阴影。COLOR_3DFACE,
COLOR_BTNFACE面向


-------------------------------------------------------- KeyWin32GetSysColorBrush ----
GetSysColorBrush    GetSysColorBrush函数检索一个标识对应于指定颜色索引的逻辑画笔的句柄。
语法
参数
【参数nIndex】指定颜色索引。该值对应于用于绘制21个窗口元素之一的颜色。
返回值
如果函数成功，则返回值标识一个逻辑画笔。要获取扩展错误信息，请调用GetLastError.
描


-------------------------------------------------------- KeyWin32GetSysModalWindow ----
GetSysModalWindow  GetSysModalWindow函数已过时。此函数仅用于与16位版本的Windows兼容。


-------------------------------------------------------- KeyWin32GetSystemDefaultLangID ----
GetSystemDefaultLangID    GetSystemDefaultLangID函数检索系统默认语言标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统默认语言标识符。
描述
有关语言标识符的更多信息，请参阅语言标识符和语言环境。



-------------------------------------------------------- KeyWin32GetSystemDefaultLCID ----
GetSystemDefaultLCID    GetSystemDefaultLCID函数检索系统默认的区域设置标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是系统默认的区域设置标识符。
描述
有关区域设置标识符的更多信息，请参阅区域标识符.



-------------------------------------------------------- KeyWin32GetSystemDirectory ----
GetSystemDirectory    GetSystemDirectory函数检索Windows系统目录的路径。系统目录包含Windows库，驱动程序和字体文件等文件。
语法
参数
【lpBuffer】指向缓冲区以接收包含路径的以null结尾的字符串。除非系统目录是根目录，否则此路径不会以反斜杠结尾。例如，如果系统目录在驱动器C上命名为WINDOWS \\ SYSTEM


-------------------------------------------------------- KeyWin32GetSystemInfo ----
GetSystemInfo    GetSystemInfo函数返回有关当前系统的信息。
语法
参数
【lpSystemInfo】指向此函数填写的SYSTEM_INFO结构。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32GetSystemMenu ----
GetSystemMenu    GetSystemMenu函数允许应用程序访问窗口菜单（也称为系统菜单或控制菜单）进行复制和修改。
语法
参数
【的hWnd】标识将拥有窗口菜单的副本的窗口。【// reset flag】指定要执行的操作。如果此参数为FALSE，GetSystemMenu返回当前正在使用的窗口菜单副本的句柄。该副本最


-------------------------------------------------------- KeyWin32GetSystemMetrics ----
GetSystemMetrics    GetSystemMetrics函数可以检索各种系统指标和系统配置设置。系统度量是Windows显示元素的尺寸（宽度和高度）。由GetSystemMetrics检索的所有维度均为像素。
语法



-------------------------------------------------------- KeyWin32GetSystemPaletteEntries ----
GetSystemPaletteEntries    GetSystemPaletteEntries函数从与指定设备上下文关联的系统调色板中检索一系列调色板条目。
语法
参数
【HDC】标识设备上下文。【iStartIndex】指定要从系统调色板检索的第一个条目。【的nentries】指定要从系统调色板检索的条目数。【LPPE】指向PALETTEENTRY结构的数


-------------------------------------------------------- KeyWin32GetSystemPaletteUse ----
GetSystemPaletteUse    GetSystemPaletteUse函数检索指定设备上下文的系统（物理）调色板的当前状态。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值是系统调色板的当前状态。它可以是以下值之一：值含义SYSPAL_NOSTATIC系统调色板不包含黑色和白色以外的静态颜色。SYS


-------------------------------------------------------- KeyWin32GetSystemTime ----
GetSystemTime    GetSystemTime函数检索当前系统日期和时间。系统时间以协调世界时（UTC）表示。
语法
参数
【lpSystemTime】指向SYSTEMTIME结构以接收当前系统的日期和时间。
返回值
此函数不返回值。



-------------------------------------------------------- KeyWin32GetSystemTimeAdjustment ----
GetSystemTimeAdjustment    GetSystemTimeAdjustment函数决定系统是否在每个时钟中断期间对其日期时钟进行周期性时间调整，以及任何此类调整的值和周期。请注意，此类调整的周期等于时钟中断之间的时间间隔。
语法
参数
【lpTimeAdjustment】指向DWORD的函数，该函数设置为在每个周期时间调整时添加到时钟时钟的100纳秒单位。【lpTimeIncrement】指向DWORD的函数设置为间隔，以


-------------------------------------------------------- KeyWin32GetSystemTimeAsFileTime ----
GetSystemTimeAsFileTime    GetSystemTimeAsFileTime函数获取当前系统的日期和时间。信息是协调世界时（UTC）格式。
语法
参数
【lpSystemTimeAsFileTime】指向FILETIME结构以便以UTC格式接收当前系统日期和时间。
返回值
此函数不返回值。
描述
GetSystemTimeAsFil


-------------------------------------------------------- KeyWin32GetTabbedTextExtent ----
GetTabbedTextExtent    GetTabbedTextExtent函数计算字符串的宽度和高度。如果字符串包含一个或多个制表符，则字符串的宽度将基于指定的制表位。GetTabbedTextExtent函数使用当前选定的字体来计算字符串的尺寸。
语法
参数
【hDC】标识设备上下文。【lpString】指向一个字符串。【NCOUNT】指定文本字符串中的字符数。【nTabPositions】指定【lpnTabStopPositions】参数指向的


-------------------------------------------------------- KeyWin32GetTapeParameters ----
GetTapeParameters    GetTapeParameters函数检索描述磁带或磁带机的信息。
语法
参数
【hDevice】标识要查找哪些信息的设备。该句柄是通过使用CreateFile函数创建的。【// preparation method】指定所请求信息的类型。此参数必须是以下值之一：值描述


-------------------------------------------------------- KeyWin32GetTapePosition ----
GetTapePosition    GetTapePosition函数以逻辑或绝对块取回磁带的当前地址。
语法
参数
【hDevice】标识要获取磁带位置的设备。该句柄是通过使用CreateFile创建的。【dwPositionType】指定要获取的地址类型。此参数可以是以下值之一：值描述TAPE_ABSO


-------------------------------------------------------- KeyWin32GetTapeStatus ----
GetTapeStatus    GetTapeStatus函数指示磁带设备是否准备好处理磁带命令。
语法
参数
【hDevice】标识要获取设备状态的设备。该句柄是通过使用CreateFile函数创建的。
返回值
如果磁带设备准备好接受适当的磁带访问命令而不返回错误，则返回值为NO_ERROR。如


-------------------------------------------------------- KeyWin32GetTempFileName ----
GetTempFileName    GetTempFileName函数创建临时文件的名称。文件名是指定路径和前缀字符串的连接，由指定整数形成的十六进制字符串和.TMP扩展名。指定的整数可以是非零，在这种情况下，函数创建文件名，但不会创建文件。如果为整数指定零，该函数将创建一个唯一的文件名，并在指定的目录中创建该文件。
语法
参数
【lpPathName】指向指定文件名的目录路径的以null结尾的字符串。该字符串必须由ANSI字符集中的字符组成。应用程序通常为此参数指定句点（。）或GetTempPath函数的结果。如果


-------------------------------------------------------- KeyWin32GetTempPath ----
GetTempPath    GetTempPath函数检索为临时文件指定的目录的路径。此函数取代GetTempDrive函数。
语法
参数
【nBufferLength】指定由【lpBuffer】标识的字符串缓冲区的大小（以字符为单位）。【lpBuffer】指向一个字符串缓冲区，它接收指定临时文件路径的以null结尾的字符串。



-------------------------------------------------------- KeyWin32GetTextAlign ----
GetTextAlign    GetTextAlign函数检索指定设备上下文的文本对齐设置。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值就是文本对齐标志的状态。如果函数失败，返回值为GDI_ERROR.要获取扩展错误信息，请调用GetLastError.有关状态返回


-------------------------------------------------------- KeyWin32GetTextCharacterExtra ----
GetTextCharacterExtra    GetTextCharacterExtra函数检索指定设备上下文的当前字符间距。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值是当前的字符间距。如果函数失败，返回值为0x8000000。
描述
字符间距定义了沿着基线的逻辑单位的额外空间，即TextO


-------------------------------------------------------- KeyWin32GetTextCharset ----
GetTextCharset    GetTextCharset函数获取当前选定到指定设备上下文中的字体的字符集标识符。函数调用GetTextCharset（【HDC】）等效于函数调用GetTextCharsetInfo（【HDC】，NULL，0）。
语法
参数
【HDC】处理设备上下文。该函数获取在该设备上下文中选择的字体的字符集标识符。
返回值
如果函数成功，则返回值标识当前选定到指定设备上下文中的字体的字符集。定义了以下字符集标识符：ANS


-------------------------------------------------------- KeyWin32GetTextCharsetInfo ----
GetTextCharsetInfo    GetTextCharsetInfo函数获取有关当前选定到指定设备上下文中字体的字符集的信息。
语法
参数
【HDC】处理设备上下文。该函数获取有关在此设备上下文中选择的字体的信息。【lpSig】指向接收字体签名信息的FONTSIGNATURE 数据结构的指针。如果当前在设备上下文中选择TrueT


-------------------------------------------------------- KeyWin32GetTextColor ----
GetTextColor    GetTextColor函数检索指定设备上下文的当前文本颜色。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值为当前文本颜色，为COLORREF值。如果函数失败，返回值为CLR_INVALID。
描述
文本颜色定义使用TextOut或


-------------------------------------------------------- KeyWin32GetTextExtentExPoint ----
GetTextExtentExPoint    GetTextExtentExPoint函数检索指定字符串中适合指定空间的字符数，并使用每个字符的文本扩展名填充数组。（文本范围是空格开头和适合空格的字符之间的距离。）此信息对于文字包装计算非常有用。
语法
参数
【HDC】标识设备上下文。【lpszStr】指向要检索的区域的以null结尾的字符串。【cchString】指定【lpszStr】参数指向的字符串中的字节数。【nMaxExtent】指定格式


-------------------------------------------------------- KeyWin32GetTextExtentPoint ----
GetTextExtentPoint    GetTextExtentPoint函数计算指定的文本字符串的宽度和高度。
语法
参数
【HDC】标识设备上下文。【lpString】指向文本字符串。该字符串不需要为零终止，因为【cbString】指定字符串的长度。【cbString】指定字符串中的字符数。【lpsiz到】指向


-------------------------------------------------------- KeyWin32GetTextExtentPoint32 ----
GetTextExtentPoint32    GetTextExtentPoint32函数计算指定的文本字符串的宽度和高度。此函数取代GetTextExtentPoint函数。
语法
参数
【HDC】标识设备上下文。【lpString】指向文本字符串。字符串不需要为零终止，因为【cbString】指定字符串的长度。【cbString】指定字符串中的字符数。【lpsiz到】指向S


-------------------------------------------------------- KeyWin32GetTextFace ----
GetTextFace    GetTextFace函数检索在指定的设备上下文中选择的字体的字体名称。
语法
参数
【HDC】标识设备上下文。【NCOUNT】指定缓冲区的大小（以字符为单位）。【lpFaceName】指向要接收字体名称的缓冲区。如果此参数为NULL，则该函数返回名称中包含终止空字符的字符数


-------------------------------------------------------- KeyWin32GetTextMetrics ----
GetTextMetrics    GetTextMetrics函数使用当前选定字体的指标填充指定的缓冲区。
语法
参数
【HDC】标识设备上下文。【lptm】指向要接收指标的TEXTMETRIC结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyWin32GetThreadContext ----
GetThreadContext    GetThreadContext函数检索指定线程的上下文。
语法
参数
【hThread】标识要检索其上下文的线程的打开句柄。Windows NT：句柄必须具有对线程的THREAD_GET_CONTEXT访问权限。有关详细信息，请参阅线程对象.【lpContex


-------------------------------------------------------- KeyWin32GetThreadDesktop ----
GetThreadDesktop    GetThreadDesktop函数返回与指定线程关联的桌面的句柄。
语法
参数
【dwThreadId】标识要返回桌面句柄的线程。GetCurrentThreadId和CreateProcess函数返回线程标识符。
返回值
如果函数成功，则返回值是与指定线程关联的桌


-------------------------------------------------------- KeyWin32GetThreadLocale ----
GetThreadLocale    GetThreadLocale函数返回调用线程当前的语言环境。
语法
参数
此函数无参数。
返回值
该函数返回调用线程的32位LCID区域设置标识符。
描述
当一个线程被创建时，它被给予系统默认的线程语言环境。系统引导时，系统从注册表读取系统默认线程区域设置


-------------------------------------------------------- KeyWin32GetThreadPriority ----
GetThreadPriority    GetThreadPriority函数返回指定线程的优先级值。该值与线程进程的优先级类一起确定线程的基本优先级。
语法
参数
【hThread】标识线程。Windows NT：句柄必须具有THREAD_QUERY_INFORMATION权限。有关详细信息，请参阅线程对象.
返回值
如果函数成功，则返回值是线程的


-------------------------------------------------------- KeyWin32GetThreadPriorityBoost ----
GetThreadPriorityBoost    [New - Windows NT]GetThreadPriorityBoost函数返回指定线程的优先级提升控制状态。
语法
参数
hThread处理线程。该线程必须具有THREAD_QUERY_INFORMATION访问权限。有关详细信息，请参阅线程对象.pDisablePriorityBoost指向接收优先级提升控制


-------------------------------------------------------- KeyWin32GetThreadSelectorEntry ----
GetThreadSelectorEntry    GetThreadSelectorEntry函数检索指定选择器和线程的描述符表条目。
语法
参数
【hThread】标识包含指定选择器的线程的句柄。Windows NT：句柄必须具有THREAD_QUERY_INFORMATION权限。有关详细信息，请参阅线程对象.【//要查找的选择器值


-------------------------------------------------------- KeyWin32GetThreadTimes ----
GetThreadTimes    GetThreadTimes函数获取有关指定线程的时序信息。
语法
参数
【hThread】一个打开的句柄，指定寻找定时信息的线程。必须使用THREAD_QUERY_INFORMATION访问来创建此句柄。有关详细信息，请参阅线程对象.【lpCreationTim


-------------------------------------------------------- KeyWin32GetTickCount ----
GetTickCount    GetTickCount函数检索自Windows启动以来经过的毫秒数。
语法



-------------------------------------------------------- KeyWin32GetTimeFormat ----
GetTimeFormat    GetTimeFormat函数将时间格式化为指定区域设置的时间字符串。该函数格式化指定时间或本地系统时间。
语法
参数
【语言环境】指定要格式化时间字符串的区域设置。如果【lpFormat】为NULL，则该函数将根据该语言环境的时间格式格式化该字符串。如果【lpFormat】不为NULL，则该函数仅对格式图片


-------------------------------------------------------- KeyWin32GetTimeZoneInformation ----
GetTimeZoneInformation    GetTimeZoneInformation函数检索当前的时区参数。这些参数控制协调世界时（UTC）与本地时间之间的转换。
语法
参数
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION结构以接收当前时区参数。
返回值
如果函数成功，则返回值为以下值之一：值含义TIME_ZONE


-------------------------------------------------------- KeyWin32GetTokenInformation ----
GetTokenInformation    GetTokenInformation函数检索有关访问令牌的指定类型的信息。调用进程必须具有获取信息的适当访问权限。
语法
参数
【TokenHandle】标识检索信息的访问令牌。【TokenInformationClass】指定TOKEN_INFORMATION_CLASS枚举类型的变量，标识函数检索的信息类型。【T


-------------------------------------------------------- KeyWin32GetTopWindow ----
GetTopWindow    GetTopWindow函数检查与指定的父窗口相关联的子窗口的Z顺序，并检索Z顺序顶部的子窗口的句柄。
语法
参数
【的hWnd】标识要检查子窗口的父窗口。如果此参数为NULL，该函数将返回Z顺序顶部窗口的句柄。
返回值
如果函数成功，则返回值是Z顺序顶部子窗口的句柄。如果指定的窗口没有子窗口，返回值


-------------------------------------------------------- KeyWin32GetTrusteeForm ----
GetTrusteeForm    [New - Windows NT]GetTrusteeForm函数检索分配给指定TRUSTEE结构的TrusteeForm成员的值。此值指示结构是否使用名称字符串或安全标识符（SID）来标识受信任者。
语法
参数
【pTrustee】指向TRUSTEE结构。
返回值
返回值是TRUSTEE_FORM枚举中的常量之一。



-------------------------------------------------------- KeyWin32GetTrusteeName ----
GetTrusteeName    [New - Windows NT]GetTrusteeName函数从TRUSTEE结构中检索受托人名称。
语法
参数
【pTrustee】指向TRUSTEE结构。
返回值
如果TRUSTEE结构的TrusteeForm成员是TRUSTEE_IS_NAME，则返回值是分配给该结构的ptstrNameaf成


-------------------------------------------------------- KeyWin32GetTrusteeType ----
GetTrusteeType    [New - Windows NT]GetTrusteeType函数检索分配给指定TRUSTEE结构的TrusteeType成员的值。此值表示受托人是用户，组还是受托人类型未知。
语法
参数
【pTrustee】指向TRUSTEE结构。
返回值
返回值是来自TRUSTEE_TYPE枚举的常量之一。



-------------------------------------------------------- KeyWin32GetUpdateRect ----
GetUpdateRect    GetUpdateRect函数检索完全包围指定窗口的更新区域的最小矩形的坐标。如果使用CS_OWNDC样式创建窗口，并且映射模式不是MM_TEXT，则GetUpdateRect将以逻辑坐标检索矩形。否则，它将检索客户端坐标中的矩形。如果没有更新区域，GetUpdateRect将检索一个空矩形（将所有坐标设置为零）。
语法
参数
【的hWnd】标识具有要检索的更新区域的窗口。【LPRECT】指向接收包围矩形坐标的RECT结构。应用程序可以将此参数设置为NULL，以确定窗口是否存在更新区域。如果此参数为NULL，则Ge


-------------------------------------------------------- KeyWin32GetUpdateRgn ----
GetUpdateRgn    GetUpdateRgn函数通过将窗口的更新区域复制到指定的区域来检索更新区域。更新区域的坐标相对于窗口的左上角（即它们是客户端坐标）。
语法
参数
【的hWnd】标识具有要检索的更新区域的窗口。【HRGN】标识接收更新区域的区域。【// erase-background flag】指定是否应该擦除窗口背景以及是否应绘制子窗口的非客户区域


-------------------------------------------------------- KeyWin32GetUserDefaultLangID ----
GetUserDefaultLangID    GetUserDefaultLangID函数检索用户默认语言标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是用户默认语言标识符。



-------------------------------------------------------- KeyWin32GetUserDefaultLCID ----
GetUserDefaultLCID    GetUserDefaultLCID函数检索用户默认的区域设置标识符。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值是用户默认的区域设置标识符。
描述
有关区域设置标识符的更多信息，请参阅区域标识符.



-------------------------------------------------------- KeyWin32GetUserName ----
GetUserName    GetUserName函数检索当前线程的用户名。这是当前登录到系统的用户的名称。
语法
参数
【lpBuffer】指向缓冲区以接收包含用户登录名的空终止字符串。如果此缓冲区不足以包含整个用户名，该函数将失败。【服务提供商】指向DWORD的输入，指定由【lpBuffer】参数指定的缓冲


-------------------------------------------------------- KeyWin32GetUserObjectInformation ----
GetUserObjectInformation    GetUserObjectInformation函数返回有关窗口站或桌面对象的信息。
语法
参数
【hObjhr】标识要返回信息的窗口台或桌面对象。这可以是HDESK或HWINSTA句柄（例如，CreateWindowStation OpenWindowStation，CreateDes


-------------------------------------------------------- KeyWin32GetUserObjectSecurity ----
GetUserObjectSecurity    GetUserObjectSecurity函数检索指定用户对象的安全信息。
语法
参数
【hObjhr】标识要返回安全信息的用户对象。【pSIRequested】指向SECURITY_INFORMATION结构，指定所请求的安全信息。【pSID】指向SECURITY_DESCR


-------------------------------------------------------- KeyWin32GetVersion ----
GetVersion    GetVersion函数返回当前的Windows版本号以及有关操作系统平台的信息。此函数已被GetVersionEx取代，该选项是获取系统版本号信息的首选方法。新应用程序应使用GetVersionEx.GetVersionEx函数的开发是因为许多现有的Windows应用程序在检查GetVersion函数调用的DWORD返回值时将错误地转换为DWORD中的主要和次要版本号。GetVersionEx函数强制应用程序明确检查版本信息的每个元素，并允许将来对该信息的增强。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值为DWORD，该值包含低位字中Windows的主版本号和次版本号，以及高阶字中操作系统平台的信息。对于所有平台，低位字包含Windows的版


-------------------------------------------------------- KeyWin32GetVersionEx ----
GetVersionEx    GetVersionEx函数可获取有关当前正在运行的操作系统版本的扩展信息。
语法
参数
【lpVersionInformation】指向函数填充操作系统版本信息的OSVERSIONINFO数据结构的指针。在调用GetVersionEx函数之前，请将OSVERSIONINFO数据


-------------------------------------------------------- KeyWin32GetViewportExtEx ----
GetViewportExtEx    GetViewportExtEx函数检索指定设备上下文的当前视口的x范围和y范围。
语法
参数
【HDC】标识设备上下文。【lpsiz到】指向SIZE结构。设备单位中的x和y范围被放置在此结构中。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetViewportOrgEx ----
GetViewportOrgEx    GetViewportOrgEx函数检索指定设备上下文的视口原点的x坐标和y坐标。
语法
参数
【HDC】标识设备上下文。【LPPOINT】指向接收原点坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetVolumeInformation ----
GetVolumeInformation    GetVolumeInformation函数返回有关指定根目录的文件系统和卷的信息。
语法
参数
【lpRootPathName】指向包含要描述的卷的根目录的字符串。如果此参数为NULL，则使用当前目录的根。如果此参数是UNC名称，则必须使用其他反斜杠来执行此操作。例如，您可以将\\\\


-------------------------------------------------------- KeyWin32GetWindow ----
GetWindow    GetWindow函数检索具有指定关系（Z订单或所有者）的窗口的句柄到指定的窗口。
语法
参数
【的hWnd】标识一个窗口根据【uCmd】参数的值，检索到的窗口句柄相对于此窗口。【uCmd】指定指定窗口和要检索句柄的窗口之间的关系。此参数可以是以下值之一：值含义GW_CHILD如果指定


-------------------------------------------------------- KeyWin32GetWindowContextHelpId ----
GetWindowContextHelpId    GetWindowContextHelpId函数检索与指定窗口相关联的帮助上下文标识符（如果有）。
语法
参数
【HWND】处理到要检索帮助上下文标识符的窗口。
返回值
如果窗口有一个或另一个则返回帮助上下文标识符。



-------------------------------------------------------- KeyWin32GetWindowDC ----
GetWindowDC    GetWindowDC函数检索整个窗口的设备上下文（DC），包括标题栏，菜单和滚动条。窗口设备上下文允许在窗口中的任何地方进行绘制，因为设备上下文的原点是窗口的左上角而不是客户区。
语法
参数
【的hWnd】标识具有要检索的设备上下文的窗口。
返回值
如果函数成功，则返回值是指定窗口的设备上下文的句柄。如果函数失败，则返回值为NULL，表示错误或无效的【的hWnd】参数。
描


-------------------------------------------------------- KeyWin32GetWindowExtEx ----
GetWindowExtEx    此函数检索指定设备上下文的窗口的x范围和y范围。BOOL GetWindowExtEx(HDC 【HDC】,//设备上下文的句柄LPSIZE 【lpsiz到】//结构接收窗口范围的地址);
参数
【HDC】标识设备上下文。【lpsiz到】指向SIZE结构。页面空间单元中的x和y范围被放置在此结构中。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetWindowLong ----
GetWindowLong    GetWindowLong函数检索有关指定窗口的信息。该函数还可以将指定偏移量的32位（长）值检索到窗口的额外窗口存储器中。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的值的从零开始的偏移量。有效值范围为零，通过额外的窗口内存的字节数减去4;例如，如果指定了12个或更多字节的额外


-------------------------------------------------------- KeyWin32GetWindowOrgEx ----
GetWindowOrgEx    GetWindowOrgEx函数检索指定设备上下文的窗口原点的x坐标和y坐标。
语法
参数
【HDC】标识设备上下文。【LPPOINT】指向POINT结构，它以窗口原点的页面单位接收坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32GetWindowPlacement ----
GetWindowPlacement    GetWindowPlacement函数检索指定窗口的显示状态和还原的，最小化的和最大化的位置。
语法
参数
【的hWnd】标识窗口。【lpwndplel，LATN】指向接收显示状态和位置信息的WINDOWPLACEMENT结构。在致电GetWindowPlacement之前，将WINDOWPLAC


-------------------------------------------------------- KeyWin32GetWindowRect ----
GetWindowRect    GetWindowRect函数检索指定窗口的边界矩形的尺寸。尺寸以相对于屏幕左上角的屏幕坐标给出。
语法
参数
【的hWnd】标识窗口。【LPRECT】指向RECT结构，可以接收窗口左上角和右下角的屏幕坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用


-------------------------------------------------------- KeyWin32GetWindowRgn ----
GetWindowRgn    GetWindowRgn函数获取窗口的窗口区域的副本。通过调用SetWindowRgn函数设置窗口的窗口区域。窗口区域确定操作系统允许绘制的窗口内的区域。操作系统不显示位于窗口区域之外的窗口的任何部分
语法
参数
【的hWnd】处理要获得窗口区域的窗口。【HRGN】处理一个地区。该区域接收窗口区域的副本。
返回值
返回值指定函数获取的区域的类型。它可以是以下值之一：值含义NULLREGION该地区


-------------------------------------------------------- KeyWin32GetWindowsDirectory ----
GetWindowsDirectory    GetWindowsDirectory函数检索Windows目录的路径。Windows目录包含基于Windows的应用程序，初始化文件和帮助文件等文件。
语法
参数
【lpBuffer】指向缓冲区以接收包含路径的以null结尾的字符串。除非Windows目录是根目录，否则此路径不会以反斜杠结尾。例如，如果Windows目录在驱动器C上命名为WINDOWS


-------------------------------------------------------- KeyWin32GetWindowTask ----
GetWindowTask  GetWindowTask函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用GetWindowThreadProcessId函数。


-------------------------------------------------------- KeyWin32GetWindowText ----
GetWindowText    GetWindowText函数将指定窗口的标题栏（如果有）的文本复制到缓冲区中。如果指定的窗口是控件，将复制控件的文本。
语法
参数
【的hWnd】标识包含文本的窗口或控件。【lpString】指向将接收文本的缓冲区。【nMaxCount】指定要复制到缓冲区的最大字符数。如果文本超出此限制，则会被截断。
返回值
如果函


-------------------------------------------------------- KeyWin32GetWindowTextLength ----
GetWindowTextLength    GetWindowTextLength函数检索指定窗口标题栏文本的长度（如果窗口有标题栏）。如果指定的窗口是控件，则该函数将检索控件中文本的长度。
语法
参数
【的hWnd】标识窗口或控件。
返回值
如果函数成功，则返回值是文本的长度（以字符为单位）。在某些条件下，该值实际上可能大于文本的长度。有关详细信息，请参阅以下备注部分。如果窗口没有文本


-------------------------------------------------------- KeyWin32GetWindowThreadProcessId ----
GetWindowThreadProcessId    GetWindowThreadProcessId函数检索创建指定窗口的线程的标识符，以及可选地，创建窗口的进程的标识符。此函数取代GetWindowTask函数。
语法



-------------------------------------------------------- KeyWin32GetWindowWord ----
GetWindowWord    GetWindowWord函数以指定的偏移量将16位（字）值检索到指定窗口的额外窗口内存中。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要检索的值的基于零的字节偏移量。有效值的范围为零，通过额外的窗口内存的字节数减去2;例如，如果您指定了10个或更多字节


-------------------------------------------------------- KeyWin32GetWinMetaFileBits ----
GetWinMetaFileBits    GetWinMetaFileBits函数将增强格式记录从元文件转换为Windows格式记录，并将转换的记录存储在指定的缓冲区中。
语法
参数
【HEMF】识别增强的图元文件。【cbBuffer】指定要复制转换的记录的缓冲区的大小（以字节为单位）。【lpbBuffer】指向要复制转换记录的缓冲区。如果【lpbBuffer】为NULL


-------------------------------------------------------- KeyWin32GetWorldTransform ----
GetWorldTransform    GetWorldTransform函数检索当前的世界空间到页空间转换。
语法
参数
【HDC】标识设备上下文。【lpXform】指向XFORM结构的接收当前世界空间到页面空间转换的结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
如果应用


-------------------------------------------------------- KeyWin32GlobalAddAtom ----
GlobalAddAtom    GlobalAddAtom函数将一个字符串添加到全局原子表，并返回一个唯一的值（一个原子），用于标识字符串。
语法
参数
【lpString】指向要添加的以null结尾的字符串。该字符串的最大长度可以为255字节。仅在情况下不同的字符串被认为是相同的。添加到表中的该名称的第一个字符串的情况由GlobalGetA


-------------------------------------------------------- KeyWin32GlobalAlloc ----
GlobalAlloc    GlobalAlloc函数从堆中分配指定的字节数。在线性Win32 API环境中，本地堆和全局堆之间没有区别。
语法
参数
【uFlags】指定如何分配内存。如果指定为零，则默认值为GMEM_FIXED。除了特别注明的不兼容的组合外，还可以使用以下标志的任何组合。要指示函数是分配固定或可移动内存，请指定前四个标志


-------------------------------------------------------- KeyWin32GlobalCompact ----
GlobalCompact  GlobalCompact函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32GlobalDeleteAtom ----
GlobalDeleteAtom    GlobalDeleteAtom函数减少全局字符串原子的引用计数。如果原子的引用计数达到零，GlobalDeleteAtom将从全局原子表中删除与原子关联的字符串。
语法
参数
【纳多马斯】标识要删除的原子和字符串。
返回值
如果函数成功，返回值为零。如果函数失败，则返回值为【纳多马斯】参数。要获取扩展错误信息，请调用GetLastError.
描述
字符串


-------------------------------------------------------- KeyWin32GlobalDiscard ----
GlobalDiscard    GlobalDiscard函数会丢弃指定的全局内存块。内存对象的锁计数必须为零。
语法
参数
【Hglbmm】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，返回值就是内存对象的句柄。如果函数失败，返回值为NULL。要


-------------------------------------------------------- KeyWin32GlobalFindAtom ----
GlobalFindAtom    GlobalFindAtom函数在全局原子表中搜索指定的字符串，并检索与该字符串关联的全局原子。
语法
参数
【lpString】指向要搜索的以null结尾的字符串。
返回值
如果函数成功，则返回值是与给定字符串关联的全局原子。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyWin32GlobalFix ----
GlobalFix  GlobalFix函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用VirtualLock和VirtualUnlock函数。


-------------------------------------------------------- KeyWin32GlobalFlags ----
GlobalFlags    GlobalFlags函数返回有关指定的全局内存对象的信息。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，则返回值是一个32位值，用于指定内存对象的分配标志和锁计数。如果


-------------------------------------------------------- KeyWin32GlobalFree ----
GlobalFree    GlobalFree函数释放指定的全局内存对象并使其句柄无效。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，返回值为NULL。如果函数失败，返回值等于全局内存对象的句柄。要


-------------------------------------------------------- KeyWin32GlobalGetAtomName ----
GlobalGetAtomName    GlobalGetAtomName函数检索与指定的全局原子相关联的字符串的副本。
语法
参数
【纳多马斯】标识与要检索的字符串相关联的全局原子。【lpBuffer】指向字符串的缓冲区。【服务提供商】指定缓冲区的大小（以字符为单位）。
返回值
如果函数成功，则返回值是复制到缓冲区的


-------------------------------------------------------- KeyWin32GlobalHandle ----
GlobalHandle    GlobalHandle函数检索与指定的指针关联到全局内存块的句柄。
语法
参数
【PME?】指向全局内存块的第一个字节。该指针由GlobalLock函数返回。
返回值
如果函数成功，则返回值是指定的全局内存对象的句柄。如果函数失败，返回值为NULL。要获取扩展错误信


-------------------------------------------------------- KeyWin32GlobalLock ----
GlobalLock    GlobalLock函数锁定全局内存对象，并返回指向对象内存块第一个字节的指针。与锁定的存储器对象相关联的存储器块不能被移动或丢弃。对于使用GMEM_MOVEABLE标志分配的内存对象，该函数会增加与内存对象关联的锁定计数。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，则返回值是指向内存块第一个字节的指针。如果函数失败，返回值为NU


-------------------------------------------------------- KeyWin32GlobalLRUNewest ----
GlobalLRUNewest  GlobalLRUNewest函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用VirtualLock和VirtualUnlock函数。


-------------------------------------------------------- KeyWin32GlobalLRUOldest ----
GlobalLRUOldest  GlobalLRUOldest函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用VirtualLock和VirtualUnlock函数。


-------------------------------------------------------- KeyWin32GlobalMemoryStatus ----
GlobalMemoryStatus    GlobalMemoryStatus函数检索有关当前可用内存的信息。该函数返回有关物理和虚拟内存的信息。此函数取代GetFreeSpace函数。
语法
参数
【lpBuffer】指向MEMORYSTATUS结构，其中返回有关当前内存可用性的信息。在调用此函数之前，调用进程应设置此结构的dwLength成员。
返回值
此函数不返回值。
描述



-------------------------------------------------------- KeyWin32GlobalReAlloc ----
GlobalReAlloc    GlobalReAlloc函数更改指定的全局内存对象的大小或属性。尺寸可以增减。
语法
参数
【HMEM】标识要重新分配的全局内存对象。该句柄由GlobalAlloc或GlobalReAlloc函数返回。【dwBytes】指定内存块的新大小（以字节为单位）。如果此参数为零，并且【uF


-------------------------------------------------------- KeyWin32GlobalSize ----
GlobalSize    GlobalSize函数检索指定的全局内存对象的当前大小（以字节为单位）。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果函数成功，则返回值是指定的全局内存对象的大小（以字节为单位）。如果指定的句


-------------------------------------------------------- KeyWin32GlobalUnfix ----
GlobalUnfix  GlobalUnfix函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32GlobalUnlock ----
GlobalUnlock    GlobalUnlock函数减少与使用GMEM_MOVEABLE标志分配的内存对象关联的锁定计数。此函数对使用GMEM_FIXED标志分配的内存对象没有影响。
语法
参数
【HMEM】标识全局内存对象。该手柄由GlobalAlloc或GlobalReAlloc函数返回。
返回值
如果内存对象在递减锁定计数后仍然被锁定，则返回值为非零值。如果函数失败，返回值


-------------------------------------------------------- KeyWin32GlobalUnWire ----
GlobalUnWire  GlobalUnWire函数已过时。需要锁定全局内存对象的应用程序应使用GlobalLock和GlobalUnlock函数。此函数仅用于与16位版本的Windows兼容。新的基于Win32的应用程序不应该使用此函数。


-------------------------------------------------------- KeyWin32GlobalWire ----
GlobalWire  GlobalWire函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用GlobalLock和GlobalUnlock函数。


-------------------------------------------------------- KeyWin32GrayString ----
GrayString    GrayString函数在指定位置绘制灰色文本。该函数通过将文本复制到内存位图中，使位图变灰，然后将位图复制到屏幕来绘制文本。无论选定的画笔和背景如何，该函数都会灰化文本。GrayString使用当前为指定的设备上下文选择的字体。如果【lpOutputFunc】参数为NULL，则GDI使用TextOut函数，并且【的lpData】参数被假定为要输出的字符串的指针。如果要输出的字符不能由TextOut处理（例如，字符串作为位图存储），应用程序必须提供自己的输出函数。
语法
参数
【hDC】标识设备上下文。【HBRUSH】标识用于变灰的画笔。如果此参数为NULL，则文本将与用于绘制窗口文本的相同画笔呈灰色。【lpOutputFunc】指向将绘制字符串的应用程序定义的函


-------------------------------------------------------- KeyWin32Handler ----
{处理程序} 999796002    处理器函数是服务进程指定为特定服务的控制处理函数的函数。该函数可以有任何应用程序定义的名称。VOID WINAPI处理程序DWORD 【fdwControl】//请求控制代码);
参数
【fdwControl】表示所请求的控制代码。该值可以是表中的标准控制代码之一，也可以是128到255范围内的用户定义的控制代码。对于用户定义的控制代码，服务定义与控制代码相关联的操作。值含


-------------------------------------------------------- KeyWin32HandlerRoutine ----
HandlerRoutine    一个HandlerRoutine函数是控制台进程指定的一个函数来处理进程接收到的控制信号。该函数可以有任何名称。
语法
参数
【dwCtrlType】指示处理程序接收到的控制信号的类型。此值为以下之一：信号描述CTRL_C_EVENT从键盘输入或由GenerateConsoleCtrlEvent函数生成的信号接收到


-------------------------------------------------------- KeyWin32HeapAlloc ----
HeapAlloc    HeapAlloc函数从堆中分配一个内存块。分配的内存不可移动。
语法
参数
【hHeap】指定将从其分配内存的堆。此参数是由HeapCreate或GetProcessHeap函数返回的句柄。【dwFlags中】指定堆分配的几个可控方面。指定任何这些标志将覆盖使用He


-------------------------------------------------------- KeyWin32HeapCompact ----
HeapCompact    HeapCompact函数尝试压缩指定的堆。它通过合并相邻的空闲内存块来压缩堆，并且消除大的可用内存块。
语法
参数
【hHeap】处理堆的函数将尝试压缩。【dwFlags中】在函数操作期间控制堆访问的一组位标志。以下位标志有意义：值含义HEAP_NO_SERIALIZE如果设置此标志，则HeapCompa


-------------------------------------------------------- KeyWin32HeapCreate ----
HeapCreate    HeapCreate函数创建一个可以由调用进程使用的堆对象。该函数在进程的虚拟地址空间中保留一个连续的块，并为此块的指定初始部分分配物理存储。
语法
参数
【flOptions】指定新堆的可选属性。这些标志将通过调用堆函数（HeapAlloc，HeapFree，HeapReAlloc和HeapSize）来影响对新堆的后续访问。您可以指定以下一个


-------------------------------------------------------- KeyWin32HeapDestroy ----
HeapDestroy    HeapDestroy函数会销毁指定的堆对象。HeapDestroy解除并释放专用堆对象的所有页面，并使堆的句柄无效。
语法
参数
【hHeap】指定要销毁的堆。该参数应该是由HeapCreate函数返回的堆处理。不应使用GetProcessHeap函数返回的堆处理。
返回值
如果函数成功，返回值不为零。如果函数失败


-------------------------------------------------------- KeyWin32HeapLock ----
HeapLock    HeapLock函数尝试获取与指定堆相关联的关键部分对象或锁定。如果函数成功，调用线程拥有堆锁。只有调用线程才能从堆中分配或释放内存。如果该线程尝试从堆中分配或释放内存，则调用进程的任何其他线程的执行将被阻止。这样的线程将保持阻塞，直到拥有堆锁的线程调用HeapUnlock 函数。
语法
参数
【hHeap】处理堆以锁定调用线程的独占访问。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
HeapLo


-------------------------------------------------------- KeyWin32HeapReAlloc ----
HeapReAlloc    HeapReAlloc函数从堆中重新分配一块内存。此函数使您可以调整内存块大小并更改其他内存块属性。分配的内存不可移动。
语法
参数
【hHeap】指定将重新分配内存的堆。这是由HeapCreate或GetProcessHeap函数返回的句柄。【dwFlags中】指定堆重新分配的几个可控方面。当使用HeapCreate函数


-------------------------------------------------------- KeyWin32HeapSize ----
HeapSize    HeapSize函数返回由HeapAlloc或HeapReAlloc函数从堆分配的内存块的大小（以字节为单位）。
语法
参数
【hHeap】指定内存块所在的堆。该句柄由HeapCreate或GetProcessHeap函数返回。【dwFlags中】指定访问内存块的几个可控方面。目前只有一个标志被定义;然而，所有其他


-------------------------------------------------------- KeyWin32HeapUnlock ----
HeapUnlock    HeapUnlock函数释放与指定堆相关联的关键部分对象或锁定的所有权。HeapUnlock函数可以反转HeapLock 函数的动作。
语法
参数
【hHeap】处理堆堆解锁。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
HeapLock函数主要用于在


-------------------------------------------------------- KeyWin32HeapValidate ----
HeapValidate    HeapValidate函数尝试验证指定的堆。该函数扫描堆中的所有内存块，并验证操作系统的堆管理器维护的堆控制结构是否处于一致状态。您也可以使用HeapValidate函数来验证指定堆中的单个内存块，而不检查整个堆的有效性。
语法
参数
【hHeap】处理感兴趣的堆。HeapValidate函数尝试验证此堆或此堆内的单个内存块。【dwFlags中】在函数操作期间控制堆访问的一组位标志。以下位标志有意义：值含义HEAP_NO_


-------------------------------------------------------- KeyWin32HeapWalk ----
HeapWalk    HeapWalk函数枚举指定堆中的内存块。
语法
参数
【hHeap】处理到要记录的内存块的堆中。【dwFlags中】指向维护特定堆枚举的状态信息的PROCESS_HEAP_ENTRY 结构。如果HeapWalk函数成功，则返回值TRUE，此结构


-------------------------------------------------------- KeyWin32HideCaret ----
HideCaret    HideCaret函数从屏幕中删除插入符号。隐藏插入符号不会破坏其当前形状或使插入点无效。
语法
参数
【的hWnd】标识拥有插入符号的窗口。如果此参数为NULL，则HideCaret将搜索具有插入符号的窗口的当前任务。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取


-------------------------------------------------------- KeyWin32HiliteMenuItem ----
HiliteMenuItem    HiliteMenuItem函数突出显示或删除菜单栏中项目的突出显示。
语法
参数
【HWND】标识包含菜单的窗口。【HMENU】标识包含要突出显示的项目的菜单栏。【uItemHilite】指定要突出显示的菜单项。此参数是菜单项的标识符或菜单栏中菜单项的偏移量，具体取决于【


-------------------------------------------------------- KeyWin32ImageList_Add ----
ImageList_Add    ImageList_Add函数将图像或图像添加到图像列表。
语法
参数
【HIML】处理图像列表。【hbmImagexh】处理包含图像或图像的位图。从位图的宽度推断图像的数量。【hbmMask】处理包含掩码的位图。如果图像列表中没有使用掩码，则忽略该参数。
返


-------------------------------------------------------- KeyWin32ImageList_AddMasked ----
ImageList_AddMasked    ImageList_AddMasked函数将图像或图像添加到图像列表，从指定的位图生成蒙版。
语法
参数
【HIML】处理图像列表。【hbmImagexh】处理包含一个或多个图像的位图。从位图的宽度推断图像的数量。【crMask】用于生成面具的颜色。指定位图中此颜色的每个像素都变为黑色，掩码中的


-------------------------------------------------------- KeyWin32ImageList_BeginDrag ----
ImageList_BeginDrag    ImageList_BeginDrag函数开始拖动图像。
语法
参数
【himlTrack】处理图像列表。【iTrack】索引要拖动的图像。【dxHotspot】和【dyHotspot】拖动位置相对于图像左上角的位置。
返回值
如果函数成功，返回值不为零。


-------------------------------------------------------- KeyWin32ImageList_Create ----
ImageList_Create    ImageList_Create函数创建一个新的图像列表。
语法



-------------------------------------------------------- KeyWin32ImageList_Destroy ----
ImageList_Destroy    ImageList_Destroy函数会销毁图像列表。
语法



-------------------------------------------------------- KeyWin32ImageList_DragEnter ----
ImageList_DragEnter    ImageList_DragEnter函数在拖动操作期间将更新锁定到指定的窗口，并将拖动图像显示在窗口中的指定位置。
语法
参数
【hwndLock】处理拥有拖动图像的窗口。【x】指定显示拖动图像的x坐标。坐标相对于窗口的左上角，而不是客户区。【y】指定显示拖动图像的y坐标。坐标相对于窗口的左上角，而不是客户区。
返


-------------------------------------------------------- KeyWin32ImageList_DragLeave ----
ImageList_DragLeave    ImageList_DragLeave函数解锁指定的窗口并隐藏拖动图像，允许更新窗口。
语法



-------------------------------------------------------- KeyWin32ImageList_DragMove ----
ImageList_DragMove    ImageList_DragMove函数在拖放操作期间移动正在拖动的图像。此函数通常响应于WM_MOUSEMOVE消息而被调用。
语法
参数
【x】指定显示拖动图像的x坐标。坐标相对于窗口的左上角，而不是客户区。【y】指定显示拖动图像的y坐标。坐标相对于窗口的左上角，而不是客户区。
返回值
如果函数成功，返回值不为零。如果函数


-------------------------------------------------------- KeyWin32ImageList_DragShowNolock ----
ImageList_DragShowNolock    ImageList_DragShowNolock函数显示或隐藏正在拖动的图像。
语法



-------------------------------------------------------- KeyWin32ImageList_Draw ----
ImageList_Draw    ImageList_Draw函数在指定的设备上下文中绘制一个图像列表项。
语法



-------------------------------------------------------- KeyWin32ImageList_DrawEx ----
ImageList_DrawEx    ImageList_DrawEx函数在指定的设备上下文中绘制一个图像列表项。该函数使用指定的绘图样式并将图像与指定的颜色混合。
语法
参数
【HIML】处理图像列表【i】要绘制的图像的索引。【hdcDst】处理目标设备上下文。【x】指定在指定的设备上下文中绘制的x坐标。【y】指定在指定的设备上下文中绘制的y坐标。【dx】指定要绘


-------------------------------------------------------- KeyWin32ImageList_EndDrag ----
ImageList_EndDrag    ImageList_EndDrag函数结束拖动操作。BOOL ImageList_EndDrag(VOID)
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyWin32ImageList_ExtractIcon ----
ImageList_ExtractIcon    ImageList_ExtractIcon函数根据图像列表中的图像和掩码创建一个图标或光标。ImageList_ExtractIcon是一个调用ImageList_GetIcon函数的宏。
语法
参数
【hi】Ignored; set to zero.【HIML】处理图像列表。【i】图像索引
返回值
如果函数成功，则返回值是图标或光标的句柄。如果函数失败，返回值为NULL。



-------------------------------------------------------- KeyWin32ImageList_GetBkColor ----
ImageList_GetBkColor    ImageList_GetBkColor函数检索图像列表的当前背景颜色。
语法



-------------------------------------------------------- KeyWin32ImageList_GetDragImage ----
ImageList_GetDragImage    ImageList_GetDragImage函数检索用于拖动图像的临时图像列表。该函数还检索当前拖动位置，以及拖动图像相对于拖动位置的偏移量。
语法
参数
【PPT】指向接收当前拖动位置的POINT结构的指针。可以为NULL。【pptHotSpot】指向POINT结构的指针，该结构接收拖动图像相对于拖动位置的偏移量。可以为NULL。
返回值



-------------------------------------------------------- KeyWin32ImageList_GetIcon ----
ImageList_GetIcon    ImageList_GetIcon函数根据图像列表中的图像和掩码创建一个图标或光标。
语法
参数
【HIML】处理图像列表。【i】图像索引【旗】组合指定绘图样式的标志。有关值列表，请参阅ImageList_Draw函数的说明。
返回值
如果函数成功，则返回值是图标或光标的句柄。如果函


-------------------------------------------------------- KeyWin32ImageList_GetIconSize ----
ImageList_GetIconSize    ImageList_GetIconSize函数检索图像列表中图像的尺寸。图像列表中的所有图像具有相同的尺寸。
语法



-------------------------------------------------------- KeyWin32ImageList_GetImageCount ----
ImageList_GetImageCount    ImageList_GetImageCount函数检索图像列表中的图像数。
语法



-------------------------------------------------------- KeyWin32ImageList_GetImageInfo ----
ImageList_GetImageInfo    ImageList_GetImageInfo函数检索有关图像的信息。
语法
参数
【HIML】处理图像列表。【i】图像索引【pImageInfo】指向IMAGEINFO结构的指针，可以接收有关图像的信息。该结构中的信息可用于直接操作图像的位图。
返回值
如果函数成功，


-------------------------------------------------------- KeyWin32ImageList_LoadBitmap ----
ImageList_LoadBitmap    ImageList_LoadBitmap函数从指定的位图资源创建一个图像列表。ImageList_LoadBitmap是一个调用ImageList_LoadImage函数的宏。
语法
参数
【hi】处理包含位图资源的实例。【lpbmp】资源名称【cx】每张图片的宽度。每个图像的高度和图像的初始数量都由指定位图的尺寸推断。【cGrow】当系统需要调整列表大小以为新图像腾出空间时，


-------------------------------------------------------- KeyWin32ImageList_LoadImage ----
ImageList_LoadImage    ImageList_LoadImage函数从指定的位图，光标或图标资源创建一个图像列表。
语法
参数
【hi】处理包含资源的实例。如果【hi】参数为零，则此参数的低位字必须是要加载的OEM映像的标识符。OEM图像标识符在WINUSER.H中定义。以下是标识符前缀及其含义：字首含义OBM_OE


-------------------------------------------------------- KeyWin32ImageList_Merge ----
ImageList_Merge    ImageList_Merge函数通过组合两个现有图像创建新图像。该函数还创建一个新的图像列表来存储图像。
语法



-------------------------------------------------------- KeyWin32ImageList_Read ----
ImageList_Read    ImageList_Read函数从流中读取图像列表。
语法



-------------------------------------------------------- KeyWin32ImageList_Remove ----
ImageList_Remove    ImageList_Remove函数从图像列表中删除图像。
语法



-------------------------------------------------------- KeyWin32ImageList_Replace ----
ImageList_Replace    ImageList_Replace函数用图像替换图像列表中的图像。
语法
参数
【HIML】处理图像列表。【i】要替换的图像的索引。【hbmImagexh】处理包含图像的位图。【hbmMask】处理包含掩码的位图。如果图像列表中没有使用掩码，则忽略该参数。
返回值



-------------------------------------------------------- KeyWin32ImageList_ReplaceIcon ----
ImageList_ReplaceIcon    ImageList_ReplaceIcon函数用图标或光标替换图像。
语法
参数
【HIML】处理图像列表。【i】要替换的图像的索引。【HICON】处理包含新图像的位图和掩码的图标或光标。
返回值
如果函数成功，则返回值是图像的索引。如果函数失败，返回值为-1。
描


-------------------------------------------------------- KeyWin32ImageList_SetBkColor ----
ImageList_SetBkColor    ImageList_SetBkColor函数设置图像列表的背景颜色。
语法



-------------------------------------------------------- KeyWin32ImageList_SetDragCursorImage ----
ImageList_SetDragCursorImage    ImageList_SetDragCursorImage函数通过将指定的图像（通常是鼠标光标图像）与当前拖动图像组合来创建新的拖动图像。
语法



-------------------------------------------------------- KeyWin32ImageList_SetIconSize ----
ImageList_SetIconSize    ImageList_SetIconSize函数设置图像列表中图像的尺寸，并从列表中删除所有图像。
语法



-------------------------------------------------------- KeyWin32ImageList_SetOverlayImage ----
ImageList_SetOverlayImage    ImageList_SetOverlayImage函数将图像的索引添加到要用作叠加掩码的图像列表中。列表中最多可添加四个索引。
语法
参数
【HIML】处理图像列表。【图像】图像用作覆盖蒙版。【iOverlay】叠加掩码的一个索引。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
覆盖蒙版是在另一个


-------------------------------------------------------- KeyWin32ImageList_Write ----
ImageList_Write    ImageList_Write函数将图像列表写入流。
语法



-------------------------------------------------------- KeyWin32ImmAssociateContext ----
ImmAssociateContext    [Now Supported on Windows NT]ImmAssociateContext函数将指定的输入上下文与指定的窗口相关联。如果【hIMC】为NULL，该函数将删除窗口可能与输入上下文的任何关联。默认情况下，系统会将默认输入上下文与创建的每个窗口相关联。
语法



-------------------------------------------------------- KeyWin32ImmConfigureIME ----
ImmConfigureIME    [Now Supported on Windows NT]ImmConfigureIME函数显示IME的配置对话框。
语法



-------------------------------------------------------- KeyWin32ImmCreateContext ----
ImmCreateContext    [Now Supported on Windows NT]ImmCreateContext函数创建一个新的输入上下文，为上下文分配内存并进行初始化。应用程序调用此函数来准备其自己的输入上下文。HIMC ImmCreateContext(void);
返回值
如果函数成功，则返回值是新输入上下文的句柄。如果函数失败，返回值为NULL。


-------------------------------------------------------- KeyWin32ImmDestroyContext ----
ImmDestroyContext    [Now Supported on Windows NT]ImmDestroyContext函数释放输入上下文，并释放与之相关联的任何内存。
语法
参数
【hIMC】处理输入上下文以释放。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。
描述
使用ImmCreateContext函数创建输入上下文的任何应用程序都必


-------------------------------------------------------- KeyWin32ImmEnumRegisterWord ----
ImmEnumRegisterWord    [Now Supported on Windows NT]ImmEnumRegisterWord函数枚举具有指定读取字符串，样式和寄存器字符串的寄存器字符串。
语法
参数
【hKL】处理键盘布局。【lpfnEnumProc】指向回调函数。有关更多信息，请参阅EnumRegisterWordProc.【lpszReading】指向要列举的阅读字符串。如果为NUL


-------------------------------------------------------- KeyWin32ImmEscape ----
ImmEscape    [Now Supported on Windows NT]ImmEscape函数执行IME特定的子函数，主要用于国家/地区的函数。
语法



-------------------------------------------------------- KeyWin32ImmGetCandidateList ----
ImmGetCandidateList    [Now Supported on Windows NT]ImmGetCandidateList函数检索指定的候选列表，将列表复制到指定的缓冲区。
语法
参数
【hIMC】处理输入上下文。【deIndex】基于零的候选人名单索引。【lpCandList】指向接收候选列表的CANDIDATELIST结构的指针。【dwBufLen】缓冲区的大小，以字节


-------------------------------------------------------- KeyWin32ImmGetCandidateListCount ----
ImmGetCandidateListCount    [Now Supported on Windows NT]ImmGetCandidateListCount函数检索候选列表的大小（以字节为单位）。
语法
参数
【hIMC】处理输入上下文。【lpdwListCount】指向接收候选列表大小的32位变量的指针。
返回值
返回接收所有候选列表所需的字节数。
描述
响应于IMN_OPENCANDI


-------------------------------------------------------- KeyWin32ImmGetCandidateWindow ----
ImmGetCandidateWindow    [Now Supported on Windows NT]ImmGetCandidateWindow函数获取有关候选列表窗口的信息。
语法
参数
【hIMC】处理输入上下文。【dwBufLen】接收信息的缓冲区的大小（以字节为单位）。【lpCandidate】指向CANDIDATEFORM结构的指针，可以接收有关候选窗口的信息。
返


-------------------------------------------------------- KeyWin32ImmGetCompositionFont ----
ImmGetCompositionFont    [Now Supported on Windows NT]ImmGetCompositionFont函数检索有关当前用于在合成窗口中显示字符的逻辑字体的信息。
语法
参数
【hIMC】处理输入上下文。【lplf】指向接收字体信息的LOGFONT结构的指针。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32ImmGetCompositionString ----
ImmGetCompositionString    [Now Supported on Windows NT]ImmGetCompositionString函数检索有关组合字符串的信息。
语法
参数
【hIMC】处理输入上下文。【dwIndex】要检索的信息的索引。该参数可以是输入法编辑器常量中“IME Composition String Values”表中给出的值之一。对于除GCS_


-------------------------------------------------------- KeyWin32ImmGetCompositionWindow ----
ImmGetCompositionWindow    [Now Supported on Windows NT]ImmGetCompositionWindow函数获取有关组合窗口的信息。
语法
参数
【hIMC】处理输入上下文。【lpCompForm】指向COMPOSITIONFORM结构的指针，该结构接收有关组合窗口的信息。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返


-------------------------------------------------------- KeyWin32ImmGetContext ----
ImmGetContext    [Now Supported on Windows NT]ImmGetContext函数检索与指定窗口相关联的输入上下文。
语法



-------------------------------------------------------- KeyWin32ImmGetConversionList ----
ImmGetConversionList    [Now Supported on Windows NT]ImmGetConversionList函数从一个字符或单词中检索字符或单词的列表。
语法
参数
【hKL】处理键盘布局。【hIMC】处理输入上下文。【lpSrc】指向空终止字符串的指针。【Pointer to a null-terminated character string.】指向


-------------------------------------------------------- KeyWin32ImmGetConversionStatus ----
ImmGetConversionStatus    [Now Supported on Windows NT]ImmGetConversionStatus函数获取当前的转换状态。
语法



-------------------------------------------------------- KeyWin32ImmGetDefaultIMEWnd ----
ImmGetDefaultIMEWnd    [Now Supported on Windows NT]ImmGetDefaultIMEWnd函数获取IME类的默认窗口句柄。
语法
参数
【的hWnd】处理窗口的应用程序。
返回值
如果函数成功，则返回值是IME类的默认窗口句柄。如果函数失败，返回值为NULL。
描述
系统为每个线程创建一个默认的IME窗口。IME窗口


-------------------------------------------------------- KeyWin32ImmGetDescription ----
ImmGetDescription    [Now Supported on Windows NT]ImmGetDescription函数将IME的描述复制到指定的缓冲区。
语法



-------------------------------------------------------- KeyWin32ImmGetGuideLine ----
ImmGetGuideLine    [Now Supported on Windows NT]ImmGetGuideLine函数获取有关错误的信息。应用程序使用该信息通知用户。
语法



-------------------------------------------------------- KeyWin32ImmGetIMEFileName ----
ImmGetIMEFileName    [Now Supported on Windows NT]ImmGetIMEFileName函数获取与指定键盘布局相关联的IME的文件名。
语法



-------------------------------------------------------- KeyWin32ImmGetOpenStatus ----
ImmGetOpenStatus    [Now Supported on Windows NT]ImmGetOpenStatus函数检查IME是打开还是关闭。
语法



-------------------------------------------------------- KeyWin32ImmGetProperty ----
ImmGetProperty    [Now Supported on Windows NT]ImmGetProperty函数获取与指定键盘布局相关联的IME的属性和函数。
语法



-------------------------------------------------------- KeyWin32ImmGetRegisterWordStyle ----
ImmGetRegisterWordStyle    [Now Supported on Windows NT]ImmGetRegisterWordStyle函数获取与指定键盘布局相关联的IME支持的样式列表。
语法
参数
【hKL】处理键盘布局。【有限la】缓冲区可容纳的最大样式数。【lpStyleBuf】指向接收样式信息的STYLEBUF结构的指针。
返回值
返回值是复制到缓冲区的布局句柄的数量，或者如


-------------------------------------------------------- KeyWin32ImmGetStatusWindowPos ----
ImmGetStatusWindowPos    [Now Supported on Windows NT]ImmGetStatusWindowPos函数获取状态窗口的位置。
语法
参数
【hIMC】处理输入上下文。【同步读取操作期间的文件结束测试很简单，如下例所示：】指向接收位置坐标的POINT结构的指针。这些是相对于屏幕左上角的屏幕坐标。
返回值
如果函数成功，则返回


-------------------------------------------------------- KeyWin32ImmGetVirtualKey ----
ImmGetVirtualKey    [Now Supported on Windows NT]ImmGetVirtualKey函数恢复与已经由IME处理的密钥输入消息相关联的原始虚拟键值。
语法



-------------------------------------------------------- KeyWin32ImmInstallIME ----
ImmInstallIME    [Now Supported on Windows NT]ImmInstallIME函数将IME安装到系统中。
语法



-------------------------------------------------------- KeyWin32ImmIsIME ----
ImmIsIME    [Now Supported on Windows NT]ImmIsIME函数检查指定的句柄是否识别IME。
语法



-------------------------------------------------------- KeyWin32ImmIsUIMessage ----
ImmIsUIMessage    [Now Supported on Windows NT]ImmIsUIMessage函数检查用于IME窗口的消息，并将这些消息发送到指定的窗口。
语法



-------------------------------------------------------- KeyWin32ImmNotifyIME ----
ImmNotifyIME    [Now Supported on Windows NT]ImmNotifyIME函数通知IME有关输入上下文状态的更改。
语法



-------------------------------------------------------- KeyWin32ImmRegisterWord ----
ImmRegisterWord    [Now Supported on Windows NT]ImmRegisterWord函数将字符串注册到与指定键盘布局相关联的IME的字典中。
语法



-------------------------------------------------------- KeyWin32ImmReleaseContext ----
ImmReleaseContext    [Now Supported on Windows NT]ImmReleaseContext函数释放输入上下文并解锁上下文中相关的内存。对于ImmGetContext函数的每次调用，应用程序都必须调用此函数。
语法
参数
【的hWnd】处理到之前检索到输入上下文的窗口。【hIMC】处理输入上下文。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32ImmSetCandidateWindow ----
ImmSetCandidateWindow    [Now Supported on Windows NT]ImmSetCandidateWindow函数设置有关候选列表窗口的信息。
语法
参数
【hIMC】处理输入上下文。【lpCandidate】指向CANDIDATEFORM结构的指针，其中包含有关候选窗口的信息。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值


-------------------------------------------------------- KeyWin32ImmSetCompositionFont ----
ImmSetCompositionFont    [Now Supported on Windows NT]ImmSetCompositionFont函数设置用于在合成窗口中显示字符的逻辑字体。
语法
参数
【hIMC】处理输入上下文。【lplf】指向包含要设置的字体信息的LOGFONT结构。
返回值
如果函数成功，则返回值为非零值。如果函数失败，返回值为零。
描述
即使应用程序从不使用


-------------------------------------------------------- KeyWin32ImmSetCompositionString ----
ImmSetCompositionString    [Now Supported on Windows NT]ImmSetCompositionString函数设置组合和读取字符串的字符，属性和子句。
语法
参数
【hIMC】处理输入上下文。【dwIndex】要设置的信息类型。此参数可以是以下值之一：值含义SCS_SETSTR设置组合字符串，读取字符串或两者。【lpComp】和【lpReadga】参数


-------------------------------------------------------- KeyWin32ImmSetCompositionWindow ----
ImmSetCompositionWindow    [Now Supported on Windows NT]ImmSetCompositionWindow函数设置组合窗口的位置。
语法
参数
【hIMC】处理输入上下文。【lpCompForm】指向包含新位置的COMPOSITIONFORM结构以及有关组合窗口的其他相关信息。
返回值
如果函数成功，则返回值为非零值。如果函数失


-------------------------------------------------------- KeyWin32ImmSetConversionStatus ----
ImmSetConversionStatus    [Now Supported on Windows NT]ImmSetConversionStatus函数设置当前的转换状态。
语法



-------------------------------------------------------- KeyWin32ImmSetOpenStatus ----
ImmSetOpenStatus    [Now Supported on Windows NT]ImmSetOpenStatus函数打开或关闭IME。
语法
参数
【hIMC】处理输入上下文。【FOPEN】Open flag. If TRUE, the IME is opened; otherwise, it is closed.
返回值
如果函数


-------------------------------------------------------- KeyWin32ImmSetStatusWindowPos ----
ImmSetStatusWindowPos    [Now Supported on Windows NT]ImmSetStatusWindowPos函数设置状态窗口的位置。
语法
参数
【hIMC】处理输入上下文。【同步读取操作期间的文件结束测试很简单，如下例所示：】指向POINT结构的指针，可以接收状态窗口的新位置。
返回值
如果函数成功，则返回值为非零值。如果函数失


-------------------------------------------------------- KeyWin32ImmSimulateHotKey ----
ImmSimulateHotKey    [Now Supported on Windows NT]ImmSimulateHotKey函数模拟指定的IME热键，导致与用户在指定窗口中按下热键相同的响应。
语法



-------------------------------------------------------- KeyWin32ImmUnregisterWord ----
ImmUnregisterWord    [Now Supported on Windows NT]ImmUnregisterWord函数从与指定键盘布局相关联的IME的字典中删除注册字符串。
语法



-------------------------------------------------------- KeyWin32ImpersonateDdeClientWindow ----
ImpersonateDdeClientWindow    ImpersonateDdeClientWindow函数使DDE服务器应用程序能够模拟DDE客户端应用程序的安全上下文，以保护安全的服务器数据免遭未经授权的DDE客户端。
语法
参数
【hWndClient】标识要模拟的DDE客户端窗口。客户端窗口必须与由【hWndServer】参数标识的服务器窗口建立DDE会话。【hWndServer】标识DDE服务器窗口。在调用此函数


-------------------------------------------------------- KeyWin32ImpersonateLoggedOnUser ----
ImpersonateLoggedOnUser    ImpersonateLoggedOnUser函数允许调用线程模仿一个用户。用户由令牌句柄表示。
语法
参数
【hToken】处理代表登录用户的主要或模拟访问令牌。这可以是通过调用LogonUser，DuplicateToken，DuplicateTokenEx，OpenProcessToken或O


-------------------------------------------------------- KeyWin32ImpersonateNamedPipeClient ----
ImpersonateNamedPipeClient    ImpersonateNamedPipeClient函数模拟命名管道客户端应用程序。
语法
参数
【hNamedPipe】标识一个命名管道。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError函数。
描述
Impers


-------------------------------------------------------- KeyWin32ImpersonateSelf ----
ImpersonateSelf    ImpersonateSelf函数获取模拟调用进程的安全上下文的访问令牌。令牌被分配给调用线程。
语法
参数
【ImpersonationLevel】指定一个SECURITY_IMPERSONATION_LEVEL枚举类型，提供新令牌的模拟级别。
返回值
如果函数成功，返回值不为零。如果函数失败


-------------------------------------------------------- KeyWin32InflateRect ----
InflateRect    InflateRect函数可以增加或减小指定矩形的宽度和高度。InflateRect函数将【dy】单位添加到矩形的左侧和右侧，并将【dy】单位添加到顶部和底部。【dx】和【dy】参数是有符号值;正值增加宽度和高度，负值减小。
语法
参数
【LPRC】指向尺寸增加或减小的RECT结构。【dx】指定增加或减少矩形宽度的数量。该参数必须为负值才能减小宽度。【dy】指定增加或减少矩形高度的数量。该参数必须为负值才能降低高度。
返回


-------------------------------------------------------- KeyWin32InitAtomTable ----
InitAtomTable    InitAtomTable函数初始化本地原子表并将其设置为指定的大小。
语法
参数
【服务提供商】指定原子表的表条目中的大小。该值应该是素数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
应用程序不需要使用此函数来使用本地atom表。本地和


-------------------------------------------------------- KeyWin32InitCommonControls ----
InitCommonControls    InitCommonControls函数可确保加载公共控制动态链接库（DLL）。void InitCommonControls(VOID);
返回值
此函数不返回值。


-------------------------------------------------------- KeyWin32InitializeAcl ----
InitializeAcl    InitializeAcl函数创建一个新的ACL结构。ACL是访问控制列表。
语法
参数
【ACL】指向由此函数初始化的ACL结构。【nAclLength】指定【ACL】参数指向的缓冲区的长度（以字节为单位）。该值必须足够大以包含ACL头和所有访问控制条目（ACE）存储在ACL中


-------------------------------------------------------- KeyWin32InitializeCriticalSection ----
InitializeCriticalSection    InitializeCriticalSection函数初始化一个关键部分对象。
语法
参数
【lpCriticalSection】指向临界区对象。
返回值
此函数不返回值。
描述
单个进程的线程可以使用关键部分对象进行互斥同步。该过程负责分配关键部分对象使用的内存，该对象可


-------------------------------------------------------- KeyWin32InitializeSecurityDescriptor ----
InitializeSecurityDescriptor    InitializeSecurityDescriptor函数初始化一个新的安全描述符。
语法
参数
【pSecurityDescriptor】指向函数初始化的SECURITY_DESCRIPTOR结构。【dwRevision】指定要分配给安全描述符的修订级别。这必须是SECURITY_DE


-------------------------------------------------------- KeyWin32InitializeSid ----
InitializeSid    InitializeSid函数初始化SID结构。SID是安全标识符。
语法
参数
【希德】指向要初始化的SID结构。【pIdentifierAuthority】指向要设置SID结构的SID_IDENTIFIER_AUTHORITY结构。【nSubAuthorityCoun


-------------------------------------------------------- KeyWin32InitiateSystemShutdown ----
InitiateSystemShutdown    InitiateSystemShutdown函数启动指定计算机的关机和可选重新启动。
语法
参数
【lpMachineName】指向以空值终止的字符串，指定要关闭的计算机的网络名称。如果【lpMachineName】为NULL或指向空字符串，该函数将关闭本地计算机。【// address


-------------------------------------------------------- KeyWin32InSendMessage ----
InSendMessage    InSendMessage函数指定当前窗口过程是否正在处理通过调用SendMessage函数从另一个线程发送的消息。
语法
参数
此函数无参数。
返回值
如果窗口过程使用SendMessage函数处理从另一个线程发送的消息，则返回值不为零。如果窗口过程没有使用SendMessage函数处理从另一个线程发送的消息，返


-------------------------------------------------------- KeyWin32InsertMenu ----
InsertMenu    InsertMenu函数将一个新的菜单项插入菜单，将其他项目向下移动到菜单中。InsertMenuItem函数已被InsertMenuItem函数取代。但是，如果您不需要InsertMenuItem的任何扩展函数，您仍然可以使用InsertMenu.
语法
参数
【HMENU】标识要更改的菜单。【uPositionbs】指定由【uFlags】参数确定的要插入新菜单项的菜单项。【uFlags】指定控制【uPositionbs】参数的解释以及新菜单项的内


-------------------------------------------------------- KeyWin32InsertMenuItem ----
InsertMenuItem    [Now Supported on Windows NT]InsertMenuItem函数在菜单中的指定位置插入一个新的菜单项。
语法
参数
【HMENU】处理插入新菜单项的菜单。【藤】在插入新项目之前的菜单项的标识符或位置。该参数的含义取决于【fByPosition】的值。【fByPosition】指定【藤】的含义的值。如果此参


-------------------------------------------------------- KeyWin32Int32x32To64 ----
Int32x32To64    Int32x32To64函数将两个带符号的32位整数相乘，返回带符号的64位整数结果。该函数在所有Win32平台上执行最佳。
语法
参数
【乘数】指定乘法的第一个带符号的32位整数。【被乘数】指定乘法的第二个带符号的32位整数。
返回值
返回值是乘法的带符号64位整数结果。
描述
该函数通过最佳内联代码在所有平台上实现


-------------------------------------------------------- KeyWin32Int64ShllMod32 ----
Int64ShllMod32    Int64ShllMod32函数对无符号64位整数值执行左逻辑移位操作。该函数提供了用于左逻辑移位的改进的移位代码，其中移位计数在0-31范围内。
语法
参数
【值】指定要移位的无符号64位整数。【ShiftCount】指定移位计数范围0  -  31。
返回值
返回值是左逻辑移位操作的无符号64位整数结果。
描述
移位计数是值的位移动的位


-------------------------------------------------------- KeyWin32Int64ShraMod32 ----
Int64ShraMod32    Int64ShraMod32函数对有符号的64位整数值执行正确的算术移位操作。该函数提供了改进的移位代码，用于右移算，其中移位计数范围为0  -  31。
语法
参数
【值】指定要移位的带符号的64位整数。【ShiftCount】指定移位计数范围0  -  31。
返回值
返回值是右侧算术移位操作的带符号64位整数结果。
描述
移位计数是值的位移动


-------------------------------------------------------- KeyWin32Int64ShrlMod32 ----
Int64ShrlMod32    Int64ShrlMod32函数对无符号64位整数值执行正确的逻辑移位操作。该函数为移位计数范围为0  -  31的正确逻辑移位提供了改进的移位代码。
语法
参数
【值】指定要移位的无符号64位整数。【ShiftCount】指定移位计数范围0  -  31。
返回值
返回值是正确的逻辑移位操作的无符号64位整数结果。
描述
移位计数是值的位移动


-------------------------------------------------------- KeyWin32InterlockedCompareExchange ----
InterlockedCompareExchange    [New - Windows NT]InterlockedCompareExchange函数将根据比较结果对【目的地】和【Comperand】参数中指定的值进行原子比较，并交换值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【目的地】指定目标值的地址。这是一个32位值。标志被忽略。【交换】指定交换值。这是一个32位值。标志被忽略。【Comperand】指定与【目的地】进行比较的值。这是一个32位值。标志被忽略。


-------------------------------------------------------- KeyWin32InterlockedDecrement ----
InterlockedDecrement    InterlockedDecrement函数同时减少（减少1）指定的32位变量的值，并检查结果值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【// address of the variable to increment】指向32位变量递减。
返回值
如果减量的结果为零，返回值为零。如果减量的结果小于零，则返回值小于零。如果


-------------------------------------------------------- KeyWin32InterlockedExchange ----
InterlockedExchange    InterlockedExchange函数以原子方式交换一对32位值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【目标】LONG的交易地址。该函数将此LONG值设置为【值】，并返回其先前的值。【值】指定【目标】指向的LONG值的新值。
返回值
该函数返回【目标】指向的LONG值的先前值。
描述



-------------------------------------------------------- KeyWin32InterlockedExchangeAdd ----
InterlockedExchangeAdd    [New - Windows NT]InterlockExchangeAdd函数对加数变量执行增量值的原子加法。该函数可防止多个线程同时使用相同的变量。AddendPLONG 【加数】,//指向加数的指针LONG 【增量】//增加值);
参数
【加数】指定添加了【增量】号码的号码的地址。【增量】指定要添加到【加数】参数指向的变量的数字。
返回值
返回值是【加数】参数的初始值。
描述
函数InterlockedExchang


-------------------------------------------------------- KeyWin32InterlockedIncrement ----
InterlockedIncrement    InterlockedIncrement函数同时增加（增加1）指定的32位变量的值，并检查结果值。该函数可防止多个线程同时使用相同的变量。
语法
参数
【// address of the variable to increment】指向32位变量增量。
返回值
如果增量的结果为零，返回值为零。如果增量的结果小于零，则返回值小于零。如果


-------------------------------------------------------- KeyWin32IntersectClipRect ----
IntersectClipRect    IntersectClipRect函数从当前剪切区域和指定矩形的交点创建一个新的剪切区域。
语法
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的逻辑x坐标。【nTopRect】指定矩形左上角的逻辑y坐标。【nRightRect】指定矩形右下角的逻辑x坐标。【nBotto


-------------------------------------------------------- KeyWin32IntersectRect ----
IntersectRect    IntersectRect函数计算两个源矩形的交集，并将交点矩形的坐标放置到目标矩形中。如果源矩形不相交，则将空矩形（其中所有坐标设置为零）放入目标矩形。
语法
参数
【lprcDst】指向RECT结构的接收【lprcSrc1】和【lprcSrc2】参数指向的矩形的交点。【lprcSrc1】指向包含第一个源矩形的RECT结构。【lprcSrc2】指向包含第


-------------------------------------------------------- KeyWin32InvalidateRect ----
InvalidateRect    InvalidateRect函数向指定的窗口的更新区域添加一个矩形。更新区域表示必须重新绘制的窗口的客户区域的部分。
语法
参数
【的hWnd】标识更新区域已更改的窗口。如果此参数为NULL，则Windows会使所有窗口无效并重新绘制，并在函数返回之前将WM_ERASEBKGND和WM_NCPAINT消息发送到窗口过程


-------------------------------------------------------- KeyWin32InvalidateRgn ----
InvalidateRgn    InvalidateRgn函数将指定区域中的客户端区域添加到窗口的当前更新区域，使其无效。无效区域以及更新区域中的所有其他区域在下一个WM_PAINT消息发生时被标记为绘画。
语法
参数
【的hWnd】标识具有要修改的更新区域的窗口。【HRGN】标识要添加到更新区域的区域。假设该区域具有客户端坐标。如果此参数为NULL，则将整个客户端区域添加到更新区域。【// erase-b


-------------------------------------------------------- KeyWin32InvertRect ----
InvertRect    InvertRect函数通过对矩形内部的每个像素的颜色值执行逻辑NOT操作来反转窗口中的矩形。
语法
参数
【hDC】标识设备上下文。【LPRC】指向包含要反转的矩形的逻辑坐标的RECT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLas


-------------------------------------------------------- KeyWin32InvertRgn ----
InvertRgn    InvertRgn函数可以反转指定区域的颜色。
语法
参数
【HDC】标识设备上下文。【HRGN】标识颜色反转的区域。该区域的坐标被推定为逻辑坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
在单色屏幕上，Inve


-------------------------------------------------------- KeyWin32IOCTL_DISK_CHECK_VERIFY ----
IOCTL_DISK_CHECK_VERIFYIOCTL_DISK_CHECK_VERIFY函数已被IOCTL_STORAGE_CHECK_VERIFY函数取代。


-------------------------------------------------------- KeyWin32IOCTL_DISK_EJECT_MEDIA ----
IOCTL_DISK_EJECT_MEDIAIOCTL_DISK_EJECT_MEDIA函数已被IOCTL_STORAGE_EJECT_MEDIA函数取代。


-------------------------------------------------------- KeyWin32IOCTL_DISK_FORMAT_TRACKS ----
IOCTL_DISK_FORMAT_TRACKS    IOCTL_DISK_FORMAT_TRACKS DeviceIoControl操作格式化磁盘上指定的，连续的磁道集。dwIoControlCode = IOCTL_DISK_FORMAT_TRACKS;   //操作代码lpInBuffer;         //输入缓冲区的地址nInBufferSize;      //输入缓冲区的大小lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向包含FORMAT_PARAMETERS数据结构的缓冲区。【nInBufferSize】指定由【lpInBuffer】指向的缓冲区的大小（以字节为单位），该大小必须


-------------------------------------------------------- KeyWin32IOCTL_DISK_GET_DRIVE_GEOMETRY ----
IOCTL_DISK_GET_DRIVE_GEOMETRY    IOCTL_DISK_GET_DRIVE_GEOMETRY DeviceIoControl操作返回有关物理磁盘几何的信息：类型，柱面数，每个磁道的磁道，每个磁道的扇区以及每个扇区的字节数。dwIoControlCode = IOCTL_DISK_GET_DRIVE_GEOMETRY;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;       //输出缓冲区的地址nOutBufferSize ;    //输出缓冲区的大小lpBytesReturned ;   //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_DISK_GET_DRIVE_LAYOUT ----
IOCTL_DISK_GET_DRIVE_LAYOUT    IOCTL_DISK_GET_DRIVE_LAYOUT DeviceIoControl操作返回有关磁盘上分区数和每个分区的函数的信息。dwIoControlCode = IOCTL_DISK_GET_DRIVE_LAYOUT;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;       //输出缓冲区的地址nOutBufferSize ;    //输出缓冲区的大小lpBytesReturned ;   //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_DISK_GET_MEDIA_TYPES ----
IOCTL_DISK_GET_MEDIA_TYPESIOCTL_DISK_GET_MEDIA_TYPES函数已被IOCTL_STORAGE_GET_MEDIA_TYPES函数取代。


-------------------------------------------------------- KeyWin32IOCTL_DISK_GET_PARTITION_INFO ----
IOCTL_DISK_GET_PARTITION_INFO    IOCTL_DISK_GET_PARTITION_INFO DeviceIoControl操作返回有关磁盘分区的类型，大小和性质的信息。dwIoControlCode = IOCTL_DISK_GET_PARTITION_INFO ;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer;        //输出缓冲区的地址nOutBufferSize;     //输出缓冲区的大小lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_DISK_LOAD_MEDIA ----
IOCTL_DISK_LOAD_MEDIAIOCTL_DISK_LOAD_MEDIA函数已被IOCTL_STORAGE_LOAD_MEDIA函数取代。


-------------------------------------------------------- KeyWin32IOCTL_DISK_MEDIA_REMOVAL ----
IOCTL_DISK_MEDIA_REMOVALIOCTL_DISK_MEDIA_REMOVAL函数已被IOCTL_STORAGE_MEDIA_REMOVAL函数取代。


-------------------------------------------------------- KeyWin32IOCTL_DISK_PERFORMANCE ----
IOCTL_DISK_PERFORMANCE    IOCTL_DISK_PERFORMANCE DeviceIoControl操作提供磁盘性能信息。dwIoControlCode = IOCTL_DISK_PERFORMANCE;   //操作代码lpInBuffer = NULL; //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0; //输入缓冲区的大小不曾用过;必须为零lpOutBuffer;       //输出缓冲区的地址nOutBufferSize;    //输出缓冲区的大小lpBytesReturned;   //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_DISK_REASSIGN_BLOCKS ----
IOCTL_DISK_REASSIGN_BLOCKS    IOCTL_DISK_REASSIGN_BLOCKS DeviceIoControl操作指示磁盘设备将一个或多个块映射到其备用块池。dwIoControlCode = IOCTL_DISK_REASSIGN_BLOCKS;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含REASSIGN_BLOCKS数据结构的缓冲区，指定要重新分配给其备用块池的块。【nInBufferSize】指定由【lpInBuffer】指向的缓冲区的大小


-------------------------------------------------------- KeyWin32IOCTL_DISK_SET_DRIVE_LAYOUT ----
IOCTL_DISK_SET_DRIVE_LAYOUT    IOCTL_DISK_SET_DRIVE_LAYOUT DeviceIoControl操作按驱动器布局和分区信息数据指定分区磁盘。dwIoControlCode = IOCTL_DISK_SET_DRIVE_LAYOUT;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含驱动器布局和分区信息数据的缓冲区。数据以DRIVE_LAYOUT_INFORMATION数据结构和一系列PARTITION_INFORMATION数据结构的形


-------------------------------------------------------- KeyWin32IOCTL_DISK_SET_PARTITION_INFO ----
IOCTL_DISK_SET_PARTITION_INFO    IOCTL_DISK_SET_PARTITION_INFO DeviceIoControl操作设置指定磁盘分区的分区类型。dwIoControlCode = IOCTL_DISK_SET_PARTITION_INFO;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含要设置的分区数据的缓冲区。数据以SET_PARTITION_INFORMATION数据结构存在。【nInBufferSize】指定由【lpInBuffer】指


-------------------------------------------------------- KeyWin32IOCTL_DISK_VERIFY ----
IOCTL_DISK_VERIFY    IOCTL_DISK_VERIFY DeviceIoControl操作在磁盘上执行指定盘区的逻辑格式。dwIoControlCode = IOCTL_DISK_VERIFY;   //操作代码lpInBuffer;          //输入缓冲区的地址nInBufferSize;       //输入缓冲区的大小lpOutBuffer = NULL;  //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0;  //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;     //输出的实际字节的地址
参数
【lpInBuffer】指向包含VERIFY_INFORMATION数据结构的缓冲区。【nInBufferSize】指定由【lpInBuffer】指向的缓冲区的大小（以字节为单位），该大小必


-------------------------------------------------------- KeyWin32IOCTL_SERIAL_LSRMST_INSERT ----
IOCTL_SERIAL_LSRMST_INSERT    IOCTL_SERIAL_LSRMST_INSERT DeviceIoControl操作启用或禁用将线路状态和调制解调器状态值放置在应用程序通过ReadFile函数获取的常规数据流中。当启用此线路状态和调制解调器状态数据放置模式时，转义字符将在数据流中的状态值前面。用户可定义的转义字符由IOCTL_SERIAL_LSRMST_INSERT操作设置。状态值由1到3 BYTE s组成。有关状态值详细信息，请参阅下面的备注部分。dwIoControlCode = IOCTL_SERIAL_LSRMST_INSERT;     //操作代码lpInBuffer;         //输入缓冲区的地址nInBufferSize;      //输入缓冲区的大小lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向包含单个BYTE的缓冲区。如果BYTE是非零值，则它是所需的线路状态和调制解调器状态值转义字符。操作将打开LSRMST_INSERT线路状态和调制解调器状态数据放


-------------------------------------------------------- KeyWin32IOCTL_STORAGE_CHECK_VERIFY ----
IOCTL_STORAGE_CHECK_VERIFY  IOCTL_STORAGE_CHECK_VERIFY DeviceIoControl操作确定设备的介质是否可访问;例如，媒体是否在设备中。dwIoControlCode = IOCTL_STORAGE_CHECK_VERIFY ;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_STORAGE_EJECT_MEDIA ----
IOCTL_STORAGE_EJECT_MEDIA  IOCTL_STORAGE_EJECT_MEDIA DeviceIoControl操作会导致从SCSI设备弹出介质。dwIoControlCode = IOCTL_STORAGE_EJECT_MEDIA;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_STORAGE_GET_MEDIA_TYPES ----
IOCTL_STORAGE_GET_MEDIA_TYPES  IOCTL_STORAGE_GET_MEDIA_TYPES DeviceIoControl操作返回有关设备驱动程序支持的媒体类型的信息。dwIoControlCode = IOCTL_STORAGE_GET_MEDIA_TYPES;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer ;       //输出缓冲区的地址nOutBufferSize ;    //输出缓冲区的大小lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_STORAGE_LOAD_MEDIA ----
IOCTL_STORAGE_LOAD_MEDIA  IOCTL_STORAGE_LOAD_MEDIA DeviceIoControl操作会将介质加载到设备中。dwIoControlCode = IOCTL_STORAGE_LOAD_MEDIA;   //操作代码lpInBuffer = NULL;  //输入缓冲区的地址不曾用过;必须为NULLnInBufferSize = 0;  //输入缓冲区的大小不曾用过;必须为零lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向输入缓冲区。不用于此操作。设置为NULL。【nInBufferSize】指定【lpInBuffer】指向的缓冲区的大小（以字节为单位）。不用于此操作。设置为零。【


-------------------------------------------------------- KeyWin32IOCTL_STORAGE_MEDIA_REMOVAL ----
IOCTL_STORAGE_MEDIA_REMOVAL  IOCTL_STORAGE_MEDIA_REMOVAL DeviceIoControl操作启用或禁用弹出介质的机制，对于具有该锁定函数的设备。dwIoControlCode = IOCTL_STORAGE_MEDIA_REMOVAL;   //操作代码lpInBuffer;         //输入缓冲区的地址nInBufferSize;      //输入缓冲区的大小lpOutBuffer = NULL; //输出缓冲区的地址不曾用过;必须为NULLnOutBufferSize = 0; //输出缓冲区的大小不曾用过;必须为零lpBytesReturned;    //输出的实际字节的地址
参数
【lpInBuffer】指向包含PREVENT_MEDIA_REMOVAL数据结构的缓冲区。该结构的PreventMediaRemoval成员的TRUE值指定禁止介质删除（设备已锁定）。FA


-------------------------------------------------------- KeyWin32IsBadCodePtr ----
IsBadCodePtr    IsBadCodePtr函数确定调用进程是否具有对指定地址的内存的读访问权限。
语法
参数
【lpfn】指向内存中的地址。
返回值
如果调用进程具有对指定内存的读取访问权限，返回值为零。如果调用进程没有对指定内存的读取访问权限，则返回值不为零。要获取扩展错误信息，请调用GetL


-------------------------------------------------------- KeyWin32IsBadHugeReadPtr ----
IsBadHugeReadPtr    IsBadHugeReadPtr函数验证调用进程是否具有对指定范围的内存的读取访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有读取访问权限，返回值为零。如果


-------------------------------------------------------- KeyWin32IsBadHugeWritePtr ----
IsBadHugeWritePtr    IsBadHugeWritePtr函数验证调用进程是否具有对指定范围的内存的写访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有写入访问权限，返回值为零。如果


-------------------------------------------------------- KeyWin32IsBadReadPtr ----
IsBadReadPtr    IsBadReadPtr函数验证调用进程是否具有对指定范围的内存的读取访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有读取访问权限，返回值为零。如果


-------------------------------------------------------- KeyWin32IsBadStringPtr ----
IsBadStringPtr    IsBadStringPtr函数验证调用进程是否具有对字符串指针指向的内存范围的读取访问权限。
语法
参数
【lpsz】指向一个空值终止的字符串，Unicode或ASCII。【// maximum storage capacity of buffer】指定字符串的最大大小（以字符为单位）。该函数检


-------------------------------------------------------- KeyWin32IsBadWritePtr ----
IsBadWritePtr    IsBadWritePtr函数验证调用进程是否具有对指定范围的内存的写访问权限。
语法
参数
【lp】指向内存块的第一个字节。【UCB】指定内存块的大小（以字节为单位）。如果此参数为零，返回值为零。
返回值
如果调用进程对指定内存范围内的所有字节具有写入访问权限，返回值为零。如果


-------------------------------------------------------- KeyWin32IsCharAlpha ----
IsCharAlpha    IsCharAlpha函数确定字符是否是字母字符。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是字母，则返回值不为零。如果字符不是字母，则返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32IsCharAlphaNumeric ----
IsCharAlphaNumeric    IsCharAlphaNumeric函数确定字符是字母还是数字字符。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是字母数字，则返回值不为零。如果字符不是字母数字，则返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32IsCharLower ----
IsCharLower    IsCharLower函数确定字符是否为小写。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是小写，则返回值不为零。如果字符不是小写，则返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32IsCharUpper ----
IsCharUpper    IsCharUpper函数可确定字符是大写字母。该确定基于用户在设置期间或通过使用控制面板选择的语言的语义。
语法
参数
【ch】指定要测试的字符。
返回值
如果字符是大写的，则返回值不为零。如果字符不是大写，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32IsChild ----
IsChild    IsChild函数测试窗口是否为指定父窗口的子窗口或后代窗口。如果父窗口位于父窗口的链中，则子窗口是指定父窗口的直接后代;父窗口链从原始的重叠窗口或弹出窗口引导到子窗口。
语法
参数
【hWndParent】标识父窗口。【的hWnd】标识要测试的窗口。
返回值
如果窗口是指定父窗口的子窗口或后代窗口，则返回值不为零。如果窗口不是指定父窗口的子窗口或后代窗口，返回值为零


-------------------------------------------------------- KeyWin32IsClipboardFormatAvailable ----
IsClipboardFormatAvailable    IsClipboardFormatAvailable函数确定剪贴板是否包含指定格式的数据。
语法
参数
【格式】指定标准或注册的剪贴板格式。有关剪贴板格式的说明，请参阅SetClipboardData函数。
返回值
如果剪贴板格式可用，则返回值不为零。如果剪贴板格式不可用，返回值为零。要获


-------------------------------------------------------- KeyWin32IsDBCSLeadByte ----
IsDBCSLeadByte    IsDBCSLeadByte函数确定一个字符是一个前导字节__，即双字节字符集（DBCS）中字符的第一个字节。
语法
参数
【TestChar】指定要测试的字符。
返回值
如果字符是引导字节，则返回值不为零。如果字符不是引导字节，则返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
引


-------------------------------------------------------- KeyWin32IsDBCSLeadByteEx ----
IsDBCSLeadByteEx    IsDBCSLeadByteEx函数确定一个字符是一个前导字节__，即双字节字符集（DBCS）中字符的第一个字节。
语法



-------------------------------------------------------- KeyWin32IsDebuggerPresent ----
IsDebuggerPresent    [New - Windows NT]IsDebuggerPresent函数指示调用进程是否在调试器的上下文下运行。此函数从KERNEL32.DLL导出。
语法
参数
此函数无参数。回报值如果当前进程在调试器的上下文中运行，则返回值不为零。如果当前进程没有在调试器的上下文中运行，返回值为零。
描述
此函数允许应用程序确定是否正在调试它，以便它可以修改其


-------------------------------------------------------- KeyWin32IsDialogMessage ----
IsDialogMessage    IsDialogMessage函数确定消息是否针对指定的对话框，如果是，则处理消息。
语法
参数
【hDlg】标识对话框。【LPMSG】指向包含要检查的消息的MSG结构。
返回值
如果消息已经被处理，则返回值不为零。如果消息未被处理，返回值为零。
描述
虽然IsDialogMes


-------------------------------------------------------- KeyWin32IsDlgButtonChecked ----
IsDlgButtonChecked    IsDlgButtonChecked函数确定按钮控件是否在其旁边有复选标记，还是三态按钮控件是否为灰色，已检查或两者都不是。
语法
参数
【hDlg】标识包含按钮控件的对话框。【nIDButton】指定按钮控件的整数标识符。
返回值
使用BS_AUTOCHECKBOX，BS_AUTORADIOBUTTON，BS_AUTO3


-------------------------------------------------------- KeyWin32IsIconic ----
IsIconic    IsIconic函数确定指定的窗口是否被最小化（标志）。
语法
参数
【的hWnd】标识窗口。
返回值
如果窗口是标志性的，则返回值不为零。如果窗口不是标志性的，返回值为零。



-------------------------------------------------------- KeyWin32IsMenu ----
IsMenu    IsMenu函数确定句柄是否是菜单句柄。
语法



-------------------------------------------------------- KeyWin32IsProcessorFeaturePresent ----
IsProcessorFeaturePresent    [New - Windows NT]IsProcessorFeaturePresent函数确定当前机器上至少有一个处理器是否支持指定的处理器函数。
语法



-------------------------------------------------------- KeyWin32IsRectEmpty ----
IsRectEmpty    IsRectEmpty函数确定指定的矩形是否为空。空矩形是没有区域的矩形;也就是说，右侧的坐标小于或等于左侧的坐标，或者底侧的坐标小于或等于顶侧的坐标。
语法
参数
【LPRC】指向包含矩形的逻辑坐标的RECT结构。
返回值
如果矩形为空，则返回值不为零。如果矩形不为空，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32IsTextUnicode ----
IsTextUnicode    IsTextUnicode函数确定缓冲区是否可能包含一种Unicode文本形式。该函数使用各种统计和确定性方法，在通过【LPI】传递的标志的控制下进行确定。当函数返回时，这些测试的结果通过【LPI】报告。如果所有指定的测试都被传递，函数返回TRUE;否则返回FALSE。
语法



-------------------------------------------------------- KeyWin32IsValidAcl ----
IsValidAcl    IsValidAcl函数验证访问控制列表（ACL）。
语法
参数
【ACL】指向此函数验证的ACL结构。这必须是非NULL值。
返回值
如果ACL有效，则返回值不为零。如果ACL无效，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32IsValidCodePage ----
IsValidCodePage    IsValidCodePage确定指定的代码页是否有效。
语法
参数
【CodePage】指定要检查的代码页。每个代码页由唯一的数字标识。
返回值
如果代码页有效，则返回值不为零。如果代码页无效，返回值为零。要获取扩展错误信息，请调用GetLastErro


-------------------------------------------------------- KeyWin32IsValidLocale ----
IsValidLocale    IsValidLocale函数对区域设置标识符应用有效性测试。【dwFlags中】参数确定有效性测试的性质。目前，该函数测试是否在呼叫系统上安装或支持区域设置标识符。
语法
参数
【语言环境】指定要验证的区域设置标识符。您可以使用MAKELCID宏创建区域设置标识符。【dwFlags中】指定应用于区域设置标识符的有效性测试。此参数可以是以下值之一：值含义LCID_IN


-------------------------------------------------------- KeyWin32IsValidSecurityDescriptor ----
IsValidSecurityDescriptor    IsValidSecurityDescriptor函数验证SECURITY_DESCRIPTOR结构。通过检查安全描述符中每个组件的修订级别来执行验证。
语法
参数
【pSecurityDescriptor】指向函数验证的SECURITY_DESCRIPTOR结构。
返回值
如果安全描述符的结构有效，则返回值不为零。如果安全描述符的结构无效，返回值为


-------------------------------------------------------- KeyWin32IsValidSid ----
IsValidSid    IsValidSid函数通过验证修订版本号是否在已知范围内，并且子权限的数量小于最大值来验证SID结构。SID是安全标识符。
语法
参数
【PSID】指向要验证的SID结构。这必须是非NULL值。
返回值
如果SID结构有效，则返回值不为零。如果SID结构无效，返回值为零。要获取扩展错误信息，请调用GetLastError


-------------------------------------------------------- KeyWin32IsWindow ----
IsWindow    IsWindow函数确定指定的窗口句柄是否标识现有窗口。
语法
参数
【的hWnd】指定窗口句柄。
返回值
如果窗口句柄标识现有窗口，则返回值不为零。如果窗口句柄不标识现有窗口，返回值为零。



-------------------------------------------------------- KeyWin32IsWindowEnabled ----
IsWindowEnabled    IsWindowEnabled函数确定是否为鼠标和键盘输入启用了指定的窗口。
语法
参数
【的hWnd】标识要测试的窗口。
返回值
如果启用该窗口，则返回值不为零。如果窗口未启用，返回值为零。
描述
子窗口只有在启用和可见时才接收输入。



-------------------------------------------------------- KeyWin32IsWindowUnicode ----
IsWindowUnicode    IsWindowUnicode函数确定指定的窗口是否是本地Unicode窗口。
语法



-------------------------------------------------------- KeyWin32IsWindowVisible ----
IsWindowVisible    IsWindowVisible函数检索指定窗口的可见性状态。
语法
参数
【的hWnd】标识窗口。
返回值
如果指定的窗口及其父窗口具有WS_VISIBLE样式，则返回值不为零。如果指定的窗口及其父窗口没有WS_VISIBLE样式，返回值为零。因为返回值指定窗


-------------------------------------------------------- KeyWin32IsZoomed ----
IsZoomed    IsZoomed函数确定窗口是否最大化。
语法
参数
【的hWnd】标识窗口。
返回值
如果窗口缩放，则返回值不为零。如果窗口没有缩放，返回值为零。



-------------------------------------------------------- KeyWin32JournalPlaybackProc ----
JournalPlaybackProc    JournalPlaybackProc挂接过程是将鼠标和键盘消息插入到系统消息队列中的回调函数。通常，应用程序使用此钩子过程播放先前由JournalRecordProc挂钩过程记录的一系列鼠标和键盘消息。只要安装JournalPlaybackProc挂钩程序，禁用常规鼠标和键盘输入。
语法
参数
【码】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HC_GETNEXT挂钩过程必须将当前鼠标或键盘消息复制到【lParam的】参数指向的EVENTMSG结构。HC_


-------------------------------------------------------- KeyWin32JournalRecordProc ----
JournalRecordProc    JournalRecordProc挂接过程是一个回调函数，用于记录系统从系统消息队列中删除的消息。之后，应用程序可以使用JournalPlaybackProc挂钩过程来播放消息。
语法
参数
【码】指定如何处理消息。此参数可以是以下值之一：值含义HC_ACTION【lParam的】参数指向EVENTMSG结构，其中包含有关从系统队列中删除的消息的信息。挂钩过程必须通过将结构复制到


-------------------------------------------------------- KeyWin32keybd_event ----
keybd_event     keybd_event函数合成了一个按键。系统可以使用这样一个合成的按键来生成WM_KEYUP或WM_KEYDOWN消息。键盘驱动程序的中断处理程序调用{??989796012}函数。
语法
参数
【BVK】指定虚拟键代码。代码必须是1到254范围内的值。【BSCAN】指定密钥的硬件扫描代码。【dwFlags中】一组标志位，指定函数操作的各个方面。应用程序可以使用以下预定义常量值的任意


-------------------------------------------------------- KeyWin32KeyboardProc ----
KeyboardProc    KeyboardProc挂接过程是应用程序定义或库定义的回调函数，系统在应用程序调用{??989796011}或PeekMessage函数时调用，并且有一个键盘消息（WM_KEYUP或WM_KEYDOWN）为处理。
语法
参数
【码】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HC_ACTION【wParam中】和【lParam的】参数包含有关击键消息的信息。HC_NOREMOVE【wPa


-------------------------------------------------------- KeyWin32KillTimer ----
KillTimer    KillTimer函数会破坏指定的定时器。
语法
参数
【的hWnd】标识与指定定时器相关联的窗口。该值必须与传递给创建定时器的SetTimer函数的【的hWnd】值相同。【uIDEvent】指定要销毁的定时器。如果传递给SetTimer的窗口句


-------------------------------------------------------- KeyWin32LBItemFromPt ----
LBItemFromPt    LBItemFromPt函数将在列表框中的指定点检索项目的索引。
语法
参数
【hLB】处理列表框以进行检查。【pt】POINT结构包含要检查的屏幕坐标。【bAutoScroll】滚动标志。如果此参数为TRUE，并且该点直接位于列表框的上方或下方，该函数将列表框滚动一


-------------------------------------------------------- KeyWin32LCMapString ----
LCMapString    LCMapString函数将一个字符串映射到另一个字符串，执行指定的区域设置相关转换。该函数也可用于为输入字符串生成排序键。
语法
参数
【语言环境】指定区域设置标识符。语言环境为字符串映射或排序键生成提供了一个上下文。应用程序可以使用MAKELCID宏创建区域设置标识符。【dwMapFlags】一组标志，指示在字符串映射或排


-------------------------------------------------------- KeyWin32LeaveCriticalSection ----
LeaveCriticalSection    LeaveCriticalSection函数释放指定的关键段对象的所有权。
语法
参数
【lpCriticalSection】指向临界区对象。
返回值
此函数不返回值。
描述
单个进程的线程可以使用临界区对象进行互斥同步。该过程负责分配关键部分对象使用的内存，它可以通过


-------------------------------------------------------- KeyWin32LimitEmsPages ----
LimitEmsPages  LimitEmsPages函数已过时。此函数仅用于与16位版本的Windows兼容。新的基于Win32的应用程序不需要此函数。


-------------------------------------------------------- KeyWin32LineDDA ----
LineDDA    LineDDA函数决定了由指定的起点和终点定义的行应突出显示哪些像素。
语法
参数
【nXStart】指定线的起始点的x坐标。【nYStart】指定线的起始点的y坐标。【nXEnd】指定行的终点的x坐标。【nYEnd】指定线的终点的y坐标。【lpLineFunc】指定应用程


-------------------------------------------------------- KeyWin32LineDDAProc ----
LineDDAProc    LineDDAProc函数是一个应用程序定义的回调函数，用于处理LineDDA函数中的坐标。类型为LINEDDAPROC的值是指向此类函数的指针。
语法
参数
【X】指定当前点的x坐标。【Y】指定当前点的y坐标。【的lpData】指向应用程序定义的数据。
描述
LineDDAProc是应用程序定义的函数名称的占位符。应用程序通过将其地址传递给L


-------------------------------------------------------- KeyWin32LineTo ----
LineTo    LineTo函数从当前位置绘制一条线，但不包括指定点。
语法
参数
【HDC】标识设备上下文。【nXEnd】指定行的终点的x坐标。【nYEnd】指定线的终点的y坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
行的结束点的


-------------------------------------------------------- KeyWin32LoadAccelerators ----
LoadAccelerators    LoadAccelerators函数加载指定的加速器表。
语法
参数
【的hInstance】标识可执行文件包含要加载的加速表的模块实例。【lpTableName】指向一个以null结尾的字符串，命名要加载的加速表。或者，该参数可以指定低位字中的加速器表资源的


-------------------------------------------------------- KeyWin32LoadBitmap ----
LoadBitmap    LoadBitmap函数从模块的可执行文件中加载指定的位图资源。
语法
参数
【的hInstance】标识可执行文件包含要加载的位图的模块的实例。【lpBitmapName】指向一个以null结尾的字符串，其中包含要加载的位图资源的名称。或者，该参数可以由低位字中的资


-------------------------------------------------------- KeyWin32LoadCursor ----
LoadCursor    LoadCursor函数从与应用程序实例关联的可执行文件（.EXE）文件加载指定的游标资源。
语法
参数
【的hInstance】标识可执行文件包含要加载的光标的模块实例。【lpCursorName】指向一个以null结尾的字符串，其中包含要加载的游标资源的名称。或者，该参数可以由低位字中的资源


-------------------------------------------------------- KeyWin32LoadCursorFromFile ----
LoadCursorFromFile    LoadCursorFromFile函数根据文件中包含的数据创建一个游标。该文件由其名称或系统光标标识符指定。该函数返回新创建的游标的句柄。包含游标数据的文件可以是游标（.CUR）或动画光标（.ANI）格式。
语法
参数
【lpFileName】表示要用于创建光标的文件数据的来源。文件中的数据必须是.CUR或.ANI格式。如果【lpszFileName】的高位字是非零的，它是指向一个字符串的指针，该字符串是包


-------------------------------------------------------- KeyWin32LoadIcon ----
LoadIcon    LoadIcon函数从与应用程序实例关联的可执行文件（.EXE）文件加载指定的图标资源。
语法
参数
【的hInstance】标识可执行文件包含要加载的图标的模块实例。加载标准图标时，此参数必须为NULL。【lpIconName】指向一个以null结尾的字符串，其中包含要加载的图标资源的名称


-------------------------------------------------------- KeyWin32LoadImage ----
LoadImage    [Now Supported on Windows NT]LoadImage函数加载图标，光标或位图。
语法
参数
【HINST】标识包含要加载的图像的模块实例。要加载OEM映像，请将此参数设置为零。【lpszName】标识要加载的图像。如果【HINST】参数为非空，并且【fuLoad】参数不包含LR_L


-------------------------------------------------------- KeyWin32LoadKeyboardLayout ----
LoadKeyboardLayout    Windows 95和Windows NT中的LoadKeyboardLayout的实现有很大的不同。为了适应这些差异，本参考页首先显示Windows 95实现，其次是Windows NT版本。
语法
参数
【pwszKLID】指向指定键盘布局名称的缓冲区。该名称是由主要语言标识符（低字）和设备标识符（高字）的十六进制值组成的字符串。例如，美国英语的语言标识符为0x0409，所以主要的美国英文版


-------------------------------------------------------- KeyWin32LoadLibrary ----
LoadLibrary    LoadLibrary函数将指定的可执行模块映射到调用进程的地址空间。
语法
参数
【lpLibFileName】指向以空字符结尾的字符串，命名可执行模块（一个.DLL或.EXE文件）。指定的名称是模块的文件名，并且与库模块本身中存储的名称无关，如模块定义（.DEF）文件中


-------------------------------------------------------- KeyWin32LoadLibraryEx ----
LoadLibraryEx    LoadLibraryEx函数将指定的可执行模块映射到调用进程的地址空间。可执行模块可以是.DLL或.EXE文件。指定的模块可能会导致其他模块映射到地址空间。
语法
参数
【lpLibFileName】指向一个以空值终止的字符串，命名一个Win32可执行模块（.DLL或.EXE文件）。指定的名称是可执行模块的文件名。该名称与库模块本身存储的名称无关，如模块定义


-------------------------------------------------------- KeyWin32LoadMenu ----
LoadMenu    LoadMenu函数从与应用程序实例关联的可执行文件（.EXE）文件加载指定的菜单资源。
语法
参数
【的hInstance】标识包含要加载的菜单资源的模块的实例。【lpMenuName】指向包含菜单资源名称的以null结尾的字符串。或者，该参数可以由低位字中的资源标识符和高阶字中的零组成。


-------------------------------------------------------- KeyWin32LoadMenuIndirect ----
LoadMenuIndirect    LoadMenuIndirect函数将指定的菜单模板加载到内存中。
语法
参数
【lpMenuTemplate】指向菜单模板或扩展菜单模板。菜单模板由MENUITEMTEMPLATEHEADER结构组成，后跟一个或多个连续的MENUITEMTEMPLATE结构。扩展菜单


-------------------------------------------------------- KeyWin32LoadModule ----
LoadModule    LoadModule函数加载并执行基于Windows的应用程序或创建现有基于Windows的应用程序的新实例。提供此函数以兼容早期版本的Windows。基于Win32的应用程序应使用CreateProcess函数。
语法
参数
【lpModuleName】指向包含要运行的应用程序的文件名的以null结尾的字符串。如果【lpModuleName】参数不包含目录路径，Windows将按以下顺序搜索可执行文件：1.应用程


-------------------------------------------------------- KeyWin32LoadResource ----
LoadResource    LoadResource函数将指定的资源加载到全局内存中。
语法
参数
【HMODULE】标识可执行文件包含资源的模块。如果【HMODULE】为NULL，Windows将从用于创建当前进程的模块加载资源。【hResInfo】标识要加载的资源。必须使用FindRe


-------------------------------------------------------- KeyWin32LoadString ----
LoadString    LoadString函数从与指定模块相关联的可执行文件中加载字符串资源，将字符串复制到缓冲区中，并附加一个终止空字符。
语法
参数
【的hInstance】标识可执行文件包含字符串资源的模块实例。【uID】指定要加载的字符串的整数标识符。【lpBuffer】指向缓冲区以接收字符串。【nBufferMax】指定缓冲区的大小


-------------------------------------------------------- KeyWin32LocalAlloc ----
LocalAlloc    LocalAlloc函数从堆中分配指定的字节数。在线性Win32 API环境中，本地堆和全局堆之间没有区别。
语法
参数
【uFlags】指定如何分配内存。如果指定为零，则默认值为LMEM_FIXED标志。除了具体注明的不兼容的组合外，还可以指定以下标志的任意组合。要指示函数是分配固定或可移动内存，请指定前六个


-------------------------------------------------------- KeyWin32LocalCompact ----
LocalCompact  LocalCompact函数已过时。此函数仅用于与16位版本的Windows兼容。


-------------------------------------------------------- KeyWin32LocalDiscard ----
LocalDiscard    LocalDiscard函数将丢弃指定的本地内存对象。内存对象的锁计数必须为零。
语法
参数
【hlocMemhmn】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，则返回值是本地内存对象的句柄。如果函数失败，返回值为NU


-------------------------------------------------------- KeyWin32LocalFileTimeToFileTime ----
LocalFileTimeToFileTime    LocalFileTimeToFileTime函数根据协调世界时（UTC）将本地文件时间转换为文件时间。
语法
参数
【lpLocalFileTime】指向FILETIME结构，指定将本地文件时间转换为基于UTC的文件时间。【lpFileTime】指向FILETIME结构以接收基于UTC的文件转换时间。此参


-------------------------------------------------------- KeyWin32LocalFlags ----
LocalFlags    LocalFlags函数返回有关指定的本地内存对象的信息。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，则返回值是32位值，用于指定内存对象的分配标志和锁计数。如果函数失败


-------------------------------------------------------- KeyWin32LocalFree ----
LocalFree    LocalFree函数释放指定的本地内存对象并使其句柄无效。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，返回值为NULL。如果函数失败，返回值等于本地内存对象的句柄。要获取


-------------------------------------------------------- KeyWin32LocalHandle ----
LocalHandle    LocalHandle函数检索与指定的本地内存对象指针关联的句柄。
语法
参数
【PME?】指向本地内存对象的第一个字节。该指针由LocalLock函数返回。
返回值
如果函数成功，则返回值是指定的本地内存对象的句柄。如果函数失败，返回值为NULL。要获取扩展错误信


-------------------------------------------------------- KeyWin32LocalLock ----
LocalLock    LocalLock函数锁定本地内存对象，并返回指向对象内存块第一个字节的指针。与锁定的存储器对象相关联的存储器块不能被移动或丢弃。对于使用LMEM_MOVEABLE标志分配的内存对象，该函数会增加对象的锁定计数。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果函数成功，则返回值是指向内存块第一个字节的指针。如果函数失败，返回值为NULL


-------------------------------------------------------- KeyWin32LocalReAlloc ----
LocalReAlloc    LocalReAlloc函数更改指定的本地内存对象的大小或属性。尺寸可以增减。
语法
参数
【HMEM】标识要重新分配的本地内存对象。该句柄由LocalAlloc或LocalReAlloc函数返回。【指向包含要写入文件的数据的缓冲区。】指定内存块的新大小（以字节为单位）。如果此参数


-------------------------------------------------------- KeyWin32LocalShrink ----
LocalShrink  LocalShrink函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32LocalSize ----
LocalSize    LocalSize函数返回指定本地内存对象的当前大小（以字节为单位）。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc，LocalReAlloc或LocalHandle函数返回。
返回值
如果函数成功，则返回值是指定本地内存对象的大小（以字节为单


-------------------------------------------------------- KeyWin32LocalUnlock ----
LocalUnlock    LocalUnlock函数减少与使用LMEM_MOVEABLE标志分配的内存对象关联的锁定计数。此函数对使用LMEM_FIXED标志分配的内存对象没有影响。
语法
参数
【HMEM】标识本地内存对象。该手柄由LocalAlloc或LocalReAlloc函数返回。
返回值
如果内存对象在递减锁定计数后仍然被锁定，则返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyWin32LockFile ----
LockFile    LockFile函数锁定打开文件中的区域。锁定区域可防止其他进程访问该区域。
语法
参数
【HFILE】标识要锁定的区域的文件。必须使用GENERIC_READ或GENERIC_WRITE访问文件（或两者）创建文件句柄。【dwFileOffsetLow】指定锁应该开始的文件中起始


-------------------------------------------------------- KeyWin32LockFileEx ----
LockFileEx    LockFileEx函数锁定打开的文件中的字节范围以进行共享或独占访问。
语法
参数
【HFILE】标识一个文件的打开句柄，该文件要锁定一段字节，用于共享或独占访问。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建句柄。【dwFlags中】指定修改此


-------------------------------------------------------- KeyWin32LockResource ----
LockResource    LockResource函数将指定的资源锁定在内存中。
语法
参数
【hResData】标识要锁定的资源。LoadResource函数返回此句柄。
返回值
如果加载的资源被锁定，则返回值是指向资源的第一个字节的指针;否则为NULL。
描述
基于Win


-------------------------------------------------------- KeyWin32LockSegment ----
LockSegment  LockSegment函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32LockServiceDatabase ----
LockServiceDatabase    LockServiceDatabase函数锁定指定的数据库。
语法
参数
【hSCManager】标识服务控制管理器数据库。OpenSCManager函数返回此句柄，该句柄必须具有SC_MANAGER_LOCK访问权限。
返回值
如果函数成功，则返回值是指定的


-------------------------------------------------------- KeyWin32LockWindowUpdate ----
LockWindowUpdate    LockWindowUpdate函数在指定的窗口中禁用或重新启用绘图。一次只能锁定一个窗口。
语法
参数
【hWndLock】指定绘图将被禁用的窗口。如果此参数为NULL，则启用锁定窗口中的绘图。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零，表示发生错误或其他窗口已被锁定。


-------------------------------------------------------- KeyWin32LogonUser ----
LogonUser    LogonUser函数尝试执行用户登录操作。您指定具有用户名和域的用户，并使用明文密码对用户进行身份验证。如果函数成功，您将收到一个代表登录用户的令牌的句柄。然后，您可以使用此令牌句柄模拟指定的用户，或者在大多数情况下，创建在指定用户的上下文中运行的进程。
语法
参数
【lpszUsername】指向指定用户名的空终止字符串的指针。这是要登录的用户帐户的名称。【lpszDo mainhu】指向指定要登录到的域或服务器的以空值终止的字符串的指针。如果此参数为


-------------------------------------------------------- KeyWin32LookupAccountName ----
LookupAccountName    LookupAccountName函数接受系统和帐户的名称作为输入。它检索帐户的安全标识符（SID）和找到该帐户的域的名称。
语法
参数
【lpSystemName】指向指定系统的以null结尾的字符串。该字符串可以是远程计算机的名称。如果此字符串为NULL，则会在本地系统上查找帐户名称。【lpAccountName】指向指定


-------------------------------------------------------- KeyWin32LookupAccountSid ----
LookupAccountSid    LookupAccountSid函数接受安全标识符（SID）作为输入。它检索此SID的帐户的名称以及找到此SID的第一个域的名称。
语法
参数
【lpSystemName】指向指定系统的以null结尾的字符串。该字符串可以是远程计算机的名称。如果此字符串为NULL，则会在本地系统上查找SID。【希德】指向要查找帐户名称的SID结构。


-------------------------------------------------------- KeyWin32LookupIconIdFromDirectory ----
LookupIconIdFromDirectory    LookupIconIdFromDirectory函数可以搜索最符合当前显示设备的图标或光标的图标或光标数据。
语法
参数
【presbits】指向图标或光标目录数据。因为此函数不能验证资源数据，所以如果【presbits】未指向有效的资源数据，则会导致一般保护（GP）故障或返回未定义的值。【FICON】指定是否


-------------------------------------------------------- KeyWin32LookupIconIdFromDirectoryEx ----
LookupIconIdFromDirectoryEx    [Now Supported on Windows NT]LookupIconIdFromDirectoryEx函数可以搜索最符合当前显示设备的图标或光标的图标或光标数据。
语法
参数
【presbits】指向图标或光标目录数据。因为此函数不会验证资源数据，所以如果【presbits】未指向有效的资源数据，则会导致一般保护（GP）故障或返回未定义的值。【FICON】指定是否


-------------------------------------------------------- KeyWin32LookupPrivilegeDisplayName ----
LookupPrivilegeDisplayName    LookupPrivilegeDisplayName函数检索表示指定权限的可显示名称。
语法
参数
【lpSystemName】指向一个以null结尾的字符串，指定查看可显示特权名称的系统的名称。如果指定了一个空字符串，该函数将尝试在本地系统上查找可显示的名称。【lpName】指向一个以空


-------------------------------------------------------- KeyWin32LookupPrivilegeName ----
LookupPrivilegeName    LookupPrivilegeName函数通过指定的本地唯一标识符（LUID）检索与特定系统上表示的权限相对应的名称。
语法
参数
【lpSystemName】指向一个以null结尾的字符串，指定查询特权名称的系统的名称。如果指定了空字符串，则该函数尝试在本地系统上查找特权名称。【lpLuid】指向目标系统上已知特权的本


-------------------------------------------------------- KeyWin32LookupPrivilegeValue ----
LookupPrivilegeValue    LookupPrivilegeValue函数检索在指定系统上使用的本地唯一标识符（LUID）以本地表示指定的权限名称。
语法
参数
【lpSystemName】指向一个以null结尾的字符串，指定查询特权名称的系统的名称。如果指定了空字符串，则该函数尝试在本地系统上查找特权名称。【lpName】指向一个以空值终止的字符串


-------------------------------------------------------- KeyWin32LookupSecurityDescriptorParts ----
LookupSecurityDescriptorParts    [New - Windows NT]LookupSecurityDescriptorParts函数从自相关安全描述符中检索安全信息。
语法
参数
【pOwner】指向接收指向TRUSTEE结构的指针的变量的指针。该函数将在【pSD】安全描述符中查找与所有者SID关联的名称，并返回指向TRUSTEE结构的ptstrNameaf成员中的名


-------------------------------------------------------- KeyWin32LPtoDP ----
LPtoDP    LPtoDP函数将逻辑坐标转换为设备坐标。转换取决于设备上下文的映射模式，窗口和视口的起点和扩展区的设置以及世界变换。
语法
参数
【HDC】识别DC。【lpPoints】指向POINT结构的数组。每个POINT结构中包含的x坐标和y坐标将被转换。【NCOUNT】指定数组中的点数。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyWin32LSEnumProviders ----
LSEnumProviders    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSEnumProviders函数为每个已安装的许可证系统服务提供程序返回唯一的字符串。
语法
参数
【指数】[in]指定服务提供商的索引。第一个提供者的索引为零，第二个索引为1，依此类推。每个连续调用LSEnumProviders，呼叫者应该增加该索引，直到它返回LS_BAD_INDEX状


-------------------------------------------------------- KeyWin32LSFreeHandle ----
LSFreeHandle    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSFreeHandle函数释放许可句柄上下文。
语法
参数
【LicenseHandle】[in]指定不再有效的许可证上下文的句柄。该参数必须是使用LSRequest函数创建的句柄。
返回值
没有。
描述
在调用LSRelease函数后，或L


-------------------------------------------------------- KeyWin32LSGetMessage ----
LSGetMessage    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSGetMessage函数返回与许可证服务函数状态代码相关联的消息字符串。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。该参数必须是使用LSRequest 函数创建的句柄。【值】[in]指定许可证服务函数返回的任何状态代码。【缓冲】[out]指向将返


-------------------------------------------------------- KeyWin32LSQuery ----
LSQuery    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSQuery函数返回有关通过调用LSRequest函数获得的与指定句柄相关联的服务提供商或许可证系统上下文的信息。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。此参数必须是使用LSRequest函数创建的句柄。【信息】[in]指定标识要返回的信息的索引。【InfoBuffer】[out]指


-------------------------------------------------------- KeyWin32LSRelease ----
LSRelease    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSRelease函数请求许可证系统发布与由【LicenseHandle】参数标识的许可证上下文相关联的许可资源。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。此参数必须是使用LSRequest 函数创建的句柄。【TotUnitsConsumed】[in]指定自LSRequest函数的初始


-------------------------------------------------------- KeyWin32LSRequest ----
LSRequest    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSRequest函数要求许可证系统授予许可资源，以便调用应用程序可以执行。
语法
参数
【LicenseSystem】[in]指向唯一标识特定许可证系统的字符串。您可以使用LSEnumProviders函数获取此字符串。如果指定了常量LS_ANY，则将搜索所有许可证系统提供程序


-------------------------------------------------------- KeyWin32lstrcat ----
lstrcat    lstrcat函数将一个字符串附加到另一个字符串。
语法
参数
【lpString1】指向一个以null结尾的字符串。缓冲区必须足够大以容纳两个字符串。【lpString2】指向要附加到【lpString1】参数中指定的字符串的以null结尾的字符串。



-------------------------------------------------------- KeyWin32LSTRCMP ----
LSTRCMP     LSTRCMP函数比较两个字符串。比较区分大小写。
语法
参数
【lpString1】指向要比较的第一个以null结尾的字符串。【lpString2】指向要比较的第二个以null结尾的字符串。
返回值
如果函数成功，【lpString1】指向的字符串


-------------------------------------------------------- KeyWin32LSTRCMPI ----
LSTRCMPI    LSTRCMPI函数比较两个字符串。比较不区分大小写。
语法
参数
【lpString1】指向要比较的第一个以null结尾的字符串。【lpString2】指向要比较的第二个以null结尾的字符串。
返回值
如果函数成功，【lpString1】指向的字符串


-------------------------------------------------------- KeyWin32lstrcpy ----
lstrcpy    lstrcpy函数将字符串复制到缓冲区。
语法
参数
【lpString1】指向缓冲区以接收【lpString2】参数指向的字符串的内容。缓冲区必须足够大以容纳字符串，包括终止空字符。【lpString2】指向要复制的以null结尾的字符串。



-------------------------------------------------------- KeyWin32lstrcpyn ----
lstrcpyn    lstrcpyn函数将指定数量的字符从源字符串复制到缓冲区。
语法
参数
【lpString1】指向函数复制字符的缓冲区。缓冲区必须足够大以包含由【iMaxLength】指定的字节数（ANSI版本）或字符（Unicode版本），包括终止空字符的空间。【lpStri


-------------------------------------------------------- KeyWin32lstrlen ----
lstrlen    lstrlen函数返回指定字符串的长度（ANSI版本）或字符（Unicode版本）（不包括终止空字符）。
语法
参数
【lpString】指向一个以null结尾的字符串。
返回值
如果函数成功，返回值将以字节（ANSI版本）或字符（Unicode版本）指定字符串的长度。



-------------------------------------------------------- KeyWin32LSUpdate ----
LSUpdate    注意：这是Microsoft Windows的将来版本中将支持的技术的初步文档。LSUpdate函数更新许可的应用程序软件和许可证系统之间的同步。
语法
参数
【LicenseHandle】[in]指定许可上下文的句柄。该参数必须是使用LSRequest 函数创建的句柄。【TotUnitsConsumed】[in]指定自LSRequest函数的初始


-------------------------------------------------------- KeyWin32LZClose ----
LZClose    LZClose函数关闭使用LZOpenFile函数打开的文件。
语法
参数
【HFILE】标识要关闭的源文件。
返回值
此函数不返回值。
描述
必须通过调用LZOpenFile函数检索识别文件的句柄。如果通过调用CreateFile或OpenFile函数检索


-------------------------------------------------------- KeyWin32LZCopy ----
LZCopy    LZCopy函数将源文件复制到目标文件。如果使用Microsoft文件压缩实用程序（COMPRESS.EXE）压缩源文件，则此函数将创建一个解压缩的目标文件。如果源文件未压缩，则此函数将复制原始文件。
语法
参数
【hfSource】标识源文件。【hfDest】标识目标文件。
返回值
如果函数成功，则返回值指定目标文件的大小（以字节为单位）。如果函数失败，则返回值为LZERROR_ *代码。这些代


-------------------------------------------------------- KeyWin32LZDone ----
LZDone  LZDone函数已过时。它仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用LZOpenFile函数。


-------------------------------------------------------- KeyWin32LZInit ----
LZInit    LZInit函数为解压缩文件所需的内部数据结构分配内存，然后创建并初始化它们。
语法



-------------------------------------------------------- KeyWin32LZOpenFile ----
LZOpenFile    LZOpenFile函数创建，打开，重新打开或删除指定的文件。
语法
参数
【lpFileName】指向指定文件名称的字符串。【lpReOpenBuf】指向OFSTRUCT结构，即在文件首次打开时接收有关文件的信息。该结构可用于后续调用LZOpenFile函数以引用


-------------------------------------------------------- KeyWin32LZRead ----
LZRead    LZRead函数从文件中读取（最多）指定的字节数，并将它们复制到缓冲区中。
语法
参数
【HFILE】标识源文件。【lpBuffer】指向从文件读取的字节的缓冲区。【cbReaden】指定要读取的字节数。
返回值
如果函数成功，则返回值指定读取的字节数。如果函数失败，则返回


-------------------------------------------------------- KeyWin32LZSeek ----
LZSeek    LZSeek函数将一个文件指针从起始位置移动多个字节。
语法
参数
【HFILE】标识源文件。【我偏移fy】指定移动文件指针的字节数。【iOrigin】指定指针的起始位置。此参数必须是以下值之一：值含义0从文件的开头移动文件指针【我偏移fy】个字节。1从当前


-------------------------------------------------------- KeyWin32LZStart ----
LZStart  LZStart函数已过时。它仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用LZCopy函数。


-------------------------------------------------------- KeyWin32MakeAbsoluteSD ----
MakeAbsoluteSD    MakeAbsoluteSD函数通过使用自相关格式的安全描述符作为模板，以绝对格式创建安全描述符。
语法
参数
【pSelfRelativeSecurityDescriptor】以自相关格式指向SECURITY_DESCRIPTOR结构。该函数创建此安全描述符的绝对格式版本，而不修改原始安全描述符。【


-------------------------------------------------------- KeyWin32MakeDragList ----
MakeDragList    MakeDragList函数将指定的单选列表框更改为拖动列表框。
语法



-------------------------------------------------------- KeyWin32MakeProcInstance ----
MakeProcInstance  MakeProcInstance函数已过时。Win32函数可以直接调用。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序不应该使用此函数。


-------------------------------------------------------- KeyWin32MakeSelfRelativeSD ----
MakeSelfRelativeSD    MakeSelfRelativeSD函数通过使用绝对格式的安全描述符作为模板，以自相关格式创建安全描述符。
语法
参数
【pAbsoluteSecurityDescriptor】以绝对格式指向SECURITY_DESCRIPTOR结构。该函数以自相关格式创建此安全描述符的版本，无需修改原始文件。【pSelfR


-------------------------------------------------------- KeyWin32MapDialogRect ----
MapDialogRect    MapDialogRect函数将指定的对话框单位转换（映射）为屏幕单位（像素）。该函数用转换的坐标替换指定的RECT结构中的坐标，允许使用该结构创建对话框或在对话框中定位控件。
语法
参数
【hDlg】标识一个对话框。此函数仅接受由对话框创建函数之一创建的对话框的句柄;其他窗口的句柄无效。【LPRECT】指向包含要转换的对话框坐标的RECT结构。
返回值
如果函数成功，返回


-------------------------------------------------------- KeyWin32MapGenericMask ----
MapGenericMask    MapGenericMask函数将访问掩码中的通用访问权限映射到特定的和标准的访问权限。该函数应用GENERIC_MAPPING结构中提供的映射。
语法
参数
【AccessMask】指向访问掩码，接收从通用访问权限映射的特定和标准权限。【GenericMapping】指向GENERIC_MAPPING结构，指定通用访问类型到特定和标准访问类型的映


-------------------------------------------------------- KeyWin32MapViewOfFile ----
MapViewOfFile    MapViewOfFile函数将文件的视图映射到调用进程的地址空间。
语法
参数
【hFileMappingObject】标识文件映射对象的打开句柄。CreateFileMapping和OpenFileMapping函数返回此句柄。【dwDesiredAccess】指定对


-------------------------------------------------------- KeyWin32MapViewOfFileEx ----
MapViewOfFileEx    MapViewOfFileEx函数将文件的视图映射到调用进程的地址空间。此扩展函数允许调用进程为映射视图指定建议的内存地址。此函数仅适用于基于Win32的应用程序。
语法
参数
【hFileMappingObject】标识文件映射对象的打开句柄。CreateFileMapping和OpenFileMapping函数返回此句柄。【dwDesiredAccess】指定对


-------------------------------------------------------- KeyWin32MapVirtualKey ----
MapVirtualKey    MapVirtualKey函数将虚拟键代码（映射）为扫描代码或字符值，或将扫描代码转换为虚拟键代码。
语法
参数
【UCODE】指定密钥的虚拟密钥代码或扫描代码。该值如何解释取决于【uMapType】参数的值。【uMapType】指定要执行的翻译。该参数的值取决于【UCODE】参数的值：值含义0【UCO


-------------------------------------------------------- KeyWin32MapVirtualKeyEx ----
MapVirtualKeyEx    [Now Supported on Windows NT]MapVirtualKeyEx函数将虚拟键代码（映射）为扫描代码或字符值，或将扫描代码转换为虚拟键代码。该函数使用由给定键盘布局句柄标识的输入语言和物理键盘布局来转换代码。
语法
参数
【UCODE】指定密钥的虚拟密钥代码或扫描代码。该值如何解释取决于【uMapType】参数的值。【uMapType】指定要执行的翻译。该参数的值取决于【UCODE】参数的值：值含义0【UCO


-------------------------------------------------------- KeyWin32MapWindowPoints ----
MapWindowPoints    MapWindowPoints函数将相对于一个窗口的坐标空间中的一组点转换（映射）到相对于另一个窗口的坐标空间。
语法
参数
【hWndFrom】标识要转换点的窗口。如果此参数为NULL或HWND_DESKTOP，则假定该点处于屏幕坐标。【hWndTo】标识要转换点的窗口。如果此参数为NULL或HWND_DESKT


-------------------------------------------------------- KeyWin32MenuHelp ----
MenuHelp    MenuHelp函数处理WM_MENUSELECT和WM_COMMAND消息，并在指定的状态窗口中显示有关当前菜单的帮助文本。
语法
参数
【uMsg】WM_MENUSELECT或WM_COMMAND讯息。【wParam中】第一个消息参数。【lParam的】第二个消息参数。【hMainMenu】处理应用程序的主菜单。【HINST


-------------------------------------------------------- KeyWin32MenuItemFromPoint ----
MenuItemFromPoint    [Now Supported on Windows NT]MenuItemFromPoint函数确定哪个菜单项（如果有）位于指定位置。
语法
参数
【的hWnd】处理到包含菜单的窗口。【HMENU】处理到包含菜单项的菜单进行测试。【ptScreennl】POINT结构，指定要测试的位置。如果【HMENU】指定菜单栏，则此参数在窗口坐标中


-------------------------------------------------------- KeyWin32MessageBeep ----
MessageBeep    MessageBeep函数播放波形。每个声音类型的波形声音由注册表的[sounds]部分中的条目标识。
语法
参数
【UTYPE】指定由注册表的[sounds]部分中的条目标识的声音类型。此参数可以是以下值之一：值声音0xFFFFFFFF使用电脑扬声器进行标准蜂鸣MB_ICONASTERISKSystem


-------------------------------------------------------- KeyWin32MessageBox ----
MessageBox    MessageBox函数创建，显示和操作消息框。消息框包含应用程序定义的消息和标题，以及预定义图标和按钮的任意组合。
语法
参数
【的hWnd】标识要创建的消息框的所有者窗口。如果此参数为NULL，则消息框不具有所有者窗口。【lpText】指向包含要显示的消息的以null结尾的字符串。【lpCaption】指向用于对话


-------------------------------------------------------- KeyWin32MessageBoxEx ----
MessageBoxEx    MessageBoxEx函数创建，显示和操作消息框。消息框包含应用程序定义的消息和标题，以及预定义图标和按钮的任意组合。【wLanguageId】参数指定用于预定义按钮的语言资源集。有关MessageBoxEx的其他参数的完整说明，请参阅MessageBox.
语法
参数
【的hWnd】标识要创建的消息框的所有者窗口。如果此参数为NULL，则消息框不具有所有者窗口。【lpCaption】指向包含要显示的消息的以null结尾的字符串。【lpszTitle】指向用


-------------------------------------------------------- KeyWin32MessageBoxIndirect ----
MessageBoxIndirect    [Now Supported on Windows NT]MessageBoxIndirect函数创建，显示和操作消息框。消息框包含应用程序定义的消息文本和标题，任何图标以及预定义按钮的任意组合。
语法
参数
【lpMsgBoxParams】指向MSGBOXPARAMS结构的指针，其中包含用于显示消息框的信息。
返回值
如果没有足够的内存创建消息框，返回值为零。如果函数成功，则返回值是对话框返


-------------------------------------------------------- KeyWin32MessageProc ----
MessageProc    MessageProc挂接过程是系统在对话框，消息框，菜单或滚动条中发生输入事件之后但在处理输入事件生成的消息之前调用的应用程序定义的回调函数。挂钩过程可以监视由特定应用程序或所有应用程序创建的对话框，消息框，菜单或滚动条的消息。
语法
参数
【码】指定生成消息的输入事件的类型。此参数可以是以下值之一：值含义MSGF_DDEMGR当动态数据交换管理库（DDEML）等待同步事务完成时，输入事件发生。有关DDEML的更多信息，请参阅动


-------------------------------------------------------- KeyWin32ModifyMenu ----
ModifyMenu    ModifyMenu函数可以更改现有的菜单项。此函数用于指定菜单项的内容，外观和行为。SetMenuItemInfo函数已被SetMenuItemInfo函数取代。但是，如果您不需要SetMenuItemInfo的任何扩展函数，您仍然可以使用ModifyMenu.
语法
参数
【的编程实例bs】标识要更改的菜单。【uPositionbs】指定要更改的菜单项，由【uFlags】参数确定。【uFlags】指定控制【uPositionbs】参数的解释以及菜单项的内容，外


-------------------------------------------------------- KeyWin32ModifyWorldTransform ----
ModifyWorldTransform    ModifyWorldTransform函数使用指定的模式更改设备上下文的世界变换。
语法
参数
【HDC】指定设备上下文。【lpXform】指向XFORM结构，用于修改给定设备上下文的世界转换。【iMode平台】指定转换数据如何修改当前世界转换。此参数必须是以下值之一：值描述MWT_I


-------------------------------------------------------- KeyWin32MouseProc ----
MouseProc    MouseProc挂接过程是应用程序定义或库定义的回调函数，系统在应用程序调用{??989796010}或PeekMessage函数时调用，并且有一个要处理的鼠标消息。
语法
参数
【NCODE】指定挂钩过程用于确定如何处理消息的代码。此参数可以是以下值之一：值含义HC_ACTION【wParam中】和【lParam的】参数包含有关鼠标消息的信息。HC_NOREMOVE


-------------------------------------------------------- KeyWin32mouse_event ----
mouse_event     mouse_event函数可以合成鼠标移动和按钮点击。
语法
参数
【dwFlags中】一组标志位，指定鼠标运动和按钮点击的各个方面。此参数中的位可以是以下值的任何合理组合：值含义MOUSEEVENTF_ABSOLUTE指定【dx】和【dy】参数包含归一化的


-------------------------------------------------------- KeyWin32MoveFile ----
MoveFile    MoveFile函数重命名现有文件或目录（包括其所有子项）。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，命名现有文件或目录。【lpNewFileName】指向指定文件或目录的新名称的以null结尾的字符串。新名称不能存在。新文件


-------------------------------------------------------- KeyWin32MoveFileEx ----
MoveFileEx    MoveFileEx函数重命名现有的文件或目录。
语法
参数
【lpExistingFileName】指向以空字符结尾的字符串，命名现有文件或目录。【lpNewFileName】指向一个以null结尾的字符串，指定新名称【lpExistingFileN


-------------------------------------------------------- KeyWin32MoveMemory ----
MoveMemory    MoveMemory函数将一个内存块从一个位置移动到另一个位置。
语法
参数
【目的地】指向移动目的地的起始地址。【资源】指向要移动的内存块的起始地址。【长度】指定要移动的内存块的大小（以字节为单位）。
返回值
该函数没有返回值。
描述
源和目标块可能重叠。



-------------------------------------------------------- KeyWin32MoveToEx ----
MoveToEx    MoveToEx函数将当前位置更新到指定点，并可选地返回上一个位置。
语法
参数
【HDC】标识设备上下文。【X】以逻辑单位指定新位置的x坐标。【Y】以逻辑单位指定新位置的y坐标。【LPPOINT】指向存储先前当前位置的POINT结构。如果此参数是NULL指针，则不返回上


-------------------------------------------------------- KeyWin32MoveWindow ----
MoveWindow    MoveWindow函数可以更改指定窗口的位置和尺寸。对于顶级窗口，位置和尺寸相对于屏幕的左上角。对于子窗口，它们相对于父窗口的客户区域的左上角。
语法
参数
【的hWnd】标识窗口。【X】指定窗口左边的新位置。【Y】指定窗口顶部的新位置。【nWidth】指定窗口的新宽度。【nHeight参数】指定窗口的新高度。【bRepaint】指定窗口是否要重


-------------------------------------------------------- KeyWin32MsgWaitForMultipleObjects ----
MsgWaitForMultipleObjects    当发生以下其中一种情况时，MsgWaitForMultipleObjects函数返回：*任何一个或所有指定的对象都处于信号状态。对象可以包括使用【dwWakeMask】参数指定的输入事件对象。*经过了超时间隔。请注意，如果队列中存在指定类型的以前未读的输入，则MsgWaitForMultipleObjects不返回。输入到达时才醒来。
语法
参数
【NCOUNT】指定【蜡烛xh】指向的数组中的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS减1。【蜡烛xh】指向一组对象句柄。有关可以指定句柄的对象类型的列表，请


-------------------------------------------------------- KeyWin32MsgWaitForMultipleObjectsEx ----
MsgWaitForMultipleObjectsEx    [New - Windows NT]当发生以下其中一种情况时，MsgWaitForMultipleObjectsEx函数返回：*任何一个或所有指定的对象都处于信号状态。对象数组可以包括使用【dwWakeMask】参数指定的输入事件对象。* I / O完成例程或异步过程调用（APC）排队等待线程。*经过了超时间隔。如果队列中指定类型的未读取输入为MsgWaitForMultipleObjectsEx函数，则不返回。仅当新输入到达时才返回。
语法
参数
【NCOUNT】指定【蜡烛xh】指向的数组中的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS减1。【蜡烛xh】指向一组对象句柄。有关可以指定句柄的对象类型的列表，请


-------------------------------------------------------- KeyWin32MulDiv ----
MulDiv    MulDiv函数将两个32位值相乘，然后将64位结果除以第三个32位值。返回值向上或向下舍入到最接近的整数。
语法
参数
【n已接收】指定被乘数。【// 32-bit signed multiplier】指定乘数。【// 32-bit signed divisor】指定乘法运算结果（【n已接收】 * 【// 3


-------------------------------------------------------- KeyWin32MultiByteToWideChar ----
MultiByteToWideChar    MultiByteToWideChar函数将字符串映射为宽字符（Unicode）字符串。由该函数映射的字符串不一定来自多字节字符集。
语法
参数
【CodePage】指定要用于执行转换的代码页。该参数可以被赋予在系统中安装或可用的任何代码页的值。以下值可用于指定系统默认代码页之一：值含义CP_ACPANSI代码页CP_MACCPMac


-------------------------------------------------------- KeyWin32MultinetGetConnectionPerformance ----
MultinetGetConnectionPerformance    MultinetGetConnectionPerformance函数返回有关用于访问网络资源的连接的预期性能的信息。此函数仅可用于请求重定向到网络资源的本地设备的信息，或者对于当前连接的网络资源。
语法
参数
【lpNetResource】指定以下网络资源之一：值含义【lpLocalName】指向指定本地设备的缓冲区的指针，例如“F：”或“LPT1”，被重定向到要查询的网络资源。如果此参数为NUL


-------------------------------------------------------- KeyWin32NDdeGetErrorString ----
NDdeGetErrorString    调用NDdeGetErrorString函数将网络DDE函数返回的错误代码转换为解释返回的错误代码的错误字符串。
语法



-------------------------------------------------------- KeyWin32NDdeGetShareSecurity ----
NDdeGetShareSecurity    调用NDdeGetShareSecurity函数来获取与DDE共享关联的SECURITY_DESCRIPTOR.这是通常进行编辑。
语法
参数
【lpszServer】DSDM所在的服务器名称的地址。【lpszShareName】要从DSDM检索其安全描述符的共享名的地址。此参数不能为NULL。【si】标识要从与该共享相关联的SEC


-------------------------------------------------------- KeyWin32NDdeGetTrustedShare ----
NDdeGetTrustedShare    调用NDdeGetTrustedShare函数来检索与服务器用户的受信任共享列表中的DDE共享相关联的选项。
语法
参数
【lpszServer】DSDM所在的服务器名称的地址。【lpszShareName】正在查询受信任状态的共享名称的地址。此参数不能为NULL。【lpdwTrustOptions】将存储TR


-------------------------------------------------------- KeyWin32NDdeIsValidAppTopicList ----
NDdeIsValidAppTopicList    调用NDdeIsValidAppTopicList函数来检查应用程序和主题字符串（“【AppName】 | 【TopicName】”）以获得正确的语法。
语法
参数
【targetTopic】应用程序的地址和要验证的主题字符串。此参数不能为NULL。
返回值
如果【targetTopic】参数具有有效的语法，则返回值不为零。如果函数失败，返回值为零。


-------------------------------------------------------- KeyWin32NDdeIsValidShareName ----
NDdeIsValidShareName    调用NDdeIsValidShareName函数来检查共享名称以获取正确的语法。
语法
参数
【SHARENAME】共享名称的地址进行验证。此参数不能为NULL。
返回值
如果共享名称具有有效的语法，则返回值不为零。如果共享名称没有有效的语法，则返回值为零。
描述
此函数在创


-------------------------------------------------------- KeyWin32NDdeSetShareSecurity ----
NDdeSetShareSecurity    调用NDdeSetShareSecurity函数来设置与DDE共享关联的SECURITY_DESCRIPTOR.这通常在编辑分配给DDE共享的DACL后完成。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【lpszShareName】要在DSDM中修改安全描述符的共享名的地址。此参数不能为NULL。【si】指定SECURITY_INF


-------------------------------------------------------- KeyWin32NDdeSetTrustedShare ----
NDdeSetTrustedShare    调用NDdeSetTrustedShare函数以在当前用户的上下文中授予引用的DDE共享信任状态。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【lpszShareName】共享名称的地址被授予信任状态。此参数不能为NULL。【dwTrustOptions】指定影响DDE共享


-------------------------------------------------------- KeyWin32NDdeShareAdd ----
NDdeShareAdd    调用NDdeShareAdd函数来创建和添加一个新的DDE共享到DDE共享数据库管理器（DSDM）。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【n级】一定是2。【pSD】将与此共享相关联的SECURITY_DESCRIPTOR的地址，以及将在后续启动此共享时执行哪些访问检查


-------------------------------------------------------- KeyWin32NDdeShareDel ----
NDdeShareDel    调用NDdeShareDel函数从DSDM中删除DDE共享。
语法



-------------------------------------------------------- KeyWin32NDdeShareEnum ----
NDdeShareEnum    调用NDdeShareEnum函数列出DSDM中可用的DDE共享。
语法



-------------------------------------------------------- KeyWin32NDdeShareGetInfo ----
NDdeShareGetInfo    调用NDdeShareGetInfo函数从DSDM中检索DDE共享信息。这通常用于编辑。
语法
参数
【lpszServer】DSDM所在的服务器名称的地址。【lpszShareName】要从DSDM检索其信息的共享名称的地址。此参数不能为NULL。【n级】必须是2。【lpBuffer】要接


-------------------------------------------------------- KeyWin32NDdeShareSetInfo ----
NDdeShareSetInfo    调用NDdeShareSetInfo函数来修改存储在NetDDE DSDM中的DDE共享信息。这通常在编辑之后完成。
语法
参数
【lpszServer】要修改DSDM的服务器名称的地址。【lpszShareName】要在DSDM中修改其信息的共享名称的地址。此参数不能为NULL。【n级】必须是2。【lpBuffer】


-------------------------------------------------------- KeyWin32NDdeTrustedShareEnum ----
NDdeTrustedShareEnum    NDdeTrustedShareEnum函数列出了在调用进程上下文中受信任的所有网络DDE共享的名称。
语法



-------------------------------------------------------- KeyWin32NetAccessAdd ----
NetAccessAdd    NetAccessAdd函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyWin32NetAccessCheck ----
NetAccessCheck    NetAccessCheck函数已过时。基于Win32的应用程序应使用AccessCheck函数。


-------------------------------------------------------- KeyWin32NetAccessDel ----
NetAccessDel    NetAccessDel函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyWin32NetAccessEnum ----
NetAccessEnum    NetAccessEnum函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyWin32NetAccessGetInfo ----
NetAccessGetInfo    NetAccessGetInfo函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyWin32NetAccessGetUserPerms ----
NetAccessGetUserPerms    NetAccessGetUserPerms函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyWin32NetAccessSetInfo ----
NetAccessSetInfo    NetAccessSetInfo函数已过时。基于Win32的应用程序应使用GetFileSecurity和SetFileSecurity函数。


-------------------------------------------------------- KeyWin32NetAlertRaise ----
NetAlertRaise    NetAlertRaise函数通知所有注册的客户端发生特定事件。
语法
参数
【AlertEventName】指向要引发的中断消息的Unicode字符串的指针。【缓冲】指向要发送给侦听此中断消息的客户端的数据的指针。数据应由STD_ALERT结构组成，后面是来自ADM


-------------------------------------------------------- KeyWin32NetAlertRaiseEx ----
NetAlertRaiseEx    NetAlertRaiseEx函数简化了管理员中断消息的提升。
语法
参数
【AlertEventName】指向Unicode字符串的指针，该字符串指定要提升的中断消息类型。【VariableInfo】信息放入管理员中断消息。【VariableInfoSize】可变


-------------------------------------------------------- KeyWin32NetApiBufferAllocate ----
NetApiBufferAllocate    NetApiBufferAllocate函数从堆中分配内存。仅当需要与NetApiBufferFree函数兼容时才能使用此函数。否则，请使用LocalAlloc.
语法
参数
【ByteCount】要分配的字节数。【缓冲】指向存储指向分配缓冲区的指针的位置的指针。



-------------------------------------------------------- KeyWin32NetApiBufferFree ----
NetApiBufferFree    NetApiBufferFree函数释放NetApiBufferAllocate分配的内存。使用此函数释放其他LAN Manager函数返回的内存。
语法
参数
【缓冲】指向之前在函数调用中返回的其他LAN Manager函数的信息缓冲区。



-------------------------------------------------------- KeyWin32NetApiBufferReallocate ----
NetApiBufferReallocate    NetApiBufferReallocate函数更改使用NetApiBufferAllocate分配的缓冲区的大小。
语法
参数
【OldBuffer】指向重定位缓冲区的指针。【NewByteCount】缓冲区的新大小。【NewBuffer】指向以前在函数调用中返回的函数信息缓冲区。



-------------------------------------------------------- KeyWin32NetApiBufferSize ----
NetApiBufferSize    NetApiBufferSize函数使用NetApiBufferAllocate返回分配缓冲区的大小（以字节为单位）。
语法
参数
【缓冲】指向以前在函数调用中返回的函数信息缓冲区。【ByteCount】缓冲区的大小。



-------------------------------------------------------- KeyWin32NetAuditClear ----
NetAuditClear    NetAuditClear函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyWin32NetAuditRead ----
NetAuditRead    NetAuditRead函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyWin32Netbios ----
{的NetBIOS} 999796002    Netbios的函数解释并执行指定的网络控制块（NCB）。
语法
参数
【pncb】指向描述网络控制块的NCB结构的指针。
返回值
对于同步请求，返回值是NCB 结构的返回码。该值也在NCB结构的ncb_retcode成员中返回。接受的异步请求有两个返回值的


-------------------------------------------------------- KeyWin32NetConfigGet ----
NetConfigGet    NetConfigGet函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用注册处.


-------------------------------------------------------- KeyWin32NetConfigGetAll ----
NetConfigGetAll    NetConfigGetAll函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用注册处.


-------------------------------------------------------- KeyWin32NetConfigSet ----
NetConfigSet    NetConfigSet函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用注册处.


-------------------------------------------------------- KeyWin32NetConnectionEnum ----
NetConnectionEnum    NetConnectionEnum函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetEnumResource函数。


-------------------------------------------------------- KeyWin32NetErrorLogClear ----
NetErrorLogClear    NetErrorLogClear函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyWin32NetErrorLogRead ----
NetErrorLogRead    NetErrorLogRead函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应该使用事件记录.


-------------------------------------------------------- KeyWin32NetFileClose ----
NetFileClose    在基于Win32的应用程序编程接口（API）中，NetFileClose函数已过时。它包含与16位版本的Windows兼容。


-------------------------------------------------------- KeyWin32NetFileEnum ----
NetFileEnum    NetFileEnum函数提供有关服务器上某些或所有打开文件的信息，允许用户提供一个简历句柄，并通过重复调用函数获取所需的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【基本路径】指向包含返回信息限定符的Unicode字符串。如果为NULL，则枚举


-------------------------------------------------------- KeyWin32NetFileGetInfo ----
NetFileGetInfo    NetFileGetInfo函数检索有关服务器资源特定开放的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【FILEID】要向其返回信息的打开资源的文件标识符。【FILEID】值必须是在


-------------------------------------------------------- KeyWin32NetGetAnyDCName ----
NetGetAnyDCName    NetGetAnyDCName函数获取由服务器名称直接信任的域的任何域控制器的名称。
语法
参数
【ServerName】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【DomainName】指定域的名称（主域为


-------------------------------------------------------- KeyWin32NetGetDCName ----
NetGetDCName    NetGetDCName函数返回指定域的主域控制器（PDC）的名称。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【域名】指向包含域名称的Unicode字符串。【】 NULL指针或字符串表示该函


-------------------------------------------------------- KeyWin32NetGetDisplayInformationIndex ----
NetGetDisplayInformationIndex    NetGetDisplayInformationIndex函数获取第一个显示信息条目的索引，其名称以指定的字符串开头，或按字母顺序排列。您可以使用此函数确定对NetQueryDisplayInformation函数的后续调用的起始索引。
语法
参数
【ServerName】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。


-------------------------------------------------------- KeyWin32NetGroupAdd ----
NetGroupAdd    NetGroupAdd函数在安全数据库中创建一个全局组。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置BUF参数中指向的信息级别。值含义0指定组名。BUF参数包含


-------------------------------------------------------- KeyWin32NetGroupAddUser ----
NetGroupAddUser    NetGroupAddUser函数为现有全局组中的现有用户帐户成员资格提供。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GroupName】指向包含要向用户提供成员身份的全局组的名称的Unicode


-------------------------------------------------------- KeyWin32NetGroupDel ----
NetGroupDel    NetGroupDel函数从帐户数据库中删除全局组帐户。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含要删除的全局组帐户名称的Unicode字符串。



-------------------------------------------------------- KeyWin32NetGroupDelUser ----
NetGroupDelUser    NetGroupDelUser函数从安全数据库中的特定全局组中删除用户。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GroupName】指向一个Unicode字符串，其中包含要从中删除用户成员身


-------------------------------------------------------- KeyWin32NetGroupEnum ----
NetGroupEnum    NetGroupEnum函数检索有关每个全局组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一返回【bufptrig】参数中指向的信息级别。值含义0返回


-------------------------------------------------------- KeyWin32NetGroupGetInfo ----
NetGroupGetInfo    NetGroupGetInfo函数检索有关服务器上特定全局组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含要在其上返回信息的全局组帐户的名称的Unicode


-------------------------------------------------------- KeyWin32NetGroupGetUsers ----
NetGroupGetUsers    NetGroupGetUsers函数检索安全数据库中特定全局组成员的列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含要列出其成员的全局组的名称的Unicode字符串。


-------------------------------------------------------- KeyWin32NetGroupSetInfo ----
NetGroupSetInfo    NetGroupSetInfo函数设置全局组帐户的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。GROUPNAME指向包含要设置信息的全局组帐户名称的Unicode字符串。水平指定


-------------------------------------------------------- KeyWin32NetGroupSetUsers ----
NetGroupSetUsers    NetGroupSetUsers函数设置指定全局组的全局组成员资格。指定的每个用户都是全局组的成员。未指定但目前为全球组成员的用户将被撤销。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【GROUPNAME】指向包含指定用户所属的全局组名称的Unicode字符串。【


-------------------------------------------------------- KeyWin32NetHandleGetInfo ----
NetHandleGetInfo    NetHandleGetInfo函数可检索特定字符设备和命名管道句柄的信息。
语法
参数
【hHandle】标识通信设备队列或命名管道。【sLevelen】指定要求的详细程度（1或2）。注意只有当【hHandle】参数的值是远程服务器上存在的命名管道或字符设备的有效句柄时，才能在


-------------------------------------------------------- KeyWin32NetHandleSetInfo ----
NetHandleSetInfo    NetHandleSetInfo函数设置字符设备和命名管道句柄特定的信息。
语法
参数
【hHandle】标识通信设备队列或命名管道。【sLevelen】Specifies the level of detail provided; must be 1.【此函数通常用于生成随机


-------------------------------------------------------- KeyWin32NetLocalGroupAdd ----
NetLocalGroupAdd    NetLocalGroupAdd函数在安全数据库中创建本地组。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置BUF参数中指向的信息级别。值含义0指定用户的本地组名。指定


-------------------------------------------------------- KeyWin32NetLocalGroupAddMember ----
NetLocalGroupAddMemberNetLocalGroupAddMember函数已过时。基于Win32的应用程序应使用NetLocalGroupAddMembers函数。


-------------------------------------------------------- KeyWin32NetLocalGroupAddMembers ----
NetLocalGroupAddMembers    NetLocalGroupAddMembers函数将一个或多个现有用户帐户或全局组的成员资格添加到现有本地组。该函数不会更改当前是本地组成员的用户或全局组的成员资格状态。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【LocalGroupName】指向一个null终止的


-------------------------------------------------------- KeyWin32NetLocalGroupDel ----
NetLocalGroupDel    NetLocalGroupDel函数从帐户数据库中删除本地组帐户及其所有成员。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【LocalGroupName】指向包含要删除的本地组帐户名称的Unicode字


-------------------------------------------------------- KeyWin32NetLocalGroupDelMember ----
NetLocalGroupDelMember    NetLocalGroupDelMember函数已过时。基于Win32的应用程序应使用NetLocalGroupDelMembers函数。


-------------------------------------------------------- KeyWin32NetLocalGroupDelMembers ----
NetLocalGroupDelMembers    NetLocalGroupDelMembers函数从现有本地组中删除一个或多个成员。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【LocalGroupName】指向以null结尾的U


-------------------------------------------------------- KeyWin32NetLocalGroupEnum ----
NetLocalGroupEnum    NetLocalGroupEnum函数检索有关每个本地组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一返回【bufptrig】参数中指向的信息级别。值含义0返回


-------------------------------------------------------- KeyWin32NetLocalGroupGetInfo ----
NetLocalGroupGetInfo    NetLocalGroupGetInfo函数检索有关服务器上特定本地组帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【LocalGroupName】指向包含要在其上返回信息的本地组帐户的名称的Un


-------------------------------------------------------- KeyWin32NetLocalGroupGetMembers ----
NetLocalGroupGetMembers    NetLocalGroupGetMembers函数检索安全数据库中特定本地组成员的列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【localgroupname】指向包含要列出其成员的本地组的名称的Unicod


-------------------------------------------------------- KeyWin32NetLocalGroupSetInfo ----
NetLocalGroupSetInfo    NetLocalGroupSetInfo函数设置本地组的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。LocalGroupName指向包含要设置信息的本地组帐户名称的Unicode字符串


-------------------------------------------------------- KeyWin32NetLocalGroupSetMembers ----
NetLocalGroupSetMembers    NetLocalGroupSetMembers函数设置指定本地组的本地组成员资格。指定的每个用户或全局组都是本地组的成员。未指定但目前为本地组成员的用户或全局组将撤销成员身份。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【LocalGroupName】指向包含指定用户或全局组所属的本地组的名称的Un


-------------------------------------------------------- KeyWin32NetMessageBufferSend ----
NetMessageBufferSend    NetMessageBufferSend函数将信息缓冲区发送到已注册的消息别名。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含应发送消息缓冲区的消息名称的Unicode字符串。【F


-------------------------------------------------------- KeyWin32NetMessageNameAdd ----
NetMessageNameAdd    NetMessageNameAdd函数在消息名称表中注册消息别名。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含要添加的消息名称的Unicode字符串。字符串不能超过


-------------------------------------------------------- KeyWin32NetMessageNameDel ----
NetMessageNameDel    NetMessageNameDel函数从计算机上的消息别名表中删除消息别名。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含要删除的消息名称的Unicode字符串。字符串不能超过


-------------------------------------------------------- KeyWin32NetMessageNameEnum ----
NetMessageNameEnum    NetMessageNameEnum函数列出将在指定的计算机上接收消息的消息别名。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一返回所提供的所请求的信息级别。值含义0【bufptrig】


-------------------------------------------------------- KeyWin32NetMessageNameGetInfo ----
NetMessageNameGetInfo    NetMessageNameGetInfo函数在消息名称表中检索有关特定邮件别名的信息。此函数要求启动Messenger服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【msgname】指向包含要在其上返回信息的消息名称的Unicode字符串。【水


-------------------------------------------------------- KeyWin32NetQueryDisplayInformation ----
NetQueryDisplayInformation    NetQueryDisplayInformation函数返回用户，计算机或全局组帐户信息。使用此函数快速枚举用户界面中显示的帐户信息。
语法
参数
【ServerName】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。


-------------------------------------------------------- KeyWin32NetRemoteTOD ----
NetRemoteTOD    NetRemoteTOD函数返回指定服务器的时间信息。
语法



-------------------------------------------------------- KeyWin32NetReplExportDirAdd ----
NetReplExportDirAdd    NetReplExportDirAdd函数在导出路径中注册要复制的现有目录。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。水平指定以下值来设置提供的信息级别。值含义1BUF参数指向


-------------------------------------------------------- KeyWin32NetReplExportDirDel ----
NetReplExportDirDel    NetReplExportDirDel函数删除了复制目录的注册。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个空值终止的Unicode字符串，其中


-------------------------------------------------------- KeyWin32NetReplExportDirEnum ----
NetReplExportDirEnum    NetReplExportDirEnum函数列出导出路径中的复制目录。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【


-------------------------------------------------------- KeyWin32NetReplExportDirGetInfo ----
NetReplExportDirGetInfo    NetReplExportDirGetInfo函数检索复制目录的控制信息。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个以null结尾的Unicode字符串


-------------------------------------------------------- KeyWin32NetReplExportDirLock ----
NetReplExportDirLock    NetReplExportDirLock函数锁定复制目录，以便可以暂停从其复制。此函数会增加指定目录的锁定引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyWin32NetReplExportDirSetInfo ----
NetReplExportDirSetInfo    NetReplExportDirSetInfo函数修改复制目录的控制信息。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。目录名指向一个null终止的Unicode字符串，其中包含


-------------------------------------------------------- KeyWin32NetReplExportDirUnlock ----
NetReplExportDirUnlock    NetReplExportDirUnlock函数解锁了一个目录，以便可以恢复它。该函数减少指定目录的锁引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyWin32NetReplGetInfo ----
NetReplGetInfo    NetReplGetInfo函数检索Replicator服务的配置信息。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值返回提供的信息级别。值含义0【buf


-------------------------------------------------------- KeyWin32NetReplImportDirAdd ----
NetReplImportDirAdd    NetReplImportDirAdd函数在导入路径中注册现有目录，以从主机接收复制。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。水平指定以下值来设置提供的信息级别。值含义0BUF参数指向


-------------------------------------------------------- KeyWin32NetReplImportDirDel ----
NetReplImportDirDel    NetReplImportDirDel函数删除目录的注册，使其不再从主机接收更新。请注意，该函数实际上并不从文件系统中删除该目录。Replicator服务可以随时自动注册目录服务。要防止导入某些Replicator服务导出的目录，请改用NetReplImportDirLock函数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向以空值终止的Unicode字符串，其中包


-------------------------------------------------------- KeyWin32NetReplImportDirEnum ----
NetReplImportDirEnum    NetReplImportDirEnum函数列出导入路径中的复制目录。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【


-------------------------------------------------------- KeyWin32NetReplImportDirGetInfo ----
NetReplImportDirGetInfo    NetReplImportDirGetInfo函数检索客户端复制目录上的状态信息。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个以null结尾的Unicode字符串


-------------------------------------------------------- KeyWin32NetReplImportDirLock ----
NetReplImportDirLock    NetReplImportDirLock函数锁定复制目录，以便可以暂停对它的复制。此函数会增加指定目录的锁定引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyWin32NetReplImportDirUnlock ----
NetReplImportDirUnlock    NetReplImportDirUnlock函数解锁了一个目录，以便可以恢复它。该函数减少指定目录的锁引用计数。
语法
参数
【服务器名称】指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。【目录名】指向一个null终止的Unicode字符串，


-------------------------------------------------------- KeyWin32NetReplSetInfo ----
NetReplSetInfo    NetReplSetInfo函数修改Replicator服务配置信息。
语法
参数
服务器名称指向一个以null结尾的Unicode字符串，其中包含要执行该函数的远程服务器的名称。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义0BUF参数


-------------------------------------------------------- KeyWin32NetScheduleJobAdd ----
NetScheduleJobAdd    NetScheduleJobAdd函数提交作业以在指定的未来时间和日期运行。此函数要求在提交作业的计算机上启动Schedule服务。
语法



-------------------------------------------------------- KeyWin32NetScheduleJobDel ----
NetScheduleJobDel    NetScheduleJobDel函数删除排队等待在计算机上运行的作业范围。此函数要求在发送作业删除请求的计算机上启动计划服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【MinJobId】最小作业标识符。作业标识符小于【MinJobId】的作业将不


-------------------------------------------------------- KeyWin32NetScheduleJobEnum ----
NetScheduleJobEnum    NetScheduleJobEnum函数列出了在指定计算机上排队的作业。此函数要求启动Schedule服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【PointerToBuffer】返回时，返回信息结构的指针返回到【Pointe


-------------------------------------------------------- KeyWin32NetScheduleJobGetInfo ----
NetScheduleJobGetInfo    NetScheduleJobGetInfo函数检索有关指定计算机上排队的特定作业的信息。此函数要求启动Schedule服务。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【JobId】有关工作的工作标识符。【PointerToBuffer】返回指向缓


-------------------------------------------------------- KeyWin32NetServerDiskEnum ----
NetServerDiskEnum    NetServerDiskEnum函数检索服务器上的磁盘驱动器列表。此函数将其结果作为三个字符串的数组（驱动器号，冒号，NULL）返回。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值返回提供的信息级别。值含义100【bufptrig】参数指向S


-------------------------------------------------------- KeyWin32NetServerEnum ----
NetServerEnum    NetServerEnum函数列出了在指定域中可见的指定类型的所有服务器。例如，应用程序可以调用NetServerEnum列出所有域控制器或仅列出所有SQL服务器。您可以组合位掩码列出几种类型。例如，0x00000003的值组合了SV_TYPE_WORKSTATION（0x00000001）和SV_TYPE_SERVER（0x00000002）的位掩码。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义100【bufptrig】参数


-------------------------------------------------------- KeyWin32NetServerGetInfo ----
NetServerGetInfo    NetServerGetInfo函数检索有关指定服务器的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义100【bufptrig】参数


-------------------------------------------------------- KeyWin32NetServerSetInfo ----
NetServerSetInfo    NetServerSetInfo函数设置服务器的操作参数;它可以单独设置或集体设置。该信息以允许系统重新初始化后保持有效的方式进行存储。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】要设置的信息级别。SERVER_INFO_100，SERVER_INFO


-------------------------------------------------------- KeyWin32NetServerTransportAdd ----
NetServerTransportAdd    NetServerTransportAdd函数将服务器绑定到传输。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值来设置提供的信息级别。值含义0【bufptrig】参数指向SE


-------------------------------------------------------- KeyWin32NetServerTransportDel ----
NetServerTransportDel    NetServerTransportDel函数将传输协议从服务器解除绑定（或断开连接）。实际上，服务器不能再使用传输协议与客户端进行通信。服务器将不再处理活动传输协议（如TCP，NetBEUI和XNS）的客户端请求。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【transportname】指向包含要解除绑定的传输协议名称的Unicode字


-------------------------------------------------------- KeyWin32NetServerTransportEnum ----
NetServerTransportEnum    NetServerTransportEnum函数提供有关由服务器管理的传输的信息。
语法



-------------------------------------------------------- KeyWin32NetServiceControl ----
NetServiceControl    NetServiceControl函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyWin32NetServiceEnum ----
NetServiceEnum    NetServiceEnum函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyWin32NetServiceGetInfo ----
NetServiceGetInfo    NetServiceGetInfo函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyWin32NetServiceInstall ----
NetServiceInstall    NetServiceInstall函数已过时。它包含与16位版本的Windows兼容。基于Win32的应用程序应使用服务函数.


-------------------------------------------------------- KeyWin32NetSessionDel ----
NetSessionDel    NetSessionDel函数结束服务器和工作站之间的会话。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【UncClientName】指向包含要断开连接的客户端计算机名的Unicode


-------------------------------------------------------- KeyWin32NetSessionEnum ----
NetSessionEnum    NetSessionEnum函数提供有关所有当前会话的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【UncClientName】指向包含要返回信息的计算机会话名称的Unicode


-------------------------------------------------------- KeyWin32NetSessionGetInfo ----
NetSessionGetInfo    NetSessionGetInfo函数检索有关在特定服务器和工作站之间建立的会话的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【UncClientName】指向包含要返回信息的计算机会话名称的Unicode


-------------------------------------------------------- KeyWin32NetShareAdd ----
NetShareAdd    NetShareAdd函数共享服务器资源。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义2BUF参数指向SHARE_INFO_


-------------------------------------------------------- KeyWin32NetShareCheck ----
NetShareCheck    NetShareCheck函数检查服务器是否共享设备。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【设备】指向包含要检查共享访问的设备名称的Unicode字符串。【类型】指向包含


-------------------------------------------------------- KeyWin32NetShareDel ----
NetShareDel    NetShareDel函数从服务器的共享资源列表中删除共享名称，断开与共享资源的所有连接。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【网络名】指向包含要删除的共享的网络名称的Unicode字符串。【保留的】保留，


-------------------------------------------------------- KeyWin32NetShareEnum ----
NetShareEnum    NetShareEnum函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetEnumResource函数。


-------------------------------------------------------- KeyWin32NetShareGetInfo ----
NetShareGetInfo    NetShareGetInfo函数检索有关服务器上特定共享资源的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【网络名】指向包含要返回信息的共享的网络名称的Unicode字符串。【水平】指定


-------------------------------------------------------- KeyWin32NetShareSetInfo ----
NetShareSetInfo    NetShareSetInfo函数设置共享资源的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。网络名指向包含要设置信息的共享的网络名称的Unicode字符串。水平指定以下值之一来


-------------------------------------------------------- KeyWin32NetStatisticsGet ----
NetStatisticsGet    NetStatisicsGet函数已过时。基于Win32的应用程序应使用NetStatisticsGet2函数


-------------------------------------------------------- KeyWin32NetStatisticsGet2 ----
NetStatisticsGet2    NetStatisticsGet2检索服务的运行统计信息。目前，只支持Workstation和Server服务。
语法
参数
【服务器】指向包含要在其上执行NetStatisticsGet2的服务器名称的Unicode字符串。NULL指针或空字符串指定本地计算机。【服务】指向一个Unicode字符串，其中包含获取统


-------------------------------------------------------- KeyWin32NetUseAdd ----
NetUseAdd    NetUseAdd函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetAddConnection2函数。


-------------------------------------------------------- KeyWin32NetUseDel ----
NetUseDel    NetUseDel函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetCancelConnection2函数。


-------------------------------------------------------- KeyWin32NetUseEnum ----
NetUseEnum    NetUseEnum函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetEnumResource函数。


-------------------------------------------------------- KeyWin32NetUseGetInfo ----
NetUseGetInfo    NetUseGetInfo函数已过时。它仅用于与LAN Manager和16位版本的Windows兼容。基于Win32的应用程序应使用WNetGetConnection函数。


-------------------------------------------------------- KeyWin32NetUserAdd ----
NetUserAdd    NetUserAdd函数添加用户帐户并分配密码和权限级别。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义1BUF参数指向USER_INFO_1


-------------------------------------------------------- KeyWin32NetUserChangePassword ----
NetUserChangePassword    NetUserChangePassword函数可更改指定网络服务器或域的用户密码。
语法
参数
【域名】指向指定远程服务器或域的名称的以null结尾的Unicode字符串的指针。NetUserChangePassword函数可以更改该远程服务器或域上的用户密码。【域名】参数中的值为空，


-------------------------------------------------------- KeyWin32NetUserDel ----
NetUserDel    NetUserDel函数从服务器中删除用户帐号。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向要删除的用户帐户名称的Unicode字符串。
描述
用户或应用


-------------------------------------------------------- KeyWin32NetUserEnum ----
NetUserEnum    NetUserEnum函数提供有关服务器上所有用户帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向


-------------------------------------------------------- KeyWin32NetUserGetGroups ----
NetUserGetGroups    NetUserGetGroups函数检索指定用户所属的全局组列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定在本地计算机上运行的服务器程序。【用户名】指向包含要在每个组帐户中搜索的用户名称的Unico


-------------------------------------------------------- KeyWin32NetUserGetInfo ----
NetUserGetInfo    NetUserGetInfo函数检索有关服务器上特定用户帐户的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向包含要在其上返回信息的用户帐户名称的Unicode字符串。【水平】


-------------------------------------------------------- KeyWin32NetUserGetLocalGroups ----
NetUserGetLocalGroups    NetUserGetLocalGroups函数检索指定用户所属的本地组列表。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向包含用于返回全局组成员身份的用户名称的Unicode字符串。此参数


-------------------------------------------------------- KeyWin32NetUserModalsGet ----
NetUserModalsGet    NetUserModalsGet函数检索安全数据库中所有用户和全局组的全局信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向


-------------------------------------------------------- KeyWin32NetUserModalsSet ----
NetUserModalsSet    NetUserModalsSet函数为安全数据库中的所有用户和全局组设置全局信息。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值之一来设置提供的信息级别。值含义0BUF参数指向USER_MODALS


-------------------------------------------------------- KeyWin32NetUserSetGroups ----
NetUserSetGroups    NetUserSetGroups函数为指定的用户帐户设置全局组成员资格。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【用户名】指向包含用于设置全局组成员资格的用户名称的Unicode字符串。【水平


-------------------------------------------------------- KeyWin32NetUserSetInfo ----
NetUserSetInfo    NetUserSetInfo函数设置用户帐户的参数。
语法
参数
服务器名称指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。用户名指向包含用户帐户名称的Unicode字符串以设置信息。水平指定以下值之一来设置


-------------------------------------------------------- KeyWin32NetWkstaGetInfo ----
NetWkstaGetInfo    NetWkstaGetInfo函数返回有关工作站的配置元素的信息。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义100【bufptrig】参数


-------------------------------------------------------- KeyWin32NetWkstaSetInfo ----
NetWkstaSetInfo    NetWkstaSetInfo函数配置工作站。该信息在系统重新初始化后仍然有效。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来设置提供的信息级别。值含义100【缓冲】参数指向WKST


-------------------------------------------------------- KeyWin32NetWkstaTransportAdd ----
NetWkstaTransportAdd    NetWkstaTransportAdd函数将重定向器绑定（或连接）到传输器。重定向器是客户端计算机上为服务器计算机生成文件请求的软件。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值来设置提供的信息级别。值含义0【BUF】参数指向WKSTA_T


-------------------------------------------------------- KeyWin32NetWkstaTransportDel ----
NetWkstaTransportDel    NetWkstaTransportDel函数从转发程序中取消绑定传输协议，这是客户端计算机上向服务器计算机生成文件请求的软件。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【transportname】指向包含要解除绑定的传输名称的Unicode字符串


-------------------------------------------------------- KeyWin32NetWkstaTransportEnum ----
NetWkstaTransportEnum    NetWkstaTransportEnum函数提供有关由重定向器管理的传输协议的信息，这是客户端计算机上为服务器计算机生成文件请求的软件。
语法
参数
服务器名称Ppointer指向包含要在其上执行该函数的远程服务器的名称的Unicode字符串。NULL指针或字符串指定本地计算机。水平指定以下值返回提供的信息级别。值含义0bufptrig参


-------------------------------------------------------- KeyWin32NetWkstaUserEnum ----
NetWkstaUserEnum    NetWkstaUserEnum函数列出了有关当前登录到工作站的所有用户的信息。此列表包括交互式，服务和批量登录。
语法
参数
【服务器名称】指向包含要执行该函数的远程服务器名称的Unicode字符串。NULL指针或字符串指定本地计算机。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向


-------------------------------------------------------- KeyWin32NetWkstaUserGetInfo ----
NetWkstaUserGetInfo    NetWkstaUserGetInfo函数返回有关当前登录的用户的信息。必须在登录用户的上下文中调用此函数。
语法
参数
【保留的】此参数必须设置为NULL。【水平】指定以下值之一来返回提供的信息级别。值含义0【bufptrig】参数指向WKSTA_USER_INFO_0结构。1【bufptrig】参数指向WK


-------------------------------------------------------- KeyWin32NetWkstaUserSetInfo ----
NetWkstaUserSetInfo    NetWkstaUserSetInfo函数设置有关工作站的配置元素的用户特定信息。
语法
参数
保留的该参数必须设置为零。水平指定以下值之一来设置提供的信息级别。值含义0BUF参数指向WKSTA_USER_INFO_0结构。1BUF参数指向WKSTA_USER_INFO_1结构。110


-------------------------------------------------------- KeyWin32NotifyBootConfigStatus ----
NotifyBootConfigStatus    NotifyBootConfigStatus函数通知服务控制管理员有关启动系统的配置的可接受性。可接受的配置触发该配置的存储作为最后一个已知的良好配置;不可接受的配置触发系统重新启动。
语法



-------------------------------------------------------- KeyWin32NotifyChangeEventLog ----
NotifyChangeEventLog    NotifyChangeEventLog函数允许应用程序在将事件写入【hEventLog】参数指定的事件日志文件时收到通知。当事件写入事件日志文件时，该函数会使由【活动】参数指定的事件对象发出信号。
语法
参数
【hEventLog】处理通过调用OpenEventLog函数获取的事件日志文件。当事件被写入此日志文件时，【活动】指定的事件变为信号。【活动】一个Win32事件的句柄。这是当事件写入由【h


-------------------------------------------------------- KeyWin32ObjectCloseAuditAlarm ----
ObjectCloseAuditAlarm    当删除对象的句柄时，ObjectCloseAuditAlarm函数会生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结尾的字符串，指定调用该函数的子系统的名称，例如“DEBUG”或“WIN32”。【HandleId】指定一个唯一的32位值，表示客户端对象的句


-------------------------------------------------------- KeyWin32ObjectDeleteAuditAlarm ----
ObjectDeleteAuditAlarm    [New - Windows NT]删除对象时，ObjectDeleteAuditAlarm函数会生成审核消息。Windows NT安全性不支持警报。
语法
参数
【SubsystemName】指向以null结尾的字符串的指针，指定调用该函数的子系统的名称;例如“DEBUG”或“WIN32”。此字符串显示在该对象的审核日志中。【HandleId】指定一


-------------------------------------------------------- KeyWin32ObjectOpenAuditAlarm ----
ObjectOpenAuditAlarm    当客户端应用程序尝试访问对象或创建新对象时，ObjectOpenAuditAlarm函数将生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结束的字符串，指定调用此函数的子系统，例如“DEBUG”或“WIN32”。【HandleId】指向一个唯一的32位值，表示客户端对象的句柄。如


-------------------------------------------------------- KeyWin32ObjectPrivilegeAuditAlarm ----
ObjectPrivilegeAuditAlarm    由于客户端尝试使用该对象已经打开的句柄对服务器应用程序对象执行特权操作，ObjectPrivilegeAuditAlarm函数将生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结尾的字符串，指定调用函数的子系统的名称;例如“DEBUG”或“WIN32”。【HandleId】指向一个唯一的32位值，表示客户端对象的句柄


-------------------------------------------------------- KeyWin32OemKeyScan ----
OemKeyScan    OEM代码0到0x0FF的OemKeyScan函数将映射到OEM扫描代码和移位状态。该函数提供的信息允许程序通过模拟键盘输入将OEM文本发送到另一个程序。
语法
参数
【wOemChar】指定OEM字符的ASCII值。
返回值
如果函数成功，返回值的低位字包含给定OEM字符的扫描码，高位字包含移位状态，它可以是以下标志位的组合：位含义1按SHIFT键。


-------------------------------------------------------- KeyWin32OemToAnsi ----
OemToAnsi  OemToAnsi函数已过时。为了与16位版本的Windows兼容，此函数实现为调用OemToChar函数的宏，该函数应用于新的基于Win32的应用程序。


-------------------------------------------------------- KeyWin32OemToAnsiBuff ----
OemToAnsiBuff  OemToAnsiBuff函数已过时。为了与16位版本的Windows兼容，此函数实现为调用OemToCharBuff函数的宏，该函数应用于基于Win32的应用程序。


-------------------------------------------------------- KeyWin32OemToChar ----
OemToChar    OemToChar函数将一个字符串从OEM定义的字符集转换为ANSI或宽字符串。（OEM代表原始设备制造商。）此函数取代OemToAnsi函数。
语法
参数
【lpszSrc】指向OEM定义的字符集中以空字符结尾的字符串。【lpszDst】指向缓冲区的翻译字符串。如果OemToChar函数用作ANSI函数，则可以通过将【lpszDst】参数设置为


-------------------------------------------------------- KeyWin32OemToCharBuff ----
OemToCharBuff    OemToCharBuff函数将字符串中指定数量的字符从OEM定义的字符集转换为ANSI或宽字符串。（OEM代表原始设备制造商。）此函数取代OemToAnsiBuff函数。
语法
参数
【lpszSrc】指向包含OEM定义字符集中的一个或多个字符的缓冲区。【lpszDst】指向缓冲区的翻译字符串。如果OemToCharBuff函数用作ANSI函数，则可以通过将【lpszDs


-------------------------------------------------------- KeyWin32OffsetClipRgn ----
OffsetClipRgn    OffsetClipRgn函数将设备上下文的剪切区域移动指定的偏移量。
语法
参数
【HDC】标识设备上下文。【nXOffset】指定向左或向右移动的逻辑单位数。【nYOffset】指定上下移动的逻辑单位数。
返回值
如果函数成功，则返回值指定新区域的复杂度，并且可以是


-------------------------------------------------------- KeyWin32OffsetRect ----
OffsetRect    OffsetRect函数将指定的矩形移动指定的偏移量。
语法
参数
【LPRC】指向包含要移动的矩形的逻辑坐标的RECT结构。【dx】指定向左或向右移动矩形的量。此参数必须是负值才能将矩形向左移动。【dy】指定向上或向下移动矩形的量。此参数必须为负值才能将矩


-------------------------------------------------------- KeyWin32OffsetRgn ----
OffsetRgn    OffsetRgn函数将区域移动指定的偏移量。
语法



-------------------------------------------------------- KeyWin32OffsetViewportOrgEx ----
OffsetViewportOrgEx    OffsetViewportOrgEx函数使用指定的水平和垂直偏移修改设备上下文的视口原点。
语法
参数
【HDC】标识设备上下文。【nXOffset】以设备为单位指定水平偏移。【nYOffset】以设备为单位指定垂直偏移。【LPPOINT】指向POINT结构。以前的视口原点（以设备为单位）放置


-------------------------------------------------------- KeyWin32OffsetWindowOrgEx ----
OffsetWindowOrgEx    OffsetWindowOrgEx函数使用指定的水平和垂直偏移修改设备上下文的窗口原点。
语法



-------------------------------------------------------- KeyWin32OFNHookProc ----
OFNHookProc    一个OFNHookProc挂接过程是一个应用程序定义或库定义的回调过程，它与Explorer风格的Open和Save As常用对话框一起使用。挂钩过程接收从公共对话框发送的通知消息。挂钩过程还会接收通过指定子对话框模板定义的任何其他控件的消息。如果您在创建“打开”或“另存为公共”对话框时未指定OFN_EXPLORER标志，并且希望使用挂钩过程，则必须使用旧式OFNHookProcOldStyle挂接过程。在这种情况下，对话框将具有旧式用户界面。
语法
参数
【hdlg】处理“打开”或“另存为”对话框的子对话框。使用GetParent函数获取打开或另存为对话框窗口的句柄。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息


-------------------------------------------------------- KeyWin32OFNHookProcOldStyle ----
OFNHookProcOldStyle    一个OFNHookProcOldStyle挂接过程是一个应用程序定义或库定义的回调过程，与“打开和另存为”常用对话框一起使用。挂钩过程接收针对对话框过程的消息或通知。如果您在创建“打开”或“另存为公共”对话框时指定OFN_EXPLORER标志，并且想要挂钩过程，则必须使用资源管理器风格的OFNHookProc挂接过程。
语法
参数
【hdlg】处理打开或另存为对话框窗口，其消息的目的是。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】


-------------------------------------------------------- KeyWin32OpenBackupEventLog ----
OpenBackupEventLog    OpenBackupEventLog函数打开备份事件日志的句柄。该手柄可以与BackupEventLog函数一起使用。
语法
参数
【lpUNCServerName】指向以空字符结尾的字符串，该字符串指定要执行此操作的服务器的通用命名约定（UNC）名称。如果此参数为NULL，则在本地计算机上执行该操作。【lpFileNa


-------------------------------------------------------- KeyWin32OpenClipboard ----
OpenClipboard    OpenClipboard函数打开剪贴板进行检查，并阻止其他应用程序修改剪贴板内容。
语法
参数
【hWndNewOwner】标识与打开的剪贴板关联的窗口。如果此参数为NULL，则打开的剪贴板与当前任务相关联。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展


-------------------------------------------------------- KeyWin32OpenDesktop ----
OpenDesktop    OpenDesktop函数返回一个现有桌面的句柄。桌面是包含在窗口站对象内的安全对象。桌面具有逻辑显示面，并包含窗口，菜单和挂钩。
语法
参数
【lpszDesktop】指向以空字符结尾的字符串，指定要打开的桌面的名称。桌面名称不区分大小写。【dwFlags中】一个位标志参数，用于控制呼叫应用程序将如何与桌面上的其他应用程序配合使用


-------------------------------------------------------- KeyWin32OpenEvent ----
OpenEvent    OpenEvent函数返回现有命名事件对象的句柄。
语法
参数
【dwDesiredAccess】指定对事件对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：访问描述


-------------------------------------------------------- KeyWin32OpenEventLog ----
OpenEventLog    OpenEventLog函数打开事件日志的句柄。
语法
参数
【lpUNCServerName】指向以空字符结尾的字符串，指定要在其上打开事件日志的服务器的通用命名约定（UNC）名称。如果此参数为NULL，则在本地计算机上打开该日志。【lpSource


-------------------------------------------------------- KeyWin32OpenFile ----
OpenFile    OpenFile函数创建，打开，重新打开或删除文件。此函数用于与16位版本的Windows兼容。特别地，OpenFile函数无法打开命名管道。基于Win32的应用程序应使用CreateFile函数。
语法
参数
【lpFileName】指向以空字符结尾的字符串，命名要打开的文件。字符串必须包含来自Windows 3.【x】字符集的字符。OpenFile函数不支持Unicode文件名。【lpReOpe


-------------------------------------------------------- KeyWin32OpenFileMapping ----
OpenFileMapping    OpenFileMapping函数打开一个命名的文件映射对象。
语法
参数
【dwDesiredAccess】指定对文件映射对象的访问。Windows NT：对目标文件映射对象上的任何安全描述符检查此访问。Windows 95：Windows 95不支持文件映射对象


-------------------------------------------------------- KeyWin32OpenIcon ----
OpenIcon    OpenIcon函数将最小化（标志性）窗口恢复到其先前的大小和位置;然后激活窗口。
语法
参数
【的hWnd】标识要恢复和激活的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
OpenIcon向给


-------------------------------------------------------- KeyWin32OpenInputDesktop ----
OpenInputDesktop    OpenInputDesktop函数返回一个接收用户输入的桌面的句柄。输入桌面是与登录用户相关联的窗口台上的桌面。
语法
参数
【dwFlags中】一个位标志参数，用于控制呼叫应用程序将如何与桌面上的其他应用程序配合使用。此参数可以指定零或以下值：值描述DF_ALLOWOTHERACCOUNTHOOK允许进程在桌面上


-------------------------------------------------------- KeyWin32OpenMutex ----
OpenMutex    OpenMutex函数返回一个现有的命名互斥对象的句柄。
语法
参数
【dwDesiredAccess】指定对互斥体对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：访问描


-------------------------------------------------------- KeyWin32OpenPrinter ----
OpenPrinter    OpenPrinter函数可检索识别指定打印机或打印服务器的句柄。
语法
参数
【pPrinterName】指向以空字符结尾的字符串，指定打印机或打印服务器的名称。【phPrinter】指向接收标识打开的打印机或打印服务器对象的句柄的变量。【pDefault】指向PRI


-------------------------------------------------------- KeyWin32OpenProcess ----
OpenProcess    OpenProcess函数返回现有进程对象的句柄。
语法
参数
【dwDesiredAccess】指定对进程对象的访问。对于支持安全检查的操作系统，将针对目标进程的任何安全描述符检查此访问。除了STANDARD_RIGHTS_REQUIRED访问标志之外


-------------------------------------------------------- KeyWin32OpenProcessToken ----
OpenProcessToken    OpenProcessToken函数打开与进程关联的访问令牌。
语法
参数
【ProcessHandle】标识访问令牌打开的进程。【DesiredAccess】指定一个访问掩码，指定访问令牌的请求类型。这些请求的访问类型与令牌的自由访问控制列表（ACL）进行比较，以


-------------------------------------------------------- KeyWin32OpenSCManager ----
OpenSCManager    OpenSCManager函数在指定的计算机上建立与服务控制管理器的连接，并打开指定的数据库。
语法
参数
【lpMachineName】指向以目标计算机命名的以null结尾的字符串。如果指针为NULL或指向空字符串，则该函数将连接到本地计算机上的服务控制管理器。【lpDatabaseName】指


-------------------------------------------------------- KeyWin32OpenSemaphore ----
OpenSemaphore    OpenSemaphore函数返回一个现有的命名信号量对象的句柄。
语法
参数
【dwDesiredAccess】指定对信号量对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：访问描


-------------------------------------------------------- KeyWin32OpenService ----
OpenService    OpenService函数打开现有服务的句柄。
语法
参数
【hSCManager】标识服务控制管理器（SCM）数据库。OpenSCManager函数返回此句柄。【lpServiceName】指向以空字符结尾的字符串，命名要打开的服务。最大字符串长度


-------------------------------------------------------- KeyWin32OpenThreadToken ----
OpenThreadToken    OpenThreadToken函数打开与线程相关联的访问令牌。
语法
参数
【ThreadHandle】标识其访问令牌被打开的线程。【DesiredAccess】指定一个访问掩码，指定访问令牌的请求类型。这些请求的访问类型与令牌的自由访问控制列表（ACL）进行协调，


-------------------------------------------------------- KeyWin32OpenWaitableTimer ----
OpenWaitableTimer    [New - Windows NT]OpenWaitableTimer函数返回一个现有命名的“等待”定时器对象的句柄。
语法
参数
【dwDesiredAccess】指定对定时器对象的请求访问。对于支持对象安全性的系统，如果指定对象的安全描述符不允许调用进程的请求访问，则该函数将失败。此参数可以是以下值的任意组合：值含义


-------------------------------------------------------- KeyWin32OpenWindowStation ----
OpenWindowStation    OpenWindowStation函数返回一个现有窗口站的句柄。
语法
参数
【lpszWinSta】指向以空字符结尾的字符串，指定要打开的窗口站的名称。窗口站名称不区分大小写。【Finherit】指定在创建新进程时是否继承返回的句柄。如果此值为TRUE，则新进程将继


-------------------------------------------------------- KeyWin32ORASADFunc ----
ORASADFunc    ORASADFunc函数是一个应用程序定义的回调函数，可用于为自动拨号提供自定义用户界面。提供此原型是为了与早期版本的Windows兼容。新应用程序应使用RASADFunc回调函数。在以后版本的RAS中可能会删除对该原型的支持。
语法
参数
【hwndOwner】处理所有者窗口。【lpszEntry】指向指定要使用的电话簿条目的以空值终止的字符串的指针。【dwFlags中】Reserved; must be zero.【lpdw


-------------------------------------------------------- KeyWin32OutputDebugString ----
OutputDebugString    OutputDebugString函数向当前应用程序的调试器发送一个字符串。
语法



-------------------------------------------------------- KeyWin32OutputProc ----
OutputProc    OutputProc函数是一个应用程序定义的回调函数，它通过调用GrayString函数来绘制一个字符串。
语法
参数
【HDC】标识至少具有【nWidth】和【nHeight参数】传递给GrayString的参数指定的宽度和高度的位图的设备上下文。【的lpData】指向要绘制的字符串。【//要绘制的字符串的


-------------------------------------------------------- KeyWin32PackDDElParam ----
PackDDElParam    PackDDElParam函数将DDE 【lParam的】值打包到用于在进程之间共享DDE数据的内部结构中。
语法
参数
【味精】指定要发布的DDE消息。【uiLoga】指定与要发布的DDE消息的{389796046}参数的Windows 3.【x】低位字对应的值。【uiHi】指定对应于要发布的DDE消息的{3


-------------------------------------------------------- KeyWin32PagePaintHook ----
PagePaintHook    一个PagePaintHook挂接过程是与“页面设置”对话框一起使用的应用程序定义或库定义的回调过程。挂钩过程接收允许您在“页面设置”对话框中自定义样本页面的消息。
语法
参数
【hdlg】处理页面设置对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有关该消息的附加


-------------------------------------------------------- KeyWin32PageSetupDlg ----
PageSetupDlg    PageSetupDlg函数创建一个“页面设置”对话框，使用户可以指定打印页面的属性。这些属性包括纸张尺寸和来源，页面方向（纵向或横向）以及页边距的宽度。
语法
参数
【lppsd】指向PAGESETUPDLG结构的指针，其中包含用于初始化对话框的信息。当函数返回时，结构接收有关用户选择的信息。
返回值
如果用户单击确定按钮，则返回值不为零。PAGES


-------------------------------------------------------- KeyWin32PageSetupHook ----
PageSetupHook    一个PageSetupHook挂接过程是与页面设置公用对话框一起使用的应用程序定义或库定义的回调过程。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理该消息所针对的页面设置对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指定有


-------------------------------------------------------- KeyWin32PaintDesktop ----
PaintDesktop    [Now Supported on Windows NT]PaintDesktop函数使用桌面图案或壁纸填充指定设备上下文中的裁剪区域。该函数主要用于外壳桌面。
语法



-------------------------------------------------------- KeyWin32PaintRgn ----
PaintRgn    PaintRgn函数通过使用当前选定的画笔在设备上下文中绘制指定的区域。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要填充的区域。该区域的坐标被推定为逻辑坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32PatBlt ----
PatBlt    PatBlt函数使用当前在指定设备上下文中选择的画笔来绘制给定的矩形。通过使用给定的光栅操作来组合画笔颜色和表面颜色。
语法
参数
【HDC】标识设备上下文。【nXLeft】指定要填充的矩形左上角的x坐标（以逻辑为单位）。【nYLeft】指定要填充的矩形左上角的y坐标（以逻辑为单位）。【nWidth】指定矩形的逻辑单位宽


-------------------------------------------------------- KeyWin32PathToRegion ----
PathToRegion    PathToRegion函数从选择到指定设备上下文的路径中创建一个区域。
语法
参数
【HDC】标识包含封闭路径的设备上下文。
返回值
如果函数成功，则返回值标识有效区域。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastErro


-------------------------------------------------------- KeyWin32PeekConsoleInput ----
PeekConsoleInput    PeekConsoleInput函数从指定的控制台输入缓冲区中读取数据，而不从缓冲区中删除它。
语法
参数
【hConsoleInput】标识输入缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向接收输入缓冲区数据的INPUT_RECORD缓冲区。【nLength】指定由【


-------------------------------------------------------- KeyWin32PeekMessage ----
PeekMessage    PeekMessage函数检查线程消息队列中的消息，并将消息（如果有）放在指定的结构中。
语法
参数
【LPMSG】指向MSG结构，其中包含基于Windows的应用程序队列中的消息信息。【的hWnd】标识要检查其消息的窗口。【wMsgFilterMin】指定要检查的消息范围内的第一条消息的值


-------------------------------------------------------- KeyWin32PeekNamedPipe ----
PeekNamedPipe    PeekNamedPipe函数将数据从命名或匿名管道复制到缓冲区，而不从管道中删除。它还返回有关管道中数据的信息。
语法
参数
【hNamedPipe】标识管道。该参数可以是CreateNamedPipe或CreateFile函数返回的命名管道实例的句柄，或者它可以是CreatePipe函数返回的匿名管道的读取端的句


-------------------------------------------------------- KeyWin32Pie ----
馅饼    馅饼函数绘制一个由椭圆和两个径向交点界定的饼形楔形。通过使用当前笔并使用当前画笔填充饼图。BOOL Pie(HDC 【HDC】,//处理设备上下文INT 【nLeftRect】,// x-coord。边框的左上角INT 【nTopRect】,//的y坐标。边框的左上角INT 【nRightRect】,// x-coord。边框的右下角INT 【nBottomRect】,//的y坐标。边框的右下角INT 【nXRadial1】,// x-coord。的第一个径向的终点INT 【nYRadial1】,//的y坐标。的第一个径向的终点INT 【nXRadial2】,// x-coord。的第二径向端点INT 【nYRadial2】//的y坐标。的第二径向端点);
参数
【HDC】标识设备上下文。【nLeftRect】指定边界矩形左上角的x坐标。【nTopRect】指定边界矩形左上角的y坐标。【nRightRect】指定边界矩形右下角的x坐标。【nBotto


-------------------------------------------------------- KeyWin32PlayEnhMetaFile ----
PlayEnhMetaFile    PlayEnhMetaFile函数显示存储在指定的增强格式图元文件中的图片。
语法
参数
【HDC】标识出现图像的输出设备的设备上下文。【HEMF】识别增强的图元文件。【LPRECT】指向RECT结构，其中包含用于显示图片的边界矩形的坐标。坐标以逻辑单位指定。
返回值
如果函


-------------------------------------------------------- KeyWin32PlayEnhMetaFileRecord ----
PlayEnhMetaFileRecord    通过执行由记录识别的图形设备接口（GDI）函数，PlayEnhMetaFileRecord函数播放增强型元文件记录。
语法
参数
【HDC】标识传递给EnumEnhMetaFile函数的设备上下文。【这里ndletable】指向演示图元文件时使用的GDI对象的句柄表。此表中的第一个条目包含增强型图元文件句柄。【lpEn


-------------------------------------------------------- KeyWin32PlayMetaFile ----
PlayMetaFile    PlayMetaFile函数显示存储在指定设备上给定的Windows格式元文件的图片。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用PlayEnhMetaFile函数。
语法
参数
【HDC】标识设备上下文。【HMF】标识Windows格式的图元文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
Windows格式的图元文件不支持新的曲


-------------------------------------------------------- KeyWin32PlayMetaFileRecord ----
PlayMetaFileRecord    PlayMetaFileRecord函数通过执行该记录中包含的图形设备接口（GDI）函数来播放Windows格式的图元文件记录。此函数用于与16位版本的Microsoft Windows兼容。基于Win32的应用程序应使用PlayEnhMetaFileRecord函数。
语法
参数
【HDC】标识设备上下文。【这里ndletable】指向演示图元文件时使用的GDI对象的句柄表。【lpMetaRecord】指向Windows格式的图元文件记录。【nHandles】指定句柄


-------------------------------------------------------- KeyWin32PlgBlt ----
PlgBlt    PlgBlt函数执行将源设备上下文中指定矩形的颜色数据位的位块传输到目标设备上下文中指定的平行四边形。如果给定的位掩码句柄识别有效的单色位图，则该函数使用该位图来屏蔽源矩形中颜色数据的位。
语法
参数
【hdcDest】标识目标设备上下文。【LPPOINT】指向逻辑空间中的三个点的数组，其中标识目标平行四边形的三个角。源矩形的左上角被映射到该数组中的第一个点，右上角到该数组中的第二个点，左


-------------------------------------------------------- KeyWin32PolyBezier ----
PolyBezier    PolyBezier函数绘制一个或多个B zier曲线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含曲线的端点和控制点的POINT结构数组。【cPointsen】指定【LPPT】数组中的点数。该值必须是要绘制的曲线数量的三倍以上，因为每个B z


-------------------------------------------------------- KeyWin32PolyBezierTo ----
PolyBezierTo    PolyBezierTo函数绘制一个或多个B zier曲线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含端点和控制点的POINT结构数组。【cCount】指定【LPPT】数组中的点数。该值必须是要绘制的曲线数量的三倍，因为每个B zier曲线需要两


-------------------------------------------------------- KeyWin32PolyDraw ----
PolyDraw    PolyDraw函数绘制一组线段和B zier曲线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向POINT结构的数组，其中包含每个线段的端点以及每个B zier曲线的端点和控制点。【lpbTypes】指向一个数组，指定如何使用【LPPT】数组中


-------------------------------------------------------- KeyWin32Polygon ----
多边形    多边形函数绘制由直线连接的两个或多个顶点组成的多边形。使用当前笔并使用当前画笔和多边形填充模式填充多边形。BOOL Polygon(HDC 【HDC】,//处理设备上下文CONST POINT *【lpPoints】,//指向多边形顶点的指针INT 【NCOUNT】//多边形顶点数);
参数
【HDC】标识设备上下文。【lpPoints】指向指定多边形顶点的POINT结构数组。【NCOUNT】指定数组中的顶点数。该值必须大于或等于2。
返回值
如果函数成功，返回值不为零。如果


-------------------------------------------------------- KeyWin32Polyline ----
折线    折线函数通过连接指定数组中的点来绘制一系列线段。BOOL Polyline(HDC 【HDC】,//设备上下文的句柄CONST POINT *【LPPT】,//包含端点的数组的地址INT 【cPointsen】//数组中的点数);
参数
【HDC】标识设备上下文。【LPPT】指向POINT结构的数组。阵列中的每个结构标识逻辑空间中的一个点。【cPointsen】指定数组中的点数。该数字必须大于或等于2。
返回值
如果函数


-------------------------------------------------------- KeyWin32PolylineTo ----
PolylineTo    PolylineTo函数绘制一条或多条直线。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含该行顶点的POINT结构的数组。【cCount】指定数组中的点数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述



-------------------------------------------------------- KeyWin32PolyPolygon ----
PolyPolygon    PolyPolygon函数绘制一系列封闭的多边形。通过使用当前笔并使用当前画笔和多边形填充模式填充每个多边形。由此函数绘制的多边形可以重叠。
语法
参数
【HDC】标识设备上下文。【lpPoints】指向定义多边形顶点的POINT结构数组。多边形连续指定。每个多边形通过从最后一个顶点到第一个顶点绘制一条线来自动关闭。每个顶点应该被指定一次。【


-------------------------------------------------------- KeyWin32PolyPolyline ----
PolyPolyline    PolyPolyline函数可绘制多个连接的线段。
语法
参数
【HDC】标识设备上下文。【LPPT】指向包含折线的顶点的POINT结构的数组。折线是连续指定的。【lpdwPolyPoints】指向一组变量，指定相应折线的【LPPT】阵列中的点数。每个条


-------------------------------------------------------- KeyWin32PolyTextOut ----
PolyTextOut    PolyTextOut函数使用当前在指定的设备上下文中选择的字体和文本颜色绘制多个字符串。
语法
参数
【HDC】标识设备上下文。【pptxt】指向描述要绘制的字符串的POLYTEXT结构的数组。该数组包含要绘制的每个字符串的一个结构。【cStrings】指定【pptxt】阵列中POLYTEX


-------------------------------------------------------- KeyWin32PostAppMessage ----
PostAppMessage    PostAppMessage函数已过时。该函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用PostThreadMessage函数。


-------------------------------------------------------- KeyWin32PostMessage ----
PostMessage    PostMessage函数将消息放置在与创建指定窗口的线程相关联的消息队列中，然后返回，而不等待线程处理消息。通过调用GetMessage或PeekMessage函数检索消息队列中的消息。
语法
参数
【的hWnd】标识窗口程序接收消息的窗口。两个值有特殊含义：值含义HWND_BROADCAST该消息被发布到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口。消息未发布到


-------------------------------------------------------- KeyWin32PostQueuedCompletionStatus ----
PostQueuedCompletionStatus    通过PostQueuedCompletionStatus函数，您可以将I / O完成数据包发送到I / O完成端口。I / O完成数据包将满足对GetQueuedCompletionStatus函数的未完成调用。GetQueuedCompletionStatus函数返回三个作为调用PostQueuedCompletionStatus的第二个，第三个和第四个参数传递的值。
语法
参数
【CompletionPort】处理要发布I / O完成数据包的I / O完成端口。【dwNumberOfBytesTransferred】指定通过GetQueuedCompletionSt


-------------------------------------------------------- KeyWin32PostQuitMessage ----
PostQuitMessage    PostQuitMessage函数向Windows指出线程已经请求终止（退出）。它通常用于响应WM_DESTROY消息。
语法
参数
【nExitCode】指定应用程序退出代码。该值用作WM_QUIT消息的【wParam中】参数。
返回值
此函数不返回值。
描述
PostQuitMessage函数向线程的消息队列发


-------------------------------------------------------- KeyWin32PostThreadMessage ----
PostThreadMessage    PostThreadMessage函数将消息放置在指定线程的消息队列中，然后返回，而不等待线程处理消息。
语法
参数
【idThread】标识消息将被发布到的线程。如果指定的线程没有消息队列，该函数将失败。当线程首次调用Win32 USER或GDI函数之一时，系统会创建线程的消息队列。有关详细信息，请参阅备


-------------------------------------------------------- KeyWin32PrepareTape ----
PrepareTape    PrepareTape函数准备要访问或删除的磁带。
语法
参数
【hDevice】标识准备磁带的设备。该句柄是通过使用CreateFile函数创建的。【// preparation method】指定如何准备磁带设备。此参数可以是以下值之一：值含义TAP


-------------------------------------------------------- KeyWin32PrintDlg ----
PrintDlg    PrintDlg函数显示“打印”对话框或“打印设置”对话框。“打印”对话框使用户能够指定特定打印作业的属性。“打印设置”对话框不应在新应用程序中使用。它已被PageSetupDlg函数创建的Page Setup常用对话框所取代。
语法
参数
【LPPD】指向PRINTDLG结构的指针，其中包含用于初始化对话框的信息。当PrintDlg返回时，此结构包含有关用户选择的信息。
返回值
如果用户单击确定按钮，则返回值不为零。【LP


-------------------------------------------------------- KeyWin32PrinterMessageBox ----
PrinterMessageBox    PrinterMessageBox函数显示一个消息框，允许正在打印的应用程序通知用户打印作业错误。如果作业的所有者远程登录，该函数会向所有者发送一个网络弹出窗口。如果用户在消息框中选择“取消”，该函数将取消打印作业;否则，该函数将清除作业错误状态，系统再次尝试打印作业。
语法
参数
【hPrinter】标识作业发送到的打印机。【错误】指定发生的错误。此参数可以是以下值之一：值含义ERROR_OUT_OF_PAPER打印机缺纸。ERROR_NOT_READY打印机尚未就绪


-------------------------------------------------------- KeyWin32PrinterProperties ----
PrinterProperties    PrinterProperties函数显示指定打印机的打印机属性对话框。
语法
参数
【的hWnd】标识对话框的父窗口。【hPrinter】标识打印机对象。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.


-------------------------------------------------------- KeyWin32PrintHookProc ----
PrintHookProc    一个PrintHookProc挂接过程是一个应用程序定义或库定义的回调过程，与打印公共对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理打印公共对话框窗口，消息的目的是打开公共对话框窗口。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lP


-------------------------------------------------------- KeyWin32PrivilegeCheck ----
PrivilegeCheck    PrivilegeCheck函数测试由特定访问令牌表示的安全上下文，以发现它是否包含指定的权限。服务器应用程序通常会调用此函数来检查客户端访问令牌的权限。
语法
参数
【ClientToken】标识表示客户端进程的访问令牌。必须通过打开假冒客户端的线程的令牌来获取此句柄。必须打开令牌才能进行TOKEN_QUERY访问。【RequiredPrivileges


-------------------------------------------------------- KeyWin32PrivilegedServiceAuditAlarm ----
PrivilegedServiceAuditAlarm    当尝试执行特权系统服务操作时，PrivilegedServiceAuditAlarm函数会生成审核消息。当前版本的Windows NT不支持警报。
语法
参数
【SubsystemName】指向一个以null结尾的字符串，指定调用该函数的子系统的名称，例如“DEBUG”或“WIN32”。【ServiceName】指向一个以空值终止的字符串，指定特权


-------------------------------------------------------- KeyWin32PropEnumProc ----
PropEnumProc    一个PropEnumProc函数是一个应用程序定义的回调函数，它从窗口的属性列表接收属性条目。作为调用EnumProps函数的结果，调用PropEnumProc函数。类型为PROPENUMPROC的值是指向PropEnumProc函数的指针。
语法
参数
【HWND】处理列表属性列表的窗口。【lpszStringhu】指向空终止字符串的指针。此字符串是属性列表条目的字符串组件。当通过调用SetProp函数将属??性添加到窗口的属性列表时，这是


-------------------------------------------------------- KeyWin32PropEnumProcEx ----
PropEnumProcEx    一个PropEnumProcEx函数是一个应用程序定义的回调函数，它从窗口的属性列表接收属性条目。作为调用EnumPropsEx函数的结果，调用PropEnumProcEx函数。类型为PROPENUMPROCEX的值是指向PropEnumProcEx函数的指针。
语法
参数
【HWND】处理列表属性列表的窗口。【lpszStringhu】指向空终止字符串的指针。此字符串是属性列表条目的字符串组件。当通过调用SetProp函数将属??性添加到窗口的属性列表时，这是


-------------------------------------------------------- KeyWin32PropertySheet ----
PropertySheet    PropertySheet函数创建一个属性表，并添加在指定的属性表头结构中定义的页面。
语法
参数
【Returns a positive value if successful or - 1 otherwise.】指向定义属性表的框架和页面的PROPSHEETHEADER结构的指针。



-------------------------------------------------------- KeyWin32PropSheetPageProc ----
PropSheetPageProc    PropSheetPageProc函数指定了一个应用程序定义的回调函数，当创建一个页面时以及当它被破坏时，该属性表将调用该函数。应用程序可以使用此函数对页面进行初始化和清理操作。
语法
参数
【HWND】Reserved; must be NULL.【uMsg】动作标志此参数可以是以下值之一：值含义PSPCB_CREATE正在创建一个页面。返回非零，以允许创建页面或为零阻止它。P


-------------------------------------------------------- KeyWin32PropSheetProc ----
PropSheetProc    PropSheetProc函数是一个应用程序定义的回调函数，系统在创建和初始化属性表时调用该函数。
语法
参数
【hwndDlg】处理到属性表对话框。【uMsg】标识正在接收的消息。此参数是以下值之一：值含义PSCB_INITIALIZED表示正在初始化属性表。此消息的【lParam的】值为零。PSC


-------------------------------------------------------- KeyWin32PtInRect ----
PtInRect    PtInRect函数确定指定的点是否在指定的矩形内。如果一个点位于左侧或上侧，或者在四面内，则该点在矩形内。右侧或下侧的点被认为在矩形之外。
语法
参数
【LPRC】指向包含指定矩形的RECT结构。【pt】指定包含指定点的POINT结构。
返回值
如果指定的点位于矩形内，则返回值不为零。如果指定的点不在矩形内，返回值为零。要获取扩展错误信


-------------------------------------------------------- KeyWin32PtInRegion ----
PtInRegion    PtInRegion函数确定指定点是否在指定的区域内。
语法
参数
【HRGN】确定要检查的区域。【X】指定点的x坐标。【Y】指定点的y坐标。
返回值
如果指定的点在区域中，则返回值不为零。如果指定点不在区域中，返回值为零。



-------------------------------------------------------- KeyWin32PtVisible ----
PtVisible    PtVisible函数指示指定点是否在设备上下文的剪切区域内。
语法
参数
【HDC】标识设备上下文。【X】指定点的逻辑x坐标。【Y】指定点的逻辑y坐标。
返回值
如果指定的点在设备上下文的剪切区域内，返回值不为零。如果指定的点不在设备上下文的剪切区域内，返回值


-------------------------------------------------------- KeyWin32PulseEvent ----
PulseEvent    PulseEvent函数提供了一个单独的操作，用于设置（发出信号）指定事件对象的状态，然后在释放适当数量的等待线程后将其重置（无信号）。
语法
参数
【活动】标识事件对象。CreateEvent或OpenEvent函数返回此句柄。Windows NT：句柄必须有EVENT_MODIFY_STATE访问权限。有关详细信息，请参阅进程间同步对


-------------------------------------------------------- KeyWin32PurgeComm ----
PurgeComm    PurgeComm函数可以丢弃指定通信资源的输出或输入缓冲区中的所有字符。它还可以终止对资源的等待读取或写入操作。
语法
参数
【HFILE】标识通信资源。CreateFile函数返回此句柄。【dwFlags中】指定要执行的操作。此参数可以是以下值的组合：值含义PURGE_TXABORT终止所有未完成的写操作并立即返


-------------------------------------------------------- KeyWin32QueryDosDevice ----
QueryDosDevice    QueryDosDevice函数允许应用程序获取有关MS-DOS设备名称的信息。该函数可以获得特定MS-DOS设备名称的当前映射。该函数还可以获取所有现有MS-DOS设备名称的列表。MS-DOS设备名称作为符号链接存储在Windows NT对象名称空间中。将MS-DOS路径转换为相应的Windows NT路径的代码使用这些符号链接映射MS-DOS设备和驱动器号。QueryDosDevice函数提供了一种机制，基于Win32的应用程序可以查询用于实现MS-DOS设备命名空间的符号链接的名称以及每个特定符号链接的值。
语法
参数
【lpDeviceName】指向指定查询目标的MS-DOS设备名称字符串的指针。此参数可以为NULL。在这种情况下，QueryDosDevice函数将将所有现有的MS-DOS设备名称列表存储


-------------------------------------------------------- KeyWin32QueryPerformanceCounter ----
QueryPerformanceCounter    QueryPerformanceCounter函数检索高分辨率性能计数器的当前值（如果存在）。
语法
参数
【lpPerformanceCount】指向函数以计数方式设置为当前性能计数器值的变量。如果安装的硬件不支持高分辨率性能计数器，则此参数可以为零。
返回值
如果安装的硬件支持高分辨率性能


-------------------------------------------------------- KeyWin32QueryPerformanceFrequency ----
QueryPerformanceFrequency    QueryPerformanceFrequency函数检索高分辨率性能计数器的频率（如果存在）。
语法
参数
【lpFrequency】指向函数以每秒计数为当前性能计数器频率的变量。如果安装的硬件不支持高分辨率性能计数器，则此参数可以为零。
返回值
如果安装的硬件支持高分辨率性能计数器，则返回值


-------------------------------------------------------- KeyWin32QueryServiceConfig ----
QueryServiceConfig    QueryServiceConfig函数检索指定服务的配置参数。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_QUERY_CONFIG访问权限。【lpServiceConfi


-------------------------------------------------------- KeyWin32QueryServiceLockStatus ----
QueryServiceLockStatus    QueryServiceLockStatus函数检索指定的服务控制管理器数据库的锁定状态。
语法
参数
【hSCManager】标识服务控制管理器数据库。OpenSCManager函数返回此句柄，该句柄必须具有SC_MANAGER_QUERY_LOCK_STATUS访问权限。【lpLockSt


-------------------------------------------------------- KeyWin32QueryServiceObjectSecurity ----
QueryServiceObjectSecurity    QueryServiceObjectSecurity函数检索保护服务对象的安全描述符的副本。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有READ_CONTROL访问权限。【dwSecurityInformation】


-------------------------------------------------------- KeyWin32QueryServiceStatus ----
QueryServiceStatus    QueryServiceStatus函数检索指定服务的当前状态。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_QUERY_STATUS访问权限。【lpServiceStatu


-------------------------------------------------------- KeyWin32QueueUserAPC ----
QueueUserAPC    [New - Windows NT]QueueUserAPC函数将用户模式异步过程调用（APC）对象添加到指定线程的APC队列中。
语法
参数
【pfnAPC】指向应用程序提供的APC函数，以便在指定的线程执行可警告的等待操作时调用。【hThread】指定线程的句柄。句柄必须具有THREAD_SET_CONTEXT访问权限。有关详细


-------------------------------------------------------- KeyWin32RaiseException ----
RaiseException    RaiseException函数在调用线程中引发异常。
语法
参数
【dwExceptionCode】指定引发异常的应用程序定义异常代码。异常处理程序的过滤器表达式和异常处理程序块可以使用GetExceptionCode函数来检索该值。请注意，系统将会清除【


-------------------------------------------------------- KeyWin32RASADFunc ----
RASADFunc    [New - Windows NT]RASADFunc函数是一个应用程序定义的回调函数，可用于为自动拨出提供自定义用户界面。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasAdminAcceptNewConnection ----
RasAdminAcceptNewConnection    [New - Windows NT]RasAdminAcceptNewConnection函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。当用户尝试建立与RAS服务器的远程连接时，RAS会调用此函数。该函数决定用户是否允许连接。RAS服务器在多链路连接中为每个端口调用一次RasAdminAcceptNewConnection.
语法
参数
【pRasPort1】指向包含关于挂起连接的RAS数据的RAS_PORT_1结构的指针。此结构包含您需要作出关于连接的决定的相关连接信息。【pRasStats】指向包含端口统计信息的RAS_


-------------------------------------------------------- KeyWin32RasAdminConnectionHangupNotification ----
RasAdminConnectionHangupNotification    [New - Windows NT]RasAdminConnectionHangupNotification函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。当RAS断开现有连接时，它会调用此函数来通知您的DLL。RAS服务器在多链路连接中为每个端口调用一次RasAdminConnectionHangupNotification.
语法
参数
【pRasPort1】指向RAS_PORT_1结构的指针，其中包含关于结束的连接的RAS数据。此结构包含可用于确定端口连接多长时间的相关连接信息。【pRasStats】指向包含端口统计信息的


-------------------------------------------------------- KeyWin32RasAdminFreeBuffer ----
RasAdminFreeBuffer    [New - Windows NT]RasAdminFreeBuffer函数释放由RAS代表呼叫者分配的内存。
语法
参数
【指针】指向要释放的缓冲区。
返回值
如果函数成功，则返回值为ERROR_SUCCESS。如果函数失败，则返回值可以是以下错误代码。值含义ERROR_INVALID_PARAMETER【


-------------------------------------------------------- KeyWin32RasAdminGetErrorString ----
RasAdminGetErrorString    [New - Windows NT]RasAdminGetErrorString函数检索与RAS服务器管理（RasAdmin）函数之一返回的RAS错误代码相对应的消息字符串。这些消息字符串是作为RAS的一部分安装的RASMSG.DLL检索的。
语法
参数
【ResourceId】指定由其中一个RasAdmin函数返回的错误代码。该值必须在RASERROR.H中定义的RASBASE到RASBASEEND的错误代码范围内。【lpszStringh


-------------------------------------------------------- KeyWin32RasAdminGetIpAddressForUser ----
RasAdminGetIpAddressForUser    [New - Windows NT]RasAdminGetIpAddressForUser函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。RAS调用此函数获取已拨入远程客户端的IP地址。
语法
参数
【lpszUserName】指向一个空值终止的Unicode字符串，其中包含需要IP地址的远程用户的名称。【lpszPortName】指向以null终止的Unicode字符串的指针，其中包含


-------------------------------------------------------- KeyWin32RasAdminGetUserAccountServer ----
RasAdminGetUserAccountServer    [New - Windows NT]RasAdminGetUserAccountServer函数检索具有用户帐户数据库的服务器的名称。您可以使用RasAdminUserGetInfo和RasAdminUserSetInfo函数中返回的服务器名称来获取或设置有关指定用户的信息。
语法
参数
【lpszDo mainhu】指向一个空值终止的Unicode字符串，其中包含RAS服务器所属的域的名称。如果您在没有参与Windows NT域的Windows NT工作站或服务器上运行RA


-------------------------------------------------------- KeyWin32RasAdminPortClearStatistics ----
RasAdminPortClearStatistics    [New - Windows NT]RasAdminPortClearStatistics函数重置表示RAS_PORT_STATISTICS结构中RasAdminPortGetInfo函数报告的各种统计信息的计数器。计数器将重置为零，并从此开始累加。
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。使用前导“\\\\”字符指定名称，格式为：\\\\ 【服务器名称】.【lpszP


-------------------------------------------------------- KeyWin32RasAdminPortDisconnect ----
RasAdminPortDisconnect    [New - Windows NT]RasAdminPortDisconnect函数会断开当前正在使用的端口。
语法



-------------------------------------------------------- KeyWin32RasAdminPortEnum ----
RasAdminPortEnum    [New - Windows NT]RasAdminPortEnum函数枚举指定RAS服务器上的所有端口。对于服务器上的每个端口，该函数返回一个包含端口信息的RAS_PORT_0结构。
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。用“\\\\”字符指定名称，格式为：\\\\ 【服务器名称】.【ppRasPor


-------------------------------------------------------- KeyWin32RasAdminPortGetInfo ----
RasAdminPortGetInfo    [New - Windows NT]RasAdminPortGetInfo函数检索指定服务器上指定端口的信息【.】
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。使用前导“\\\\”字符指定名称，格式为：\\\\ 【服务器名称】.【lpszP


-------------------------------------------------------- KeyWin32RasAdminReleaseIpAddress ----
RasAdminReleaseIpAddress    [New - Windows NT]RasAdminReleaseIpAddress函数是由第三方RAS服务器管理DLL导出的应用程序定义函数。RAS调用此函数通知您的DLL，远程客户端已断开连接，并且该IP地址应该被释放。
语法
参数
【lpszUserName】指向以null终止的Unicode字符串，其中包含使用RasAdminGetIpAddressForUser函数之前获取IP地址的远程用户的名称。【lpszPor


-------------------------------------------------------- KeyWin32RasAdminServerGetInfo ----
RasAdminServerGetInfo    [New - Windows NT]RasAdminServerGetInfo函数可获取RAS服务器的服务器配置。
语法
参数
【lpszServer】指向包含Windows NT RAS服务器名称的以null终止的Unicode字符串。如果此参数为NULL，则该函数返回有关本地计算机的信息。使用前导“\\\\”字符


-------------------------------------------------------- KeyWin32RasAdminUserGetInfo ----
RasAdminUserGetInfo    [New - Windows NT]RasAdminUserGetInfo函数获取指定用户的RAS权限和回调电话号码信息。
语法
参数
【lpszUserAccountServer】指向一个空值终止的Unicode字符串，其中包含具有用户帐户数据库的主域控制器或备份域控制器的名称。使用RasAdminGetUserAccou


-------------------------------------------------------- KeyWin32RasAdminUserSetInfo ----
RasAdminUserSetInfo    [New - Windows NT]RasAdminUserSetInfo函数设置指定用户的RAS权限和回拨电话号码。
语法
参数
【lpszUserAccountServer】指向一个空值终止的Unicode字符串，其中包含具有用户帐户数据库的主域控制器或备份域控制器的名称。使用RasAdminGetUserAccou


-------------------------------------------------------- KeyWin32RasConnectionNotification ----
RasConnectionNotification    [New - Windows NT]RasConnectionNotification函数指定在创建或终止RAS连接时系统设置为信号状态的事件对象。
语法
参数
【活动】指定事件对象的句柄。使用CreateEvent函数创建事件对象。【dwFlags中】指示导致系统发出【活动】参数指定的事件对象的RAS事件。此参数可以是以下值的组合。值含义RASCN


-------------------------------------------------------- KeyWin32RasCreatePhonebookEntry ----
RasCreatePhonebookEntry    RasCreatePhonebookEntry函数创建一个新的电话簿条目。该函数显示一个对话框，用户在其中键入有关电话簿条目的信息。
语法
参数
【HWND】处理到对话框的父窗口。【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的空终止字符串的指针。如果此参数为NULL，则该函数使用


-------------------------------------------------------- KeyWin32RasDeleteEntry ----
RasDeleteEntry    [New - Windows NT]RasDeleteEntry函数从电话簿中删除一个条目。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasDial ----
RasDial    RasDial函数在RAS客户端和RAS服务器之间建立RAS连接。连接数据包括回拨和用户认证信息。
语法
参数
【lpRasDialExtensions】Windows NT：指向RASDIALEXTENSIONS结构，指定一组RasDial扩展函数启用。如果您不需要启用任何扩展，请将此参数设置为NU


-------------------------------------------------------- KeyWin32RasDialDlg ----
RasDialDlg    [New - Windows NT]RasDialDlg函数尝试使用指定的电话簿条目和已登录用户的凭据建立RAS连接。该函数显示指示连接操作状态的对话框流。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyWin32RasDialFunc ----
RasDialFunc    RasDialFunc函数是在RAS连接过程中发生状态更改时，RasDial函数调用的应用程序定义或库定义的回调函数。
语法
参数
【unMsg】指定发生的事件的类型。目前，唯一定义的事件是WM_RASDIALEVENT。【rasconnstate】指定RASCONNSTATE枚举器值，该值指示RasDial远程访问连接


-------------------------------------------------------- KeyWin32RasDialFunc1 ----
RasDialFunc1    RasDialFunc1函数是在远程访问连接过程中发生状态更改时，RasDial函数调用的应用程序定义或库定义的回调函数。RasDialFunc1函数与RasDialFunc函数相当，但通过添加两个参数来增强：RAS连接的句柄和扩展错误代码。
语法
参数
【hrasconn】提供RasDial返回的RAS连接的句柄。【unMsg】指定发生的事件的类型。目前，唯一定义的事件是WM_RASDIALEVENT。【刮】指定RASCONNSTATE枚举


-------------------------------------------------------- KeyWin32RasDialFunc2 ----
RasDialFunc2    [New - Windows NT]RasDialFunc2函数是在远程访问连接过程中发生状态更改时，RasDial函数调用的应用程序定义或库定义的回调函数。RasDialFunc2函数与RasDialFunc1回调函数类似，不同之处在于它提供了多链接连接的附加信息。
语法
参数
【dwCallbackId】提供在RASDIALPARAMS结构中RASDIALPARAMS结构中传递给RasDial的结构中指定的应用程序定义值。【dwSubEntry】指定与此连接相关联


-------------------------------------------------------- KeyWin32RasEditPhonebookEntry ----
RasEditPhonebookEntry    RasEditPhonebookEntry函数会编辑现有的电话簿条目。该函数显示一个对话框，用户可以在其中修改现有信息。
语法
参数
【HWND】处理到对话框的父窗口。【lpszPhonebook】指针，它指定电话簿（的.pbk）文件的完整路径和文件名的空终止字符串。如果此参数为NULL，则该函数使用当前的默认电话簿文件。


-------------------------------------------------------- KeyWin32RasEntryDlg ----
RasEntryDlg    [New - Windows NT]RasEntryDlg函数显示允许用户操作电话簿条目的模态属性表。如果编辑或复制现有的电话簿条目，该函数将显示电话簿条目属性表。当用户关闭属性表时，RasEntryDlg函数返回。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyWin32RasEnumAutodialAddresses ----
RasEnumAutodialAddresses    [New - Windows NT]RasEnumAutodialAddresses函数返回AutoDial映射数据库中所有地址的列表。
语法
参数
【// pointer to buffer that receives network address strings】指向字符串指针数组的指针，其余空间用于在缓冲区的末尾存储字符串本身。每


-------------------------------------------------------- KeyWin32RasEnumConnections ----
RasEnumConnections    RasEnumConnections函数列出所有活动的RAS连接。它返回每个连接的句柄和电话簿条目名称。
语法
参数
【// buffer to receive connections data】指向接收RASCONN结构数组的缓冲区，每个RAS连接一个。在调用该函数之前，应用程序必须将缓冲区中的第一个RA


-------------------------------------------------------- KeyWin32RasEnumDevices ----
RasEnumDevices    [New - Windows NT]RasEnumDevices函数返回所有可用RAS设备的名称和类型。
语法
参数
【lpRasDevInfo】指向接收RASDEVINFO结构数组的缓冲区的指针，每个支持RAS的设备一个。在调用该函数之前，将缓冲区中第一个RASDEVINFO结构的的dwSize成员设置为


-------------------------------------------------------- KeyWin32RasEnumEntries ----
RasEnumEntries    RasEnumEntries函数列出了远程访问电话簿中的所有条目名称。
语法
参数
【保留的】Reserved; must be NULL.【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此


-------------------------------------------------------- KeyWin32RasGetAutodialAddress ----
RasGetAutodialAddress    [New - Windows NT]RasGetAutodialAddress函数检索与自动拨号映射数据库中的网络地址相关联的所有AutoDial条目的信息。
语法
参数
【lpszAddresshu】指向指定要求哪个信息的地址的以空值终止的字符串的指针。这可以是IP地址（“127.95.1.4”），Internet主机名（“www.microsoft.com


-------------------------------------------------------- KeyWin32RasGetAutodialEnable ----
RasGetAutodialEnable    [New - Windows NT]RasGetAutodialEnable函数指示是否为指定的TAPI拨号位置启用了自动拨号函数。有关TAPI拨号位置的更多信息，请参阅Win32 Telephony（TAPI）程序员参考。
语法
参数
【dwDialingLocation】指定TAPI拨号位置的标识符。【// pointer to variable that receives AutoDial state for this


-------------------------------------------------------- KeyWin32RasGetAutodialParam ----
RasGetAutodialParam    [New - Windows NT]RasGetAutodialParam函数检索AutoDial参数的值。
语法
参数
【dwKey】表示要检索的AutoDial参数。此参数可以是以下值之一。值含义RASADP_DisableConnectionQuery【lpvValue】参数返回一个DWORD值。如果此值


-------------------------------------------------------- KeyWin32RasGetConnectStatus ----
RasGetConnectStatus    RasGetConnectStatus函数检索有关指定远程访问连接的当前状态的信息。应用程序可以使用此调用来确定异步RasDial呼叫何时完成。
语法
参数
【hrasconn】标识要检索状态的远程访问连接。此手柄必须已经从RasDial或RasEnumConnections获得。【lprasconnstatus】指向函数填充状态信息的RASCO


-------------------------------------------------------- KeyWin32RasGetCountryInfo ----
RasGetCountryInfo    [New - Windows NT]RasGetCountryInfo函数从Windows Telephony国家/地区列表中检索国家/地区的拨号信息。有关国家特定拨号信息和TAPI国家标识符的更多信息，请参阅Win32 Telephony（TAPI）程序员参考。
语法
参数
【lpRasCtryInfo】指向RASCTRYINFO结构的指针，可以接收国家/地区特定拨号信息，后跟国家/地区描述字符串的附加字节。在调用该函数之前，将结构的的dwSize成员设置为si


-------------------------------------------------------- KeyWin32RasGetCredentials ----
RasGetCredentials    [New - Windows NT]RasGetCredentials函数检索与指定的RAS电话簿条目关联的用户凭据。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyWin32RasGetEntryDialParams ----
RasGetEntryDialParams    RasGetEntryDialParams函数可以检索上次成功呼叫保存的连接信息到指定电话簿条目的RasDial或RasSetEntryDialParams函数。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasGetEntryProperties ----
RasGetEntryProperties    [New - Windows NT]RasGetEntryProperties函数检索电话簿条目的属性。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasGetErrorString ----
RasGetErrorString    RasGetErrorString函数获取指定RAS错误值的错误消息字符串。
语法
参数
【uErrorValue】指定感兴趣的错误值。这些是由RAS函数之一返回的值：RAS头文件中列出的值。【lpszErrorString】指向缓冲区，该函数将写入错误字符串。此参数不能为NUL


-------------------------------------------------------- KeyWin32RasGetProjectionInfo ----
RasGetProjectionInfo    RasGetProjectionInfo函数获取有关指定远程访问组件协议的远程访问投影操作的信息。
语法
参数
【hrasconn】处理感兴趣的远程访问连接。应用程序从RasDial或RasEnumConnections函数获取RAS连接句柄。【rasprojection】枚举类型值RASPROJEC


-------------------------------------------------------- KeyWin32RasGetSubEntryHandle ----
RasGetSubEntryHandle    [New - Windows NT]RasGetSubEntryHandle函数检索多链接连接的指定子条目的连接句柄。
语法
参数
【hrasconn】指定RasDial函数返回的多链路电话簿条目的HRASCONN连接句柄。【dwSubEntry】指定电话簿条目的有效子条目索引。【lphrasconn】指向HRASCON


-------------------------------------------------------- KeyWin32RasGetSubEntryProperties ----
RasGetSubEntryProperties    [New - Windows NT]RasGetSubEntryProperties函数检索有关指定电话簿条目的子条目的信息。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasHangUp ----
RasHangUp    RasHangUp函数终止远程访问连接。连接由RAS连接句柄指定。该函数释放与句柄相关联的所有RASAPI32.DLL资源。
语法
参数
【hrasconn】标识要终止的远程访问连接。这是从以前调用RasDial或RasEnumConnections返回的句柄。
返回值
如果函数成功，返回值为零。如果函数失败，则返回值是R


-------------------------------------------------------- KeyWin32RasMonitorDlg ----
RasMonitorDlg    [New - Windows NT]RasMonitorDlg函数显示描述RAS连接状态的拨号网络监控属性表。
语法
参数
【lpszDeviceName】指向以空值终止的字符串，指定最初显示的设备的名称。如果此参数为NULL，或者指定的设备不??存在，属性表将显示第一个设备。【lpinfoit】指向RASMON


-------------------------------------------------------- KeyWin32RasPBDlgFunc ----
RasPBDlgFunc    [New - Windows NT]RasPBDlgFunc函数是一个应用程序定义的回调函数，在RasPhonebookDlg对话框打开时接收用户活动的通知。
语法
参数
【dwCallbackId】表示传递给RasPhonebookDlg函数的RASPBDLG结构RASPBDLG结构中指定的应用程序定义值。【// indicates the event th


-------------------------------------------------------- KeyWin32RasPhonebookDlg ----
RasPhonebookDlg    [New - Windows NT]RasPhonebookDlg函数显示主拨号网络对话框。从该模式对话框中，用户可以拨打，编辑或删除所选电话簿条目，创建新的电话簿条目或指定用户首选项。对话框关闭时，RasPhonebookDlg函数返回。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyWin32RasRenameEntry ----
RasRenameEntry    [New - Windows NT]RasRenameEntry函数可更改电话簿中条目的名称。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasSecurityDialogBegin ----
RasSecurityDialogBegin    [New - Windows NT]RasSecurityDialogBegin函数是Windows NT RAS服务器在远程用户尝试连接时调用的第三方RAS安全性DLL入口点。这使安全性DLL能够开始对远程用户的身份验证。
语法
参数
【hPort】指定RAS端口句柄。安全性DLL在其他RAS安全函数（如RasSecurityDialogSend和RasSecurityDialogReceive）中使用此句柄来标识此身份验


-------------------------------------------------------- KeyWin32RasSecurityDialogComplete ----
RasSecurityDialogComplete    [New - Windows NT]RasSecurityDialogComplete函数通知RAS服务器第三方安全认证交易的结果。第三方RAS安全性DLL在完成对远程用户的身份验证后，会调用RasSecurityDialogComplete.当服务器调用安全DLL的RasSecurityDialogBegin入口点时，RAS服务器会传递一个指向RasSecurityDialogComplete函数的指针。
语法
参数
【pSecMsg】指向包含认证交易结果的SECURITY_MESSAGE结构。
返回值
没有。
描述
当安全性DLL完成对远程用户的身份验证后，它调用RasSecurityDialo


-------------------------------------------------------- KeyWin32RasSecurityDialogEnd ----
RasSecurityDialogEnd    [New - Windows NT]RasSecurityDialogEnd函数是Windows NT RAS服务器调用终止认证交易的第三方RAS安全性DLL入口点。
语法
参数
【hPort】指定RAS服务器在此验证事务的RasSecurityDialogBegin调用中传递给安全性DLL的端口句柄。
返回值
如果安全DLL返回NO_ERROR，则RAS服务器不


-------------------------------------------------------- KeyWin32RasSecurityDialogGetInfo ----
RasSecurityDialogGetInfo    [New - Windows NT]RAS安全性DLL调用RasSecurityDialogGetInfo函数来获取有关RAS服务器端口的信息。要调用此函数，必须先调用LoadLibrary函数来加载RASMAN.DLL。然后调用GetProcAddress函数来获取DLL的RasSecurityDialogGetInfo入口点。
语法
参数
【hPort】指定RAS服务器在此验证事务的RasSecurityDialogBegin调用中传递给安全性DLL的端口句柄。【p缓冲器】指向RAS_SECURITY_INFO结构的指针，可以


-------------------------------------------------------- KeyWin32RasSecurityDialogReceive ----
RasSecurityDialogReceive    [New - Windows NT]RasSecurityDialogReceive函数启动异步操作，从远程用户接收响应。响应是用户在远程计算机上的终端窗口中键入的输入。第三方RAS安全性DLL将此函数称为远程用户验证的一部分。要调用此函数，必须先调用LoadLibrary函数来加载RASMAN.DLL。然后调用GetProcAddress函数来获取DLL的RasSecurityDialogReceive入口点。
语法
参数
【hPort】指定在此验证事务的RasSecurityDialogBegin调用中RAS服务器传递到安全性DLL的端口句柄。【p缓冲器】指向在RasSecurityDialogBegin调用


-------------------------------------------------------- KeyWin32RasSecurityDialogSend ----
RasSecurityDialogSend    [New - Windows NT]RasSecurityDialogSend函数发送一条消息，显示在远程计算机的终端窗口中。第三方RAS安全性DLL作为远程用户验证的一部分发送此消息。要调用此函数，必须先调用LoadLibrary函数来加载RASMAN.DLL。然后调用GetProcAddress函数来获取DLL的RasSecurityDialogSend入口点。
语法
参数
【hPort】指定RAS服务器在此验证事务的RasSecurityDialogBegin调用中传递给安全性DLL的端口句柄。【p缓冲器】指向在RasSecurityDialogBegin调用


-------------------------------------------------------- KeyWin32RasSetAutodialAddress ----
RasSetAutodialAddress    [New - Windows NT]RasSetAutodialAddress函数可以向AutoDial映射数据库添加一个地址。或者，该函数可以删除或修改与数据库中现有地址相关联的数据。
语法
参数
【lpszAddresshu】指向指定要添加，删除或修改的地址的以空值终止的字符串。这可以是IP地址（“127.95.1.4”），Internet主机名（“www.microsoft.com


-------------------------------------------------------- KeyWin32RasSetAutodialEnable ----
RasSetAutodialEnable    [New - Windows NT]RasSetAutodialEnable函数设置是否为指定的TAPI拨号位置启用了自动拨号函数。有关TAPI拨号位置的更多信息，请参阅Win32 Telephony（TAPI）程序员参考。
语法
参数
【dwDialingLocation】指定TAPI拨号位置的标识符。【fEnabled】指定TRUE以为指定的拨号位置启用自动拨号，或选择FALSE禁用它。
返回值
如果函数成功，返回值


-------------------------------------------------------- KeyWin32RasSetAutodialParam ----
RasSetAutodialParam    [New - Windows NT]RasSetAutodialParam函数设置AutoDial参数的值。
语法
参数
【dwKey】表示要设置的AutoDial参数。此参数可以是以下值之一。值含义RASADP_DisableConnectionQuery【lpvValue】参数指向DWORD值。如果此值为零


-------------------------------------------------------- KeyWin32RasSetCredentials ----
RasSetCredentials    [New - Windows NT]RasSetCredentials函数设置与指定的RAS电话簿条目关联的用户凭据。
语法
参数
【lpszPhonebook】指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文件是用户在拨号网


-------------------------------------------------------- KeyWin32RasSetEntryDialParams ----
RasSetEntryDialParams    RasSetEntryDialParams函数将上次成功呼叫保存的连接信息更改为指定电话簿条目的RasDial或RasSetEntryDialParams函数。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的空终止字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电话簿文


-------------------------------------------------------- KeyWin32RasSetEntryProperties ----
RasSetEntryProperties    [New - Windows NT]RasSetEntryProperties函数更改电话簿中条目的连接信息或创建新的电话簿条目。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasSetSubEntryProperties ----
RasSetSubEntryProperties    [New - Windows NT]RasSetSubEntryProperties函数创建新的子条目或修改指定电话簿条目的现有子条目。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32RasValidateEntryName ----
RasValidateEntryName    [New - Windows NT]RasValidateEntryName函数验证连接条目名的格式。该名称必须至少包含一个非空白字母数字字符。
语法
参数
【lpszPhonebook】Windows NT：指向指定电话簿（.PBK）文件的完整路径和文件名的以空值终止的字符串的指针。如果此参数为NULL，则该函数使用当前的默认电话簿文件。默认电


-------------------------------------------------------- KeyWin32ReadConsole ----
ReadConsole    ReadConsole函数从控制台输入缓冲区读取字符输入，并将其从缓冲区中删除。
语法
参数
【hConsoleInput】标识控制台输入缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向缓冲区，接收从控制台输入缓冲区读取的数据。【nNumberOfChars


-------------------------------------------------------- KeyWin32ReadConsoleInput ----
ReadConsoleInput    ReadConsoleInput函数从控制台输入缓冲区读取数据，并将其从缓冲区中删除。
语法
参数
【hConsoleInput】标识输入缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向接收输入缓冲区数据的INPUT_RECORD缓冲区。【nLength】指定由【


-------------------------------------------------------- KeyWin32ReadConsoleOutput ----
ReadConsoleOutput    ReadConsoleOutput函数从控制台屏幕缓冲区中的矩形块字符单元读取字符和颜色属性数据，并将该数据写入目标缓冲区中指定位置的矩形块。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpBuffer】指向接收从屏幕缓冲区读取的数据的目标缓冲区。该指针被视为由【dwBufferSi


-------------------------------------------------------- KeyWin32ReadConsoleOutputAttribute ----
ReadConsoleOutputAttribute    ReadConsoleOutputAttribute函数从指定位置开始，从控制台屏幕缓冲区的连续单元格中复制指定数量的前景和背景颜色属性。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpAttribute】指向缓冲区，接收从屏幕缓冲区读取的属性。【nLength】指定要读取


-------------------------------------------------------- KeyWin32ReadConsoleOutputCharacter ----
ReadConsoleOutputCharacter    ReadConsoleOutputCharacter函数从指定位置开始，从控制台屏幕缓冲区的连续单元格中复制多个字符。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【lpCharacter】指向缓冲区，接收从屏幕缓冲区读取的字符。【nLength】指定要读取


-------------------------------------------------------- KeyWin32ReadDirectoryChangesW ----
ReadDirectoryChangesW    [New - Windows NT]ReadDirectoryChangesW函数返回描述在目录中发生的更改的信息。
语法
参数
【hDirectory】标识要观看的目录。必须使用FILE_LIST_DIRECTORY访问权限打开此目录。【lpBuffer】指定要在其中返回读取结果的格式化缓冲区的地址。该缓冲区的结构由


-------------------------------------------------------- KeyWin32ReadEventLog ----
ReadEventLog    ReadEventLog函数从指定的事件日志读取整个条目。该函数可用于以正向或反向时间顺序读取日志条目。
语法
参数
【hEventLog】标识要读取的事件日志。该句柄由OpenEventLog函数返回。【dwReadFlags】指定读取操作如何继续。此参数可以是以下值的任意组合：值含义EVENTLOG_F


-------------------------------------------------------- KeyWin32ReadFile ----
ReadFile    ReadFile函数从文件指针所指定的位置开始读取数据。读取操作完成后，文件指针将按实际读取的字节数进行调整，除非使用overlap属性创建文件句柄。如果为重叠的输入和输出（I / O）创建文件句柄，则应用程序必须在读取操作后调整文件指针的位置。
语法
参数
【HFILE】标识要读取的文件。必须使用GENERIC_READ访问该文件创建文件句柄。Windows NT对于异步读取操作，【HFILE】可以是使用CreateFile函数的FILE_FL


-------------------------------------------------------- KeyWin32ReadFileEx ----
ReadFileEx    ReadFileEx函数从异步读取文件中的数据。它专为异步操作而设计，不同于专为同步和异步操作而设计的ReadFile函数。ReadFileEx允许应用程序在文件读取操作期间执行其他处理。
语法
参数
【HFILE】指定要读取的文件实体的打开句柄。必须使用FILE_FLAG_OVERLAPPED标志创建此文件句柄，并且必须对该文件具有GENERIC_READ权限。Windows NT： 【


-------------------------------------------------------- KeyWin32ReadPrinter ----
ReadPrinter    ReadPrinter函数从指定的打印机检索数据。
语法
参数
【hPrinter】标识要检索数据的打印机。【PBUFlb】指向接收打印机数据的字节数组。【cbBuf】指定【PBUFlb】指向的缓冲区的大小（以字节为单位）。【pNoBytesRead】指


-------------------------------------------------------- KeyWin32ReadProcessMemory ----
ReadProcessMemory    ReadProcessMemory函数在指定的进程中读取内存。要读取的整个区域必须可访问，否则操作失败。
语法
参数
【hProcess】标识读取存储器的进程的打开句柄。该句柄必须具有进程的PROCESS_VM_READ访问权限。【lpBaseAddress】指向要读取的指定进程中的基地址。在发生任何数据传


-------------------------------------------------------- KeyWin32RealizePalette ----
RealizePalette    RealizePalette函数将调色板条目从当前逻辑调色板映射到系统调色板。
语法
参数
【HDC】标识已选择逻辑调色板的设备上下文（DC）。
返回值
如果函数成功，则返回值是映射到系统调色板的逻辑调色板中的条目数。如果函数失败，返回值为GDI_ERROR。要获取扩展错误信息


-------------------------------------------------------- KeyWin32Rectangle ----
矩形    长方形函数绘制一个矩形。使用当前笔并使用当前画笔填充矩形。BOOL Rectangle(HDC 【HDC】,//设备上下文的句柄INT 【nLeftRect】,// x-coord。边框的左上角INT 【nTopRect】,//的y坐标。边框的左上角INT 【nRightRect】,// x-coord。边框的右下角INT 【nBottomRect】//的y坐标。边框的右下角);
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的逻辑x坐标。【nTopRect】指定矩形左上角的逻辑y坐标。【nRightRect】指定矩形右下角的逻辑x坐标。【nBotto


-------------------------------------------------------- KeyWin32RectInRegion ----
RectInRegion    RectInRegion函数确定指定矩形的任何部分是否在区域的边界内。
语法
参数
【HRGN】识别该地区。【LPRC】指向包含矩形坐标的RECT结构。不包括矩形的下边和右边。
返回值
如果指定矩形的任何部分位于该区域的边界内，则返回值不为零。如果指定矩形的任何部分都不


-------------------------------------------------------- KeyWin32RectVisible ----
RectVisible    RectVisible函数确定指定矩形的任何部分是否位于设备上下文的裁剪区域内。
语法
参数
【HDC】标识设备上下文。【LPRC】指向包含指定矩形的逻辑坐标的RECT结构。
返回值
如果指定矩形的某些部分位于裁剪区域内，则返回值不为零。如果指定矩形的任何部分都不在裁剪区域内，返


-------------------------------------------------------- KeyWin32RedrawWindow ----
RedrawWindow    RedrawWindow函数可更新窗口客户区中指定的矩形或区域。
语法
参数
【的hWnd】标识要重绘的窗口。如果此参数为NULL，则会更新桌面窗口。【lprcUpdate】指向包含更新矩形坐标的RECT结构。如果【hrgnUpdate】参数标识一个区域，则忽略该参数


-------------------------------------------------------- KeyWin32RegCloseKey ----
RegCloseKey    RegCloseKey函数释放指定键的句柄。
语法
参数
【的hKeyru-Latn】标识要关闭的打开键。
返回值
如果函数成功，则返回值为ERROR_SUCCESS。如果函数失败，返回值是在WINERROR.H中定义的非零错误代码。您可以使用


-------------------------------------------------------- KeyWin32RegConnectRegistry ----
RegConnectRegistry    RegConnectRegistry函数与其他计算机上的预定义注册表句柄建立连接。
语法
参数
【lpMachineName】指向一个以空字符结尾的字符串，其中包含远程计算机的名称。该字符串具有以下形式：\\【计算机名】如果【lpMachineName】为NULL，则使用本地计算机名称


-------------------------------------------------------- KeyWin32RegCreateKey ----
RegCreateKey    RegCreateKey函数创建指定的键。如果密钥已经存在于注册表中，则该函数将打开它。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegCreateKeyEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegCreateKeyEx ----
RegCreateKeyEx    RegCreateKeyEx函数创建指定的键。如果密钥已经存在于注册表中，则该函数将打开它。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegDeleteKey ----
RegDeleteKey    Windows 95： RegDeleteKey函数删除一个键及其所有后代。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegDeleteValue ----
RegDeleteValue    RegDeleteValue函数从指定的注册表项中删除一个命名值。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegEnumKey ----
RegEnumKey    RegEnumKey函数枚举指定的打开注册表项的子项。该函数在每次调用时检索一个子项的名称。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegEnumKeyEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegEnumKeyEx ----
RegEnumKeyEx    RegEnumKeyEx函数枚举指定的打开注册表项的子项。该函数在每次调用时检索有关一个子项的信息。与RegEnumKey函数不同，RegEnumKeyEx检索子项的类名和上次修改的时间。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegEnumValue ----
RegEnumValue    RegEnumValue函数枚举指定打开的注册表项的值。该函数在每次调用时复制一个索引值名称和数据块。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegFlushKey ----
RegFlushKey    RegFlushKey函数将指定的打开密钥的所有属性写入注册表。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegGetKeySecurity ----
RegGetKeySecurity    RegGetKeySecurity函数检索保护指定的打开注册表项的安全描述符的副本。
语法
参数
【的hKeyru-Latn】标识要检索安全描述符的打开密钥。【SecurityInformation】指定一个SECURITY_INFORMATION结构，指示所请求的安全性信息。【pSec


-------------------------------------------------------- KeyWin32RegisterClass ----
RegisterClass    RegisterClass函数注册一个窗口类，用于随后在CreateWindow或CreateWindowEx函数的调用中使用。
语法
参数
【lpWndClass】指向WNDCLASS结构。在将结构传递给函数之前，必须使用适当的类属性来填充结构。
返回值
如果函数成功，则返回值是唯一标识正在注册的类的原子。如果函数失败，返回


-------------------------------------------------------- KeyWin32RegisterClassEx ----
RegisterClassEx    [Now Supported on Windows NT]RegisterClassEx函数注册一个窗口类，用于在CreateWindow或CreateWindowEx函数的调用中进行后续使用。RegisterClass函数不允许您设置小图标。
语法
参数
【lpwcx】指向WNDCLASSEX结构。在将结构传递给函数之前，必须使用适当的类属性来填充结构。
返回值
如果函数成功，则返回值是唯一标识正在注册的类的原子。如果函数失败，返回值为零


-------------------------------------------------------- KeyWin32RegisterClipboardFormat ----
RegisterClipboardFormat    RegisterClipboardFormat函数注册新的剪贴板格式。然后可以将此格式用作有效的剪贴板格式。
语法
参数
【lpszFormat】指向以空字符结尾的字符串，命名新格式。
返回值
如果函数成功，则返回值标识已注册的剪贴板格式。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyWin32RegisterDialogClasses ----
RegisterDialogClasses    RegisterDialogClasses函数注册屏幕保护程序配置对话框所需的任何非标准窗口类。
语法
参数
【HINST】标识注册窗口类的模块的实例。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
Register


-------------------------------------------------------- KeyWin32RegisterEventSource ----
RegisterEventSource    RegisterEventSource函数返回一个可以与ReportEvent函数一起使用的句柄来记录一个事件。可以使用任何源名称;它将在事件日志记录中携带，以便事件查看器可以使用它进行过滤。
语法
参数
【lpUNCServerName】指向以空字符结尾的字符串，该字符串指定要执行此操作的服务器的通用命名约定（UNC）名称。如果此参数为NULL，则在本地计算机上执行该操作。【lpSource


-------------------------------------------------------- KeyWin32RegisterHotKey ----
RegisterHotKey    RegisterHotKey函数定义当前线程的热键。
语法
参数
【的hWnd】标识将接收热键生成的WM_HOTKEY消息的窗口。如果此参数为NULL，WM_HOTKEY消息将发送到调用线程的消息队列，并且必须在消息循环中处理。【id】指定热键的标识符。调


-------------------------------------------------------- KeyWin32RegisterServiceCtrlHandler ----
RegisterServiceCtrlHandler    RegisterServiceCtrlHandler函数注册一个函数来处理服务的服务控制请求。
语法
参数
【lpServiceName】指向以空字符结尾的字符串，命名由调用线程运行的服务。这是在创建服务时在CreateService函数中指定的服务名称。【lpHandlerProc】指向要注册的


-------------------------------------------------------- KeyWin32RegisterWindowMessage ----
RegisterWindowMessage    RegisterWindowMessage函数定义了一个新的窗口消息，保证在整个系统中是唯一的。当调用SendMessage或PostMessage函数时，可以使用返回的消息值。
语法
参数
【lpString】指向指定要注册的消息的以null结尾的字符串。
返回值
如果消息成功注册，则返回值是0xC000到0xFFFF范围内的消息标识符。如果函数失败，返回值为零。
描述



-------------------------------------------------------- KeyWin32RegLoadKey ----
RegLoadKey    RegLoadKey函数在HKEY_USER或HKEY_LOCAL_MACHINE下创建一个子项，并将指定文件的注册信息存储到该子项中。这种注册信息是蜂巢的形式。配置单元是一个独立的键，子项和值，它们以root注册表层次结构的顶部为根。配置单元由单个文件和.LOG文件支持。
语法
参数
【的hKeyru-Latn】指定子项将被创建的键。这可以是预定义的保留句柄值，或者是调用RegConnectRegistry返回的句柄。预定义的保留句柄值为：HKEY_LOCAL_MACHI


-------------------------------------------------------- KeyWin32RegNotifyChangeKeyValue ----
RegNotifyChangeKeyValue    RegNotifyChangeKeyValue函数通知调用者对指定注册表项的属性或内容的更改。请注意，如果指定的键被删除，该函数不通知调用者。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegOpenKey ----
RegOpenKey    RegOpenKey函数打开指定的键。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegOpenKeyEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegOpenKeyEx ----
RegOpenKeyEx    RegOpenKeyEx函数打开指定的键。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegQueryInfoKey ----
RegQueryInfoKey    RegQueryInfoKey函数检索有关指定注册表项的信息。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegQueryMultipleValues ----
RegQueryMultipleValues    RegQueryMultipleValues函数检索与打开的注册表项相关联的值名称列表的类型和数据。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何预定义的保留句柄值：HKEY_CLASSES_ROOT
HEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKE


-------------------------------------------------------- KeyWin32RegQueryValue ----
RegQueryValue    RegQueryValue函数检索与注册表中指定键的未命名值相关联的值。注册表中的值具有名称，类型和数据组件。此函数检索具有NULL名称的键的第一个值的数据。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegQueryValueEx函数。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegQueryValueEx ----
RegQueryValueEx    RegQueryValueEx函数检索与打开的注册表项相关联的指定值名称的类型和数据。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegReplaceKey ----
RegReplaceKey    RegReplaceKey函数用另一个文件替换支持一个密钥及其所有子密钥的文件，这样当系统下次启动时，密钥和子密钥将具有存储在新文件中的值。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegRestoreKey ----
RegRestoreKey    RegRestoreKey函数读取指定文件中的注册表信息，并将其复制到指定的键上。该注册表信息可以是密钥和多级子密钥的形式。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegSaveKey ----
RegSaveKey    RegSaveKey函数将指定的键及其所有子项和值保存到新文件中。
语法
参数
【的hKeyru-Latn】指定要开始保存操作的键的句柄或以下任何预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACH


-------------------------------------------------------- KeyWin32RegSetKeySecurity ----
RegSetKeySecurity    RegSetKeySecurity函数设置打开注册表项的安全性。
语法
参数
【的hKeyru-Latn】标识设置安全描述符的打开密钥。【SecurityInformation】指定一个SECURITY_INFORMATION结构，指示所提供的安全描述符的内容。因为子


-------------------------------------------------------- KeyWin32RegSetValue ----
RegSetValue    RegSetValue函数将值与指定的键相关联。此值必须是文本字符串，不能有名称。此函数用于与Windows 3.1版兼容。基于Win32的应用程序应使用RegSetValueEx函数，该函数允许应用程序设置任意数量的任何数据类型的命名值。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegSetValueEx ----
RegSetValueEx    RegSetValueEx函数将数据存储在打开的注册表项的值字段中。它还可以为指定的键设置附加值和类型信息。
语法
参数
【的hKeyru-Latn】标识当前打开的键或任何以下预定义保留句柄值：HKEY_CLASSES_ROOT
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
H


-------------------------------------------------------- KeyWin32RegUnLoadKey ----
RegUnLoadKey    RegUnLoadKey函数从注册表中卸载指定的键和子项。
语法
参数
【的hKeyru-Latn】指定要卸载的密钥。这可以是预定义的预留句柄值，或者是调用RegConnectRegistry返回的句柄。预定义的保留句柄值为：HKEY_LOCAL_MACHINE


-------------------------------------------------------- KeyWin32ReleaseCapture ----
ReleaseCapture    ReleaseCapture函数从当前线程中的窗口释放鼠标捕获，并恢复正常的鼠标输入处理。捕获鼠标的窗口接收所有鼠标输入，无论光标的位置如何，除非当光标热点位于另一个线程的窗口中时单击鼠标按钮。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
调用SetCapture函数后，应用程序调用此函数。Windows 95：调用此函数会导致失去鼠


-------------------------------------------------------- KeyWin32ReleaseDC ----
ReleaseDC    ReleaseDC函数释放设备上下文（DC），将其释放供其他应用程序使用。ReleaseDC函数的效果取决于设备上下文的类型。它只释放普通和窗口设备上下文。它对类或私有设备上下文没有影响。
语法
参数
【的hWnd】标识要释放设备上下文的窗口。【hDC】标识要释放的设备上下文。
返回值
返回值指定设备上下文是否被释放。如果设备上下文被释放，则返回值为1。如果设备上下文未释放，则返回值为


-------------------------------------------------------- KeyWin32ReleaseMutex ----
ReleaseMutex    ReleaseMutex函数释放指定的互斥对象的所有权。
语法
参数
【hMutex】标识互斥体对象。CreateMutex或OpenMutex函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用Get


-------------------------------------------------------- KeyWin32ReleaseSemaphore ----
ReleaseSemaphore    ReleaseSemaphore函数将指定信号量对象的计数增加指定量。
语法
参数
【// handle of the semaphore object】标识信号量对象。CreateSemaphore或OpenSemaphore函数返回此句柄。Windows NT：此句柄必


-------------------------------------------------------- KeyWin32RemoveDirectory ----
RemoveDirectory    RemoveDirectory函数删除现有的空目录。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定要删除的目录的路径。该路径必须指定一个空目录，并且调用进程必须具有对目录的删除访问权限。
返回值
如果函数成功，返回值不为零。


-------------------------------------------------------- KeyWin32RemoveFontResource ----
RemoveFontResource    RemoveFontResource函数从Windows字体表中删除指定文件中的字体。
语法
参数
【lpFileName】指向以空字符结尾的字符串，命名字体资源文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32RemoveMenu ----
RemoveMenu    RemoveMenu函数从指定的菜单中删除菜单项。如果菜单项打开一个下拉菜单或子菜单，RemoveMenu不会破坏菜单或其句柄，允许菜单重复使用。在调用此函数之前，GetSubMenu函数应该检索下拉菜单或子菜单的句柄。
语法
参数
【HMENU】标识要更改的菜单。【uPositionbs】指定要删除的菜单项，由【uFlags】参数确定。【uFlags】指定如何解释【uPositionbs】参数。此参数必须是以下值之一：


-------------------------------------------------------- KeyWin32RemoveProp ----
RemoveProp    RemoveProp函数从指定窗口的属性列表中删除一个条目。指定的字符串标识要删除的条目。
语法
参数
【的hWnd】标识要更改属性列表的窗口。【lpString】指向以null结尾的字符串或包含标识字符串的原子。如果此参数是原子，则必须使用AddAtom函数创建。原子，16位值，必须放在【l


-------------------------------------------------------- KeyWin32ReplaceText ----
ReplaceText    ReplaceText函数创建一个系统定义的无模式对话框，允许用户指定要搜索的字符串和替换字符串，以及用于控制查找和替换操作的选项。
语法
参数
【LPFR】指向FINDREPLACE结构的指针，其中包含用于初始化对话框的信息。该对话框使用此结构将有关用户输入的信息发送到您的应用程序。有关详细信息，请参阅以下备注部分。
返回值
如


-------------------------------------------------------- KeyWin32ReplyMessage ----
ReplyMessage    ReplyMessage函数用于回复通过SendMessage函数发送的消息，而不返回对称为SendMessage的函数的控制。
语法
参数
【LRESULT】指定消息处理的结果。可能的值基于发送的消息。
返回值
如果调用线程正在处理从另一个线程或进程发送的消息，则返回值不为零。如果调用线程没有处理从另一个线程或进程发送的消息


-------------------------------------------------------- KeyWin32ReportEvent ----
ReportEvent    ReportEvent函数在指定事件日志的末尾写入一个条目。
语法
参数
【hEventLog】标识事件日志。该句柄由RegisterEventSource函数返回。【WTYPE】指定正在记录的事件的类型。此参数可以是以下值之一：值含义EVENTLOG_ERROR


-------------------------------------------------------- KeyWin32ResetDC ----
ResetDC    ResetDC函数根据指定结构中的信息更新给定的打印机或绘图仪设备上下文。
语法
参数
【HDC】标识要更新的设备上下文。【lpInitData】指向DEVMODE结构，其中包含有关新设备上下文的信息。
返回值
如果函数成功，则返回值是原始设备上下文的句柄。如果函数失败，返


-------------------------------------------------------- KeyWin32ResetEvent ----
ResetEvent    ResetEvent函数将指定的事件对象的状态设置为非信号。
语法
参数
【活动】标识事件对象。CreateEvent或OpenEvent函数返回此句柄。Windows NT：句柄必须有EVENT_MODIFY_STATE访问权限。有关详细信息，请参阅进程间同步对


-------------------------------------------------------- KeyWin32ResetPrinter ----
ResetPrinter    ResetPrinter函数允许应用程序指定用于打印由StartDocPrinter函数提交的文档的数据类型和设备模式值。一旦文档打印开始，可以使用SetJob函数覆盖这些值。
语法
参数
【hPrinter】识别打印机。【pDefault】指向PRINTER_DEFAULTS结构。ResetPrinter函数忽略PRINTER_DEFAULTS结构的DesiredAccess


-------------------------------------------------------- KeyWin32ResizePalette ----
ResizePalette    ResizePalette函数根据指定的值增加或减少逻辑调色板的大小。
语法
参数
【HPAL】标识要更改的调色板。【的nentries】指定调色板大小后的条目数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastE


-------------------------------------------------------- KeyWin32RestoreDC ----
RestoreDC    RestoreDC函数将设备上下文（DC）恢复到指定的状态。通过从先前调用SaveDC函数创建的堆栈弹出状态信息来恢复设备上下文。
语法
参数
【HDC】标识设备上下文。【nSavedDC】指定要恢复的设备上下文的实例。如果此参数为正，则【nSavedDC】表示要还原的设备上下文的特定实例。如果此参数为负，则【nSavedDC】表示


-------------------------------------------------------- KeyWin32ResumeThread ----
ResumeThread    ResumeThread函数减少线程的挂起计数。当暂停计数递减到零时，线程的执行被恢复。
语法
参数
【hThread】指定要重新启动的线程的句柄。Windows NT：句柄必须具有对线程的THREAD_SUSPEND_RESUME访问权限。有关详细信息，请参阅线程对象.
返回值
如果函


-------------------------------------------------------- KeyWin32ReuseDDElParam ----
ReuseDDElParam    ReuseDDElParam函数允许应用程序重新使用打包的DDE 【lParam的】参数，而不是分配新的打包【lParam的】.使用此函数可减少通过打包DDE消息的应用程序的重新分配。
语法
参数
【lParam的】指定正在重用的发布的DDE消息的【lParam的】参数。【的MsgIn】指定接收的DDE消息的标识符。【msgOut】指定要发布的DDE消息的标识符。DDE消息将重新使用打


-------------------------------------------------------- KeyWin32RevertToSelf ----
RevertToSelf    RevertToSelf函数终止客户端应用程序的模拟。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
在使用DdeImpersonateClien


-------------------------------------------------------- KeyWin32RoundRect ----
RoundRect    RoundRect函数绘制一个带圆角的矩形。使用当前笔并使用当前画笔填充矩形。
语法
参数
【HDC】标识设备上下文。【nLeftRect】指定矩形左上角的x坐标。【nTopRect】指定矩形左上角的y坐标。【nRightRect】指定矩形右下角的x坐标。【nBottomRect】


-------------------------------------------------------- KeyWin32SaveDC ----
SaveDC    通过将描述所选对象和图形模式（如位图，画笔，调色板，字体，笔，区域，绘图模式和映射模式）的数据复制到SaveDC函数来保存指定设备上下文（DC）的当前状态，上下文堆栈。
语法
参数
【HDC】标识要保存的设备上下文。
返回值
如果函数成功，则返回值标识已保存的设备上下文。如果函数失败，返回值为零。
描述
可以使用SaveDC函数任意次数来保存设备上下文状态的任何


-------------------------------------------------------- KeyWin32ScaleViewportExtEx ----
ScaleViewportExtEx    ScaleViewportExtEx函数通过使用指定的乘数和除数形成的比例来修改设备上下文（DC）的视口。
语法
参数
【HDC】标识设备上下文。【XNUM】指定用于乘以当前水平范围的量。【//水平除数】指定用于划分当前水平范围的量。【// vertical multiplicand】指定乘以当前垂直范围的量


-------------------------------------------------------- KeyWin32ScaleWindowExtEx ----
ScaleWindowExtEx    ScaleWindowExtEx函数使用指定的乘数和除数形成的比率修改设备上下文的窗口。
语法
参数
【HDC】标识设备上下文。【XNUM】指定用于乘以当前水平范围的量。【//水平除数】指定用于划分当前水平范围的量。【// vertical multiplicand】指定乘以当前垂直范围的量


-------------------------------------------------------- KeyWin32ScheduleJob ----
ScheduleJob    ScheduleJob函数请求打印后台处理程序安排指定的打印作业进行打印。
语法
参数
【hPrinter】手柄指定打印作业的打印机。这必须是配置为假脱机打印机的本地打印机。如果【hPrinter】是远程打印机连接的句柄，或者如果打印机配置为直接打印，则ScheduleJob函


-------------------------------------------------------- KeyWin32ScreenSaverConfigureDialog ----
ScreenSaverConfigureDialog    ScreenSaverConfigureDialog函数接收发送到屏幕保护程序配置对话框的消息。允许用户配置的屏幕保护程序必须支持此函数。
语法
参数
【hDlg】标识配置对话框。【信息】指定消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
如果函数处理消息，返回值为TRUE;否则，它是


-------------------------------------------------------- KeyWin32ScreenSaverProc ----
ScreenSaverProc    ScreenSaverProc函数接收发送到指定屏幕保护程序窗口的消息。
语法
参数
【的hWnd】标识窗口。【信息】指定消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定信息。
返回值
返回值是消息处理的结果，取决于发送的消息。
描述


-------------------------------------------------------- KeyWin32ScreenToClient ----
ScreenToClient    ScreenToClient函数将屏幕上指定点的屏幕坐标转换为客户端坐标。
语法
参数
【的hWnd】识别客户端区域将用于转换的窗口。【LPPOINT】指向包含要转换的屏幕坐标的POINT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
该函


-------------------------------------------------------- KeyWin32ScrollConsoleScreenBuffer ----
ScrollConsoleScreenBuffer    ScrollConsoleScreenBuffer函数在屏幕缓冲区中移动一组数据。可以通过指定剪切矩形来限制移动的效果，因此剪切矩形外的屏幕缓冲区的内容不变。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpScrollRectangle】指向SMALL_RECT结构，其成员指定要移动的屏幕缓


-------------------------------------------------------- KeyWin32ScrollDC ----
ScrollDC    ScrollDC函数水平和垂直滚动一个位矩形。
语法
参数
【hDC】标识包含要滚动的位的设备上下文。【dx】指定水平滚动的设备单位数量。该参数必须是负值才能向左滚动。【dy】指定垂直滚动的设备单位数量。该参数必须是负值才能向上滚动。【lprcScr


-------------------------------------------------------- KeyWin32ScrollWindow ----
ScrollWindow    ScrollWindow函数滚动指定窗口的客户区域的内容。此函数存在向后兼容性。对于新的应用程序，请使用ScrollWindowEx函数。
语法
参数
【的hWnd】标识要滚动客户端区域的窗口。【XAmount】指定水平滚动的设备单位数量。如果要滚动的窗口具有CS_OWNDC或CS_CLASSDC样式，则此参数使用逻辑单元而不是设备单位。该


-------------------------------------------------------- KeyWin32ScrollWindowEx ----
ScrollWindowEx    ScrollWindowEx函数滚动指定窗口的客户区域的内容。此函数与ScrollWindow函数类似，但具有其他函数。
语法
参数
【的hWnd】标识要滚动客户端区域的窗口。【dx】指定水平滚动的设备单位数量。该参数必须是负值才能向左滚动。【dy】指定垂直滚动的设备单位数量。该参数必须是负值才能向上滚动。【// addr


-------------------------------------------------------- KeyWin32SearchPath ----
SearchPath    SearchPath函数搜索指定的文件。
语法
参数
【lpPath】指向以空字符结尾的字符串，指定要搜索文件的路径。如果此参数为NULL，则该函数按以下顺序搜索以下目录中的匹配文件：1.应用程序加载的目录。2.当前目录。3.Windows 9


-------------------------------------------------------- KeyWin32SelectClipPath ----
SelectClipPath    SelectClipPath函数将当前路径选择为设备上下文的剪切区域，通过使用指定的模式将新区域与任何现有的剪切区域组合。
语法
参数
【HDC】标识路径的设备上下文。【iMode平台】指定使用路径的方式。允许以下值：值含义RGN_AND新的剪辑区域包括当前剪辑区域和当前路径的交点（重叠区域）。RGN_COPY新剪辑区域是当


-------------------------------------------------------- KeyWin32SelectClipRgn ----
SelectClipRgn    SelectClipRgn函数选择一个区域作为指定设备上下文的当前剪切区域。
语法
参数
【HDC】标识设备上下文。【HRGN】标识要选择的区域。
返回值
如果函数成功，则返回值指定区域的复杂度，可以是以下值之一：值含义NULLREGION区域是空的SIMPLEREGION区


-------------------------------------------------------- KeyWin32SelectObject ----
SelectObject    SelectObject函数在指定的设备上下文中选择一个对象。新对象将替换同一类型的上一个对象。
语法
参数
【HDC】标识设备上下文。【hgdiobj】标识要选择的对象。必须使用以下函数之一创建指定的对象：目的函数位图CreateBitmap, CreateBitmapIndirect, Crea


-------------------------------------------------------- KeyWin32SelectPalette ----
SelectPalette    SelectPalette函数将指定的逻辑调色板选择到设备上下文中。
语法
参数
【HDC】标识设备上下文。【HPAL】标识要选择的逻辑调色板。【bForceBackground】指定逻辑调色板是否被强制为背景调色板。如果此值为TRUE，则RealizePalette函数


-------------------------------------------------------- KeyWin32SendAsyncProc ----
SendAsyncProc    SendAsyncProc函数是一个应用程序定义的回调函数，当调用SendMessageCallback函数时，操作系统调用该函数。系统在将消息传递到目标窗口过程后，将消息传递给回调函数。类型为SENDASYNCPROC的值是指向此类函数的指针。
语法
参数
【HWND】标识窗口程序接收到消息的窗口。如果SendMessageCallback函数的【HWND】参数设置为HWND_BROADCAST，则操作系统会为每个顶级窗口调用一次SendAsy


-------------------------------------------------------- KeyWin32SendDlgItemMessage ----
SendDlgItemMessage    SendDlgItemMessage函数在对话框中向指定的控件发送消息。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定接收消息的控件的标识符。【消息】指定要发送的消息。【wParam中】指定附加的消息特定信息。【lParam的】指定附加的消息特定


-------------------------------------------------------- KeyWin32SendMessage ----
SendMessage    SendMessage函数将指定的消息发送到窗口或窗口。该函数调用指定窗口的窗口过程，并且在窗口过程处理该消息之前不返回。相反，PostMessage函数将消息发布到线程的消息队列，并立即返回。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_BROADCAST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口;但消息不会发送到子


-------------------------------------------------------- KeyWin32SendMessageCallback ----
SendMessageCallback    SendMessageCallback函数将指定的消息发送到窗口或窗口。该函数调用指定窗口的窗口过程并立即返回。窗口过程处理消息后，系统调用指定的回调函数，将消息处理的结果和应用程序定义的值传递给回调函数。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_BROADCAST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口;但消息不会发送到子


-------------------------------------------------------- KeyWin32SendMessageTimeout ----
SendMessageTimeout    SendMessageTimeout函数将指定的消息发送到窗口或窗口。该函数调用指定窗口的窗口过程，如果指定的窗口属于不同的线程，则在窗口过程已处理该消息或指定的超时期限过去之前不会返回。如果接收到该消息的窗口属于与当前线程相同的队列，则直接调用窗口过程__忽略超时值。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_TOPMOST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口。【消息】指定要发送的消息。【wParam中


-------------------------------------------------------- KeyWin32SendNotifyMessage ----
SendNotifyMessage    SendNotifyMessage函数将指定的消息发送到窗口。如果窗口是由调用线程创建的，SendNotifyMessage调用该窗口的窗口过程，直到窗口过程处理该消息才返回。如果窗口由不同的线程创建，SendNotifyMessage将消息传递到窗口过程并立即返回;它不等待窗口过程来完成处理消息。
语法
参数
【的hWnd】标识窗口程序将接收消息的窗口。如果此参数为HWND_BROADCAST，则会将消息发送到系统中的所有顶级窗口，包括禁用或不可见的未知窗口，重叠窗口和弹出窗口;但消息不会发送到子


-------------------------------------------------------- KeyWin32ServiceMain ----
ServiceMain    ServiceMain函数是服务进程指定为特定服务的入口点函数的函数。该函数可以有任何应用程序定义的名称。
语法
参数
【dwArgc】指定【lpszArgv】数组中的参数数。【lpszArgv】指向指向以null结尾的参数字符串的指针数组。数组中的第一个参数是服务的名称，后续参数是由调用StartServi


-------------------------------------------------------- KeyWin32SetAbortProc ----
SetAbortProc    SetAbortProc函数设置应用程序定义的中止函数，允许在假脱机期间取消打印作业。此函数替代SETABORTPROC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。【lpAbortProc】指向应用程序定义的中止函数。有关回调函数的更多信息，请参阅AbortProc回调函数。
返回值
如果函数成功，返回值大于零。


-------------------------------------------------------- KeyWin32SetAclInformation ----
SetAclInformation    SetAclInformation函数设置有关访问控制列表（ACL）的信息。
语法
参数
【ACL】指向ACL结构。该函数设置此ACL中的信息。【pAclInformation】指向包含要设置的信息的缓冲区。对于当前版本的Windows NT，这必须是ACL_REVISION_I


-------------------------------------------------------- KeyWin32SetActiveWindow ----
SetActiveWindow    SetActiveWindow函数激活一个窗口。
语法
参数
【的hWnd】标识要激活的顶级窗口。
返回值
如果函数成功，则返回值是以前激活的窗口的句柄。
描述
SetActiveWindow函数激活一个窗口，但是如果应用程序在后台，则不会启用


-------------------------------------------------------- KeyWin32SetArcDirection ----
SetArcDirection    SetArcDirection设置用于圆弧和矩形函数的绘图方向。
语法



-------------------------------------------------------- KeyWin32SetBitmapBits ----
SetBitmapBits    SetBitmapBits函数将位图的颜色数据位设置为指定值。
语法
参数
【骨形态发生蛋白】标识要设置的位图。【cBytes】指定【LP位元ca】参数指向的字节数。【LP位元ca】指向包含指定位图的颜色数据的字节数组。
返回值
如果函数成功，则返回值是用于设置


-------------------------------------------------------- KeyWin32SetBitmapDimensionEx ----
SetBitmapDimensionEx    SetBitmapDimensionEx函数将优选的尺寸分配给位图。这些尺寸可以由应用程序使用;但是，它们不被Windows使用。
语法
参数
【HBITMAP】标识位图。位图不能是DIB部分位图。【nWidth】指定位图的宽度（以0.1毫米为单位）。【nHeight参数】指定位图的高度（以0.1毫米为单位）。【lpsiz到】指向S


-------------------------------------------------------- KeyWin32SetBkColor ----
SetBkColor    SetBkColor函数将当前背景颜色设置为指定的颜色值，如果设备无法表示指定的颜色值，则将其设置为最近的物理颜色。
语法
参数
【HDC】标识设备上下文。【crColor】指定新的背景颜色。
返回值
如果函数成功，则返回值将前一个背景颜色指定为COLORREF值。如果函数失败，返回值为CLR_INVALID。



-------------------------------------------------------- KeyWin32SetBkMode ----
SetBkMode    SetBkMode函数设置指定设备上下文的后台混合模式。背景混合模式与文本，阴影画笔和不是实线的笔式样一起使用。
语法
参数
【HDC】标识设备上下文。【iBkMode】指定背景模式。此参数可以是以下值之一：值描述OPAQUE在绘制文本，阴影画笔或钢笔之前，背景填充当前的背景颜色。TRANSPARENT背景保持不变


-------------------------------------------------------- KeyWin32SetBoundsRect ----
SetBoundsRect    SetBoundsRect函数控制指定设备上下文的边界矩形信息的累积。Windows可以维护所有绘图操作的边界矩形。应用程序可以检查并设置此矩形。绘图边界对于无效位图缓存非常有用。
语法
参数
【HDC】标识要累积边界矩形的设备上下文。【lprcBounds】指向RECT结构，用于设置边界矩形。矩形尺寸为逻辑坐标。此参数可以为NULL。【旗】指定新矩形如何与累积的矩形组合。此参数可


-------------------------------------------------------- KeyWin32SetBrushOrgEx ----
SetBrushOrgEx    SetBrushOrgEx函数将GDI指定给应用程序选择的【下一个】画笔的画笔原点设置到指定的设备上下文中。
语法
参数
【HDC】标识设备上下文。【nXOrg】指定新笔刷原点的设备单位的x坐标。如果该值大于画笔宽度，则使用模数运算符（【nXOrg】 mod画笔宽度）减小其值。【nYOrg】指定新笔刷原点的设备


-------------------------------------------------------- KeyWin32SetCapture ----
SetCapture    SetCapture函数将鼠标捕获设置为属于当前线程的指定窗口。一旦窗口捕获了鼠标，所有的鼠标输入都被定向到该窗口，无论光标是否在该窗口的边框内。一次只能有一个窗口可以捕获鼠标。如果鼠标光标位于由另一个线程创建的窗口上，系统将只有在鼠标按钮关闭时才将鼠标输入到指定的窗口。
语法
参数
【的hWnd】标识当前线程中捕获鼠标的窗口。
返回值
如果函数成功，则返回值是先前捕获鼠标的窗口的句柄。如果没有这样的窗口，则返回值为NULL。
描述
只有前景窗口才能捕获鼠标。当后


-------------------------------------------------------- KeyWin32SetCaretBlinkTime ----
SetCaretBlinkTime    SetCaretBlinkTime函数将插入符号闪烁时间设置为指定的毫秒数。闪烁时间是反转插入符号所需的经过时间（以毫秒为单位）。
语法
参数
【uMSeconds】指定新的闪烁时间（以毫秒为单位）。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
用


-------------------------------------------------------- KeyWin32SetCaretPos ----
SetCaretPos    SetCaretPos函数将插入符移动到指定的坐标。如果使用CS_OWNDC类样式创建拥有插入符号的窗口，则指定的坐标将受到与该窗口关联的设备上下文的映射模式的约束。
语法
参数
【X】指定插入符号的新x坐标。【Y】指定插入符的新y坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述



-------------------------------------------------------- KeyWin32SetClassLong ----
SetClassLong    SetClassLong函数将指定偏移处的指定的32位（长）值替换为指定窗口所属类的额外类存储器或WNDCLASS结构。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要替换的32位值。要在额外的类内存中设置一个32位值，请指定要设置的值的正零，基于零的字节偏移量。有效值范围为零，通过


-------------------------------------------------------- KeyWin32SetClassWord ----
SetClassWord    SetClassWord函数将指定偏移处的16位（字）值替换为指定窗口所属的窗口类的额外类内存。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要替换的值的基于零的字节偏移量。有效值范围为零，通过类内存的字节数减去2;例如，如果您指定了10个或更多字节的额外类内


-------------------------------------------------------- KeyWin32SetClipboardData ----
SetClipboardData    SetClipboardData函数将数据以指定的剪贴板格式放置在剪贴板上。该窗口必须是当前的剪贴板所有者，应用程序必须调用OpenClipboard函数。（当回复WM_RENDERFORMAT和WM_RENDERALLFORMATS消息时，剪贴板所有者在致电SetClipboardData之前不得致电OpenClipboard）。
语法
参数
【UFormat】指定剪贴板格式。此参数可以是注册格式或以下备注部分中列出的任何标准剪贴板格式。有关注册剪贴板格式的信息，请参阅RegisterClipboardFormat函数。【HMEM


-------------------------------------------------------- KeyWin32SetClipboardViewer ----
SetClipboardViewer    SetClipboardViewer函数将指定的窗口添加到剪贴板查看器链。每当剪贴板的内容发生变化时，剪贴板查看器窗口将收到WM_DRAWCLIPBOARD消息。
语法
参数
【hWndNewViewer】标识要添加到剪贴板链的窗口。
返回值
如果函数成功，则返回值标识剪贴板查看器链中的下一个窗口。如果发生错误或剪贴板查看器链中没有其他窗口，则返回值为NULL


-------------------------------------------------------- KeyWin32SetColorAdjustment ----
SetColorAdjustment    SetColorAdjustment函数使用指定的值设置设备上下文的颜色调整值。
语法
参数
【HDC】标识设备上下文。【LPCA】指向包含颜色调整值的COLORADJUSTMENT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用G


-------------------------------------------------------- KeyWin32SetColorSpace ----
SetColorSpace    SetColorSpace函数设置指定设备上下文的颜色空间，定义CIE XYZ空间中逻辑RGB空间的端点。
语法
参数
【HDC】处理设备上下文。【hColorSpace】处理逻辑色彩空间。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32SetCommBreak ----
SetCommBreak    SetCommBreak函数暂停指定通信设备的字符传输，并将传输线路置于中断状态，直到调用ClearCommBreak函数为止。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描


-------------------------------------------------------- KeyWin32SetCommConfig ----
SetCommConfig    [Now Supported on Windows NT]SetCommConfig函数设置通信设备的当前配置。
语法
参数
【hCommDev】标识开放的通信设备。【lpCC】指向COMMCONFIG结构。【的dwSize】指定【lpCC】指向的结构的大小（以字节为单位）。
返回值
如果函数成功，返回值不为零


-------------------------------------------------------- KeyWin32SetCommMask ----
SetCommMask    SetCommMask函数指定要监视通信设备的一组事件。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【dwEvtMask】指定要启用的事件。值为零将禁用所有事件。此参数可以是以下值的组合：值含义EV_BREAK输入时检测到中断


-------------------------------------------------------- KeyWin32SetCommState ----
SetCommState    SetCommState函数根据设备控制块（DCB结构）中的规格配置通信设备。该函数重新初始化所有硬件和控制设置，但不会清空输出或输入队列。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpDCB】指向DCB结构，其中包含指定通信设备的配置信息。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32SetCommTimeouts ----
SetCommTimeouts    SetCommTimeouts函数设置指定通信设备上所有读取和写入操作的超时参数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpCommTimeouts】指向包含新的超时值的COMMTIMEOUTS结构。
返回值
如果函数成功，返回值不为零。如


-------------------------------------------------------- KeyWin32SetComputerName ----
SetComputerName    SetComputerName函数设置下次重新启动系统时使用的计算机名称。
语法
参数
【lpComputerName】指向一个空值终止的字符串，指定下一次启动计算机时计算机名称的名称。该名称不得超过MAX_COMPUTERNAME_LENGTH个字符。Windows 95：如


-------------------------------------------------------- KeyWin32SetConsoleActiveScreenBuffer ----
SetConsoleActiveScreenBuffer    SetConsoleActiveScreenBuffer函数将指定的屏幕缓冲区设置为当前显示的控制台屏幕缓冲区。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
控制


-------------------------------------------------------- KeyWin32SetConsoleCP ----
SetConsoleCP    SetConsoleCP函数设置与调用进程相关联的控制台使用的输入代码页。控制台使用其输入代码页将键盘输入转换为相应的字符值。
语法
参数
【wCodePageID】指定要设置的代码页的标识符。本地计算机上可用的代码页的标识符将以以下密钥存储在注册表中。HKEY_LOCAL_MACHINE\SYSTEM\CurrentContr


-------------------------------------------------------- KeyWin32SetConsoleCtrlHandler ----
SetConsoleCtrlHandler    SetConsoleCtrlHandler函数从调用进程的处理函数列表中添加或删除应用程序定义的HandlerRoutine函数。如果没有指定处理程序函数，则该函数设置一个可继承属性，该属性确定调用进程是否忽略CTRL + C信号。
语法
参数
【HandlerRoutine】指向应用程序定义的HandlerRoutine函数添加或删除。此参数可以为NULL。【加】指定是否从处理程序列表中添加或删除【HandlerRoutine】参


-------------------------------------------------------- KeyWin32SetConsoleCursorInfo ----
SetConsoleCursorInfo    SetConsoleCursorInfo函数设置指定控制台屏幕缓冲区的游标的大小和可见性。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpConsoleCursorInfo】指向CONSOLE_CURSOR_INFO结构，其


-------------------------------------------------------- KeyWin32SetConsoleCursorPosition ----
SetConsoleCursorPosition    SetConsoleCursorPosition函数在指定的控制台屏幕缓冲区中设置光标位置。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【dwCursorPosition】指定包含新光标位置的COORD结构。坐标是屏幕缓冲区字符


-------------------------------------------------------- KeyWin32SetConsoleMode ----
SetConsoleMode    SetConsoleMode函数设置控制台输入缓冲区的输入模式或控制台屏幕缓冲区的输出模式。
语法
参数
【hConsoleHandle】标识控制台输入缓冲区或屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【dwMode】指定要设置的输入或输出模式。如果【hConsoleHandle】


-------------------------------------------------------- KeyWin32SetConsoleOutputCP ----
SetConsoleOutputCP    SetConsoleOutputCP函数设置与调用进程关联的控制台使用的输出代码页。控制台使用其输出代码页将由各种输出函数写入的字符值转换为控制台窗口中显示的图像。
语法
参数
【wCodePageID】指定要设置的代码页的标识符。本地计算机上可用的代码页的标识符将以以下密钥存储在注册表中。HKEY_LOCAL_MACHINE\SYSTEM\CurrentContr


-------------------------------------------------------- KeyWin32SetConsoleScreenBufferSize ----
SetConsoleScreenBufferSize    SetConsoleScreenBufferSize函数可以更改指定的控制台屏幕缓冲区的大小。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【的dwSize】指定包含屏幕缓冲区的行和列的新大小的COORD结构。指定的宽度和高度不能小


-------------------------------------------------------- KeyWin32SetConsoleTextAttribute ----
SetConsoleTextAttribute    SetConsoleTextAttribute函数设置由WriteFile或WriteConsole函数写入屏幕缓冲区的字符的前景（文本）和背景颜色属性，或由ReadFile或ReadConsole函数回显。此函数仅影响函数调用后写入的文本。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_READ权限。【wAttributes】指定前景色和背景颜色属性。可以指定以下值的任意组合：FOREGROU


-------------------------------------------------------- KeyWin32SetConsoleTitle ----
SetConsoleTitle    SetConsoleTitle函数设置当前控制台窗口的标题栏字符串。
语法
参数
【lpConsoleTitle】指向一个以null结尾的字符串，其中包含要显示在控制台窗口的标题栏中的字符串。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错


-------------------------------------------------------- KeyWin32SetConsoleWindowInfo ----
SetConsoleWindowInfo    SetConsoleWindowInfo函数设置控制台屏幕缓冲区窗口的当前大小和位置。
语法
参数
【hConsoleOutput】标识控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【bAbsolute】指定如何使用【lpConsoleWindow】参数指向的结构中的坐标。


-------------------------------------------------------- KeyWin32SetCurrentDirectory ----
SetCurrentDirectory    SetCurrentDirectory函数更改当前进程的当前目录。
语法
参数
【lpPathName】指向一个以null结尾的字符串，指定新的当前目录的路径。该参数可以是相对路径或完全限定路径。在任一情况下，计算指定目录的完全限定路径并将其存储为当前目录。
返回值



-------------------------------------------------------- KeyWin32SetCursor ----
SetCursor    SetCursor函数建立光标形状。
语法
参数
【HCURSORpt】标识光标。光标必须由CreateCursor创建或由LoadCursor或LoadImage函数加载。如果此参数为NULL，则将光标从屏幕中删除。Windows 95：


-------------------------------------------------------- KeyWin32SetCursorPos ----
SetCursorPos    SetCursorPos函数将光标移动到指定的屏幕坐标。如果新坐标不在最新的ClipCursor函数设置的屏幕矩形内，Windows会自动调整坐标，使光标停留在矩形内。
语法
参数
【X】指定光标的屏幕坐标中的新x坐标。【Y】指定光标的屏幕坐标中的新y坐标。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastErr


-------------------------------------------------------- KeyWin32SetDebugErrorLevel ----
SetDebugErrorLevel    SetDebugErrorLevel函数设置Windows将生成调试事件的最小错误级别，并将其传递给调试器。
语法



-------------------------------------------------------- KeyWin32SetDefaultCommConfig ----
SetDefaultCommConfig    [Now Supported on Windows NT]SetDefaultCommConfig函数设置通信设备的默认配置。
语法
参数
【lpszName】指向指定设备名称的以null结尾的字符串。【lpCC】指向COMMCONFIG结构。如果此参数为NULL，则将默认配置设置为设备驱动程序的默认值。【的dwSize】指定【


-------------------------------------------------------- KeyWin32SetDeviceGammaRamp ----
SetDeviceGammaRamp    SetDeviceGammaRamp函数设置直接彩色显示板上的伽玛斜坡。
语法
参数
【HDC】处理设备上下文。【lpRamp】指向一组256字节元素的三个数组。这些数组是帧缓冲器和DAC值之间的颜色值之间的映射。第一个数组是红色，下一个是绿色，最后一个是蓝色。
返回值



-------------------------------------------------------- KeyWin32SetDIBColorTable ----
SetDIBColorTable    SetDIBColorTable函数在当前选定到指定设备上下文的与设备无关的位图（DIB）的颜色表中的条目范围内设置RGB（红，绿，蓝）颜色值。
语法
参数
【HDC】指定设备上下文。必须在设备上下文中选择与设备无关的位图。【uStartIndex】基于零的颜色表索引，指定要设置的第一个颜色表条目。【cEntries】指定要设置的颜色表条目数。【


-------------------------------------------------------- KeyWin32SetDIBits ----
SetDIBits    SetDIBits函数使用指定的与设备无关的位图（DIB）中找到的颜色数据设置位图中的像素。
语法
参数
【HDC】标识设备上下文。【骨形态发生蛋白】使用指定DIB的颜色数据标识要更改的位图。【uStartScan】指定由【lpvBits】参数指向的阵列中与设备无关的颜色数据的起始扫描行。【cS


-------------------------------------------------------- KeyWin32SetDIBitsToDevice ----
SetDIBitsToDevice    SetDIBitsToDevice函数使用来自设备无关位图（DIB）的颜色数据设置与目标设备上下文关联的设备上指定矩形中的像素。
语法
参数
【HDC】标识设备上下文。【XDest】指定目标矩形左上角的x坐标（以逻辑为单位）。【YDest】指定目标矩形左上角的y坐标（以逻辑为单位）。【dwWidthmt】指定DIB的逻辑单位宽度。


-------------------------------------------------------- KeyWin32SetDlgItemInt ----
SetDlgItemInt    SetDlgItemInt函数将对话框中的控件的文本设置为指定整数值的字符串表示形式。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】指定要更改的控件。【uValue】指定用于生成项目文本的整数值。【bSigned】指定【uValue】参数是否已签名或无符号。如果此


-------------------------------------------------------- KeyWin32SetDlgItemText ----
SetDlgItemText    SetDlgItemText函数在对话框中设置控件的标题或文本。
语法
参数
【hDlg】标识包含控件的对话框。【nIDDlgItem】标识要设置的标题或文本的控件。【lpString】指向包含要复制到控件的文本的以null结尾的字符串。
返回值
如果函数成功，返


-------------------------------------------------------- KeyWin32SetDoubleClickTime ----
SetDoubleClickTime    SetDoubleClickTime函数设置鼠标的双击时间。双击是一系列两次点击鼠标按钮，第二次发生在第一个指定的时间之后。双击时间是双击的第一次和第二次点击之间可能发生的最大毫秒数。
语法
参数
【// double-click interval】指定双击第一次和第二次点击之间可能发生的毫秒数。如果此参数设置为零，Windows将使用默认双击500毫秒的时间。
返回值
如果函数成


-------------------------------------------------------- KeyWin32SetEndOfFile ----
SetEndOfFile    SetEndOfFile函数将指定文件的文件末尾（EOF）位置移动到文件指针的当前位置。
语法
参数
【HFILE】标识文件以使其EOF位置移动。必须使用GENERIC_WRITE访问该文件创建文件句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，


-------------------------------------------------------- KeyWin32SetEnhMetaFileBits ----
SetEnhMetaFileBits    SetEnhMetaFileBits函数从提供的数据创建基于内存的增强格式的元文件。
语法
参数
【cbBuffer】指定所提供数据的大小（以字节为单位）。【的lpData】指向包含增强型图元文件数据的缓冲区。（假设通过调用GetEnhMetaFileBits函数获得缓冲区中的数据。）



-------------------------------------------------------- KeyWin32SetEntriesInAcl ----
SetEntriesInAcl    [New - Windows NT]SetEntriesInAcl函数通过将新的访问控制或审计控制信息合并到现有的ACL中来创建新的访问控制列表（ACL）。
语法
参数
【cCountOfExplicitEntries】在【pListOfExplicitEntries数组。】中指定EXPLICIT_ACCESS结构的数量【pListOfExplicitEnt


-------------------------------------------------------- KeyWin32SetEnvironmentVariable ----
SetEnvironmentVariable    SetEnvironmentVariable函数设置当前进程的环境变量的值。
语法
参数
【lpName】指向一个以null结尾的字符串，指定其值正在设置的环境变量。操作系统创建环境变量（如果不存在），并且【lpValue】不为空。【lpValue】指向包含指定环境变量的新值的以


-------------------------------------------------------- KeyWin32SetErrorMode ----
SetErrorMode    SetErrorMode函数控制操作系统处理多种严重错误的方式。您可以指定操作系统将处理这些错误或应用程序将接收和处理它们。
语法



-------------------------------------------------------- KeyWin32SetEvent ----
SetEvent    SetEvent函数将指定的事件对象的状态设置为发信号。
语法
参数
【活动】标识事件对象。CreateEvent或OpenEvent函数返回此句柄。Windows NT：句柄必须有EVENT_MODIFY_STATE访问权限。有关详细信息，请参阅进程间同步对


-------------------------------------------------------- KeyWin32SetFileApisToANSI ----
SetFileApisToANSI    SetFileApisToANSI函数导致一组Win32文件函数使用ANSI字符集代码页。此函数对于8位控制台输入和输出操作非常有用。
语法
参数
此函数无参数。
返回值
该函数没有返回值。
描述
SetFileApisToANSI函数补充了SetFileApisToOEM函数，这使得同一组Win32文件函数使用OEM字符集代码


-------------------------------------------------------- KeyWin32SetFileApisToOEM ----
SetFileApisToOEM    SetFileApisToOEM函数使一组Win32文件函数使用OEM字符集代码页。此函数对于8位控制台输入和输出操作非常有用。
语法
参数
此函数无参数。
返回值
该函数没有返回值。
描述
SetFileApisToOEM函数由SetFileApisToANSI函数补充，导致同一组Win32文件函数使用ANSI字符集代码


-------------------------------------------------------- KeyWin32SetFileAttributes ----
SetFileAttributes    SetFileAttributes函数设置文件的属性。
语法
参数
【lpFileName】指向一个字符串，指定要设置其属性的文件的名称。Windows 95：此字符串不得超过MAX_PATH个字符。Windows NT： MAX_PATH字符的路径的默认字


-------------------------------------------------------- KeyWin32SetFilePointer ----
SetFilePointer    SetFilePointer函数移动打开文件的文件指针。
语法
参数
【HFILE】标识文件指针要移动的文件。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建文件句柄。【lDistanceToMove】指定移动文件指针的字节数。正值将


-------------------------------------------------------- KeyWin32SetFileSecurity ----
SetFileSecurity    SetFileSecurity函数设置文件或目录对象的安全性。
语法
参数
【lpFileName】指向以空值终止的字符串，指定设置了安全性的文件或目录。【SecurityInformation】指定SECURITY_INFORMATION结构，标识由【pSecur


-------------------------------------------------------- KeyWin32SetFileTime ----
SetFileTime    SetFileTime函数设置文件创建，上次访问或上次修改的日期和时间。
语法
参数
【HFILE】标识要设置日期和时间的文件。必须使用GENERIC_WRITE访问该文件创建文件句柄。【lpCreationTime】指向包含创建文件的日期和时间的FILETIME结构。如果应


-------------------------------------------------------- KeyWin32SetFocus ----
SetFocus    SetFocus函数将键盘焦点设置为指定的窗口。窗口必须与调用线程的消息队列相关联。
语法
参数
【的hWnd】标识将接收键盘输入的窗口。如果此参数为NULL，则将忽略击键。
返回值
如果函数成功，则返回值是以前具有键盘焦点的窗口的句柄。如果【的hWnd】参数无效或窗口与调用线程的消


-------------------------------------------------------- KeyWin32SetForegroundWindow ----
SetForegroundWindow    SetForegroundWindow函数将创建指定窗口的线程放入前台并激活该窗口。键盘输入指向窗口，并为用户更改各种视觉提示。
语法
参数
【的hWnd】标识应该被激活并被带到前台的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
前台窗口是


-------------------------------------------------------- KeyWin32SetForm ----
SetForm    SetForm函数设置指定打印机的表单信息。
语法
参数
【hPrinter】标识设置表单信息的打印机。【pFormName】指向以空值终止的字符串，指定表单信息设置的表单名称。【水平】指定【P成型】指向的结构的版本。此值必须为1。【P成型】指向F


-------------------------------------------------------- KeyWin32SetGraphicsMode ----
SetGraphicsMode    SetGraphicsMode函数设置指定设备上下文的图形模式。
语法
参数
【HDC】标识设备上下文。【iMode平台】指定图形模式。此参数可以是以下值之一：值含义GM_COMPATIBLE设置与Windows 3.1版兼容的图形模式。这是默认模式。如果指定了此值，


-------------------------------------------------------- KeyWin32SetHandleCount ----
SetHandleCount    SetHandleCount函数设置可用于进程的文件句柄数。此函数在Windows NT和Windows 95下无效，因为这些平台上的应用程序没有明确的文件句柄限制。在Win32s下，默认情况下只有20个文件句柄可用于进程;但是您可以使用SetHandleCount来允许进程最多使用255个文件句柄。
语法



-------------------------------------------------------- KeyWin32SetHandleInformation ----
SetHandleInformation    SetHandleInformation函数设置对象句柄的某些属性。信息被指定为一组位标志。
语法
参数
【hObject】指定对象的句柄。SetHandleInformation函数设置与此对象句柄相关联的信息。【dwMask】指定要更改的位标志的掩码。使用与【dwFlags中】描述相同的标志


-------------------------------------------------------- KeyWin32SetICMMode ----
SetICMMode    SetICMMode函数启用或禁用指定设备上下文的图像颜色匹配。
语法



-------------------------------------------------------- KeyWin32SetICMProfile ----
SetICMProfile    SetICMProfile函数设置指定设备上下文的颜色配置文件。
语法
参数
【HDC】处理设备上下文。【lpFileName】指向以空字符结尾的字符串的指针，用于命名颜色配置文件。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32SetJob ----
SetJob    SetJob函数在指定的打印机上暂停，恢复，取消或重新启动打印作业。您还可以使用SetJob函数来设置打印作业参数，例如打印作业优先级和文档名称。
语法
参数
【hPrinter】处理感兴趣的打印机对象。【JobId】指定打印作业的标识符。通过调用AddJob函数或StartDoc函数获取打印作业标识符。Windows NT：如果【水平】参数设置为


-------------------------------------------------------- KeyWin32SetKernelObjectSecurity ----
SetKernelObjectSecurity    SetKernelObjectSecurity函数设置内核对象的安全性。例如，这可以是进程，线程或事件。
语法
参数
【处理】标识设置了安全信息的内核对象。【SecurityInformation】指定SECURITY_INFORMATION结构，标识由【SecurityDescriptor】参数指向的安全


-------------------------------------------------------- KeyWin32SetKeyboardState ----
SetKeyboardState    SetKeyboardState函数将256字节的键盘键状态数组复制到调用线程的键盘输入状态表中。这与GetKeyboardState和GetKeyState函数访问的表格相同。对此表的更改不会影响到任何其他线程的键盘输入。
语法
参数
【lpKeyState】指向包含键盘键状态的256字节数组。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述



-------------------------------------------------------- KeyWin32SetLastError ----
SetLastError    SetLastError函数设置调用线程的最后一个错误代码。
语法
参数
【dwErrCode】指定线程的最后一个错误代码。
描述
错误代码是32位值（位31是最高有效位）。位29保留用于应用程序定义的错误代码;没有Win32 API错误代码已经设置了这一位。


-------------------------------------------------------- KeyWin32SetLastErrorEx ----
SetLastErrorEx    SetLastErrorEx函数设置最后一个错误代码。在Windows 95和Windows NT中，此函数与SetLastError函数相同。第二个参数未实现。
语法
参数
【dwErrCode】指定线程的最后一个错误代码。【dwType】指定错误类型。如果此过程由调试过程控制，调试器可能会根据错误类型执行操作。此参数可以具有以下值之一：值含义SLE_ERROR


-------------------------------------------------------- KeyWin32SetLocaleInfo ----
SetLocaleInfo    SetLocaleInfo函数设置一个区域设置信息项。它通过在语言环境表的过程部分中创建一个条目来实现。此设置仅影响用户覆盖区域设置的部分;它不设置系统默认值。此函数只能设置某些类型的区域设置信息，或LCTYPE值。有关LCTYPE值的列表，请参见以下注释部分。在Unicode（W）版本的函数中，区域设置信息始终以空值终止的Unicode字符串形式传递，并作为ANSI（A）版本中的以null结尾的ANSI字符串。此函数不允许使用整数;任何数值必须指定为Unicode或ANSI文本。每个LCTYPE都有一个特定的格式，如区域标识符所述。
语法
参数
【语言环境】指定函数将设置的信息的区域设置。【LCType】指定要由函数设置的区域设置信息的类型。请注意，每个呼叫只能指定一个LCTYPE.并非所有LCTYPE值都有效;请参阅以下备注部分中


-------------------------------------------------------- KeyWin32SetLocalTime ----
SetLocalTime    SetLocalTime函数设置当前的本地时间和日期。
语法
参数
【lpSystemTime】指向包含当前本地日期和时间的SYSTEMTIME结构。SYSTEMTIME结构的wDayOfWeek成员将被忽略。
返回值
如果函数成功，返回值不为零。如果函


-------------------------------------------------------- KeyWin32SetMailslotInfo ----
SetMailslotInfo    SetMailslotInfo函数设置指定邮槽使用的读取操作的超时值。
语法
参数
【hMailslot】标识一个邮槽。CreateMailslot函数必须创建此句柄。【lReadTimeout】指定在超时发生之前，读取操作可以等待消息写入邮槽的时间（以毫秒为单位）。以下值


-------------------------------------------------------- KeyWin32SetMapMode ----
SetMapMode    SetMapMode函数设置指定设备上下文的映射模式。映射模式定义了用于将页面空间单元转换为设备空间单元的度量单位，还定义了设备的x轴和y轴的方向。
语法
参数
【HDC】标识设备上下文。【fnMapMode】指定新的映射模式。它可以是以下值之一：值描述MM_ANISOTROPIC逻辑单位通过任意缩放的轴映射到任意单位。使用SetWindowExtE


-------------------------------------------------------- KeyWin32SetMapperFlags ----
SetMapperFlags    SetMapperFlags函数更改字体映射器将逻辑字体映射到物理字体时使用的算法。
语法
参数
【HDC】标识包含font-mapper标志的设备上下文。【dwFlag】指定字体映射器是否应尝试将字体的宽高比与当前设备的宽高比相匹配。如果设置了位零，则映射器仅选择匹配的字体。
返回值


-------------------------------------------------------- KeyWin32SetMenu ----
SetMenu    SetMenu函数将一个新菜单分配给指定的窗口。
语法
参数
【的hWnd】标识要分配菜单的窗口。【HMENU】标识新菜单。如果此参数为NULL，则会删除该窗口的当前菜单。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错


-------------------------------------------------------- KeyWin32SetMenuContextHelpId ----
SetMenuContextHelpId    SetMenuContextHelpId函数将帮助上下文标识符与菜单相关联。菜单中的所有项共享此标识符。无法将帮助上下文标识符附加到单个菜单项。
语法
参数
【HMENU】处理到与帮助上下文标识相关联的菜单。【dwContextHelpId】帮助上下文标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32SetMenuDefaultItem ----
SetMenuDefaultItem    [Now Supported on Windows NT]SetMenuDefaultItem函数设置指定菜单的默认菜单项。
语法
参数
【HMENU】处理菜单以设置默认项目。【藤】新的默认菜单项的标识符或位置，或 - 默认选项为 -  1。该参数的含义取决于【fByPos】的值。【fByPos】指定【藤】的含义的值。如果此参


-------------------------------------------------------- KeyWin32SetMenuItemBitmaps ----
SetMenuItemBitmaps    SetMenuItemBitmaps函数将指定的位图与菜单项相关联。无论菜单项是选中还是取消选中，Windows将在菜单项旁边显示相应的位图。
语法
参数
【HMENU】标识包含要接收新的复选标记位图的项目的菜单。【uPositionbs】指定要更改的菜单项，由【uFlags】参数确定。【uFlags】指定如何解释【uPositionbs】参数


-------------------------------------------------------- KeyWin32SetMenuItemInfo ----
SetMenuItemInfo    [Now Supported on Windows NT]SetMenuItemInfo函数可更改有关菜单项的信息。
语法
参数
【HMENU】处理包含菜单项的菜单。【藤】要更改的菜单项的标识符或位置。该参数的含义取决于【fByPosition】的值。【fByPosition】指定【藤】的含义的值。如果此参数为FALS


-------------------------------------------------------- KeyWin32SetMessageExtraInfo ----
SetMessageExtraInfo    SetMessageExtraInfo函数设置当前线程的额外消息信息。附加消息信息是与当前线程的消息队列相关联的应用程序或驱动程序定义的32位值。应用程序可以使用GetMessageExtraInfo函数来检索线程的额外消息信息。
语法
参数
【lParam的】指定与当前线程相关联的32位值。
返回值
返回值是先前的32位值。



-------------------------------------------------------- KeyWin32SetMessageQueue ----
SetMessageQueue  SetMessageQueue函数已过时。此函数仅适用于16位版本的Windows的兼容性。此函数在Win32平台上不起作用，因为根据需要动态展开消息队列。


-------------------------------------------------------- KeyWin32SetMetaFileBitsEx ----
SetMetaFileBitsEx    SetMetaFileBitsEx函数从提供的数据创建一个基于内存的Windows格式的元文件。提供此函数以兼容早期版本的Microsoft Windows。基于Win32的应用程序应使用SetEnhMetaFileBits函数。
语法
参数
【服务提供商】指定Windows格式图元文件的大小（以字节为单位）。【的lpData】指向包含Windows格式图元文件的缓冲区。（假设通过使用GetMetaFileBitsEx函数获得数据


-------------------------------------------------------- KeyWin32SetMetaRgn ----
SetMetaRgn    SetMetaRgn函数与指定设备上下文的当前剪切区域与当前的区域相交，并将组合区域保存为指定设备上下文的新区域。剪辑区域将重置为零区域。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，则返回值指定新的裁剪区域的复杂度，并且可以是以下值之一：值含义NULLREGION区域是空的SIMPLEREGION区域是单个矩形。CO


-------------------------------------------------------- KeyWin32SetMiterLimit ----
SetMiterLimit    SetMiterLimit函数设置指定设备上下文的斜接连接长度的限制。
语法
参数
【HDC】标识设备上下文。【eNewLimit】指定设备上下文的新斜角限制。【peOldLimit】指向接收上一个斜度限制的浮点值。如果此参数为NULL，则不会返回上一个斜度限制。
返回值


-------------------------------------------------------- KeyWin32SetNamedPipeHandleState ----
SetNamedPipeHandleState    SetNamedPipeHandleState函数设置指定命名管道的读取模式和阻塞模式。如果指定的句柄是指向命名管道的客户端，并且如果命名管道服务器进程在远程计算机上，则该函数也可用于控制本地缓冲。
语法
参数
【hNamedPipe】标识命名的管道实例。此参数可以由CreateNamedPipe函数返回的管道的服务器端的句柄，或CreateFile函数返回的管道的客户端。句柄必须具有对命名管道的G


-------------------------------------------------------- KeyWin32SetPaletteEntries ----
SetPaletteEntries    SetPaletteEntries函数在逻辑调色板的一系列条目中设置RGB（红，绿，蓝）颜色值和标志。
语法
参数
【HPAL】标识逻辑调色板。【ISTART】指定要设置的第一个逻辑调色板条目。【cEntries】指定要设置的逻辑调色板条目数。【LPPE】指向包含RGB值和标志的PALETTEENTRY结


-------------------------------------------------------- KeyWin32SetParent ----
SetParent    SetParent函数更改指定子窗口的父窗口。
语法
参数
【hWndChild】标识子窗口。【hWndNewParent】标识新的父窗口。如果此参数为NULL，则桌面窗口将变为新的父窗口。
返回值
如果函数成功，则返回值是上一个父窗口的句柄。如


-------------------------------------------------------- KeyWin32SetPixel ----
SetPixel    SetPixel函数将指定坐标处的像素设置为指定的颜色。
语法
参数
【HDC】标识设备上下文。【X】指定要设置的点的x坐标，以逻辑单位表示。【Y】指定要设置的点的y坐标，以逻辑单位表示。【crColor】指定用于绘制点的颜色。
返回值
如果函数成功，则返


-------------------------------------------------------- KeyWin32SetPixelV ----
SetPixelV    SetPixelV函数将指定坐标处的像素设置为指定颜色的最接近的近似值。该点必须在裁剪区域和设备表面的可见部分。
语法
参数
【HDC】标识设备上下文。【X】指定要设置的点的x坐标，以逻辑单位表示。【Y】指定要设置的点的y坐标，以逻辑单位表示。【crColor】指定用于绘制点的颜色。
返回值
如果函数成功，返回


-------------------------------------------------------- KeyWin32SetPolyFillMode ----
SetPolyFillMode    SetPolyFillMode函数设置填充多边形的函数的多边形填充模式。
语法
参数
【HDC】标识设备上下文。【iPolyFillMode】指定新的填充模式。此参数可以是以下值之一：值含义ALTERNATE选择交替模式（填充每个扫描线上奇数和偶数多边形边之间的区域）。WIN


-------------------------------------------------------- KeyWin32SetPort ----
SetPort    [New - Windows NT]SetPort函数设置与打印机端口相关联的状态。
语法
参数
【PNAME】指向零终止字符串的指针，该字符串指定端口连接到的打印机服务器的名称。如果端口在本地机器上，则将此参数设置为NULL。【pPortName】指向指定打印机端口名称的零终止字符串的


-------------------------------------------------------- KeyWin32SetPrinter ----
SetPrinter    SetPrinter函数通过暂停打印，恢复打印或清除所有打印作业来设置指定打印机的状态。该函数也可用于设置打印机数据。
语法
参数
【hPrinter】处理感兴趣的打印机【水平】Windows 95：指定【pPrinter】中包含的数据类型。该参数必须为0,2,3,4或5。如果【命令】不等于零，则此参数必须为零。Wind


-------------------------------------------------------- KeyWin32SetPrinterData ----
SetPrinterData    SetPrinterData函数设置打印机的配置数据。
语法
参数
【hPrinter】标识应设置配置数据的打印机。【pValueName】指向一个以null结尾的字符串，指定要设置的数据类型。【类型】指定要作为值的数据存储的信息的类型。此参数可以是以下值之


-------------------------------------------------------- KeyWin32SetPriorityClass ----
SetPriorityClass    SetPriorityClass函数设置指定进程的优先级。该值与进程的每个线程的优先级值一起确定每个线程的基本优先级。
语法
参数
【hProcess】标识过程。Windows NT：句柄必须具有PROCESS_SET_INFORMATION权限。有关详细信息，请参阅过程对象.【dwPriorityClass】指定进程的


-------------------------------------------------------- KeyWin32SetPrivateObjectSecurity ----
SetPrivateObjectSecurity    SetPrivateObjectSecurity函数修改私有对象的安全描述符。
语法
参数
【SecurityInformation】指定SECURITY_INFORMATION结构，标识由【ModificationDescriptor】参数指向的安全描述符的内容。【Modific


-------------------------------------------------------- KeyWin32SetProcessAffinityMask ----
SetProcessAffinityMask    [New - Windows NT]SetProcessAffinityMask函数为指定进程的线程设置处理器关联掩码。过程关联掩码是一个位向量，其中每个位表示允许进程的线程运行的处理器。过程相关性掩码的值必须是由GetProcessAffinityMask函数获取的掩码值的正确子集。
语法
参数
【hProcess】处理过程的句柄，其亲和力屏蔽函数集。该句柄必须具有PROCESS_SET_INFORMATION权限。有关详细信息，请参阅过程对象.【dwProcessAffinityM


-------------------------------------------------------- KeyWin32SetProcessPriorityBoost ----
SetProcessPriorityBoost    [New - Windows NT]SetProcessPriorityBoost函数禁用Windows NT临时提升指定进程的线程优先级的函数。
语法
参数
【hProcess】处理过程。该句柄必须具有PROCESS_SET_INFORMATION权限。有关详细信息，请参阅过程对象.【DisablePriorityBoost】一个用于设置优先级提


-------------------------------------------------------- KeyWin32SetProcessShutdownParameters ----
SetProcessShutdownParameters    SetProcessShutdownParameters函数设置当前调用进程的关闭参数。此函数为进程设置相对于系统中其他进程的关机顺序。
语法
参数
【//原子或字符串的地址】指定进程相对于系统中其他进程的关闭优先级。该系统关闭从高【//原子或字符串的地址】值到低的进程。最高和最低的关闭优先级保留给系统组件。此参数必须在以下值范围内：值含


-------------------------------------------------------- KeyWin32SetProcessWindowStation ----
SetProcessWindowStation    SetProcessWindowStation函数将一个窗口站分配给调用进程。这使得进程能够访问窗口站中的对象，如桌面，剪贴板和全局原子。窗口站上的所有后续操作都使用授予【hWinSta】的访问权限。
语法
参数
【hWinSta】标识要分配给呼叫进程的窗口站。该句柄由CreateWindowStation和OpenWindowStation函数返回。
返回值
如果函数成功，返回值不为零。如果函数


-------------------------------------------------------- KeyWin32SetProcessWorkingSetSize ----
SetProcessWorkingSetSize    SetProcessWorkingSetSize函数设置指定进程的最小和最大工作集大小。进程的工作集是物理RAM内存中进程可见的一组内存页。这些页面是驻留的，可供应用程序使用，而不会触发页面错误。进程的工作集的大小以字节为单位指定。最小和最大工作集大小影响进程的虚拟内存分页行为。
语法
参数
【hProcess】将设置其工作集大小的进程的打开句柄。Windows NT：句柄必须具有PROCESS_SET_QUOTA访问权限。有关详细信息，请参阅过程对象.【dwMinimumWor


-------------------------------------------------------- KeyWin32SetProp ----
SetProp    SetProp函数添加一个新条目或更改指定窗口的属性列表中的现有条目。如果列表中不存在指定的字符串，该函数将向列表中添加一个新条目。新条目包含字符串和句柄。否则，该函数将使用指定的句柄替换字符串的当前句柄。
语法
参数
【的hWnd】标识属性列表接收到新条目的窗口。【lpString】指向一个空值终止的字符串或包含一个标识字符串的原子。如果这个参数是一个原子，它必须是由前一次调用GlobalAddAtom函


-------------------------------------------------------- KeyWin32SetRect ----
SetRect    SetRect函数设置指定矩形的坐标。这相当于将左，上，右和底参数分配给RECT结构的相应成员。
语法
参数
【LPRC】指向包含要设置的矩形的RECT结构。【xLeft】指定矩形左上角的x坐标。【的y topsv】指定矩形左上角的y坐标。【Xright确定】指定矩形右下角的x坐标。【// 底部】指


-------------------------------------------------------- KeyWin32SetRectEmpty ----
SetRectEmpty    SetRectEmpty函数创建一个空矩形，其中所有坐标都设置为零。
语法
参数
【LPRC】指向包含矩形坐标的RECT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32SetRectRgn ----
SetRectRgn    SetRectRgn函数将区域更改为具有指定坐标的矩形区域。
语法
参数
【HRGN】识别该地区。【nLeftRect】指定矩形区域左上角的x坐标。【nTopRect】指定矩形区域左上角的y坐标。【nRightRect】指定矩形区域右下角的x坐标。【nBottom


-------------------------------------------------------- KeyWin32SetROP2 ----
SetROP2    SetROP2函数设置当前前台混合模式。GDI使用前景混合模式，将已填充对象的笔和内部结合到已经在屏幕上的颜色。前景混合模式定义如何组合来自画笔或笔的颜色和现有图像中的颜色。
语法
参数
【HDC】标识设备上下文。【fnDrawMode】指定新的混合模式。此参数可以是以下值之一：混合模式描述R2_BLACK像素始终为0。R2_COPYPEN像素是笔的颜色。R2_MASKNOT


-------------------------------------------------------- KeyWin32SetScrollInfo ----
SetScrollInfo    SetScrollInfo函数设置滚动条的参数，包括最小和最大滚动位置，页面大小和滚动框（拇指）的位置。如果需要，该函数也会重绘滚动条。
语法
参数
【HWND】根据【fnBar】参数的值，标识滚动条控件或具有标准滚动条的窗口。【fnBar】指定要设置参数的滚动条的类型。此参数可以是以下值之一：值含义SB_CTL设置滚动条控件的参数。【H


-------------------------------------------------------- KeyWin32SetScrollPos ----
SetScrollPos    SetScrollPos函数将滚动条（拇指）的位置设置在指定的滚动条中，如果需要，重新绘制滚动条以反映滚动条的新位置。提供SetScrollPos函数以与Windows 3兼容。【x】.基于Win32的应用程序应使用SetScrollInfo函数。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或具有标准滚动条的窗口。【NBAR】指定要设置的滚动条。此参数可以是以下值之一：值含义SB_CTL在滚动条控件中设置滚动框的位置。【的h


-------------------------------------------------------- KeyWin32SetScrollRange ----
SetScrollRange    SetScrollRange函数设置指定滚动条的最小和最大位置值。它也可用于隐藏或显示标准滚动条。SetScrollRange函数用于与Windows 3兼容。【x】.基于Win32的应用程序应使用SetScrollInfo函数。
语法
参数
【的hWnd】根据【NBAR】参数的值，标识滚动条控件或带有标准滚动条的窗口。【NBAR】指定要设置的滚动条。此参数可以是以下值之一：值含义SB_CTL设置滚动条控件的范围。【的hWnd】参


-------------------------------------------------------- KeyWin32SetSecurityDescriptorDacl ----
SetSecurityDescriptorDacl    SetSecurityDescriptorDacl函数在自由访问控制列表（ACL）中设置信息。如果安全描述符中已经存在自由ACL，则会被替换。
语法
参数
【pSecurityDescriptor】指向函数添加自由ACL的SECURITY_DESCRIPTOR结构。此安全描述符必须为绝对格式，这意味着其成员必须是指向其他结构的指针，而不是对连续


-------------------------------------------------------- KeyWin32SetSecurityDescriptorGroup ----
SetSecurityDescriptorGroup    SetSecurityDescriptorGroup函数设置绝对格式安全描述符的主组信息，替换已经存在于安全描述符中的任何主组信息。
语法
参数
【pSecurityDescriptor】指向由此函数设置其主组的SECURITY_DESCRIPTOR结构。该函数将使用新的主组替换任何现有的主组。【PGROUP】指向SID结构的函数集作


-------------------------------------------------------- KeyWin32SetSecurityDescriptorOwner ----
SetSecurityDescriptorOwner    SetSecurityDescriptorOwner函数设置绝对格式安全描述符的所有者信息。它替换已经存在于安全描述符中的所有者信息。
语法
参数
【pSecurityDescriptor】指向由此函数设置其所有者的SECURITY_DESCRIPTOR结构。该函数将替换任何现有的拥有者与新的所有者。【pOwner】指向SID结构的函数


-------------------------------------------------------- KeyWin32SetSecurityDescriptorSacl ----
SetSecurityDescriptorSacl    SetSecurityDescriptorSacl函数在系统访问控制列表（ACL）中设置信息。如果安全描述符中已经存在系统ACL，则会被替换。
语法
参数
【pSecurityDescriptor】指向函数添加系统ACL的SECURITY_DESCRIPTOR结构。此安全描述符必须为绝对格式，这意味着其成员必须是指向其他结构的指针，而不是对连续


-------------------------------------------------------- KeyWin32SetSecurityInfo ----
SetSecurityInfo    [New - Windows NT]SetSecurityInfo函数在指定对象的安全描述符中设置指定的安全信息。调用者通过句柄识别对象。
语法
参数
【处理】用于设置安全信息的对象的句柄。【ObjectType】指定SE_OBJECT_TYPE枚举中指示由【处理】参数标识的对象类型的值。【SecurityInfo】一组SECURITY_I


-------------------------------------------------------- KeyWin32SetServiceBits ----
SetServiceBits    SetServiceBits函数将服务的服务类型与服务控制管理器和服务器服务注册。然后，服务器服务可以将注册的服务类型公布为当前支持的类型。LAN Manager函数NetServerGetInfo和NetServerEnum获取指定的机器支持的服务类型。服务类型表示为一组位标志; SetServiceBits函数设置或清除这些位标志的组合。
语法
参数
【hServiceStatus】服务控制管理员的服务状态信息结构的句柄。服务通过调用RegisterServiceCtrlHandler函数获取SERVICE_STATUS_HANDLE值。


-------------------------------------------------------- KeyWin32SetServiceObjectSecurity ----
SetServiceObjectSecurity    SetServiceObjectSecurity函数设置服务对象的安全描述符。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回。此句柄所需的访问取决于【dwSecurityInformation】参数中指定的安全信息。【


-------------------------------------------------------- KeyWin32SetServiceStatus ----
SetServiceStatus    SetServiceStatus函数可更新主叫服务的服务控制管理员的状态信息。
语法
参数
【hServiceStatus~】指定当前服务的服务控制管理器状态信息结构的句柄。该句柄由RegisterServiceCtrlHandler函数返回。【lpServiceStatus】指向


-------------------------------------------------------- KeyWin32SetStdHandle ----
SetStdHandle    SetStdHandle函数用于设置标准输入，标准输出或标准错误设备的句柄。后续调用GetStdHandle函数可以使用指定的句柄来引用输入，输出或错误设备。
语法
参数
【nStdHandle】指定要设置的句柄。此参数可以具有以下值之一：值含义STD_INPUT_HANDLE标准输入手柄STD_OUTPUT_HANDLE标准输出手柄STD_ERROR_HAN


-------------------------------------------------------- KeyWin32SetStretchBltMode ----
SetStretchBltMode    SetStretchBltMode函数设置指定设备上下文中的位图拉伸模式。
语法
参数
【HDC】标识设备上下文。【iStretchMode】指定拉伸模式。它可以是以下值之一：值描述BLACKONWHITE使用已消除和现有像素的颜色值执行布尔AND运算。如果位图是单色位图，则此


-------------------------------------------------------- KeyWin32SetSwapAreaSize ----
SetSwapAreaSize  SetSwapAreaSize函数已过时。此函数仅用于与16位版本的Windows兼容。它在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32SetSysColors ----
SetSysColors    SetSysColors函数设置一个或多个显示元素的颜色。显示元素是窗口的各个部分和显示在系统显示屏幕上的Windows显示。
语法
参数
【//要更改的元素数量】指定【// address of array of elements】参数指向的数组中的显示元素数。【// address of array of elements】


-------------------------------------------------------- KeyWin32SetSysModalWindow ----
SetSysModalWindow  SetSysModalWindow函数已过时。此函数仅用于与16位版本的Windows兼容。新的输入模型不允许System Modal窗口。


-------------------------------------------------------- KeyWin32SetSystemCursor ----
SetSystemCursor    SetSystemCursor函数用【HCUR】指定的游标的内容替换【id】指定的系统游标的内容，然后销毁【HCUR】.此函数允许应用程序自定义系统光标。
语法
参数
【HCUR】处理光标。该函数将由【HCUR】处理的光标的内容替换【id】指定的系统光标的内容。然后该函数通过调用DestroyCursor（【HCURSORpt】）来销毁【HCUR】.【id


-------------------------------------------------------- KeyWin32SetSystemPaletteUse ----
SetSystemPaletteUse    SetSystemPaletteUse函数允许应用程序指定系统调色板是否包含2或20个静态颜色。默认系统调色板包含20个静态颜色。（当应用程序实现逻辑调色板时，无法更改静态颜色。）
语法
参数
【HDC】标识设备上下文。此设备上下文必须引用支持调色板的设备。【uUsage】指定系统调色板的新用法。此参数可以是以下值之一：值含义SYSPAL_NOSTATIC系统调色板包含两种静态颜色


-------------------------------------------------------- KeyWin32SetSystemPowerState ----
SetSystemPowerState    SetSystemPowerState函数通过关闭电源来暂停系统。根据【ForceFlag】参数，该函数可以在此之前立即暂停运行或请求所有应用程序和设备驱动程序的权限。
语法
参数
【Suspension technique.】悬挂技术en如果为TRUE，系统将暂停使用RAM存活技术。否则，暂停使用hibernate技术。【fForce】强制停牌。如果为TRUE，则该函


-------------------------------------------------------- KeyWin32SetSystemTime ----
SetSystemTime    SetSystemTime函数设置当前系统的时间和日期。系统时间以协调世界时（UTC）表示。
语法
参数
【lpSystemTime】指向包含当前系统日期和时间的SYSTEMTIME结构。SYSTEMTIME结构的wDayOfWeek成员将被忽略。
返回值
如果函数成功，返回值不为零。如果函


-------------------------------------------------------- KeyWin32SetSystemTimeAdjustment ----
SetSystemTimeAdjustment    SetSystemTimeAdjustment函数告诉系统启用或禁用对其时钟时钟的周期性时间调整。这种时间调整用于将时间与其他一些时间信息源进行同步。当启用周期性时间调整时，它们在每个时钟中断时被应用。
语法
参数
【dwTimeAdjustment】指定如果启用周期性时间调整，则在每个时钟中断时间添加到时钟时钟的100纳秒单位数。【bTimeAdjustmentDisabled】指定系统使用的时间调整


-------------------------------------------------------- KeyWin32SetTapeParameters ----
SetTapeParameters    SetTapeParameters函数指定磁带的块大小或配置磁带设备。
语法
参数
【hDevice】标识要设置配置信息的设备。该句柄是通过使用CreateFile函数创建的。【// preparation method】指定要设置的信息类型。此参数必须是以下值之一：值描述


-------------------------------------------------------- KeyWin32SetTapePosition ----
SetTapePosition    SetTapePosition设置指定设备上的磁带位置。
语法
参数
【hDevice】标识要设置磁带位置的设备。该句柄是通过使用CreateFile函数创建的。【dwPositionMethod】指定要执行的定位类型。此参数必须是以下值之一：值含义TAPE_


-------------------------------------------------------- KeyWin32SetTextAlign ----
SetTextAlign    SetTextAlign函数设置指定设备上下文的文本对齐标志。
语法
参数
【HDC】标识设备上下文。【FMODE】通过使用以下列表中的值的掩码来指定文本对齐。只有一个标志可以从影响水平和垂直对齐的那些标志中选出。另外，只能改变当前位置的两个标志之一。值含义TA_B


-------------------------------------------------------- KeyWin32SetTextCharacterExtra ----
SetTextCharacterExtra    SetTextCharacterExtra函数设置字符间距。当Windows写入一行文本时，会将字符间距添加到每个字符，包括中断字符。
语法
参数
【HDC】标识设备上下文。【nCharExtra】指定要添加到每个字符的逻辑单位的额外空间量。如果当前映射模式不是MM_TEXT，则【nCharExtra】参数将被转换并舍入为最近的像素。



-------------------------------------------------------- KeyWin32SetTextColor ----
SetTextColor    SetTextColor函数将指定设备上下文的文本颜色设置为指定的颜色。
语法
参数
【HDC】标识设备上下文。【crColor】指定文本的颜色。
返回值
如果函数成功，则返回值是上一个文本颜色的颜色引用。如果函数失败，返回值为CLR_INVALID。要获取扩展错误信息，


-------------------------------------------------------- KeyWin32SetTextJustification ----
SetTextJustification    SetTextJustification函数指定Windows应添加到文本字符串中的中断字符的空间量。当应用程序调用{??989796011}或ExtTextOut函数时，将添加空格。
语法
参数
【HDC】标识设备上下文。【nBreakExtra】指定要添加到文本行的逻辑单位的总额外空间。如果当前映射模式不是MM_TEXT，则【nBreakExtra】参数标识的值将被转换并舍入为最近


-------------------------------------------------------- KeyWin32SetThreadAffinityMask ----
SetThreadAffinityMask    SetThreadAffinityMask函数为指定线程设置处理器关联掩码。线程相关性掩码是一个位向量，其中每个位表示允许线程运行的处理器。线程关联掩码必须是线程的包含进程的进程关联掩码的正确子集。线程只允许在其进程允许运行的处理器上运行。
语法
参数
【hThread】线程的句柄，其亲和力掩码的函数集。Windows NT：此句柄必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【dw


-------------------------------------------------------- KeyWin32SetThreadContext ----
SetThreadContext    SetThreadContext函数设置指定线程中的上下文。
语法
参数
【hThread】标识要写入上下文的线程的打开句柄。Windows NT：句柄必须对线程具有THREAD_SET_CONTEXT访问权限。有关详细信息，请参阅线程对象.【lpContext】


-------------------------------------------------------- KeyWin32SetThreadDesktop ----
SetThreadDesktop    SetThreadDesktop函数将一个桌面分配给调用线程。桌面上的所有后续操作都使用授予【//分配给该线程的桌面的句柄】的访问权限。
语法
参数
【//分配给该线程的桌面的句柄】标识要分配给调用线程的桌面。该句柄由CreateDesktop，GetThreadDesktop和OpenDesktop函数返回。如果调用线程在其当前桌面上有


-------------------------------------------------------- KeyWin32SetThreadIdealProcessor ----
SetThreadIdealProcessor    [New - Windows NT]SetThreadIdealProcessor函数用于为线程指定首选处理器。系统可能在其首选处理器上调度线程。
语法
参数
【hThread】处理要设置其优选处理器的线程。句柄必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【dwIdealProcessor


-------------------------------------------------------- KeyWin32SetThreadLocale ----
SetThreadLocale    SetThreadLocale函数设置调用线程当前的区域设置。
语法
参数
【语言环境】指定调用线程的新区域设置。此参数可以是由MAKELCID宏或以下预定义值之一创建的区域设置标识符：LOCALE_SYSTEM_DEFAULT默认系统区域设置。LOCALE_USE


-------------------------------------------------------- KeyWin32SetThreadPriority ----
SetThreadPriority    SetThreadPriority函数设置指定线程的优先级值。该值与线程进程的优先级类一起确定线程的基本优先级。
语法
参数
【hThread】标识要设置优先级值的线程。Windows NT：句柄必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【优先】指定线程


-------------------------------------------------------- KeyWin32SetThreadPriorityBoost ----
SetThreadPriorityBoost    [New - Windows NT]SetThreadPriorityBoost函数禁用Windows NT临时提升线程优先级的函数。
语法
参数
【hThread】处理优先级提升的线程。该线程必须具有与之相关联的THREAD_SET_INFORMATION访问权限。有关详细信息，请参阅线程对象.【DisablePriorityBoos


-------------------------------------------------------- KeyWin32SetThreadToken ----
SetThreadToken    SetThreadToken函数为线程分配假冒令牌。该函数还可能导致线程停止使用模拟令牌。
语法
参数
【线】指向函数分配模拟令牌的线程的句柄。如果【线】为NULL，则该函数会将模拟令牌分配给调用线程。【代币】模拟令牌的打开句柄分配给线程。必须使用TOKEN_IMPERSONATE访问权限打开


-------------------------------------------------------- KeyWin32SetTimer ----
SetTimer    SetTimer函数创建一个具有指定超时值的定时器。
语法
参数
【的hWnd】标识与定时器关联的窗口。该窗口必须由调用线程拥有。如果此参数为NULL，则不会与定时器关联窗口，并忽略【nIDEvent】参数。【nIDEvent】指定非零计时器标识符。如果【


-------------------------------------------------------- KeyWin32SetTimeZoneInformation ----
SetTimeZoneInformation    SetTimeZoneInformation函数设置当前时区参数。这些参数控制从协调世界时（UTC）到本地时间的转换。
语法
参数
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION结构，其中包含要设置的时区参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零


-------------------------------------------------------- KeyWin32SetTokenInformation ----
SetTokenInformation    SetTokenInformation函数设置指定访问令牌的各种类型的信息。其设置的信息将替换现有信息。调用进程必须具有设置信息的适当访问权限。
语法
参数
【TokenHandle】标识要设置信息的访问令牌。【TokenInformationClass】指定TOKEN_INFORMATION_CLASS枚举类型的变量，标识函数集的信息类型。来自


-------------------------------------------------------- KeyWin32SetUnhandledExceptionFilter ----
SetUnhandledExceptionFilter    SetUnhandledExceptionFilter函数允许应用程序取代Win32放置在每个线程和进程顶部的顶级异常处理程序。调用此函数后，如果在未调试的进程中发生异常，并且异常会使其返回到Win32未处理的异常过滤器，该过滤器将调用【lpTopLevelExceptionFilter】参数指定的异常过滤器函数。
语法
参数
【lpTopLevelExceptionFilter】提供顶级异常过滤器函数的地址，只要UnhandledExceptionFilter 函数获得控制，该进程将被调用，并且进程未被调试。此参


-------------------------------------------------------- KeyWin32SetupComm ----
SetupComm    SetupComm函数初始化指定通信设备的通信参数。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【dwInQueue】指定设备内部输入缓冲区的推荐大小（以字节为单位）。【dwOutQueue】指定设备内部输出缓冲区的推荐大


-------------------------------------------------------- KeyWin32SetupHookProc ----
SetupHookProc    一个SetupHookProc挂接过程是一个应用程序定义或库定义的回调过程，与打印设置公共对话框一起使用。挂钩过程接收默认对话框过程的消息或通知。
语法
参数
【hdlg】处理打印设置公共对话框窗口，消息的目的是。【uiMsg】标识正在接收的消息。【wParam中】指定有关该消息的附加信息。具体含义取决于【uiMsg】参数的值。【lParam的】指


-------------------------------------------------------- KeyWin32SetUserObjectInformation ----
SetUserObjectInformation    SetUserObjectInformation函数设置有关窗口站或桌面对象的信息。
语法
参数
【hObjhr】标识要设置对象信息的窗口台或桌面对象。该值可以是HDESK或HWINSTA句柄（例如，CreateWindowStation OpenWindowStation，Create


-------------------------------------------------------- KeyWin32SetUserObjectSecurity ----
SetUserObjectSecurity    SetUserObjectSecurity函数设置用户对象的安全性。这可以是例如窗口或DDE对话。
语法
参数
【hObjhr】标识设置了安全信息的用户对象。【pSIRequested】指向SECURITY_INFORMATION结构，描述正在设置的安全信息。【pSID】指向包含新安全信息的SECUR


-------------------------------------------------------- KeyWin32SetViewportExtEx ----
SetViewportExtEx    SetViewportExtEx函数通过使用指定的值设置设备上下文的视口的水平和垂直范围。
语法
参数
【HDC】标识设备上下文。【nXExtent】指定视口的水平范围（以设备为单位）。【nYExtent】指定视口的垂直范围（以设备为单位）。【lpsiz到】指向SIZE结构。以前的视口范围（以


-------------------------------------------------------- KeyWin32SetViewportOrgEx ----
SetViewportOrgEx    SetViewportOrgEx函数通过使用指定的坐标设置设备上下文的视口原点。
语法
参数
【HDC】标识设备上下文。【X】指定新视口原点的设备单位的x坐标。【Y】指定新视口原点的以y为单位的y坐标。【LPPOINT】指向POINT结构。以前的视口原点（在设备坐标中）放置在此结构中


-------------------------------------------------------- KeyWin32SetVolumeLabel ----
SetVolumeLabel    SetVolumeLabel函数设置文件系统卷的标签。
语法
参数
【lpRootPathName】指向一个以null结尾的字符串，指定文件系统卷的根目录。这是函数标签的音量。如果此参数为NULL，则使用当前目录的根。【lpVolumeName】指向指定卷名


-------------------------------------------------------- KeyWin32SetWaitableTimer ----
SetWaitableTimer    [New - Windows NT]SetWaitableTimer函数激活指定的“等待”定时器。当到达时间到达时，定时器发出信号，设置定时器的线程调用可选的完成例程。
语法
参数
【hTimer】标识定时器对象。CreateWaitableTimer或OpenWaitableTimer函数返回此句柄。【pDueTime】指定何时将定时器的状态设置为发信号，以100纳秒


-------------------------------------------------------- KeyWin32SetWindowContextHelpId ----
SetWindowContextHelpId    SetWindowContextHelpId函数将帮助上下文标识符与指定的窗口相关联。
语法
参数
【HWND】处理到与其关联帮助上下文标识符的窗口。【dwContextHelpId】帮助上下文标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
如果子窗


-------------------------------------------------------- KeyWin32SetWindowExtEx ----
SetWindowExtEx    SetWindowExtEx函数通过使用指定的值设置设备上下文的窗口的水平和垂直范围。
语法
参数
【HDC】标识设备上下文。【nXExtent】以逻辑单位指定窗口的水平范围。【nYExtent】以逻辑单位指定窗口的垂直范围。【lpsiz到】指向SIZE结构。以前的窗口范围（以逻辑单位）放


-------------------------------------------------------- KeyWin32SetWindowLong ----
SetWindowLong    SetWindowLong函数更改指定窗口的属性。该函数还将指定偏移量的32位（长）值设置为窗口的额外窗口存储器。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要设置的值的基于零的偏移量。有效值的范围为零，通过额外的窗口内存的字节数减去4;例如，如果指定了12个或更多字节的额外


-------------------------------------------------------- KeyWin32SetWindowOrgEx ----
SetWindowOrgEx    SetWindowOrgEx函数使用指定的坐标设置设备上下文的窗口原点。
语法
参数
【HDC】标识设备上下文。【X】指定新窗口原点的逻辑x坐标。【Y】指定新窗口原点的逻辑y坐标。【LPPOINT】指向POINT结构。窗口的以前的起源放在这个结构中。如果【LPPOINT】为N


-------------------------------------------------------- KeyWin32SetWindowPlacement ----
SetWindowPlacement    SetWindowPlacement函数设置指定窗口的显示状态和还原，最小化和最大化的位置。
语法
参数
【的hWnd】标识窗口。【lpwndplel，LATN】指向WINDOWPLACEMENT结构，指定新的显示状态和窗口位置。在致电SetWindowPlacement之前，将WINDOWPL


-------------------------------------------------------- KeyWin32SetWindowPos ----
SetWindowPos    SetWindowPos函数可以更改小孩，弹出式窗口或顶级窗口的大小，位置和Z顺序。孩子，弹出窗口和顶级窗口根据屏幕上的外观进行排序。最顶层的窗口接收到最高等级，是Z顺序中的第一个窗口。
语法
参数
【的hWnd】标识窗口。【hWndInsertAfter】标识Z定位窗口之前的窗口。此参数必须是窗口句柄或以下值之一：值含义HWND_BOTTOM将窗口放在Z顺序的底部。如果【的hWnd】参


-------------------------------------------------------- KeyWin32SetWindowRgn ----
SetWindowRgn    SetWindowRgn函数设置窗口的窗口区域。窗口区域确定操作系统允许绘制的窗口内的区域。操作系统不显示位于窗口区域之外的窗口的任何部分
语法
参数
【的hWnd】处理要设置窗口区域的窗口。【HRGN】处理一个地区。该函数将窗口的窗口区域设置为该区域。如果【HRGN】为NULL，则该函数将窗口区域设置为NULL。【bRedraw】布尔值，


-------------------------------------------------------- KeyWin32SetWindowsHook ----
SetWindowsHook  SetWindowsHook函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序应使用SetWindowsHookEx函数。


-------------------------------------------------------- KeyWin32SetWindowsHookEx ----
SetWindowsHookEx    SetWindowsHookEx函数将一个应用程序定义的钩子过程安装到一个钩子链中。应用程序安装挂接过程来监视系统的某些类型的事件。挂钩过程可以监视与特定线程或系统中所有线程相关联的事件。此函数取代SetWindowsHook函数。
语法
参数
【idHook】指定要安装的挂钩过程的类型。此参数可以是以下值之一：值描述WH_CALLWNDPROC在系统将其发送到目标窗口过程之前，安装一个监视消息的挂接过程。有关详细信息，请参阅Cal


-------------------------------------------------------- KeyWin32SetWindowText ----
SetWindowText    SetWindowText函数可以更改指定窗口标题栏的文本（如果有）。如果指定的窗口是控件，控件的文本将被更改。
语法
参数
【的hWnd】标识要更改其文本的窗口或控件。【lpString】指向要用作新标题或控件文本的以null结尾的字符串。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取


-------------------------------------------------------- KeyWin32SetWindowWord ----
SetWindowWord    SetWindowWord函数将指定偏移量的16位（字）值替换为指定窗口的额外窗口内存。
语法
参数
【的hWnd】标识窗口，间接地标识窗口所属的类。【参数nIndex】指定要替换的值的基于零的字节偏移量。窗口存储器的字节数减去2，有效值范围为零;例如，如果您指定了10个或更多字节的额外的窗


-------------------------------------------------------- KeyWin32SetWinMetaFileBits ----
SetWinMetaFileBits    SetWinMetaFileBits函数将图元文件从较旧的Windows格式转换为新的增强格式，并将新的图元文件存储在内存中。
语法
参数
【cbBuffer】指定包含Windows格式元文件的缓冲区的大小（以字节为单位）。【lpbBuffer】指向包含Windows格式元文件数据的缓冲区。（假设使用GetMetaFileBit


-------------------------------------------------------- KeyWin32SetWorldTransform ----
SetWorldTransform    SetWorldTransform函数设置指定设备上下文的世界空间和页面空间之间的二维线性转换。此转换可用于缩放，旋转，剪切或翻译图形输出。
语法
参数
【HDC】标识设备上下文。【lpXform】指向包含转换数据的XFORM结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
对于世界空间中的任何坐标（x，y


-------------------------------------------------------- KeyWin32SHAddToRecentDocs ----
SHAddToRecentDocs    [Now Supported on Windows NT]将文档添加到shell的最近使用的文档列表中，或从列表中清除所有文档。用户通过Windows任务栏的“开始”菜单访问列表。WINSHELLAPI void WINAPI SHAddToRecentDocs（UINT【uFlags】, LPCVOID 【pv】 );



-------------------------------------------------------- KeyWin32SHAppBarMessage ----
SHAppBarMessage    [Now Supported on Windows NT]向系统发送应用程序栏消息。WINSHELLAPI UINT APIENTRY SHAppBarMessage（laDWORD 【//指向结构的指针】, PAPPBARDATA 【的pData】 );
参数
【//指向结构的指针】要发送的应用程序栏消息的标识符。此参数可以是以下值之一：ABM_ACTIVATE通知系统应用程序栏已被激活。ABM_GETAUTOHIDEBAR检索与屏幕特定边缘相关联


-------------------------------------------------------- KeyWin32SHBrowseForFolder ----
SHBrowseForFolder    [Now Supported on Windows NT]显示一个对话框，使用户可以选择一个shell文件夹。WINSHELLAPI LPITEMIDLIST WINAPI SHBrowseForFolder（LPBROWSEINFO 【LPBI】 );
参数
【LPBI】指向BROWSEINFO结构的指针，其中包含用于显示对话框的信息。
返回值
返回指向项目标识符列表的指针，该列表指定所选文件夹相对于名称空间根目录的位置。如果用户在对话框中选


-------------------------------------------------------- KeyWin32SHChangeNotify ----
SHChangeNotify    [Now Supported on Windows NT]通知应用程序执行的事件的系统。如果应用程序执行可能影响shell的操作，应该使用此函数。WINSHELLAPI void WINAPI SHChangeNotify（LONG 【wEventId】, UINT 【uFlags】, LPCVOID 【dwItem2】, LPCVOID 【Array of flags that specifies the events.】 );



-------------------------------------------------------- KeyWin32ShellAbout ----
ShellAbout    ShellAbout函数显示“Shell关于”对话框。
语法



-------------------------------------------------------- KeyWin32ShellExecute ----
ShellExecute    ShellExecute函数打开或打印指定的文件。该文件可以是可执行文件或文档文件。另见ShellExecuteEx.
语法
参数
【HWND】指定父窗口。此窗口接收应用程序生成的任何消息框。例如，应用程序可能通过生成消息框来报告错误。【lpOperation】指向指定要执行的操作的以空值结尾的字符串的指针。以下操作字符


-------------------------------------------------------- KeyWin32ShellExecuteEx ----
ShellExecuteEx    [Now Supported on Windows NT]ShellExecuteEx函数对文件执行操作。该文件可以是可执行文件或文档。
语法
参数
【lpExecInfo】指向SHELLEXECUTEINFO结构的指针，其中包含并接收有关启动应用程序的信息。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错


-------------------------------------------------------- KeyWin32ShellProc ----
ShellProc    ShellProc挂接过程是一个应用程序定义或库定义的回调函数，shell应用程序用于从系统接收有用的通知。
语法
参数
【NCODE】指定挂钩代码。此参数可以是以下值之一：值含义HSHELL_ACTIVATESHELLWINDOW外壳应激活其主窗口。HSHELL_GETMINRECT仅Windows 95：窗


-------------------------------------------------------- KeyWin32Shell_NotifyIcon ----
Shell_NotifyIcon    [Now Supported on Windows NT]向系统发送消息，以从任务栏状态区域添加，修改或删除图标。WINSHELLAPI BOOL WINAPI Shell_NotifyIcon（DWORD 【//指向结构的指针】,//消息标识符frPNOTIFYICONDATA 【PNID】//指向结构的指针);



-------------------------------------------------------- KeyWin32SHFileOperation ----
SHFileOperation    [Now Supported on Windows NT]对文件系统对象执行复制，移动，重命名或删除操作。WINSHELLAPI int WINAPI SHFileOperation（LPSHFILEOPSTRUCT 【lpFileOp】 );
参数
【lpFileOp】指向SHFILEOPSTRUCT结构的指针，其中包含函数执行操作的信息。
返回值
如果发生错误，返回零，否则返回0。



-------------------------------------------------------- KeyWin32SHFreeNameMappings ----
SHFreeNameMappings    [Now Supported on Windows NT]释放由SHFileOperation函数检索的文件名映射对象。WINSHELLAPI void WINAPI SHFreeNameMappings（;HANDLE 【hNameMappings】 );



-------------------------------------------------------- KeyWin32SHGetDataFromIDList ----
SHGetDataFromIDList    [Now Supported on Windows NT]ShGetDataFromIDList函数从相对IDList中检索扩展属性数据。
语法



-------------------------------------------------------- KeyWin32SHGetDesktopFolder ----
SHGetDesktopFolder    [Now Supported on Windows NT]检索桌面文件夹的IShellFolder界面，该文件夹是shell名称空间的根。WINSHELLAPI HRESULT WINAPI SHGetDesktopFolder（LPSHELLFOLDER *【ppshf】 );
参数
【ppshf】接收桌面文件夹的IShellFolder接口指针的地址。呼叫应用程序负责通过调用其发布方法来最终释放接口。
返回值
如果成功返回NOERROR，否则返回OLE定义的错误结果


-------------------------------------------------------- KeyWin32SHGetFileInfo ----
SHGetFileInfo    [Now Supported on Windows NT]检索有关文件系统中的对象的信息，例如文件，文件夹，目录或驱动器根目录。WINSHELLAPI DWORD WINAPI SHGetFileInfoLPCTSTR 【* PSFI】, DWORD 【dwFileAttributes】, SHFILEINFO FAR 【* PSFI】, UINT 【cbFileInfo】, UINT 【uFlags】 );



-------------------------------------------------------- KeyWin32SHGetInstanceExplorer ----
SHGetInstanceExplorer    [Now Supported on Windows NT]检索资源管理器的IUnknown界面的地址。WINSHELLAPI HRESULT WINAPI SHGetInstanceExplorer（IUnknown 【ppunk】 );



-------------------------------------------------------- KeyWin32SHGetMalloc ----
SHGetMalloc    [Now Supported on Windows NT]检索指向shell的IMalloc界面的指针。shell扩展必须使用此接口来分配稍后由shell释放的内存。HRESULT SHGetMallocLPMALLOC 【* ppMalloc】 );



-------------------------------------------------------- KeyWin32SHGetPathFromIDList ----
SHGetPathFromIDList    [Now Supported on Windows NT]将项目标识符列表转换为文件系统路径。WINSHELLAPI BOOL WINAPI SHGetPathFromIDList（LPCITEMIDLIST 【PIDL】, LPSTR 【* PSFI】 );



-------------------------------------------------------- KeyWin32SHGetSpecialFolderLocation ----
SHGetSpecialFolderLocation    [Now Supported on Windows NT]检索特殊文件夹的位置。WINSHELLAPI HRESULT WINAPI SHGetSpecialFolderLocation（;HWND 【hwndOwner】, INT 【n文件夹da】, LPITEMIDLIST *【ppidl】 );



-------------------------------------------------------- KeyWin32SHLoadInProc ----
SHLoadInProc    [Now Supported on Windows NT]从shell进程的上下文中创建指定对象类的实例。WINSHELLAPI HRESULT WINAPI SHLoadInProc（REFCLSID 【rclsid】 );



-------------------------------------------------------- KeyWin32ShowCaret ----
ShowCaret    ShowCaret函数使插入符在插入符当前位置的屏幕上可见。当插入符可见时，它会自动闪烁。
语法
参数
【的hWnd】标识拥有插入符号的窗口。如果此参数为NULL，则ShowCaret将搜索具有插入符号的窗口的当前任务。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取


-------------------------------------------------------- KeyWin32ShowCursor ----
ShowCursor    ShowCursor函数显示或隐藏光标。
语法
参数
【bShow】指定内部显示计数器是递增还是递减。如果【bShow】为TRUE，则显示计数增加1。如果【bShow】为FALSE，则显示计数减1。
返回值
返回值指定新的显示计数器。
描


-------------------------------------------------------- KeyWin32ShowHideMenuCtl ----
ShowHideMenuCtl    ShowHideMenuCtl函数设置或删除指定的菜单项的复选标记属性，并显示或隐藏相应的控件。该函数在指定的菜单项中没有一个复选标记，然后显示相应的控件。如果菜单项已经有复选标记，该函数将删除复选标记并隐藏相应的控件。
语法



-------------------------------------------------------- KeyWin32ShowOwnedPopups ----
ShowOwnedPopups    ShowOwnedPopups函数显示或隐藏指定窗口所有的所有弹出窗口。
语法
参数
【的hWnd】标识拥有要显示或隐藏的弹出窗口的窗口。【fShow】指定弹出窗口是否显示或隐藏。如果此参数为TRUE，则会显示所有隐藏的弹出窗口。如果此参数为FALSE，则所有可见的弹出窗口都


-------------------------------------------------------- KeyWin32ShowScrollBar ----
ShowScrollBar    ShowScrollBar函数显示或隐藏指定的滚动条。
语法
参数
【的hWnd】根据【wBar】参数的值标识滚动条控件或带有标准滚动条的窗口。【wBar】指定要显示或隐藏的滚动条。此参数可以是以下值之一：值含义SB_BOTH显示或隐藏窗口的标准水平和垂直滚


-------------------------------------------------------- KeyWin32ShowWindow ----
ShowWindow    ShowWindow函数设置指定窗口的显示状态。
语法
参数
【的hWnd】标识窗口。【nCmdShow】指定窗口的显示方式。如果启动应用程序的程序提供STARTUPINFO结构，则此应用程序第一次调用ShowWindow时将忽略此参数。否则，第一次调


-------------------------------------------------------- KeyWin32ShowWindowAsync ----
ShowWindowAsync    [Now Supported on Windows NT]ShowWindowAsync函数设置由不同线程创建的窗口的显示状态。
语法
参数
【的hWnd】标识窗口。【nCmdShow】指定窗口的显示方式。有关可能值的列表，请参阅ShowWindow函数的说明。
返回值
如果窗口以前可见，则返回值不为零。如果窗口以前被隐藏，返


-------------------------------------------------------- KeyWin32SignalObjectAndWait ----
SignalObjectAndWait    [New - Windows NT]SignalObjectAndWait函数允许调用者以原子方式发送一个对象并等待另一个对象。
语法
参数
【hObjectToSignal】指定要发送信号的对象的句柄。此对象可以是信号量，互斥体或事件。如果句柄是信号量，则需要SEMAPHORE_MODIFY_STATE访问。如果句柄是事件，则需


-------------------------------------------------------- KeyWin32SizeofResource ----
SizeofResource    SizeofResource函数返回指定资源的大小（以字节为单位）。
语法
参数
【HMODULE】标识可执行文件包含资源的模块。【hResInfo】标识资源。必须使用FindResource或FindResourceEx函数创建此句柄。
返回值
如果函数成功，则返回


-------------------------------------------------------- KeyWin32Sleep ----
睡眠    睡觉函数暂停执行当前线程指定的时间间隔。VOID睡眠（DWORD dwMilliseconds//以毫秒为单位的休眠时间);
参数
dwMilliseconds指定暂停执行的时间（以毫秒为单位）。值为零会使线程将剩余时间片段放弃准备运行的任何其他具有相同优先级的线程。如果没有其他具有相同优先级的线程准备运行，该函数将立即


-------------------------------------------------------- KeyWin32SleepEx ----
SleepEx    SleepEx函数使当前线程进入等待状态，直到出现以下情况之一：*调用I / O完成回调函数*异步过程调用（APC）排队等待线程。*经过了超时间隔
语法
参数
【dwMilliseconds】指定延迟发生的时间（以毫秒为单位）。值为零会使函数立即返回。INFINITE的值导致无限延迟。【bAlertable】指定函数是否由于I / O完成回调函数或


-------------------------------------------------------- KeyWin32SnmpExtensionInit ----
SnmpExtensionInit    可扩展代理调用扩展代理程序DLL中的SnmpExtensionInit函数来执行扩展和可扩展代理的双向初始化。
语法
参数
【dwTimeZeroReference】[in]指定扩展代理的时间零参考。【hPollForTrapEvent】[out]指向事件句柄，当可扩展代理轮询SnmpExtensionTrap函


-------------------------------------------------------- KeyWin32SnmpExtensionInitEx ----
SnmpExtensionInitEx  SnmpExtensionInitEx函数可识别扩展代理支持的任何其他管理信息库（MIB）子树。可扩展代理在可扩展代理的服务启动期间调用扩展代理DLL中的SnmpExtensionInitEx函数。
语法
参数
【supportedView】[out]指向AsnObjectIdentifier结构的指针，指定扩展代理支持的下一个MIB子树。
返回值
如果【supportedView】参数已使用附


-------------------------------------------------------- KeyWin32SnmpExtensionQuery ----
SnmpExtensionQuery    可扩展代理程序调用扩展代理程序DLL中的SnmpExtensionQuery函数来解析在一个或多个扩展代理的已注册MIB子树中包含变量的SNMP请求。
语法
参数
【请求类型】[in]指定SNMP请求类型。此参数可以是以下值之一：值含义ASN_RFC1157_GETREQUEST搜索并从指定的变量接收值。ASN_RFC1157_GETNEXTREQUE


-------------------------------------------------------- KeyWin32SnmpExtensionTrap ----
SnmpExtensionTrap    可扩展代理调用扩展代理DLL中的SnmpExtensionTrap函数来检索扩展代理生成的陷阱。
语法
参数
【企业】[out]指向生成陷阱的源对象的对象标识符。可扩展代理不会释放此变量的内存。【genericTrap】[out]指出通用陷阱的指示。此参数可以是以下值之一：值含义SNMP_GENER


-------------------------------------------------------- KeyWin32SnmpMgrClose ----
SnmpMgrClose    SnmpMgrClose函数关闭与指定会话关联的通信套接字和数据结构。
语法
参数
【会议】[in]指向内部结构，指定要关闭的会话。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为FALSE。此函数可能会返回Windows Sockets错误代码。



-------------------------------------------------------- KeyWin32SnmpMgrGetTrap ----
SnmpMgrGetTrap    如果启用了陷阱接收，SnmpMgrGetTrap函数返回未完成的陷阱数据，如果呼叫者未接收到该数据。
语法
参数
【企业】[out]指向生成SNMP陷阱的企业的对象标识符。【IPAddress】[out]指向生成SNMP陷阱的企业的IP地址。【genericTrap】[out]指向通用陷阱的指示器。此参


-------------------------------------------------------- KeyWin32SnmpMgrOidToStr ----
SnmpMgrOidToStr    SnmpMgrStrToOid函数将内部对象标识符转换为字符串对象标识符或对象描述符表示。BOOL SnmpMgrOidToStr(AsnObjectIdentifier *【有关uz】,//要转换的对象标识符LPSTR *【串】//字符串对象标识符表示);
参数
【有关uz】[in]指向要转换的对象标识符变量。【串】[out]指向将接收转换值的以null结尾的字符串。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为FALSE。此函


-------------------------------------------------------- KeyWin32SnmpMgrOpen ----
SnmpMgrOpen    SnmpMgrOpen函数初始化通信套接字和数据结构，允许与指定代理进行通信。
语法
参数
【lpAgentAddress】[in]指向一个空值终止的字符串，指定可以解析为IP地址，IPX地址（8.12表示法）或以太网地址的点分十进制IP地址或主机名。【lpAgentCommuni


-------------------------------------------------------- KeyWin32SnmpMgrRequest ----
SnmpMgrRequest    SnmpMgrRequest函数请求指定的代理执行指定的操作。
语法
参数
【会议】[in]指向内部结构，指定执行请求的会话。【请求类型】[in]指定SNMP请求类型。此参数可以是以下值之一：值含义ASN_RFC1157_GETREQUEST搜索并从指定的变量接收值


-------------------------------------------------------- KeyWin32SnmpMgrStrToOid ----
SnmpMgrStrToOid    SnmpMgrStrToOid函数将字符串对象标识符或对象描述符表示形式转换为内部对象标识符。
语法
参数
【串】[in]指向要转换的以null结尾的字符串。【有关uz】[out]指向将接收转换值的对象标识符变量。
返回值
如果函数成功，返回值为TRUE。如果函数失败，返回值为FALSE。此函


-------------------------------------------------------- KeyWin32SnmpMgrTrapListen ----
SnmpMgrTrapListen    SnmpMgrTrapListen函数注册管理应用程序接收SNMP陷阱的能力。
语法
参数
【phTrapAvailable】[out]指向将用于指示有陷阱可用的事件句柄，并且应用程序应调用SnmpMgrGetTrap函数。
返回值
如果函数成功，返回值为TRUE。如果函数失败


-------------------------------------------------------- KeyWin32SnmpUtilMemAlloc ----
SnmpUtilMemAlloc  SnmpUtilMemAlloc函数从进程堆分配动态内存。
语法
参数
【尺寸】[in]为内存对象分配的字节数。
返回值
如果函数成功，则返回值是指向新分配的内存对象的指针。如果函数失败，返回值为NULL。
描述
使用SnmpUtilMemFree函数释


-------------------------------------------------------- KeyWin32SnmpUtilMemFree ----
SnmpUtilMemFree  SnmpUtilMemFree函数释放指定的内存对象。
语法
参数
【地址】[in/out]指向要释放的内存对象的指针。
返回值
没有。
描述
使用SnmpUtilMemAlloc函数分配内存。



-------------------------------------------------------- KeyWin32SnmpUtilMemReAlloc ----
SnmpUtilMemReAlloc  SnmpUtilMemReAlloc函数更改指定内存对象的大小。
语法
参数
【地址】[in]指向要调整大小的内存对象的指针。【尺寸】[in]要为新内存对象分配的字节数。
返回值
如果函数成功，则返回值是指向新分配的内存对象的指针。如果函数失败，返回值为NULL。


-------------------------------------------------------- KeyWin32SnmpUtilOidAppend ----
SnmpUtilOidAppend    SnmpUtilOidAppend函数将源对象标识符附加到目标对象标识符。
语法
参数
【DestObjId】[in/out]指向AsnObjectIdentifier 结构以接收副本。【SrcObjId】[in]指向要附加的AsnObjectIdentifier结构。
返回


-------------------------------------------------------- KeyWin32SnmpUtilOidCmp ----
SnmpUtilOidCmp    SnmpUtilOidCmp函数比较两个对象标识符。
语法
参数
【ObjIdA】[in]指向AsnObjectIdentifier结构进行比较。【ObjIdB】[in]指向要比较的AsnObjectIdentifier结构。
返回值
如果【ObjId


-------------------------------------------------------- KeyWin32SnmpUtilOidCpy ----
SnmpUtilOidCpy    SnmpUtilOidCpy函数将【SrcObjId】参数指向的变量复制到【DestObjId】参数，为目标的副本分配必要的内存。
语法
参数
【DestObjId】[out]指向AsnObjectIdentifier结构以接收副本。【SrcObjId】[in]指向要复制的AsnObjectIdentifier结构。
返回值
如


-------------------------------------------------------- KeyWin32SnmpUtilOidFree ----
SnmpUtilOidFree    SnmpUtilOidFree函数释放与对象标识符相关联的任何已分配数据。
语法
参数
【OBJ】[in/out]指向应分配数据的AsnObjectIdentifier结构。
返回值
无返回值。



-------------------------------------------------------- KeyWin32SnmpUtilOidNCmp ----
SnmpUtilOidNCmp    SnmpUtilOidNCmp函数将两个对象标识符变量与【只】参数指定的长度进行比较。
语法
参数
【ObjIdA】[in]指向AsnObjectIdentifier结构进行比较。【ObjIdB】[in]指向AsnObjectIdentifier结构进行比较。【只】[in]表示要比较的子识


-------------------------------------------------------- KeyWin32SnmpUtilVarBindCpy ----
SnmpUtilVarBindCpy    SnmpUtilVarBindCpy函数复制RFC1157VarBind结构，并分配目标结构所需的任何内存。
语法
参数
【DSTen】[out]指向RFC1157VarBind结构以接收副本。【SRC】[in]指向要复制的RFC1157VarBind结构。
返回值
如果函数成功，返回值为TRUE。如果函数


-------------------------------------------------------- KeyWin32SnmpUtilVarBindFree ----
SnmpUtilVarBindFree    SnmpUtilVarBindFree函数释放与RFC1157VarBind结构相关联的任何已分配数据。
语法
参数
【VarBind】[in/out]指向应分配数据的RFC1157VarBind结构。
返回值
无返回值。



-------------------------------------------------------- KeyWin32SnmpUtilVarBindListCpy ----
SnmpUtilVarBindListCpy    SnmpUtilVarBindListCpy函数复制RFC1157VarBindList结构，并为目标的副本分配任何必要的内存。
语法
参数
【DSTen】[out]指向RFC1157VarBindList结构以接收副本。【SRC】[in]指向要复制的RFC1157VarBindList结构。
返回值
如果函数成功，返回值为T


-------------------------------------------------------- KeyWin32SnmpUtilVarBindListFree ----
SnmpUtilVarBindListFree    SnmpUtilVarBindListFree函数释放与RFC1157VarBindList结构相关联的任何已分配数据。
语法
参数
【VarBindList】[in/out]指向应分配数据的RFC1157VarBindList结构。
返回值
无返回值。



-------------------------------------------------------- KeyWin32SOBailOut ----
SOBailOut允许文件解析器返回错误条件。在调用此函数后，解析器应尽快从VwReadStreamFunc函数返回。虚空SOBailOut（WORD 【错误标志此参数可以是以下值之一：】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOBeginTable ----
SOBeginTable启动表定义，指示后续输出调用中的文本是表的一部分。必须在段落之间调用此函数，然后指定行和单元格格式。VOID SOBeginTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOEndColumnInfo ----
SOEndColumnInfo结束列信息的定义。在设置列信息后，文件解析器必须立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOEndColumnInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOEndFieldInfo ----
SOEndFieldInfo结束字段信息的定义。文件解析器必须先前称为SOStartFieldInfo函数。文件解析器在设置字段信息后立即调用此函数。此函数只能从VwStreamSection函数调用。VOID SOEndFieldInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOEndFontTable ----
SOEndFontTable结束字体表的定义。文件解析器必须在设置字体条目后立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOEndFontTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOEndPalette ----
SOEndPalette结束调色板的定义。文件解析器在指定最后一个调色板条目后立即调用此函数。VOID SOEndPalette（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOEndTable ----
SOEndTable结束表定义，指示后续输出调用中的文本不再是表的一部分。必须在分行后调用该函数。VOID SOEndTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOEndTabStops ----
SOEndTabStops结束段落的制表位置的定义。要设置制表位，请使用SOPutTabStop函数。文件解析器在设置段落的最后一个选项卡停止后立即调用此函数。VOID SOEndTabStops（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOGetInfo ----
SOGetInfo检索有关电子表格的信息。VOID SOGetInfo（WORD 【*pInfo】, 无效VWPTR 【* PINFO】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOGetScanLineBuffer ----
SOGetScanLineBuffer检索用于存储当前扫描线的缓冲区的地址。对于每个生成的扫描线，从VwStreamReadFunc函数调用此函数。此函数将指向的变量设置为应构建扫描行数据的地址。WORD SOGetScanLineBufferVOID VWPTR 【*ppScanLineData】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutBitmapHeader ----
SOPutBitmapHeader输出有关位图的信息。VOID SOPutBitmapHeader（PSOBITMAPHEADER 【pBitmapHeader】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutBreak ----
SOPutBreak设置段落，单元格，记录，页面，部分或其他类型的中断。在电子表格部分中，部分中的最后一个单元格必须在SO_SECTIONBREAK或SO_EOFBREAK中断前关联SO_CELLBREAK中断。在数据库部分中，部分中的最后一条记录必须在SO_SECTIONBREAK或SO_EOFBREAK中断前关联SO_RECORDBREAK中断。在文字处理部分，在SO_SECTIONBREAK或SO_EOFBREAK中断之前，最后一段不需要SO_PARABREAK中断。WORD SOPutBreak（WORD 【WTYPE】, DWORD 【dwInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutChar ----
SOPutChar输出一个字符，应用当前的字体，高度和属性。该字符被假定属于由打开的函数选择的字符集，并且是可数和可见的。VOID SOPutChar（WORD 【WCH】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutCharAttr ----
SOPutCharAttr设置文本中字符的样式属性。VOID SOPutCharAttr（WORD 【wAttr】, WORD 【wState】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutCharFontById ----
SOPutCharFontById设置文本中字符的字体。VOID SOPutCharFontById（DWORD 【dwFontId】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutCharFontByName ----
SOPutCharFontByName设置文本中字符的字体。VOID SOPutCharFontByName（WORD 【wFontType】, WORD 【pFontName】, HPROC【保留的】 );



-------------------------------------------------------- KeyWin32SOPutCharHeight ----
SOPutCharHeight设置文本中一个字符的高度（以半分）。VOID SOPutCharHeight（WORD 【身高，半分，角色。】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutCharX ----
SOPutCharX输出一个字符，应用指定的字符类型。假设该字符属于由打开函数选择的字符集。VOID SOPutCharX（WORD 【WCH】, WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutColumnInfo ----
SOPutColumnInfo设置列信息。调用此函数之前，文件解析器必须调用SOStartColumnInfo函数。此函数只能从VwStreamSection函数调用。VOID SOPutColumnInfo（PSOCOLUMN 【pColumn】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutDataCell ----
SOPutDataCell输出单元格的数据。VOID SOPutCell（PSODATACELL 【的pCell】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutEmbeddedObject ----
SOPutEmbeddedObject设置嵌入式图形对象。文件解析器必须使用适当的值设置SOEMBEDDEDOBJECT结构。VOID SOPutEmbeddedObject（PSOEMBEDDEDOBJECT 【pObjectbsbs】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutField ----
SOPutField输出字段的数据。除了SO_FIELDTEXTVAR值以外，所有wStorage类型都使用此函数。VOID SOPutField（无效VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutFieldInfo ----
SOPutFieldInfo设置字段信息。调用此函数之前，文件解析器必须调用SOStartFieldInfo函数。此函数只能从VwStreamSection函数调用。VOID SOPutFieldInfo（PSOFIELD 【pfield】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutFontTableEntry ----
SOPutFontTableEntry设置字体表条目。调用此函数之前，文件解析器必须调用SOStartFontTable函数。对于要添加到表的每个字体，必须调用一次SOPutFontTableEntry.字体标识符必须是唯一的，但可以按任何顺序给出。该函数只能从VwStreamSection函数调用。
语法



-------------------------------------------------------- KeyWin32SOPutHdrEntry ----
SOPutHdrEntry设置标题信息的字符串。该函数只能从VwStreamSection函数调用。VOID SOPutHdrEntry（char VWPTR 【* PLABEL】, char VWPTR 【* pData所】, WORD 【WID】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutMoreText ----
SOPutMoreText输出单元格的文本，并指示单元格是否有更多文本输出。此函数用于输出使用SOPutText函数初始启动的文本序列。如果要输出的文本多，则文件解析器必须使用后续调用或调用SOPutMoreText函数来输出文本。128字节限制是为了方便函数处理SOPutMoreText.
语法



-------------------------------------------------------- KeyWin32SOPutMoreVarField ----
SOPutMoreVarField输出变量字段的数据，并指示是否有更多的数据要输出的字段。此函数可以调用多次。如果要输出的数据更多，则文件解析器必须使用后续调用或调用SOPutMoreVarField来输出数据。128字节限制是为了方便函数处理SOPutMoreVarField.此函数用于输出使用SOPutVarField函数初始启动的数据序列。
语法



-------------------------------------------------------- KeyWin32SOPutPaletteEntry ----
SOPutPaletteEntry设置调色板条目的颜色。调用此函数之前，文件解析器必须调用SOStartPalette函数。调用此函数的顺序确定图像颜色表中条目的顺序。第一个调色板条目为彩色0，为值为0的像素显示颜色;第二个调色板条目是颜色1;等等。VOID SOPutPaletteEntry（无符号字符 【红】, 无符号字符 【绿色】, 无符号字符 【蓝色】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutParaAlign ----
SOPutParaAlign设置段落的对齐方式。VOID SOPutParAlign（WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutParaIndents ----
SOPutParaIndents设置段落的缩进。缩进相对于相应的左边距或右边距。VOID SOPutParaIndents（LONG 【dwLeft】, LONG 【dwRight】, LONG 【Width, in twips, of the left indent.】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutParaMargins ----
SOPutParaMargins设置段落边距。边距相对于页面的左边缘或右边缘。VOID SOPutParaMargins（LONG 【dwLeft】, LONG 【dwRight】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutParaSpacing ----
SOPutParaSpacing设置段落的间距。VOID SOPutParaSpacing（WORD 【wLineHeightType】, DWORD 【dwLineHeight】, DWORD 【dwSpaceBefore】, DWORD 【dwSpaceAfter】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutScanLineData ----
SOPutScanLineData在位图的单个扫描行中设置位值。以前必须使用SOPutBitmapHeader函数定义位图格式。VOID SOPutScanLineData（U_BYTE VWPTR 【*pScanLineData】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutSectionName ----
SOPutSectionName设置部分的名称。VOID SOPutSectionName（char VWPTR 【* PNAME】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutSectionType ----
SOPutSectionType输出节类型。VOID SOPutSectionType（WORD 【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutSpecialCharX ----
SOPutSpecialCharX输出特殊字符，应用指定的字符类型。VOID SOPutSpecialCharX（WORD 【WCH】, WORD【WTYPE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutSubdocInfo ----
SOPutSubdocInfo输出子文档数据。VOID SOPutSubdocInfo（WORD 【WTYPE】, WORD【wSubType】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutTableCellInfo ----
SOPutTableCellInfo设置单元格信息。VOID SOPutTableCellInfo（PSOTABLECELLINFO 【pCellInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutTableRowFormat ----
SOPutTableRowFormat设置表格中一行的格式。VOID SOPutTableRowFormat（WORD 【wLeftEdge】, WORD 【wRowHeight】, WORD 【wRowHeightType】, WORD 【wCellMargin】, WORD 【wRowAlignment】, WORD 【wNumCells】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutTabStop ----
SOPutTabStop设置段落的制表位。调用此函数之前，文件解析器必须调用SOStartTabStops函数，并可以通过多次调用来为段落设置多个制表位。在设置制表符停止时，文件解析器不得调用任何其他输出函数，并且必须在设置最后一个制表符停止后调用SOEndTabStops函数。VOID SOPutTabStop（PSOTAB 【PTAB】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutTextCell ----
SOPutTextCell输出单元格的文本，并指示单元格是否有更多文本输出。如果有更多文本输出，则文件解析器必须使用后续调用或调用SOPutMoreText函数来输出文本。VOID SOPutTextCell（PSOTEXTCELL 【的pCell】, WORD 【wCount】, char VWPTR 【* pText】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutVarField ----
SOPutVarField输出变量字段的数据，并指示是否有更多的数据要输出的字段。如果有更多的数据要输出，则文件解析器必须使用后续调用或调用SOPutMoreVarField函数来输出数据。VOID SOPutVarField（无效VWPTR 【* pData所】, WORD 【wCount】, WORD 【Address of the data for the variable field.】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOPutVectorHeader ----
SOPutVectorHeader输出矢量标题，指定显示分辨率，x轴和y轴方向，背景颜色和颜色值类型（RGB或调色板）。VOID SOPutVectorHeader（PSOVECTORHEADER 【pVectorHeader】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOSetDateBase ----
SOSetDateBase设置基准日期。所有后续日期均计算为基准日期和给定日期值之和。该函数只能从VwStreamSection函数调用。VOID SOSetDataBase（DWORD 【dwBaseht】, WORD 【wFlags】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOStartColumnInfo ----
SOStartColumnInfo启动列信息的定义。在设置信息之前，文件解析器必须立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOStartColumnInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOStartFieldInfo ----
SOStartFieldInfo开始字段信息的定义。文件解析器在设置字段信息之前立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOStartFieldInfo（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOStartFontTable ----
SOStartFontTable启动字体表的定义。在设置字体条目之前，文件解析器必须立即调用此函数。该函数只能从VwStreamSection函数调用。VOID SOStartFontTable（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOStartPalette ----
SOStartPalette启动调色板的定义。文件解析器在定义调色板条目之前立即调用此函数。VOID SOStartPalette（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOStartTabStops ----
SOStartTabStops开始段落的制表位置的定义。要设置制表位，请使用SOPutTabStop函数。文件解析器在设置段落的第一个选项卡停止之前立即调用此函数。VOID SOStartTabStops（HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SoundSentryProc ----
SoundSentryProc    SoundSentryProc函数是一个库定义的回调函数，当SoundSentry辅助函数打开时，会产生自定义的视觉信号，而基于Windows的应用程序（或在窗口中运行的非基于Windows的应用程序）通过电脑内置扬声器。
语法
参数
【dwMillisecel-Latn】指定当基于Windows的应用程序（或在窗口中运行的非基于Windows的应用程序）生成声音时显示的视觉信号的持续时间（以毫秒为单位）。【fdwEffe


-------------------------------------------------------- KeyWin32SOVectorAttr ----
SOVectorAttr设置与绘图矢量图形对象相关的属性。VOID SOVectorAttr（INT 【nItemId】, DWORD 【wDataSize】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SOVectorObject ----
SOVectorObject绘制或定义给定的矢量图形对象。VOID SOVectorObject（INT 【nItemId】, DWORD 【wDataSize】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32StartDoc ----
StartDoc    StartDoc函数启动打印作业。此函数替换STARTDOC打印机转义。
语法
参数
【HDC】标识打印作业的设备上下文。【LPdi】指向DOCINFO结构，其中包含文档文件的名称和输出文件的名称。
返回值
如果函数成功，返回值大于零。该值是文档的打印作业标识符。如果函数


-------------------------------------------------------- KeyWin32StartDocPrinter ----
StartDocPrinter    StartDocPrinter函数通知打印后台处理程序要将假脱机文档进行打印。
语法
参数
【hPrinter】标识打印机。【水平】指定【pDocInfo】指向的结构的版本。对于Windows NT，此值必须为1。对于Windows 95，还可以选择值2。（见DOC_INFO_2以


-------------------------------------------------------- KeyWin32StartPage ----
StartPage    StartPage函数准备打印机驱动程序接受数据。
语法
参数
【hDC】标识打印作业的设备上下文。
返回值
如果函数成功，返回值大于零。如果函数失败，返回值小于或等于零。要获取扩展错误信息，请调用GetLastError.
描述
系统在Star


-------------------------------------------------------- KeyWin32StartPagePrinter ----
StartPagePrinter    StartPagePrinter函数通知假脱机程序页面即将打印在指定的打印机上。
语法
参数
【hPrinter】识别打印机。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
通过调用OpenPrint


-------------------------------------------------------- KeyWin32StartService ----
StartService    StartService函数开始执行服务。
语法
参数
【hService】标识服务。该句柄由OpenService或CreateService函数返回，并且必须具有SERVICE_START访问权限。【dwNumServiceArgs】指定【l


-------------------------------------------------------- KeyWin32StartServiceCtrlDispatcher ----
StartServiceCtrlDispatcher    StartServiceCtrlDispatcher函数将服务进程的主线程连接到服务控制管理器，这将使线程成为调用进程的服务控制分派器线程。
语法
参数
【lpServiceStartTable】指向SERVICE_TABLE_ENTRY结构的数组，其中包含可在调用进程中执行的每个服务的一个条目。表中最后一个条目的成员必须具有NULL值来指定


-------------------------------------------------------- KeyWin32StretchBlt ----
StretchBlt    StretchBlt函数将位图从源矩形复制到目标矩形中，如有必要，可以拉伸或压缩位图以适应目标矩形的尺寸。Windows根据目标设备上下文中设置的拉伸模式，拉伸或压缩位图。
语法
参数
【hdcDest】标识目标设备上下文。【nXOriginDest】指定目标矩形左上角的x坐标（以逻辑为单位）。【nYOriginDest】指定目标矩形左上角的y坐标（以逻辑为单位）。【nWi


-------------------------------------------------------- KeyWin32StretchDIBits ----
StretchDIBits    StretchDIBits函数将设备无关位图（DIB）中的像素矩形的颜色数据复制到指定的目标矩形。如果目标矩形大于源矩形，则该函数会拉伸颜色数据的行和列以适合目标矩形。如果目标矩形小于源矩形，则此函数使用指定的栅格操作来压缩行和列。
语法
参数
【HDC】标识目标设备上下文。【XDest】指定目标矩形左上角的x坐标（以逻辑为单位）。【YDest】指定目标矩形左上角的y坐标（以逻辑为单位）。【nDestWidth】指定目标矩形的逻辑单


-------------------------------------------------------- KeyWin32StrokeAndFillPath ----
StrokeAndFillPath    StrokeAndFillPath函数可以关闭路径中的任何打开的图形，使用当前笔触发路径的轮廓，并使用当前画笔填充其内部。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会返回以下错误代


-------------------------------------------------------- KeyWin32StrokePath ----
StrokePath    StrokePath函数通过使用当前笔来呈现指定的路径。
语法
参数
【HDC】标识包含封闭路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会


-------------------------------------------------------- KeyWin32SubtractRect ----
SubtractRect    SubtractRect函数获取通过从另一个减去一个矩形确定的矩形的坐标。
语法
参数
【lprcDst】指向RECT结构，通过从【lprcSrc1】指向的矩形中减去【lprcSrc2】指向的矩形确定的矩形坐标。【lprcSrc1】指向RECT结构，该函数从该结构中减去【lpr


-------------------------------------------------------- KeyWin32SuspendThread ----
SuspendThread    SuspendThread函数挂起指定的线程。
语法
参数
【hThread】标识线程。Windows NT：句柄必须具有THREAD_SUSPEND_RESUME访问权限。有关详细信息，请参阅线程对象.
返回值
如果函数成功，返回值是线程以前的


-------------------------------------------------------- KeyWin32SUUserPopData ----
SUUserPopData弹出用户数据。必须先使用SUUserPushData函数推送数据。VOID SUUserPopData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SUUserPushData ----
SUUserPushData推送用户数据。可以使用SUUserPopData函数检索数据。VOID SUUserPushData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SUUserRetrieveData ----
SUUserRetrieveData检索用户数据。以前必须使用SUUserSaveData函数保存数据。不应该使用此函数。应该使用SUUserPopData函数。VOID SUUserRetrieveData（WORD 【WINDEX】, VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SUUserSaveData ----
SUUserSaveData保存用户数据。不应该使用此函数。应该使用SUUserPushData函数。VOID SUUserSaveData（VOID VWPTR 【* pData所】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32SwapMouseButton ----
SwapMouseButton    SwapMouseButton函数可以反转或恢复鼠标左键和右键的含义。
语法
参数
【// reverse or restore buttons】指定鼠标按钮的含义是否相反或恢复。如果此参数为TRUE，左侧按钮将生成右键消息，右侧按钮会生成左键消息。如果此参数为FALSE，


-------------------------------------------------------- KeyWin32SwitchDesktop ----
SwitchDesktop    SwitchDesktop函数使桌面可见，并激活它。这使桌面能够接收用户的输入。调用进程必须具有DESKTOP_SWITCHDESKTOP访问桌面才能使SwitchDesktop函数成功。
语法
参数
【//分配给该线程的桌面的句柄】标识要显示和激活的桌面。该句柄由CreateDesktop和OpenDesktop函数返回。如果桌面属于不可见窗口台，SwitchDesktop函数将失败。



-------------------------------------------------------- KeyWin32SwitchToFiber ----
SwitchToFiber    SwitchToFiber函数调度光纤。
语法
参数
【//指向要删除的光纤的指针】指定要切换到的光纤的地址。
返回值
此函数不返回值。
描述
SwitchToFiber函数用于手动调度光纤。该函数保存当前光纤的状态信息，恢复指定光纤的


-------------------------------------------------------- KeyWin32SwitchToThread ----
SwitchToThread    [New - Windows NT]SwitchToThread函数导致调用线程对另一个准备在当前处理器上运行的线程执行执行。操作系统选择要产生的线程。
语法
参数
此函数无参数。
返回值
如果调用SwitchToThread函数导致操作系统将执行切换到另一个线程，则返回值不为零。如果没有其他线程准备好执行，则操作系统不会将执行切换到另一个线程，并且


-------------------------------------------------------- KeyWin32SysMsgProc ----
SysMsgProc    SysMsgProc挂接过程是系统在对话框，消息框，菜单或滚动条中发生输入事件之后但在处理输入事件生成的消息之前调用的库定义的回调函数。挂钩过程可以监视系统中任何对话框，消息框，菜单或滚动条的消息。
语法
参数
【NCODE】指定生成消息的输入事件的类型。此参数可以是以下值之一：值含义MSGF_DIALOGBOX输入事件发生在消息框或对话框中。MSGF_MENU输入事件发生在菜单中。MSGF_SCR


-------------------------------------------------------- KeyWin32SystemParametersInfo ----
SystemParametersInfo    SystemParametersInfo函数查询或设置系统范围的参数。此函数还可以在设置参数时更新用户配置文件。
语法
参数
【uiAction】指定要查询或设置的系统范围参数。此参数可以是以下值之一：值含义SPI_GETACCESSTIMEOUT检索与辅助函数相关联的超时期的信息。【pvParam】参数必须指向接


-------------------------------------------------------- KeyWin32SystemTimeToFileTime ----
SystemTimeToFileTime    SystemTimeToFileTime函数将系统时间转换为文件时间。
语法
参数
【lpSystemTime】指向包含要转换时间的SYSTEMTIME结构。SYSTEMTIME结构的wDayOfWeek成员将被忽略。【lpFileTime】指向FILETIME结构以接收转


-------------------------------------------------------- KeyWin32SystemTimeToTzSpecificLocalTime ----
SystemTimeToTzSpecificLocalTime    SystemTimeToTzSpecificLocalTime函数将协调世界时（UTC）转换为指定时区的相应本地时间。
语法
参数
【lpTimeZoneInformation】指向TIME_ZONE_INFORMATION结构的指针，指定感兴趣的时区。如果【lpTimeZoneInformation】为NULL，则该函


-------------------------------------------------------- KeyWin32TabbedTextOut ----
TabbedTextOut    TabbedTextOut函数在指定位置写入一个字符串，将制表符扩展为一个tab-stop位置数组中指定的值。文本以当前选定的字体编写。
语法
参数
【hDC】标识设备上下文。【X】以逻辑单位指定字符串起始点的x坐标。【Y】以逻辑单位指定字符串起始点的y坐标。【lpString】指向要绘制的字符串。字符串不需要为零终止，因为【NCOUNT


-------------------------------------------------------- KeyWin32TerminateProcess ----
TerminateProcess    TerminateProcess函数终止指定的进程及其所有线程。
语法
参数
【hProcess】标识要终止的过程。Windows NT：句柄必须具有PROCESS_TERMINATE访问权限。有关详细信息，请参阅过程对象.【uExitCode】指定进程的退出代码，以


-------------------------------------------------------- KeyWin32TerminateThread ----
TerminateThread    TerminateThread函数终止线程。
语法
参数
【hThread】标识要终止的线程。Windows NT：句柄必须具有THREAD_TERMINATE访问权限。有关详细信息，请参阅线程对象.【dwExitCode】指定线程的退出代码。使用


-------------------------------------------------------- KeyWin32TextOut ----
TextOut    TextOut函数使用当前选定的字体在指定的位置写入一个字符串。
语法
参数
【HDC】标识设备上下文。【nXStart】指定Windows用于对齐字符串的参考点的逻辑x坐标。【nYStart】指定Windows用于对齐字符串的参考点的逻辑y坐标。【lpString】


-------------------------------------------------------- KeyWin32TileWindows ----
TileWindows    [Now Supported on Windows NT]TileWindows函数将分配指定的窗口或指定父窗口的子窗口。
语法
参数
【hwndParent】标识父窗口。如果此参数为NULL，则假定桌面窗口。【wHow】指定不排列的窗口类型，以及是垂直还是水平平铺。该参数可以是与CascadeWindows函数列出的零个或


-------------------------------------------------------- KeyWin32TimerProc ----
TimerProc    TimerProc函数是一个应用程序定义的回调函数，用于处理WM_TIMER消息。
语法
参数
【HWND】标识与定时器相关联的窗口。【uMsg】指定WM_TIMER消息。【IdEvent】指定定时器的标识符。【dwTime】指定自Windows启动以来经过的毫秒数。这是GetTick


-------------------------------------------------------- KeyWin32TlsAlloc ----
TlsAlloc    TlsAlloc函数分配线程本地存储（TLS）索引。该进程的任何线程随后可以使用此索引来存储和检索线程本地的值。
语法
参数
此函数无参数。
返回值
如果函数成功，则返回值为TLS索引。如果函数失败，返回值为0xFFFFFFFF。要获取扩展错误信息，请调用GetLastError.
描述
进程的线程可以在后


-------------------------------------------------------- KeyWin32TlsFree ----
TlsFree    TlsFree函数释放线程本地存储（TLS）索引，使其可重用。
语法
参数
【dwTlsIndex】指定由TlsAlloc函数分配的TLS索引。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32TlsGetValue ----
TlsGetValue    TlsGetValue函数检索调用线程的线程本地存储（TLS）插槽中指定TLS索引的值。进程的每个线程都有自己的每个TLS索引的插槽。
语法
参数
【dwTlsIndex】指定由TlsAlloc函数分配的TLS索引。
返回值
如果函数成功，则返回值是存储在与指定索引关联的调用线程的TLS插槽中的值。如果函数失败，返回值为零。要获取扩


-------------------------------------------------------- KeyWin32TlsSetValue ----
TlsSetValue    TlsSetValue函数在调用线程的线程本地存储（TLS）插槽中存储指定TLS索引的值。进程的每个线程都有自己的每个TLS索引的插槽。
语法
参数
【dwTlsIndex】指定由TlsAlloc函数分配的TLS索引。【lpTlsValue】指定要存储在由【dwTlsIndex】指定的调用线程的TLS插槽中的值。
返回值
如果函数成功


-------------------------------------------------------- KeyWin32ToAscii ----
ToAscii    ToAscii函数将指定的虚拟键代码和键盘状态转换为相应的Windows字符或字符。该函数使用由给定的键盘布局句柄标识的输入语言和物理键盘布局来转换代码。
语法
参数
【uVirtKey】指定要翻译的虚拟键代码。【uScanCode】指定要翻译的键的硬件扫描代码。如果键已经起作用（未按下），则该值的高位被置位。【lpKeyState】指向包含当前键盘状态的


-------------------------------------------------------- KeyWin32ToAsciiEx ----
ToAsciiEx    [Now Supported on Windows NT]ToAsciiEx函数将指定的虚拟键代码和键盘状态转换为相应的Windows字符或字符。该函数使用由给定的键盘布局句柄标识的输入语言和物理键盘布局来转换代码。
语法
参数
【uVirtKey】指定要翻译的虚拟键代码。【uScanCode】指定要翻译的键的硬件扫描代码。如果键已经起作用（未按下），则该值的高位被置位。【lpKeyState】指向包含当前键盘状态的


-------------------------------------------------------- KeyWin32ToUnicode ----
ToUnicode    ToUnicode函数将指定的虚拟键代码和键盘状态转换为相应的Unicode字符或字符。
语法
参数
【wVirtKey】指定要翻译的虚拟键代码。【wScanCode】指定要翻译的键的硬件扫描代码。该键的高位被设置为键。【lpKeyState】指向包含当前键盘状态的256字节数组。数组中的每


-------------------------------------------------------- KeyWin32ToUnicodeEx ----
ToUnicodeExToUnicodeEx函数将指定的虚拟键代码和键盘状态转换为相应的Unicode字符或字符。
语法
参数
【wVirtKey】指定要翻译的虚拟键代码。【wScanCode】指定要翻译的键的硬件扫描代码。该键的高位被设置为键。【lpKeyState】指向包含当前键盘状态的256字节数组。数组中的每


-------------------------------------------------------- KeyWin32TrackMouseEvent ----
TrackMouseEvent    [New - Windows NT]当鼠标指针离开窗口或者在窗口上悬停指定的时间时，TrackMouseEvent函数会发布消息。
语法
参数
【lpEventTrack】指向TRACKMOUSEEVENT结构。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.函


-------------------------------------------------------- KeyWin32TrackPopupMenu ----
TrackPopupMenu    TrackPopupMenu函数在指定位置显示快捷菜单，并跟踪菜单中项目的选择。快捷菜单可以出现在屏幕上的任何地方。
语法
参数
【HMENU】标识要显示的快捷菜单。可以通过调用CreatePopupMenu创建新的快捷菜单或通过调用GetSubMenu来检索与现有菜单项相关联的子菜单的句柄来获取句柄。【uFlags】


-------------------------------------------------------- KeyWin32TrackPopupMenuEx ----
TrackPopupMenuEx    [Now Supported on Windows NT]TrackPopupMenuEx函数在指定位置显示快捷菜单，并跟踪快捷菜单上项目的选择。快捷菜单可以出现在屏幕上的任何地方。
语法
参数
【HMENU】手柄到要显示的快捷菜单。可以通过调用CreatePopupMenu函数创建新的快捷菜单或通过调用GetSubMenu函数来检索与现有菜单项相关联的子菜单的句柄来获取该句柄。【f


-------------------------------------------------------- KeyWin32TransactNamedPipe ----
TransactNamedPipe    TransactNamedPipe函数将单个网络操作组合到从指定的命名管道写入消息并从其读取消息的函数。
语法
参数
【hNamedPipe】标识CreateNamedPipe或CreateFile函数返回的命名管道。【lpInBuffer】指向包含写入管道的数据的缓冲区。【nInBufferSize】指定


-------------------------------------------------------- KeyWin32TranslateAccelerator ----
TranslateAccelerator    TranslateAccelerator函数处理菜单命令的加速键。该函数将WM_KEYDOWN或WM_SYSKEYDOWN消息转换为WM_COMMAND或WM_SYSCOMMAND消息（如果在指定的加速器表中有密钥条目），然后将WM_COMMAND或WM_SYSCOMMAND消息直接发送到相应的窗口程序。TranslateAccelerator不会返回，直到窗口过程处理消息。
语法
参数
【的hWnd】标识要翻译其消息的窗口。【hAccTable】标识一个加速器表。加速表必须通过调用LoadAccelerators函数加载，或者通过调用CreateAcceleratorTab


-------------------------------------------------------- KeyWin32TranslateCharsetInfo ----
TranslateCharsetInfo    [Now Supported on Windows NT]TranslateCharsetInfo函数基于指定的字符集，代码页或字体签名值进行转换，将目标结构的所有成员设置为适当的值。
语法
参数
【lpSrc】由【dwFlags中】参数定义的地址或值。如果【dwFlags中】为TCI_SRCFONTSIG，则此参数为FONTSIGNATURE结构fsCsb成员的地址。否则，此参数是3


-------------------------------------------------------- KeyWin32TranslateMDISysAccel ----
TranslateMDISysAccel    TranslateMDISysAccel函数处理与指定的MDI客户机窗口相关联的多文档界面（MDI）子窗口的窗口菜单命令的加速键击。该函数将WM_KEYUP和WM_KEYDOWN消息转换为WM_SYSCOMMAND消息，并将其发送到相应的MDI子窗口。
语法
参数
【hWndClient】标识MDI客户端窗口。【LPMSG】指向使用GetMessage或PeekMessage函数检索到的邮件。消息必须是MSG结构，并包含应用程序消息队列中的消息信息。



-------------------------------------------------------- KeyWin32TranslateMessage ----
TranslateMessage    TranslateMessage函数将虚拟键消息转换为字符消息。字符消息被发布到调用线程的消息队列中，以便下次线程调用GetMessage或PeekMessage函数时被读取。
语法
参数
【LPMSG】指向MSG结构，其中包含使用GetMessage或PeekMessage函数从调用线程的消息队列中检索的消息信息。
返回值
如果消息被翻译（即，字符消息被发布到线程的消息队


-------------------------------------------------------- KeyWin32TransmitCommChar ----
TransmitCommChar    TransmitCommChar函数在指定通信设备的输出缓冲区中的任何待处理数据之前传送指定的字符。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【灰烬】指定要发送的字符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用Get


-------------------------------------------------------- KeyWin32TryEnterCriticalSection ----
TryEnterCriticalSection    [New - Windows NT]TryEnterCriticalSection函数尝试在不阻止的情况下输入关键部分。如果呼叫成功，呼叫线程将获得关键部分的所有权。
语法
参数
【lpCriticalSection】指定临界区对象。
返回值
如果关键部分成功输入或当前线程已经拥有关键部分，则返回值不为零。如果另一个线程已经拥有关键部分，则返回值为零。
描述



-------------------------------------------------------- KeyWin32UInt32x32To64 ----
UInt32x32To64    UInt32x32To64函数将两个无符号32位整数相乘，返回一个无符号的64位整数结果。该函数在所有Win32平台上执行最佳。
语法
参数
【乘数】指定乘法的第一个无符号32位整数。【被乘数】指定乘法的第二个无符号32位整数。
返回值
返回值是乘法的无符号64位整数结果。
描述
该函数通过最佳内联代码在所有平台上实现：单


-------------------------------------------------------- KeyWin32UndeleteFile ----
UndeleteFile  UndeleteFile函数是一个应用程序定义的回调函数，当用户从“文件管理器文件”菜单中选择“取消删除”命令时，文件管理器将调用该函数。
语法



-------------------------------------------------------- KeyWin32UnhandledExceptionFilter ----
UnhandledExceptionFilter    如果进程被调试，UnhandledExceptionFilter函数将未处理的异常传递给调试器。否则，它可选地显示一个应用程序错误消息框，并导致异常处理程序被执行。只能从尝试  -  除异常处理程序的过滤器表达式中调用此函数。
语法
参数
【ExceptionInfo】指向EXCEPTION_POINTERS结构，其中包含异常描述和异常时的处理器上下文。该指针是调用GetExceptionInformation函数的返回值。



-------------------------------------------------------- KeyWin32UnhookWindowsHook ----
UnhookWindowsHook  UnhookWindowsHook函数已过时，但提供与16位版本Windows的兼容性。对于基于Win32的应用程序，请使用UnhookWindowsHookEx函数。


-------------------------------------------------------- KeyWin32UnhookWindowsHookEx ----
UnhookWindowsHookEx    UnhookWindowsHookEx函数通过SetWindowsHookEx函数删除挂钩链中安装的钩子过程。
语法
参数
【HHK】标识要删除的钩子。此参数是通过先前调用SetWindowsHookEx获得的钩子句柄。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。
描述
即使在Unho


-------------------------------------------------------- KeyWin32UnionRect ----
UnionRect    UnionRect函数创建两个矩形的并集。联合是包含两个源矩形的最小矩形。
语法
参数
【lprcDst】指向RECT结构的接收包含【lprcSrc1】和【lprcSrc2】参数指向的矩形的矩形。【lprcSrc1】指向包含第一个源矩形的RECT结构。【lprcSrc2】指向包


-------------------------------------------------------- KeyWin32UnloadKeyboardLayout ----
UnloadKeyboardLayout    UnloadKeyboardLayout函数删除键盘布局。
语法
参数
【HKL】标识要卸载的键盘布局。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。该函数可能失败，原因如下：*传递了无效的键盘布局句柄。*布局预加载。*布局正在使用中。



-------------------------------------------------------- KeyWin32UnlockFile ----
UnlockFile    UnlockFile函数解锁打开文件中的区域。解锁区域使其他进程可以访问该区域。
语法
参数
【HFILE】标识包含用LockFile锁定的区域的文件。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建文件句柄。【dwFileOffsetLow】指定锁定区域开


-------------------------------------------------------- KeyWin32UnlockFileEx ----
UnlockFileEx    UnlockFileEx函数解锁了打开文件中之前锁定的字节范围。
语法
参数
【HFILE】标识要将现有锁定区域解锁的文件的打开句柄。必须使用GENERIC_READ或GENERIC_WRITE访问该文件创建句柄。【//保留，必须设置为零】Reserved param


-------------------------------------------------------- KeyWin32UnlockResource ----
UnlockResource  UnlockResource函数已过时。此函数仅用于与16位版本的Windows兼容。基于Win32的应用程序不需要解锁资源。
另请参见
LoadResource, LockResource


-------------------------------------------------------- KeyWin32UnlockSegment ----
UnlockSegment  UnlockSegment函数已过时。此函数仅用于与16位版本的Windows兼容。段在32位环境中没有任何意义。


-------------------------------------------------------- KeyWin32UnlockServiceDatabase ----
UnlockServiceDatabase    UnlockServiceDatabase函数通过释放指定的锁来解锁服务控制管理器数据库。
语法
参数
【ScLock】指定从以前调用LockServiceDatabase函数获取的锁。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLast


-------------------------------------------------------- KeyWin32UnmapViewOfFile ----
UnmapViewOfFile    UnmapViewOfFile函数从调用进程的地址空间中解除映射的文件映射。
语法
参数
【lpBaseAddress】指向要解映射的文件的映射视图的基址。该值必须与先前调用MapViewOfFile或MapViewOfFileEx函数返回的值相同。
返回值
如果函数成功，则


-------------------------------------------------------- KeyWin32UnpackDDElParam ----
UnpackDDElParam    UnpackDDElParam函数将从发布的DDE消息中收到的DDE 【lParam的】值进行解包。
语法
参数
【味精】指定发布的DDE消息。【lParam的】指定已发送的DDE消息的【lParam的】参数。应用程序必须通过调用FreeDDElParam函数来释放【lParam的】参数指定的内存对象。


-------------------------------------------------------- KeyWin32UnrealizeObject ----
UnrealizeObject    UnrealizeObject函数重置逻辑调色板。它指示系统实现调色板，就好像它以前没有被实现一样。下一次应用程序调用指定调色板的RealizePalette函数时，系统会将逻辑调色板完全重新映射到系统调色板。如果【hgdiobj】是一个画笔，UnrealizeObject什么也不做，该函数返回TRUE。使用SetBrushOrgEx设置画笔的原点。
语法
参数
【hgdiobj】标识要重置的逻辑调色板。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
Unrealiz


-------------------------------------------------------- KeyWin32UnregisterClass ----
UnregisterClass    UnregisterClass函数删除一个窗口类，释放该类所需的内存。
语法
参数
【lpClassName】指向一个空值终止的字符串或是一个整数原子。如果此参数是整数原子，则它必须是由先前调用GlobalAddAtom函数创建的全局原子。原子，小于0xC000的16位值必


-------------------------------------------------------- KeyWin32UnregisterHotKey ----
UnregisterHotKey    UnregisterHotKey函数释放先前由调用线程注册的热键。
语法
参数
【的hWnd】标识与要释放的热键相关联的窗口。如果热键不与窗口相关联，则该参数应为NULL。【id】指定要释放的热键的标识符。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为


-------------------------------------------------------- KeyWin32UpdateColors ----
UpdateColors    UpdateColors函数通过将客户区中的当前颜色重新映射到当前实现的逻辑调色板来更新指定设备上下文的客户区。
语法
参数
【HDC】标识设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.
描述
应用程序可以通过调用GetDev


-------------------------------------------------------- KeyWin32UpdateICMRegKey ----
UpdateICMRegKey    UpdateICMRegKey函数安装，删除或查询标识ICC颜色配置文件或颜色匹配DLL的注册表项。该函数执行【nCommand】参数指定的动作。
语法
参数
【//保留，必须设置为零】Reserved; must be zero.【CMID】要与配置文件一起使用的颜色匹配DLL的配置文件标识符。【lpszFileName】指向根据【nComman


-------------------------------------------------------- KeyWin32UpdateResource ----
UpdateResource    UpdateResource函数添加，删除或替换可执行文件中的资源。
语法
参数
【更新】指定一个更新文件句柄。该句柄由BeginUpdateResource函数返回。【//值类型缓冲区的地址】指向要终止的字符串，指定要更新的资源类型。此参数也可以是传递给MAKEINTR


-------------------------------------------------------- KeyWin32UpdateWindow ----
UpdateWindow    如果窗口的更新区域不为空，则UpdateWindow函数通过向窗口发送WM_PAINT消息来更新指定窗口的客户区。该函数将WM_PAINT消息直接发送到指定窗口的窗口过程，绕过应用程序队列。如果更新区域为空，则不会发送任何消息。
语法
参数
【的hWnd】标识要更新的窗口。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。



-------------------------------------------------------- KeyWin32ValidateRect ----
ValidateRect    ValidateRect函数通过从指定窗口的更新区域中移除矩形来验证矩形内的客户区。
语法
参数
【的hWnd】标识要更新其更新区域的窗口。如果此参数为NULL，Windows将无效并重新绘制所有窗口，并在函数返回之前将WM_ERASEBKGND和WM_NCPAINT消息发送到窗口过程。


-------------------------------------------------------- KeyWin32ValidateRgn ----
ValidateRgn    ValidateRgn函数通过从指定窗口的当前更新区域中删除区域来验证区域内的客户区。
语法
参数
【的hWnd】标识要更新其更新区域的窗口。【HRGN】标识定义要从更新区域中删除的区域的区域。如果此参数为NULL，则将删除整个客户机区域。
返回值
如果函数成功，返回值不为零。如果函数


-------------------------------------------------------- KeyWin32VerFindFile ----
VerFindFile    根据是否在系统中找到文件的另一个版本，VerFindFile函数决定了在哪里安装文件。指定缓冲区中的值VerFindFile返回值将用于后续调用VerInstallFile.与其他文件安装函数一样，VerFindFile只能与Win32文件映像配合使用。不支持16位Windows文件映像。
语法
参数
【dwFlags中】包含一个标志的位掩码。该参数可以是以下值：旗描述VFFF_ISSHAREDFILE源文件可以由多个应用程序共享。应用程序可以使用此信息来确定文件应在哪里复制。
所有其他


-------------------------------------------------------- KeyWin32VerInstallFile ----
VerInstallFile    VerInstallFile函数根据VerFindFile函数返回的信息尝试安装指定的文件。VerInstallFile解压缩文件，如有必要，分配唯一的文件名，并检查错误，如过时的文件。与其他文件安装函数一样，VerInstallFile只能与Win32文件映像配合使用。不支持16位Windows文件映像。
语法
参数
【uFlags】包含一个标志的位掩码。此参数可以是以下值之一：旗描述VIFF_FORCEINSTALL安装文件，不管版本号不一致。该函数仅在安装过程中检查物理错误。VIFF_DONTDELE


-------------------------------------------------------- KeyWin32VerLanguageName ----
VerLanguageName    VerLanguageName函数检索与指定的二进制Microsoft语言标识符相关联的语言的描述字符串。
语法
参数
【wLang】指定二进制Microsoft语言标识符。有关Win32支持的语言标识符的完整列表，请参阅语言标识符.例如，与语言标识符0x040A相关联的描述字符串是“西班牙语（传统排序）”。


-------------------------------------------------------- KeyWin32VerQueryValue ----
VerQueryValue    VerQueryValue函数从指定的版本信息资源返回所选版本信息。要检索相应的资源，必须在VerQueryValue之前调用GetFileVersionInfo函数。与其他文件安装函数一样，VerQueryValue只能与Win32文件映像配合使用。不支持16位Windows文件映像。
语法
参数
【pBlock】指向包含GetFileVersionInfo返回的版本信息资源的缓冲区。【lpSubBlock】指向一个零终止的字符串，指定要检索的版本信息值。字符串由以反斜杠（\\）分隔的


-------------------------------------------------------- KeyWin32VirtualAlloc ----
VirtualAlloc    VirtualAlloc函数在调用进程的虚拟地址空间中保留或提交一个页面区域。由此函数分配的内存将自动初始化为零。
语法
参数
【lpAddress】指定要分配的区域的所需起始地址。如果正在保留内存，则指定的地址将舍入到下一个64千字节的边界。如果存储器已经被保留并被提交，地址被向下舍入到下一页边界。要确定主机上页面


-------------------------------------------------------- KeyWin32VirtualAllocEx ----
VirtualAllocEx    [New - Windows NT]VirtualAllocEx函数在指定进程的虚拟地址空间中保留，提交或同时存储内存区域。该函数初始化其分配给零的内存。
语法
参数
【hProcess】处理过程。该函数在该进程的虚拟地址空间内分配内存。您必须具有PROCESS_VM_OPERATION访问权限。如果没有，则该函数失败。【lpAddress】指针，指定要分


-------------------------------------------------------- KeyWin32VirtualFree ----
VirtualFree    VirtualFree函数在调用进程的虚拟地址空间中释放或分解（或两者）一个页面的区域。
语法
参数
【lpAddress】指向要释放的页面的基地址。如果【dwFreeType】参数包含MEM_RELEASE标志，则当该页面被保留时，此参数必须是VirtualAlloc函数返回的基址。【的d


-------------------------------------------------------- KeyWin32VirtualFreeEx ----
VirtualFreeEx    [New - Windows NT]VirtualFreeEx函数在指定进程的虚拟地址空间内释放，分解或同时释放内存区域。
语法
参数
【hProcess】处理过程。该函数释放此进程的虚拟地址空间内存。您必须具有此进程的PROCESS_VM_OPERATION权限。如果没有，则该函数失败。【lpAddress】指向要释放的内


-------------------------------------------------------- KeyWin32VirtualLock ----
VirtualLock    VirtualLock函数将进程的虚拟地址空间的指定区域锁定到内存中，确保对该区域的后续访问不会导致页面错误。
语法
参数
【lpAddress】指向要锁定的页面的基地址。【的dwSize】指定要锁定的区域的大小（以字节为单位）。受影响页面的所有页面包含从【lpAddress】参数到（【lpAddress】 + 


-------------------------------------------------------- KeyWin32VirtualProtect ----
VirtualProtect    VirtualProtect函数可以更改调用进程虚拟地址空间中已提交页面的访问保护。此函数不同于VirtualProtectEx ,，它会更改任何进程的访问保护。
语法
参数
【lpAddress】指向要更改其访问保护属性的页面区域的基址。必须在VirtualAlloc或VirtualAllocEx函数的一次调用中分配指定区域中的所有页面。这些页面不能跨越通过单独


-------------------------------------------------------- KeyWin32VirtualProtectEx ----
VirtualProtectEx    VirtualProtectEx函数可以更改指定进程的虚拟地址空间中已提交页面区域的访问保护。请注意，此函数与VirtualProtect不同，只会调用调用进程的访问保护。
语法
参数
【hProcess】标识要更改其内存保护的进程。句柄必须具有PROCESS_VM_OPERATION权限。有关PROCESS_VM_OPERATION的更多信息，请参阅OpenProcess


-------------------------------------------------------- KeyWin32VirtualQuery ----
VirtualQuery    VirtualQuery函数提供有关调用进程的虚拟地址空间中的一系列页面的信息。
语法
参数
【lpAddress】指向要查询的页面的基地址。该值向下舍入到下一页边界。要确定主机上的页面大小，请使用GetSystemInfo函数。【lpBuffer】指向MEMORY_BASIC_IN


-------------------------------------------------------- KeyWin32VirtualQueryEx ----
VirtualQueryEx    VirtualQueryEx函数提供有关指定进程的虚拟地址空间内的一系列页面的信息。
语法
参数
【hProcess】标识查询其内存信息的进程。句柄必须具有PROCESS_QUERY_INFORMATION权限。【lpAddress】指向要查询的页面的基地址。该值向下舍入到下一页边界。要


-------------------------------------------------------- KeyWin32VirtualUnlock ----
VirtualUnlock    VirtualUnlock函数解锁进程的虚拟地址空间中的指定范围的页面，如果需要，系统可以将页面切换到页面文件。
语法
参数
【lpAddress】指向要解锁的页面的基地址。【的dwSize】指定要解锁的区域的大小（以字节为单位）。受影响页面的区域包括从【lpAddress】参数到（【lpAddress】 + 【的


-------------------------------------------------------- KeyWin32VkKeyScan ----
VkKeyScan    VkKeyScan函数将字符转换为当前键盘的相应虚拟键代码和移位状态。
语法
参数
【ch】指定要转换为虚拟键代码的字符。
返回值
如果函数成功，返回值的低位字节包含虚拟键代码，高位字节包含移位状态，它可以是以下标志位的组合：位含义1按SHIFT键。2按住CTRL键。4


-------------------------------------------------------- KeyWin32VkKeyScanEx ----
VkKeyScanEx    [Now Supported on Windows NT]VkKeyScanEx函数将字符转换为相应的虚拟键代码和移位状态。该函数使用由给定的键盘布局句柄标识的输入语言和物理键盘布局来翻译字符。
语法
参数
【ch】指定要转换为虚拟键代码的字符。【dwhkl】标识用于翻译字符的键盘布局。此参数可以是以前由LoadKeyboardLayout函数返回的任何键盘布局句柄。
返回值
如果函数成功，


-------------------------------------------------------- KeyWin32VwStreamCloseFunc ----
VwStreamCloseFunc关闭文件。文件解析器必须执行任何必要的清理，例如关闭与给定文件相关的任何其他打开的文件。VOID VwStreamCloseFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32VwStreamOpenFunc ----
VwStreamOpenFunc检查指定文件的有效性并返回有关文件解析器的信息。INT VwStreamOpenFunc（SOFILE 【HFILE】, INT 【wFileId】, U_BYTE VWPTR 【*pFileName】, SOFILTERINFO VWPTR 【*pFilterInfo】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32VwStreamReadFunc ----
VwStreamReadFunc根据当前部分类型和文件内容输出字符，单元格或字段。INT VwStreamReadFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32VwStreamReadRecordFunc ----
VwStreamReadRecordFunc通过调用各种流输出函数输出单个记录。此函数应输出单个记录，然后在返回之前使用SO_RECORDBREAK值调用SOPutBreak函数。SO_EOFBREAK和SO_SECTIONBREAK条件不需要被此函数所困扰。VOID VwStreamReadRecordFunc（SOFILE 【HFILE】, DWORD 【dwDatacy】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32VwStreamSectionFunc ----
VwStreamSectionFunc设置部分的参数。至少这个函数应该调用SOPutSectionType和SOPutSectionName函数来设置段类型和名称。如果该部分是电子表格，则该函数还应设置单元格宽度，如果该部分是数据库，则也应该设置字段格式。显示引擎在调用VwStreamOpenFunc函数后调用VwStreamReadFunc函数之前调用该函数。在任何VwStreamReadFunc结束后，还会调用具有SO_SECTIONBREAK值的SOPutBreak函数。INT VwStreamSectionFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32VwStreamSeekFunc ----
VwStreamSeekFunc与线路滤波器相同的定义搜索函数。INT VwStreamSeekFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32VwStreamTellFunc ----
VwStreamTellFunc与线路滤波器相同的定义告诉函数。INT VwStreamTellFunc（SOFILE 【HFILE】, HPROC 【保留的】 );



-------------------------------------------------------- KeyWin32WaitCommEvent ----
WaitCommEvent    WaitCommEvent函数等待指定通信设备发生事件。由该函数监视的事件集包含在与设备句柄相关联的事件掩码中。
语法
参数
【HFILE】识别通信设备。CreateFile函数返回此句柄。【lpEvtMask】指向一个32位变量，接收一个指示发生的事件类型的掩码。如果发生错误，则该值为零;否则，它是以下值之一：值


-------------------------------------------------------- KeyWin32WaitForDebugEvent ----
WaitForDebugEvent    WaitForDebugEvent函数等待调试事件发生在被调试的进程中。
语法
参数
【lpDebugEvent】指向DEBUG_EVENT结构，其中填写有关调试事件的信息。【dwMilliseconds】指定等待调试事件的毫秒数。如果此参数为零，该函数将测试调试事件并立即返


-------------------------------------------------------- KeyWin32WaitForInputIdle ----
WaitForInputIdle    WaitForInputIdle函数等待直到给定进程正在等待用户输入，没有输入挂起，或直到超时间隔过去。
语法
参数
【hProcess】标识过程。【dwMilliseconds】指定超时间隔（以毫秒为单位）。如果【dwMilliseconds】为INFINITE，该函数在进程空闲之前不会返回。
返回值



-------------------------------------------------------- KeyWin32WaitForMultipleObjects ----
WaitForMultipleObjects    当发生以下其中一种情况时，WaitForMultipleObjects函数返回：*任何一个或所有指定的对象都处于信号状态。*经过了超时间隔。
语法
参数
【NCOUNT】指定【lpHandles】指向的数组中的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS。【lpHandles】指向一组对象句柄。有关可以指定句柄的对


-------------------------------------------------------- KeyWin32WaitForMultipleObjectsEx ----
WaitForMultipleObjectsEx    当发生以下其中一种情况时，WaitForMultipleObjectsEx函数返回：*任何一个或所有指定的对象都处于信号状态。* I / O完成例程或异步过程调用（APC）排队等待线程。*经过了超时间隔。
语法
参数
【NCOUNT】指定在【lpHandles】指向的数组中等待的对象句柄数。对象句柄的最大数量为MAXIMUM_WAIT_OBJECTS。【lpHandles】指向一组对象句柄。有关可以指定句


-------------------------------------------------------- KeyWin32WaitForPrinterChange ----
WaitForPrinterChange  WaitForPrinterChange函数已过时。此函数仅用于与16位版本的Windows兼容。在打印机或打印服务器上发生一个或多个请求的更改时，基于Win32的应用程序应使用FindFirstPrinterChangeNotification，FindNextPrinterChangeNotification和FindClosePrinterChangeNotification函数来监视打印机或打印服务器上发生的请求的更改。


-------------------------------------------------------- KeyWin32WaitForSingleObject ----
WaitForSingleObject    当发生以下其中一种情况时，WaitForSingleObject函数返回：*指定的对象处于信号状态。*经过了超时间隔。
语法
参数
【hHandle】标识对象。有关可以指定句柄的对象类型的列表，请参阅以下备注部分。Windows NT：句柄必须具有SYNCHRONIZE访问权限。有关详细信息，请参阅访问掩码和访问权限.【


-------------------------------------------------------- KeyWin32WaitForSingleObjectEx ----
WaitForSingleObjectEx    当发生以下其中一种情况时，WaitForSingleObjectEx函数返回：*指定的对象处于信号状态。* I / O完成例程或异步过程调用（APC）排队等待线程。*经过了超时间隔。
语法
参数
【hHandle】标识对象。有关可以指定句柄的对象类型的列表，请参阅以下备注部分。Windows NT：句柄必须具有SYNCHRONIZE访问权限。有关详细信息，请参阅访问掩码和访问权限.【


-------------------------------------------------------- KeyWin32WaitMessage ----
WaitMessage    当线程在其消息队列中没有其他消息时，WaitMessage函数可以控制其他线程。WaitMessage函数暂停线程，直到新消息被放置在线程的消息队列中才会返回。
语法
参数
此函数无参数。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.



-------------------------------------------------------- KeyWin32WaitNamedPipe ----
WaitNamedPipe    WaitNamedPipe函数等待直到超时间隔或指定的命名管道的实例可用于连接（即，管道的服务器进程在管道上具有待处理的ConnectNamedPipe操作）。
语法
参数
【lpNamedPipeName】指向一个以空字符结尾的字符串，指定命名管道的名称。字符串必须包含服务器进程正在执行的计算机的名称。如果管道是本地的，则可以使用【服务器名称】的时间段。使用以


-------------------------------------------------------- KeyWin32WideCharToMultiByte ----
WideCharToMultiByte    WideCharToMultiByte函数将宽字符字符串映射到新的字符串。新的字符串不一定来自多字节字符集。
语法
参数
【CodePage】指定用于执行转换的代码页。该参数可以被赋予在系统中安装或可用的任何代码页的值。以下值可用于指定系统默认代码页之一：值含义CP_ACPANSI代码页CP_MACCPMaci


-------------------------------------------------------- KeyWin32WidenPath ----
WidenPath    WidenPath函数将当前路径重新定义为要使用当前选定的笔在指定设备上下文中绘制路径时绘制的区域。
语法
参数
【HDC】标识包含封闭路径的设备上下文。
返回值
如果函数成功，返回值不为零。如果函数失败，返回值为零。要获取扩展错误信息，请调用GetLastError.GetLastError可能会


-------------------------------------------------------- KeyWin32WindowFromDC ----
WindowFromDC    WindowFromDC函数返回与给定显示设备上下文（DC）关联的窗口的句柄。使用给定设备上下文的输出函数绘制到此窗口中。
语法
参数
【hDC】标识要检索关联窗口的句柄的设备上下文。
返回值
如果函数成功，则返回值是与给定显示设备上下文相关联的窗口的句柄。如果函数失败，返回值为NULL。



-------------------------------------------------------- KeyWin32WindowFromPoint ----
WindowFromPoint    WindowFromPoint函数检索包含指定点的窗口的句柄。
语法
参数
【点】指定一个定义要检查点的POINT结构。
返回值
如果函数成功，则返回值是包含该点的窗口的句柄。如果给定点没有窗口，则返回值为NULL。
描述
即使该点在窗口内，WindowFr


-------------------------------------------------------- KeyWin32WindowProc ----
WindowProc    WindowProc函数是一个应用程序定义的回调函数，用于处理发送到窗口的消息。
语法
参数
【HWND】标识窗口。【uMsg】指定消息。【wParam中】指定附加消息信息。该参数的内容取决于【uMsg】参数的值。【lParam的】指定附加消息信息。该参数的内容取决于【uMsg】参数


-------------------------------------------------------- KeyWin32WinExec ----
WinExec    WinExec函数运行指定的应用程序。提供此函数以兼容早期版本的Windows。对于基于Win32的应用程序，请使用CreateProcess函数。
语法
参数
【lpCmdLine】指向包含要执行的应用程序的命令行（filename加上可选参数）的以null结尾的字符串。如果【lpCmdLine】参数中的可执行文件的名称不包含目录路径，Window


-------------------------------------------------------- KeyWin32WinHelp ----
WinHelp    WinHelp函数启动Windows帮助（WINHELP.EXE），并传递指示应用程序请求的帮助性质的其他数据。应用程序指定要显示的帮助文件的名称以及需要的目录路径。
语法
参数
【hWndMain】标识请求帮助的窗口。WinHelp函数使用此句柄来跟踪哪些应用程序已请求帮助。【lpszHelp】指向包含路径的空终止字符串（如有必要）以及帮助应用程序要显示的帮助文件的


-------------------------------------------------------- KeyWin32WinLoadTrustProvider ----
WinLoadTrustProvider[New - Windows NT]WinLoadTrustProvider函数将信任提供者DLL加载到调用进程的地址空间中。该函数将已注册的信任提供程序加载为能够处理指定的操作标识符。您可以使用WinLoadTrustProvider来确定本地计算机是否具有支持指定操作标识符的信任提供程序。WinLoadTrustProvider不执行该操作。
语法
参数
【ActionID】指向标识信任提供者操作的GUID结构的指针。WinTrust服务旨在与由第三方实施的信任提供商合作。每个信任提供者都提供自己唯一的一组操作标识符。有关信任提供程序支持的操


-------------------------------------------------------- KeyWin32WinMain ----
WinMain    系统调用WinMain函数作为基于Win32的应用程序的初始入口点。
语法
参数
【的hInstance】标识应用程序的当前实例。【hPrevInstance】标识应用程序的上一个实例。对于基于Win32的应用程序，此参数始终为空。如果需要检测是否存在另一个实例，请使用C


-------------------------------------------------------- KeyWin32WinSubmitCertificate ----
WinSubmitCertificate[New - Windows NT]WinSubmitCertificate函数将WIN_CERTIFICATE结构传递给所有在WinTrust服务器上注册的信任提供者。
语法
参数
【lpCertificate】指向WIN_CERTIFICATE结构。
返回值
如果函数成功，则返回值为非零值。如果【lpCertificate】参数无效，返回值为零。要获取扩展错误信息


-------------------------------------------------------- KeyWin32WinTrustProviderClientInitialize ----
WinTrustProviderClientInitialize[New - Windows NT]WinTrustProviderClientInitialize函数是WinTrust在加载信任提供者DLL的客户端组件时调用的初始化函数。每个信任提供者必须导出WinTrustProviderClientInitialize函数。
语法
参数
【dwWinTrustRevision】表示调用此函数的WinTrust组件的修订级别。WinTrust将此值设置为WIN_TRUST_REVISION_1_0。【lpWinTrustInf


-------------------------------------------------------- KeyWin32WinTrustProviderClientUnload ----
WinTrustProviderClientUnload[New - Windows NT]WinTrustProviderClientUnload函数表示WinTrust准备从客户端应用程序卸载信任提供者DLL。但是，WinTrust不保证在客户端进程退出之前调用此函数。因此，如有必要，信任提供者应使用其他清理机制。
语法
参数
【lpTrustProviderInfo】指向信任提供者在初始化过程中分配的缓冲区。信任提供者在WinTrustProviderClientInitialize呼叫中将此指针传递给WinTr


-------------------------------------------------------- KeyWin32WinTrustProviderPing ----
WinTrustProviderPing[New - Windows NT]WinTrustProviderPing函数使信任提供商的客户端组件与其服务器对应方联系。WinTrust的当前版本不包括WinTrust服务器组件。因此，WinTrust不实现此函数，并且信任提供者DLL不需要实现它。
语法
参数
【lpProviderName】指向包含信任提供程序名称的以null结尾的Unicode字符串。系统管理员将此名称分配给用于存储信任提供程序的配置信息的注册表项。WinTrust将此名称传递


-------------------------------------------------------- KeyWin32WinTrustProviderServerInitialize ----
WinTrustProviderServerInitialize[New - Windows NT]WinTrustProviderServerInitialize函数是WinTrust在加载信任提供者DLL的服务器组件时调用的初始化函数。WinTrust的当前版本不包括WinTrust服务器组件。因此，WinTrust不会调用此函数，并且信任提供者DLL不需要导出它。
语法
参数
【dwWinTrustRevision】表示调用此函数的WinTrust组件的修订级别。WinTrust将此值设置为WIN_TRUST_REVISION_1_0。【lpWinTrustInf


-------------------------------------------------------- KeyWin32WinTrustProviderServerUnload ----
WinTrustProviderServerUnload[New - Windows NT]WinTrustProviderServerUnload函数表示WinTrust准备从WinTrust服务器进程卸载信任提供者DLL。WinTrust的当前版本不包括WinTrust服务器组件。因此，信任提供者DLL不需要实现此函数。
语法
参数
【lpTrustProviderInfo】指向信任提供者在初始化过程中分配的缓冲区。信任提供者在WinTrustProviderServerInitialize呼叫中将此指针传递给WinTr


-------------------------------------------------------- KeyWin32WinTrustProviderSubmitCertificate ----
WinTrustProviderSubmitCertificate[New - Windows NT]WinTrustProviderSubmitCertificate函数将WIN_CERTIFICATE结构传递给信任提供者。当应用程序调用{??989796014}函数时，WinTrust将加载并调用所有注册的信任提供者的WinTrustProviderSubmitCertificate函数。
语法
参数
【lpCertificate】指向可能包含信任提供者感兴趣的证书的WIN_CERTIFICATE结构。
返回值
没有。
描述
每个信任提供者可以保存证书供将来使用，也可以忽略它。Wi


-------------------------------------------------------- KeyWin32WinTrustProviderVerifyTrust ----
WinTrustProviderVerifyTrust[New - Windows NT]WinTrustProviderVerifyTrust函数对指定的主题执行指定的验证操作。当应用程序调用{??989796013}函数时，WinTrust调用支持指定操作标识符的信任提供者的WinTrustProviderVerifyTrust函数。
语法
参数
【HWND】处理来电者的窗口。信任提供者可以使用该值来确定它是否可以与用户交互以执行由动作标识符指示的验证操作。然而，信任提供者通常执行验证操作而不需要用户的输入。此参数可以是以下值之一。值


-------------------------------------------------------- KeyWin32WinTrustSipInitialize ----
WinTrustSipInitialize[New - Windows NT]WinTrustSipInitialize函数是WinTrust加载主题接口包（SIP）DLL时调用的初始化函数。每个SIP都必须导出一个WinTrustSipInitialize函数。
语法
参数
【dwWinTrustRevision】表示调用此函数的WinTrust组件的修订级别。WinTrust将此值设置为WIN_TRUST_REVISION_1_0。【lpSipInfo】指向接


-------------------------------------------------------- KeyWin32WinTrustSubjectCheckContentInfo ----
WinTrustSubjectCheckContentInfo[New - Windows NT]WinTrustSubjectCheckContentInfo函数验证指定的证书是否充分表示指定主题的内容。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，描述要与证书进行比较的主题。【lpSignedData】指向WIN_CERT_TYPE_PKCS_SIGNED


-------------------------------------------------------- KeyWin32WinTrustSubjectEnumCertificates ----
WinTrustSubjectEnumCertificates[New - Windows NT]WinTrustSubjectEnumCertificates函数确定主题中捆绑的证书的类型。您可以检索主题包含的所有证书类型的列表，或者您可以确定主题是否包含指定的证书类型。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识从中获取证书信息的主题。【dwTypeFilter】指定要列出的证书类型。此参数可以为零以列出所有类型


-------------------------------------------------------- KeyWin32WinTrustSubjectGetCertHeader ----
WinTrustSubjectGetCertHeader[New - Windows NT]WinTrustSubjectGetCertHeader函数从指定的主题中检索WIN_CERTIFICATE结构的标头部分。来电者指定要检索的证书的类型。返回的信息不包括WIN_CERTIFICATE结构的bCertificate成员中的数据。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识从中获取证书头的主题。【dwCertificateIndex】指定要检索的证书的类型。您可以调用Win


-------------------------------------------------------- KeyWin32WinTrustSubjectGetCertificate ----
WinTrustSubjectGetCertificate[New - Windows NT]WinTrustSubjectGetCertificate函数从主题中检索指定的证书。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识从中获取证书的主题。【dwCertificateIndex】指定要检索的证书的类型。您可以调用WinT


-------------------------------------------------------- KeyWin32WinTrustSubjectGetName ----
WinTrustSubjectGetName[New - Windows NT]WinTrustSubjectGetName函数从表示主题的PKCS＃7签名数据证书中检索主题的名称。信任提供者可以使用该名称来存储和检索与该主题相关联的证书。
语法
参数
【lpSubject】指向WIN_TRUST_SIP_SUBJECT结构的指针，用于标识主题的类型。请注意，该函数从【lpSignedData】结构中检索主题的名称，而不是主题。【lpSig


-------------------------------------------------------- KeyWin32WinVerifyTrust ----
WinVerifyTrust[New - Windows NT]WinVerifyTrust函数对指定的主题执行指定的验证操作。该函数将查询传递给支持操作标识符的信任提供者（如果有的话）。
语法
参数
【HWND】处理来电者的窗口。信任提供者可以使用此值来确定它是否可以与用户交互。然而，信任提供者通常使用来自用户的输入执行验证操作。此参数可以是以下值之一。值含义INVALID_HANDLE


-------------------------------------------------------- KeyWin32WNetAddConnection ----
WNetAddConnection    WNetAddConnection函数使呼叫应用程序能够将本地设备连接到网络资源。一个成功的连接是持久的，这意味着Windows会在后续的登录操作中自动恢复连接。提供此函数以兼容早期版本的Microsoft Windows。对于新的应用程序，请使用WNetAddConnection2函数。
语法
参数
【lpRemoteName】指向指定要连接到的网络资源的以空字符结尾的字符串。【//指向密码字符串的指针】指向以空字符结尾的字符串，指定用于进行连接的密码。此参数通常是与当前用户相关联的密码


-------------------------------------------------------- KeyWin32WNetAddConnection2 ----
WNetAddConnection2    WNetAddConnection2函数连接到网络资源。该函数可以将本地设备重定向到网络资源。
语法
参数
【lpNetResource】指向NETRESOURCE结构，指定建议连接的详细信息：有关网络资源，本地设备和网络资源提供程序的信息。您必须指定NETRESOURCE结构的以下成员：会员描述


-------------------------------------------------------- KeyWin32WNetAddConnection3 ----
WNetAddConnection3    WNetAddConnection3函数连接到网络资源。该函数可以将本地设备重定向到网络资源。
语法
参数
【hwndOwner】指定网络资源提供者可以用作对话框的所有者窗口的窗口。【hwndOwner】参数可能为NULL。如果是，则呼叫WNetAddConnection3相当于调用WNetAdd


-------------------------------------------------------- KeyWin32WNetCancelConnection ----
WNetCancelConnection    WNetCancelConnection函数打破了现有的网络连接。该函数是为兼容早期版本的Microsoft Windows而提供的。对于新的应用程序，请使用WNetCancelConnection2函数。
语法
参数
【lpName】指向一个以null结尾的字符串，指定重定向本地设备或要断开连接的远程网络资源的名称。当此参数指定重定向本地设备时，只有指定的设备重定向被破坏。如果参数指定了远程网络资源，则只


-------------------------------------------------------- KeyWin32WNetCancelConnection2 ----
WNetCancelConnection2    WNetCancelConnection2函数打破了现有的网络连接。它也可以用于删除当前未连接的记忆网络连接。此函数取代WNetCancelConnection.
语法
参数
【lpName】指向一个以null结尾的字符串，指定重定向本地设备或要断开连接的远程网络资源的名称。如果此参数指定重定向的本地资源，则只会指定重定向;否则，到远程网络资源的所有连接都将被破坏


-------------------------------------------------------- KeyWin32WNetCloseEnum ----
WNetCloseEnum    WNetCloseEnum函数将结束由WNetOpenEnum函数启动的网络资源枚举。
语法
参数
【henu】标识枚举实例。这个句柄必须由WNetOpenEnum函数返回。
返回值
如果函数成功，返回值为NO_ERROR。如果函数失败，则返回值是错误代码。要获取扩展错误信息，请调用G


-------------------------------------------------------- KeyWin32WNetConnectionDialog ----
WNetConnectionDialog    WNetConnectionDialog函数启动一个常规浏览对话框，用于连接到网络资源。
语法
参数
【HWND】标识所属窗口。【dwType】指定允许连接的资源类型。该参数可以是以下值：值含义RESOURCETYPE_DISK连接到磁盘资源。
返回值
如果函数成功，返回值为NO_ERR


-------------------------------------------------------- KeyWin32WNetDisconnectDialog ----
WNetDisconnectDialog    WNetDisconnectDialog函数启动一个常规浏览对话框，以断开与网络资源的连接。
语法
参数
【HWND】标识所属窗口。【dwType】指定要断开连接的资源类型。此参数可能是以下值之一：值含义RESOURCETYPE_DISK断开与磁盘资源的连接。RESOURCETYPE_PRINT


-------------------------------------------------------- KeyWin32WNetEnumResource ----
WNetEnumResource    WNetEnumResource函数继续由WNetOpenEnum函数启动的网络资源枚举。
语法
参数
【henu】标识枚举实例。此句柄必须由WNetOpenEnum返回。【lpcCount】指向指定所请求条目数的变量。如果请求的号码为0xFFFFFFFF，则该函数返回尽可能多的条目。当函数成


-------------------------------------------------------- KeyWin32WNetGetConnection ----
WNetGetConnection    WNetGetConnection函数检索与本地设备关联的网络资源的名称。
语法
参数
【lpLocalName】指向以null结尾的字符串，指定获取网络名称的本地设备的名称。【lpRemoteName】指向缓冲区，接收用于进行连接的以空值终止的远程名称。【lpnLength】


-------------------------------------------------------- KeyWin32WNetGetLastError ----
WNetGetLastError    WNetGetLastError函数检索由Windows网络函数设置的最新的扩展错误代码。
语法
参数
【// pointer to error code】指向接收网络提供商报告的错误代码的变量。错误代码特定于网络提供商。【lpErrorBuf】指向缓冲区，它接收描述错误的以null结尾的字符


-------------------------------------------------------- KeyWin32WNetGetUniversalName ----
WNetGetUniversalName    WNetGetUniversalName函数为网络资源采用基于驱动器的路径，并获取包含更通用形式的名称的数据结构。
语法
参数
【lpLocalPath】指向作为网络资源的基于驱动器的路径的以null结尾的字符串。例如，如果驱动器H已映射到网络驱动器共享，并且感兴趣的网络资源是该共享目录\\ WIN32 \\ EXA


-------------------------------------------------------- KeyWin32WNetGetUser ----
WNetGetUser    WNetGetUser函数检索用于建立网络连接的当前默认用户名或用户名。
语法
参数
【lpName】指向以空值终止的字符串，指定已重定向到网络资源的本地设备的名称，或指定已建立连接的网络资源的远程名称。如果此参数为NULL，Windows将返回该进程的当前用户的名称。【lp


-------------------------------------------------------- KeyWin32WNetOpenEnum ----
WNetOpenEnum    WNetOpenEnum函数启动网络资源或现有连接的枚举。
语法
参数
【dwScope】指定枚举的范围。此参数可以是以下值之一：值含义RESOURCE_CONNECTED所有当前连接的资源（【dwUsage】参数被忽略）。RESOURCE_GLOBALNET网


-------------------------------------------------------- KeyWin32WriteConsole ----
WriteConsole    WriteConsole函数将字符串写入从当前光标位置开始的控制台屏幕缓冲区。
语法
参数
【hConsoleOutput】标识要写入的控制台屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpBuffer】指向包含要写入屏幕缓冲区的字符的缓冲区。【nNumberOfCh


-------------------------------------------------------- KeyWin32WriteConsoleInput ----
WriteConsoleInput    WriteConsoleInput函数将数据直接写入控制台输入缓冲区。
语法
参数
【hConsoleInput】标识输入缓冲区。句柄必须具有GENERIC_WRITE权限。【lpBuffer】指向包含要写入输入缓冲区的数据的INPUT_RECORD缓冲区。【nLength


-------------------------------------------------------- KeyWin32WriteConsoleOutput ----
WriteConsoleOutput    WriteConsoleOutput函数将字符和颜色属性数据写入控制台屏幕缓冲区中指定的矩形块字符单元格。要写入的数据取自源缓冲器中指定位置的相应尺寸的矩形块。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpBuffer】指向包含要写入屏幕缓冲区的数据的源缓冲区。该指针被视为由【dwBufferSi


-------------------------------------------------------- KeyWin32WriteConsoleOutputAttribute ----
WriteConsoleOutputAttribute    WriteConsoleOutputAttribute函数将一些前景和背景颜色属性复制到控制台屏幕缓冲区的连续单元格，从指定位置开始。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpAttribute】指向包含要写入屏幕缓冲区的属性的缓冲区。【nLength】指定要写入的屏


-------------------------------------------------------- KeyWin32WriteConsoleOutputCharacter ----
WriteConsoleOutputCharacter    WriteConsoleOutputCharacter函数将从指定位置开始，将多个字符复制到控制台屏幕缓冲区的连续单元格。
语法
参数
【hConsoleOutput】标识屏幕缓冲区。句柄必须具有GENERIC_WRITE权限。【lpCharacter】指向包含要写入屏幕缓冲区的字符的缓冲区。【nLength】指定要写入的屏


-------------------------------------------------------- KeyWin32WriteFile ----
WriteFile    WriteFile函数将数据写入一个文件，并设计用于同步和异步操作。该函数开始在文件指针指示的位置将数据写入文件。写入操作完成后，文件指针将按实际写入的字节数进行调整，除非使用FILE_FLAG_OVERLAPPED打开文件。如果为重叠输入和输出（I / O）创建了文件句柄，则在写操作完成后，应用程序必须调整文件指针的位置。
语法
参数
【HFILE】标识要写入的文件。必须使用GENERIC_WRITE访问该文件创建文件句柄。Windows NT对于异步写入操作，【HFILE】可以是使用CreateFile函数的FILE_F


-------------------------------------------------------- KeyWin32WriteFileEx ----
WriteFileEx    WriteFileEx函数将数据写入文件。它专为异步操作而设计，不同于专为同步和异步操作而设计的WriteFile.
语法
参数
【HFILE】指定要写入的文件实体的打开句柄。必须使用FILE_FLAG_OVERLAPPED标志创建该文件句柄，并使用该文件对GENERIC_WRITE进行访问。Windows NT： 【


-------------------------------------------------------- KeyWin32WritePrinter ----
WritePrinter    WritePrinter函数通知打印后台处理程序数据应写入指定的打印机。
语法
参数
【hPrinter】标识打印机。【PBUFlb】指向包含应写入打印机的数据的字节数组。【cbBuf】指定数组的大小（以字节为单位）。【of variable with count of by


-------------------------------------------------------- KeyWin32WritePrivateProfileSection ----
WritePrivateProfileSectionWritePrivateProfileSection函数将替换初始化文件中指定部分下的键和值。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结束的字符串，其中包含写入数据的部分的名称。此部分名称通常是呼叫应用程序的名称。【lpString】指向缓冲区，其中包含写入命名部分的新密钥名称和相关


-------------------------------------------------------- KeyWin32WritePrivateProfileString ----
WritePrivateProfileStringWritePrivateProfileString函数将字符串复制到指定的初始化文件的指定部分。此函数用于与16位基于Windows的应用程序兼容。基于WIn32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结束的字符串，其中包含要复制字符串的部分的名称。如果该部分不存在，则创建它。该部分的名称与案例无关;字符串可以是大写和小写字母的任何组合。【lpKey


-------------------------------------------------------- KeyWin32WritePrivateProfileStruct ----
WritePrivateProfileStructWritePrivateProfileStruct函数将数据复制到初始化文件的给定部分中的指定键中。当它复制数据时，该函数计算校验和并将其附加到数据的末尾。GetPrivateProfileStruct函数使用校验和来确保数据的完整性。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpszSection】指向一个以null结束的字符串，其中包含要复制字符串的部分的名称。如果该部分不存在，则创建它。该部分的名称是不区分大小写的，字符串可以是大写和小写字母的任何组合。【


-------------------------------------------------------- KeyWin32WriteProcessMemory ----
WriteProcessMemory    WriteProcessMemory函数在指定的进程中写入内存。要写入的整个区域必须可访问，否则操作失败。
语法
参数
【hProcess】标识要写入内存的进程的打开句柄。该句柄必须具有PROCESS_VM_WRITE和PROCESS_VM_OPERATION访问进程。【lpBaseAddress】指向要写入


-------------------------------------------------------- KeyWin32WriteProfileSection ----
WriteProfileSectionWriteProfileSection函数用指定的键和值替换WIN.INI文件中指定部分的内容。此函数用于与16位Windows应用程序的兼容性。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结束的字符串，其中包含写入数据的部分的名称。此部分名称通常是呼叫应用程序的名称。【lpString】指向缓冲区，其中包含写入命名部分的新密钥名称和相关


-------------------------------------------------------- KeyWin32WriteProfileString ----
WriteProfileStringWriteProfileString函数将一个字符串复制到WIN.INI文件的指定部分。此函数用于与16位基于Windows的应用程序兼容。基于Win32的应用程序应该将初始化信息存储在注册表中。
语法
参数
【lpAppName】指向一个以null结尾的字符串，指定要复制字符串的部分。如果该部分不存在，则创建它。该部分的名称不区分大小写;字符串可以是大写和小写字母的任何组合。【lpKeyName


-------------------------------------------------------- KeyWin32WriteTapemark ----
WriteTapemark    WriteTapemark函数将指定数量的文件标记，设置标记，短文件标记或长文件标记写入磁带设备。这些标记将磁带分区划分为较小的区域。
语法
参数
【hDevice】标识要写入标记的设备。该句柄是通过使用CreateFile函数创建的。【dwTapemarkType】指定要写入的标记的类型。此参数可以是以下值之一：值描述TAPE_FIL


-------------------------------------------------------- KeyWin32wsprintf ----
wsprintf    wsprintf函数格式化并将一系列字符和值存储在缓冲区中。根据格式字符串中的相应格式规范，将任何参数转换并复制到输出缓冲区。该函数向其写入的字符附加一个终止空字符，但返回值不包括字符计数中的终止空字符。
语法
参数
【LPOUT】指向缓冲区以接收格式化的输出。【lpFmt】指向包含格式控制规范的以null结尾的字符串。除了普通ASCII字符外，每个参数的格式说明都会出现在此字符串中。有关格式说明的详细信


-------------------------------------------------------- KeyWin32wvsprintf ----
wvsprintf     函数wvsprintf函数将一系列字符和值存储在缓冲区中。参数列表指向的项目根据格式控制字符串中的相应格式规范进行转换并复制到输出缓冲区。该函数向其写入的字符附加一个终止空字符，但返回值不包括字符计数中的终止空字符。
语法
参数
【POUTPUT】指向缓冲区以接收格式化的输出。【lpFormat】指向包含格式控制规范的以null结尾的字符串。除了普通ASCII字符外，每个参数的格式说明都会出现在此字符串中。有关格式规


-------------------------------------------------------- KeyWin32Yield ----
Yield  产量函数已过时。此函数仅用于与16位版本的Windows兼容。在基于Win32的应用程序编程接口（API）中，此函数不起作用。包含窗口的线程应使用DispatchMessage，PeekMessage或TranslateMessage函数。消息循环函数处理消息同步，并在适当的时间产生。不包含窗口的线程应使用休眠时间为零毫秒的睡觉函数放弃其当前时间片段的剩余部分。创建进程的线程可以使用WaitForInputIdle等待新进程完成初始化。
另请参见
DispatchMessage, PeekMessage, 睡觉, TranslateMessage, WaitForInputIdle


-------------------------------------------------------- KeyWin32ZeroMemory ----
ZeroMemory    ZeroMemory函数用零填充一个内存块。
语法
参数
【目的地】指向内存块的起始地址以填充零。【长度】指定要用零填充的内存块的大小（以字节为单位）。
返回值
该函数没有返回值。



-------------------------------------------------------- KeyWin32_hread ----
_hread     _hread函数从指定的文件读取数据。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用ReadFile函数。
语法
参数
【HFILE】标识指定的文件。【lpBuffer】指向包含从文件读取的数据的缓冲区。【lBytes】指定要从文件读取的字节数。
返回值
返回值表示从文件中实际读取的字节数。如果读取的字节


-------------------------------------------------------- KeyWin32_hwrite ----
_hwrite    _hwrite函数将数据写入指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用WriteFile函数。
语法
参数
HFILE标识指定的文件。lpBuffer指向包含要写入文件的数据的缓冲区。lBytes指定要写入文件的字节数。
返回值
如果函数成功，则返回值表示实际写入文件的字节数。如果函数失败，返


-------------------------------------------------------- KeyWin32_lclose ----
_lclose    _lclose函数关闭指定的文件，使其不再可用于阅读或写入。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CloseHandle函数。
语法
参数
【HFILE】标识要关闭的文件。该句柄由创建或最后打开文件的函数返回。
返回值
如果函数成功，返回值为零。如果函数失败，返回值为HFILE_ERROR。要获取扩展错误信息，请调用GetL


-------------------------------------------------------- KeyWin32_lcreat ----
_lcreat    _lcreat函数创建或打开指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CreateFile函数。
语法
参数
【lpPathName】指向以空字符结尾的字符串，指定要打开的文件。字符串必须由Windows ANSI字符集的字符组成。【//文件属性】指定文件属性。此参数必须是以下值之一：值含义0正常（


-------------------------------------------------------- KeyWin32_llseek ----
_llseek    _llseek函数重新定位以前打开的文件中的文件指针。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用SetFilePointer函数。
语法
参数
【HFILE】标识文件。【我偏移fy】指定文件指针要移动的字节数。【iOrigin】指定文件指针的起始位置和方向。此参数必须是以下值之一：值含义FILE_BEGIN从文件的开头移动文件指针【


-------------------------------------------------------- KeyWin32_lopen ----
_lopen     _lopen函数打开现有文件，并将文件指针设置为文件的开头。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用CreateFile函数。
语法
参数
【lpPathName】指向以空字符结尾的字符串，指定要打开的文件。字符串必须由Windows ANSI字符集的字符组成。【iReadWrite】指定打开文件的方式。该参数由一个访问模式和可


-------------------------------------------------------- KeyWin32_lread ----
_lread     _lread函数从指定的文件读取数据。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用ReadFile函数。
语法
参数
【HFILE】标识指定的文件。【lpBuffer】指向包含从文件读取的数据的缓冲区。【指向包含要写入文件的数据的缓冲区。】指定要从文件读取的字节数。
返回值
返回值表示从文件中实际读取的


-------------------------------------------------------- KeyWin32_lwrite ----
_lwrite    _lwrite函数将数据写入指定的文件。此函数用于与16位版本的Windows兼容。基于Win32的应用程序应使用WriteFile函数。
语法
参数
【HFILE】标识指定的文件。【lpBuffer】指向包含要写入文件的数据的缓冲区。【指向包含要写入文件的数据的缓冲区。】指定要写入文件的字节数。
返回值
如果函数成功，则返回值表示实际


-------------------------------------------------------- KeyPgAbs ----

Abs   ¾ø¶ÔÖµ
  
¼ÆËãÊı×ÖµÄ¾ø¶ÔÖµ

Óï·¨
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

ÓÃ·¨
result = Abs( number )

²ÎÊı
number
ÖµÒªÕÒµ½¾ø¶ÔÖµ¡£

·µ»ØÖµ
µÄ¾ø¶ÔÖµ¡£number

ÃèÊö
Êı×ÖµÄ¾ø¶ÔÖµÊÇÆäÕıÁ¿¼¶¡£Èç¹ûÄ³¸öÊı×ÖÎª¸ºÊı£¬ÔòÆäÖµ½«±»·ñ¶¨£¬²¢·µ»ØÕı½á¹û¡£ÀıÈç£¬Á½Õß¶¼·µ»Ø ¡£±ØĞèµÄ²ÎÊı¿ÉÒÔÊÇÈÎºÎÓĞĞ§µÄÊıÖµ±í´ïÊ½¡£
ÎŞ·ûºÅÊı×Ö½«±»ÊÓÎªÓĞ·ûºÅ£¬¼


-------------------------------------------------------- KeyPgAbstract ----

Abstract   ³éÏó·½·¨
  
ÉùÃ÷³éÏó·½·¨

Óï·¨
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

ÃèÊö
AbstractÊÇ µÄÒ»ÖÖÌØÊâĞÎÊ½¡£²»Í¬Ö®´¦ÔÚÓÚ³éÏó·½·¨Ã»ÓĞÖ÷Ìå£¬¶øÖ»ÓĞÉùÃ÷¡£´Ó±¾ÖÊÉÏ½²£¬ÕâÔÊĞíÉùÃ÷Ò»¸ö½Ó¿Ú£¬¸Ã½Ó¿Ú¿ÉÒÔÓÉ¸÷ÖÖÅÉÉúÀàĞÍÊµÏÖ¡£
ÎªÁËµ÷ÓÃ³éÏó·½·¨£¬Ëü±ØĞëÒÑ±»ÅÉÉúÊı¾İÀàĞÍÖØĞ´ºÍÊµ


-------------------------------------------------------- KeyPgAccess ----

Access   ·ÃÎÊÈ¨
  
ÓÃÓÚÖ¸¶¨ËùÇëÇóÌØÈ¨µÄÓï¾ä×Ó¾äOpen

Óï·¨
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

ÓÃ·¨
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

²ÎÊı
Read
½öÒÔ¶ÁÈ¡È¨ÏŞ´ò¿ªÎÄ¼ş¡£
Write
½öÒÔĞ´ÈëÈ¨ÏŞ´ò¿ªÎÄ¼ş¡£
Read Write
Ê¹ÓÃ¶ÁÈ¡ºÍĞ´ÈëÈ¨ÏŞ´ò¿ªÎÄ¼ş¡£

ÃèÊö
Acces


-------------------------------------------------------- KeyPgAcos ----

Acos   ·´ÓàÏÒ
  
²éÕÒ½Ç¶ÈµÄ·´ÓàÏÒ

Óï·¨
Declare Function Acos ( ByVal number As Double ) As Double

ÓÃ·¨
result = Acos( number )

²ÎÊı
number
·¶Î§Îª [-1..1] µÄÓàÏÒÖµ¡£

·µ»ØÖµ
µÄ·´ÓàÏÒ£¬ÒÔ»¡¶ÈÎªµ¥Î»£¬ÔÚ [0..Pi] ·¶Î§ÄÚ¡£number

ÃèÊö
Acos½«²ÎÊıµÄ·´ÓàÏÒ×÷Îª 0 ·¶Î§ÄÚµÄ a ·µ»Øµ½ Pi¡£·´ÓàÏÒÊÇº¯Êı


-------------------------------------------------------- KeyPgAddGfx ----

Add   Ìí¼Ó
  
Í¼ĞÎÓï¾äµÄ²ÎÊı£¬¸ÃÓï¾äÑ¡Ôñ¼Ó·¨×÷Îª blliting ·½·¨Put

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

²ÎÊı
Add
±ØÌî¡£
multiplier
½éÓÚ 0 ºÍ 255 Ö®¼äµÄ¿ÉÑ¡Öµ¡£Ô´ÏñËØÔÚÌí¼ÓÖ®Ç°»á±»Ô¤³Ë¡£Èç¹ûÊ¡ÂÔ£¬´ËÖµÄ¬ÈÏÎª 255¡£(multiplier / 256)

ÃèÊö
AddÑ¡Ôñ¼Ó·¨×÷ÎªÉ¾³ıÍ¼Ïñ»º³åÇøµÄ·½·¨¡£¶ÔÓÚÃ¿¸öÔ´ÏñËØºÍÄ¿±êÏñËØ£¬½«Ã¿¸öÏàÓ¦·ÖÁ¿µÄÖµÏà¼ÓÒÔÉú³É½á¹û¡£
¼Ó·¨ÊÇ±¥ºÍµÄ - ¼´Èç¹ûÁ½¸öÖµµÄ×


-------------------------------------------------------- KeyPgAlias ----

Alias (Name)   ±ğÃû
  
Ìá¹©±¸ÓÃÄÚ²¿Ãû³ÆµÄ and Óï¾äµÄ×Ó¾ä¡£SubFunction

Óï·¨
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

ÓÃ·¨
declare sub usablename Alias "alternatename" ( ... )
»ò
declare function usablename Alias "alternatename" ( ... )
»ò
sub usablename Alias "alternatename" ( ... )
...
end sub
»ò
function usablename Alias "alternatename" ( ... )
...
end function
»ò
type typename Alias "alternatename" ( ... )
...
end type

ÃèÊö
AliasÎª¹ı³ÌÌá¹©±¸ÓÃÃû³Æ¡£´Ë±¸ÓÃÃû³Æ²»ÄÜÔÚ³ÌĞòÖĞÓÃÓÚµ÷ÓÃ¸Ã¹ı³Ì£¬µ«ÔÚÊ¹ÓÃÆäËûÓïÑÔ±àĞ´µÄ´úÂë½øĞĞÁ´½ÓÊ±£¬Á´½ÓÆ÷¿ÉÒÔ¿´µ½´Ë±¸ÓÃÃû³Æ£¨Èç¹ûº¯Êı²»ÊÇË½ÓĞµÄ£©¡£
Í¨³£ÓÃÓÚÓÃÆäËûÓïÑ


-------------------------------------------------------- KeyPgAliasModifier ----

Alias (Modifier)   ±ğÃû
  
ĞŞ¸Ä¹«¹²·ûºÅµÄÊı¾İÀàĞÍÃû³ÆĞŞÊÎ£¨ĞŞÊÎ£©

Óï·¨
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

ÓÃ·¨
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

²ÎÊı
datatype
ÒªĞŞ¸ÄµÄ±ê×¼Êı¾İÀàĞÍ»òÓÃ»§¶¨ÒåµÄÊı¾İÀàĞÍ
modifier
Ö§³ÖµÄĞŞÊÎ·ûÖ®Ò»£¬ÈçÏÂÃæµÄ¡°ËµÃ÷¡±²¿·ÖËùÊö
ÃèÊö
Alias "modifier"£¬µ±ÔÚÊı¾İÀàĞÍÖ®ºóÖ¸¶¨Ê±£¬»áÎªÊı¾İÀàĞÍÌá¹©ÁíÒ»ÖÖº¬Òå£¬Õâ¶ÔÓÚÓë FreeBASIC ÒÔÍâµÄÓïÑÔ½øĞĞÁ´½ÓÊ±¿ÉÄÜĞèÒª¡£
¹«¹²


-------------------------------------------------------- KeyPgAllocate ----

Allocate   ·ÖÅäÄÚ´æ
  
´ÓÃâ·Ñ´æ´¢Çø·ÖÅäÄÚ´æ¿é

Óï·¨
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

ÓÃ·¨
result = Allocate( count )

²ÎÊı
count
Òª·ÖÅäµÄÄÚ´æ¿éµÄ´óĞ¡£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÒÑ·ÖÅäÄÚ´æµÄÆğÊ¼µØÖ·¡£·ñÔò£¬Èç¹ûÎŞ·¨·ÖÅäÇëÇóµÄ¿é´óĞ¡£¬»òÕßÈç¹û £¬Ôò·µ»Ø¿ÕÖ¸Õë £¨£©¡£count < 00

ÃèÊö
³¢ÊÔ´ÓÃâ·Ñ´æ´¢£¨¶Ñ£©ÖĞ·ÖÅä»ò±£Áô×Ö½ÚÊı¡£ĞÂ·ÖÅäµÄÄÚ´æÎ´³õÊ¼»¯¡£
ÓÉÓÚĞÂ·ÖÅäµÄÄÚ´æµÄ³õÊ¼ÖµÎ´Ö¸¶¨£¬Òò´Ë²


-------------------------------------------------------- KeyPgAlphaGfx ----

Alpha   aÍ¨µÀ
  
Í¼ĞÎÓï¾äµÄ²ÎÊı£¬¸ÃÓï¾äÑ¡Ôñ alpha »ìºÏ×÷Îª·½·¨Put

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

²ÎÊı
Alpha
±ØÌî¡£
alphaval
·¶Î§ [0..255] ÖĞµÄ¿ÉÑ¡ alpha ²ÎÊı¡£¸²¸Çµ¥¸öÏñËØÖĞµÄ Alpha Öµ¡£

ÃèÊö
AlphaÑ¡Ôñ Alpha »ìºÏ×÷Îªµ÷É«Í¼ÏñµÄ·½·¨¡£Èç¹ûÖ¸¶¨ÁË¸Ã²ÎÊı£¬Ëü½«¸²¸ÇÃ¿¸öÏñËØµÄ alpha Öµ£¬²¢ÇÒÃÉ°æÑÕÉ«£¨ÑóºìÉ«£©½«±»ÊÓÎªÍ¸Ã÷¡£ÕâÊÊÓÃÓÚ 15¡¢16¡¢24 »ò 


-------------------------------------------------------- KeyPgAndGfx ----

And   ºÍ
  
Í¼ĞÎÓï¾äµÄ²ÎÊı£¬¸ÃÓï¾äÊ¹ÓÃ°´Î»×÷Îª blitting ·½·¨PutAnd

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

²ÎÊı
And
±ØÌî¡£

ÃèÊö
¸Ã·½·¨Ê¹ÓÃ°´Î»º¯Êı½«Ã¿¸öÔ´ÏñËØÓëÏàÓ¦µÄÄ¿±êÏñËØ×éºÏÔÚÒ»Æğ¡£ÕâÑù×öµÄ½á¹ûÊÇÊä³öÎªÄ¿±êÏñËØ¡£
´Ë·½·¨ÊÊÓÃÓÚËùÓĞÍ¼ĞÎÄ£Ê½¡£Ã»ÓĞÕÚÕÖÑÕÉ«£¬¾¡¹ÜÉèÖÃÁËËùÓĞÎ»µÄÑÕÉ«Öµ£¨¶ÔÓÚ 8 Î»µ


-------------------------------------------------------- KeyPgAny ----

Any   ÈÎÒâ
  
¸Ã¹Ø¼ü×ÖÒÔ¸÷ÖÖ·½Ê½ÓÃ×÷ÀàĞÍ»òÖµµÄÕ¼Î»·û¡£Any

Óï·¨
Dim identifier As Any Pointer|Ptr
orororororor
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )

Dim identifier(Any [, Any...]) As DataType

[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType  )

Dim identifier As DataType = Any

New DataType ( Any )

New(Address) DataType [count] { Any }

InStr|InStrRev ( string, Any substring )

ÃèÊö
Ö¸Õë£º
³ÆÎª £¨»ò ¡°¡±£© µÄÌØÊâÖ¸ÕëÀàĞÍÔÊĞíÖ¸ÏòÈÎºÎ±äÁ¿ÀàĞÍ¡£Èç¹û½«Æä×ª»»Îª £¬Ôò¿ÉÒÔ¶ÔÆä½øĞĞË÷Òı»òÈ¡ÏûÒıÓÃ£¬ÒÔ·ÃÎÊ×÷Îª µÄÊµÀı·ÃÎÊÄÚ´æ¡£ÔÊĞíÔÚ ÉÏÊ¹ÓÃÖ¸ÕëËãÊõ£¬²¢½«ÆäÊÓÎª 


-------------------------------------------------------- KeyPgAppend ----

Append   ×·¼Ó
  
Ö¸¶¨ÒªÎª×·¼ÓÄ£Ê½´ò¿ªµÄÎÄ±¾ÎÄ¼ş

Óï·¨
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

²ÎÊı
filename
Òª´ò¿ªÒÔ½øĞĞ×·¼ÓµÄÎÄ¼şÃû
encoding_type
Ö¸Ê¾ÎÄ¼şµÄ±àÂëÀàĞÍ
lock_type
Ëø¶¨ÒÔÔÚÎÄ¼ş´ò¿ªÊ±Ê¹ÓÃ
filenum
ÒªÓë´ò¿ªµÄÎÄ¼ş¹ØÁªµÄÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ

ÃèÊö
ÓÃÓÚ´ò¿ªÎÄ±¾ÎÄ¼ş½øĞĞĞ´ÈëµÄÎÄ¼şÄ£Ê½¡£
´ËÄ£Ê½ÓÃÓÚÏòÏÖÓĞÎÄ¼şÌí¼ÓÎÄ±¾£¬»ò½«¶ººÅ·Ö¸ôµÄÖµÓë ¡£
ÎÄ±¾ÎÄ¼ş²»ÄÜÔÚFreeBASICÖĞÍ¬Ê±¶Á


-------------------------------------------------------- KeyPgArrayLen ----

Arraylen
  
Ìá¹©¸ø¶¨Êı×éÃû³ÆµÄÊı×éµÄ³¤¶È¡£

Óï·¨
Declare Function ArrayLen ( arrayname() As Const Any ) As UInteger

ÓÃ·¨
#include once "fbc-int/array.bi"
using FB
...
result = ArrayLen(arrayname())

²ÎÊı
arrayname
·µ»ØÆä³¤¶ÈµÄÊı×éµÄÃû³Æ¡£

ÃèÊö
·µ»Ø ÓÉ


-------------------------------------------------------- KeyPgArraySize ----

Arraysize
  
Ìá¹©¸ø¶¨Êı×éÃû³ÆµÄÊı×éµÄ´óĞ¡¡£

Óï·¨
Declare Function ArraySize ( arrayname() As Const Any ) As UInteger

ÓÃ·¨
#include once "fbc-int/array.bi"
using FB
...
result = ArraySize(arrayname())

²ÎÊı
arrayname
·µ»ØÆä´óĞ¡µÄÊı×éµÄÃû³Æ¡£

ÃèÊö
·µ»ØÓÉ £¨Êı×éÔªËØµÄ´


-------------------------------------------------------- KeyPgAs ----

As   Îª
  
Ö¸¶¨Êı¾İÀàĞÍµÄÉùÃ÷µÄÒ»²¿·Ö£¬»òÖ¸¶¨ÎÄ¼ş¾ä±úµÄ Open Óï¾äµÄÒ»²¿·Ö¡£

Óï·¨
symbolname As datatype

Open ... As #filenumber
Type ... As datatype

ÃèÊö
AsÓÃÓÚÉùÃ÷±äÁ¿¡¢×Ö¶Î»ò²ÎÊıµÄÀàĞÍ£¬Ò²ÓÃÓÚÔÚÓï¾äÖĞ


-------------------------------------------------------- KeyPgAsc ----

Asc   ×Ö·ûÈ¡ÂëÖµ
  
·µ»Ø×Ö·ûµÄÏàÓ¦ ASCII »ò Unicode ÕûÊı±íÊ¾ĞÎÊ½¡£

Óï·¨
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

ÓÃ·¨
result = Asc( str [, position ] )

²ÎÊı
str
Ô´×Ö·û´®¡£
position
×Ö·û×Ö·û´®ÖĞµÄÎ»ÖÃ¡£

·µ»ØÖµ
´æ´¢ÔÚ ÖĞµÄÔ­Ê¼×Ö·ûÖµ¡£
Èç¹ûÁ½Õß¶¼¿ÉÒÔÔÚ±àÒëÊ±¼ÆËã£¨Èç »ò »ò ...£©£¬ÔòÔÚ½á¹ûÖĞ·µ»ØÖµ£¬·ñÔòÔÚ½á¹ûÖĞ·µ»Ø¡£positionstrstrpositionAsc("a")Asc(chr(97))Asc("abc", 2)UIntegerULong

ÃèÊö
Èç¹û ÊÇ a »ò a £¬Ôò·µ»Ø¸Ã´¦µÄÖµ¡£Õâ½«ÊÇÒ»¸ö 7 Î» ASCII ´úÂë£¬ÉõÖÁÊÇÄ³Ğ©´úÂëÒ³ÖĞµÄ 8 Î»×Ö·ûÖµ£¬¾ßÌåÈ¡¾


-------------------------------------------------------- KeyPgAsin ----

Asin   ·´ÕıÏÒ
  
²éÕÒÊı×ÖµÄ·´ÕıÏÒ

Óï·¨
Declare Function Asin ( ByVal number As Double ) As Double

ÓÃ·¨
result = Asin( number )

²ÎÊı
number
·¶Î§Îª [-1..1] µÄÕıÏÒÖµ¡£

·µ»ØÖµ
µÄ»¡ÕıÏÒ£¨ÒÔ»¡¶ÈÎªµ¥Î»£©£¬·¶Î§Îª [-Pi/2..Pi/2]¡£number

ÃèÊö
Asin½«²ÎÊıµÄ·´ÕıÏÒÖµ×÷Îª -Pi/2 µ½ Pi/2 ·¶Î§ÄÚµÄ a ·µ»Ø¡£·´ÕıÏÒÊÇº¯Ê


-------------------------------------------------------- KeyPgAsm ----

Asm   »ã±à
  
ÔÊĞíÊ¹ÓÃÌØ¶¨ÓÚÌåÏµ½á¹¹µÄÖ¸ÁîµÄ´úÂë¿é¡£

Óï·¨
Asm
architecture-dependent instructions
End Asm

»ò

Asm architecture-dependent instructions

ÃèÊö
¸Ã¿éÓÃÓÚÔÚ³ÌĞòÖĞ²åÈëÌØ¶¨µÄ»úÆ÷´úÂëÖ¸Áî£¬ÒÔ±ãÖ´ĞĞÎŞ·¨Ê¹ÓÃÓïÑÔ¹¦ÄÜÖ´ĞĞµÄ²Ù×÷£¬»òÊÖ¶¯ÓÅ»¯ĞÔÄÜÃô¸ĞµÄ´úÂë²¿·Ö¡£
µ±Ç°µÄ FreeBASIC ±àÒëÆ÷Ä¿Ç°Ö»Îª»ùÓÚÓ¢ÌØ¶û 80x86 µÄ»úÆ÷Éú³É´úÂ


-------------------------------------------------------- KeyPgAssert ----

Assert   ÖĞ¶ÏÖ´ĞĞ
  
µ÷ÊÔÔÚ±í´ïÊ½¼ÆËãÎª £¨false£© Ê±Í£Ö¹³ÌĞòÖ´ĞĞµÄºê¡£0

Óï·¨
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

ÓÃ·¨
Assert( expression )

²ÎÊı
expression
ÈÎºÎÓĞĞ§µÄÌõ¼ş/ÊıÖµ±í´ïÊ½¡£Èç¹û¼ÆËã½á¹ûÎª£¨¼´¡°false¡±£©£¬ÔòÍ£Ö¹Ö´ĞĞ¡£expression0

ÃèÊö
¸ÃºêÖ¼ÔÚÓÃÓÚµ÷ÊÔ£¬²¢ÇÒ½öµ± »ò -eassertfbcexpression0-g Î´´«µİ¸ø fbc¡¢¸Ãºê²»Éú³ÉÈÎºÎ´úÂëÇÒ²»Æğ×÷ÓÃÊ±²ÅÓĞĞ§¡£
×¢Òâ£ºÈç¹ûÔÚ³ÌĞòÎ»ÓÚÍ


-------------------------------------------------------- KeyPgAssertwarn ----

AssertWarn   µ÷ÊÔ¾¯¸æ
  
µ÷ÊÔÔÚ±í´ïÊ½µÄ¼ÆËã½á¹ûÎª 0 Ê±´òÓ¡¾¯¸æµÄºê¡£

Óï·¨
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

ÓÃ·¨
AssertWarn( expression )

²ÎÊı
expression
ÈÎºÎÓĞĞ§µÄ±í´ïÊ½¡£Èç¹û¼ÆËã½á¹ûÎª £¬Ôò»áÏò stderr £¨¿ØÖÆÌ¨£© ´òÓ¡Ò»Ìõ¾¯¸æÏûÏ¢¡£expression0

ÃèÊö
¸ÃºêÖ¼ÔÚÓÃÓÚµ÷ÊÔ£¬²¢ÇÒ½öµ±ÔÚ FBC ÃüÁîĞĞÖĞÑ¡ÔñÁË¸ÃÑ¡ÏîÊ±²ÅÓĞĞ§¡£ÔÚÕâÖÖÇé¿öÏÂ£¬Èç¹û¼ÆËã½á¹ûÎª


-------------------------------------------------------- KeyPgAtan2 ----

Atan2   ·´ÕıÇĞ2
  
·µ»Ø±ÈÂÊµÄ·´ÕıÇĞÖµ

Óï·¨
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

ÓÃ·¨
result = ATan2( y, x )

²ÎÊı
y
´¹Ö±·ÖÁ¿µÄ±ÈÂÊ¡£
x
±ÈÂÊµÄË®Æ½·ÖÁ¿¡£

·µ»ØÖµ
ÇĞÏßÎªµÄ½Ç¶È£¬ÒÔ»¡¶ÈÎªµ¥Î»£¬ÔÚ [-Pi..Ô²ÖÜÂÊ]¡£y/x

ÃèÊö
ATan2·µ»Ø±ÈÂÊµÄ·´ÕıÇĞÖµ£¬×÷Îª -Pi µ½ Pi ·¶Î§ÄÚµÄÖ


-------------------------------------------------------- KeyPgAtn ----

Atn   ·´ÕıÇĞ
  
·µ»ØÊı×ÖµÄ·´ÕıÇĞÖµ

Óï·¨
Declare Function Atn ( ByVal number As Double ) As Double

ÓÃ·¨
result = Atn( number )

²ÎÊı
number
Êı×Ö¡£

·µ»ØÖµ
½Ç¶È£¨ÒÔ»¡¶ÈÎªµ¥Î»£¬ÆäÇĞÏßÎª £©·¶Î§Îª [-Pi/2..Pi/2]¡£number

ÃèÊö
Atn½«²ÎÊıµÄ·´ÕıÇĞÖµ×÷Îª -Pi/2 µ½ Pi/2 ·¶Î§ÄÚµÄ a ·µ»Ø¡£·´ÕıÇĞÊÇº¯Êı


-------------------------------------------------------- KeyPgBase ----

Base (Member Access)   »ùÀà
  
Ìá¹©¶Ô ·Ç¾²Ì¬·½·¨ÖĞµÄ»ùÀàĞÍ³ÉÔ±µÄÏÔÊ½·ÃÎÊType

Óï·¨
Base.member
Base [ .Base ... ] .member

ÃèÊö
BaseÌá¹©ÁËÒ»ÖÖÔÚÓÃ»§¶¨ÒåÀàĞÍµÄ·Ç¾²Ì¬·½·¨µÄÉÏÏÂÎÄÖĞÏÔÊ½·ÃÎÊÌØ¶¨»ùÀàĞÍµÄ³ÉÔ±µÄ·½·¨£¬ÕâĞ©·½·¨Ê¹ÓÃ ÅÉÉú×ÔÁíÒ»ÖÖÀàĞÍ¡£
Í¨¹ıÖØ¸´Ê¹ÓÃ£¬Èç ÔÚ ÖĞ£¬¿ÉÒÔ·ÃÎÊÈÎºÎËùĞèµÄ»ùÀàĞÍ£¬ÒÔ·À


-------------------------------------------------------- KeyPgBaseInit ----

Base (Initializer)   »ùÀà
  
ÎªÅÉÉúµÄ Udt ¹¹Ôìº¯ÊıÖĞµÄ»ù±¾ UDT Ö¸¶¨³õÊ¼ÖµÉè¶¨Ïî

Óï·¨
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

ÃèÊö
³õÊ¼ÖµÉè¶¨Ïî¿ÉÓÃÓÚÅÉÉú UDT µÄ¹¹Ôìº¯ÊıµÄ¶¥²¿¡£ËüÔÊĞíÖ¸¶¨ÏÔÊ½¹¹Ôìº¯Êıµ÷ÓÃ»òÓÃÓÚ³õÊ¼»¯»ù¶ÔÏóµÄ UDT ³õÊ¼ÖµÉè¶¨Ïî¡£Ëü½«Ìæ»»ÒşÊ½Ä¬ÈÏ³õÊ¼»¯£¬²¢ÇÒ±ØĞë³öÏÖÔÚÊ¹ÓÃËüµÄ¹¹Ôìº¯ÊıÖĞµÄÈ


-------------------------------------------------------- KeyPgBeep ----

Beep   ÏìÁå
  
·¢³ö·äÃùÒô¡£

Óï·¨
Declare Sub Beep ( )

ÓÃ·¨
Beep

ÃèÊö
Beep¸æËßÏµÍ³·¢³ö·äÃùÉù¡£Çë×¢Òâ£¬Õâ¿ÉÄÜÔÚÄ³Ğ©Æ½Ì¨ÉÏ²»Æğ×÷ÓÃ¡£ÓÉÓÚ´ËÃüÁî²»¿É¿¿£¬²¢ÇÒÎŞ·¨Ö¸¶¨ÆµÂÊºÍ³ÖĞøÊ±¼ä£¬Òò´ËÄú¿ÉÄÜÏ£Íû±ÜÃâÊ¹ÓÃËü£¬ÒÔÖ§³


-------------------------------------------------------- KeyPgBin ----

Bin   ¶ş½øÖÆ
  
·µ»ØÕûÊıµÄ¶ş½øÖÆ£¨»ùÊıÎª 2£©×Ö·û´®±íÊ¾ĞÎÊ½

Óï·¨
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String

Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

ÓÃ·¨
result = Bin[$]( number [, digits ] )

²ÎÊı
number
¼ÆËãÎªÊı×ÖµÄÊı×Ö»ò±í´ïÊ½¡£¸¡µãÊı½«×ª»»Îª .LongInt
digits
·µ»ØµÄ×Ö·û´®ÖĞËùĞèµÄÎ»Êı¡£

·µ»ØÖµ
°üº¬ µÄÎŞ·ûºÅ¶ş½øÖÆ±íÊ¾ĞÎÊ½µÄ×Ö·û´®¡£number

ÃèÊö
·µ»ØÒ»¸ö×Ö·û´®£¬¸Ã×Ö·û´®±íÊ¾ÕûÊıµÄÎŞ·ûºÅ¶ş½øÖÆÖµ¡£¶ş½øÖÆÊı×ÖµÄ·¶Î§´Ó 0 µ½ 1¡£
Èç¹ûÖ¸¶¨ > 0£¬Ôò½á¹û×Ö·û´®½«Ç¡º


-------------------------------------------------------- KeyPgBinary ----

Binary   ¶ş½øÖÆÁ÷
  
Ö¸¶¨ÒªÎª¶ş½øÖÆÄ£Ê½´ò¿ªµÄÎÄ¼ş»òÉè±¸

Óï·¨
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

²ÎÊı
filename
Òª´ò¿ªµÄÎÄ¼şÃû
access_type
Ö¸Ê¾ÎÄ¼şÊÇ¿ÉÒÔ´ÓÖĞ¶ÁÈ¡¡¢Ğ´ÈëÎÄ¼ş»¹ÊÇÍ¬Ê±¶ÁÈ¡µ½Á½Õß
lock_type
Ëø¶¨ÒÔÔÚÎÄ¼ş´ò¿ªÊ±Ê¹ÓÃ
filenum
ÒªÓë´ò¿ªµÄÎÄ¼ş¹ØÁªµÄÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ

ÃèÊö
´ò¿ªÎÄ¼ş»òÉè±¸£¬ÓÃÓÚÒÔ×ÔÓÉ¸ñÊ½¶ÁÈ¡ºÍ/»òĞ´ÈëÎÄ¼şÖĞµÄ¶ş½øÖÆÊı¾İ¡£
Èç¹û¸ÃÎÄ¼ş²»´æÔÚ£¬Ôò½«´´½¨Ò»¸öĞÂÎÄ¼ş¡£ÎÄ¼ş


-------------------------------------------------------- KeyPgBit ----

Bit   Î»
  
»ñÈ¡ÕûÊıÖµÖĞµ¥¸öÎ»µÄ×´Ì¬¡£

Óï·¨
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

ÓÃ·¨
result = Bit( value, bit_number )

²ÎÊı
value
ÕûÊıÖµ¡£
bit_number
Î»µÄË÷Òı¡£

·µ»ØÖµ
·µ»ØÒ»¸öÖµ if Èç¹ûÉèÖÃÁË¸ÃÎ»£¬»òÕßÈç¹û¸ÃÎ»ÒÑÇå³ı¡£Integer-10

ÃèÊö
´ËºêÀ©Õ¹ÎªÒ»¸öÕûÊıÖµ£¬¸ÃÖµÖ¸Ê¾ Ö¸¶¨µÄÎ»ÊÇ·ñÔÚÕûÊı ÖĞÉèÖÃ¡£ĞĞÎªÎª¡°¡±¡£
µÄÓĞĞ§Öµ·¶Î§È¡¾öÓÚ '' µÄ´óĞ¡£¨ÒÔÎ»Îªµ¥Î»£©£¬¼´ ''£¨´Ó×îµÍÎ»¿ªÊ¼£©µ


-------------------------------------------------------- KeyPgBitreset ----

BitReset   Î»ÖØÖÃ
  
´Ó¸´ÖÆµÄÕûÊıÖĞ»ñÈ¡Çå³ıÖ¸¶¨Î»µÄÖµ¡£

Óï·¨
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

ÓÃ·¨
result = BitReset( value, bit_number )

²ÎÊı
value
ÕûÊıÖµ¡£
bit_number
ÒªÇå³ıµÄÎ»µÄË÷Òı¡£

·µ»ØÖµ
·µ»ØÒÑÇå³ıÖ¸¶¨Î»µÄÕûÊıÖµ¡£

ÃèÊö
´ËºêÀ©Õ¹ÎªÒÑÇå³ıÖ¸¶¨µÄÕûÊı£¨to off »ò ''£©µÄ¸±±¾¡£ĞĞÎªÎª¡°¡±¡£
ÒªÇå³ı±äÁ¿ÖĞµÄÖ¸¶¨Î»£¬¿ÉÒÔÊ¹ÓÃÒÔÏÂ¸³Öµ£º 
µÄÓĞĞ§Öµ·¶Î§È¡¾öÓÚ '' µÄ´óĞ¡£¨Ò


-------------------------------------------------------- KeyPgBitset ----

BitSet   Î»ÕûÊıÖµ
  
´Ó¸´ÖÆµÄÕûÊıÖĞ»ñÈ¡¾ßÓĞÖ¸¶¨Î»¼¯µÄÖµ¡£

Óï·¨
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

ÓÃ·¨
result = BitSet( value, bit_number )

²ÎÊı
value
ÕûÊıÖµ¡£
bit_number
ÒªÉèÖÃµÄÎ»µÄË÷Òı¡£

·µ»ØÖµ
·µ»ØÉèÖÃÁËÖ¸¶¨Î»µÄÕûÊıÖµ¡£

ÃèÊö
´ËºêÀ©Õ¹Îª¾ßÓĞÖ¸¶¨¼¯£¨to on »ò ''£©µÄÕûÊıµÄ¸±±¾¡£ĞĞÎªÎª¡°¡±¡£
ÒªÔÚ±äÁ¿ÖĞÉèÖÃÖ¸¶¨µÄÎ»£¬¿ÉÒÔÊ¹ÓÃÒÔÏÂ¸³Öµ£º 
µÄÖµµÄÓĞĞ§·¶Î§È¡¾öÓÚ '' µÄ´ó


-------------------------------------------------------- KeyPgBload ----

BLoad   Î»Í¼¼ÓÔØ
  
´ÓÊ¹ÓÃ ´´½¨µÄÎÄ¼ş»ò¼æÈİµÄ BMP Ó³ÏñÎÄ¼şÖĞ¼ÓÔØÈÎÒâÊı¾İ¡£BSave

Óï·¨
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

ÓÃ·¨
result = BLoad( filename [, [ dest ] [, pal ] ] )

²ÎÊı
filename
Òª´ÓÖĞ¼ÓÔØÍ¼ÏñµÄÎÄ¼şµÄÃû³Æ;¿ÉÒÔ°üº¬ÎÄ¼şÂ·¾¶
dest
Òª½«Í¼Ïñ¼ÓÔØµ½µÄÄÚ´æÎ»ÖÃ£¬»ò null £¨£© ½«Í¼Ïñ¸´ÖÆµ½µ±Ç°Í¼ĞÎÆÁÄ»¹¤×÷Ò³Ãæ0
pal
Òª½«µ÷É«°å¼ÓÔØµ½µÄÄÚ´æÎ»ÖÃ£¬»ò null £¨£© ¸ü¸Äµ±Ç°Í¼ĞÎÆÁÄ»µ÷É«°å£¨Èç¹ûËüÊ¹ÓÃ0

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÁã £¨£©£¬»ò·µ»Ø·ÇÁã´íÎó´úÂëÒÔÖ¸Ê¾Ê§°Ü¡££¨Òı·¢ÔËĞĞÊ±´íÎó£©0

ÃèÊö
BLoad¿ÉÓÃÓÚ´ÓÊ¹ÓÃ ´´½¨µÄÎÄ¼şÖĞ¼ÓÔ


-------------------------------------------------------- KeyPgBoolean ----

Boolean   Âß¼­ĞÍ
  
±ê×¼Êı¾İÀàĞÍ

Óï·¨
Dim variable As Boolean

ÃèÊö
²¼¶ûÊı¾İÀàĞÍ¡£¿ÉÒÔ±£´æµÄÖµ»ò
³õÊ¼»¯Ê±µÄÄ¬ÈÏÖµÊÇ
 ¹ØÓÚ¶¨Òå²¼¶ûÊı¾İÀàĞÍµÄ×¢ÊÍ£ºTrueFalseFalse
- ÀíÏëÇé¿öÏÂ£¬²¼¶ûÊı¾İÀàĞÍµÄ¶¨ÒåÊÇËü°üº¬ True »ò False µÄÖµ£¬½ö´Ë¶øÒÑ¡£È»¶ø£¬ÒªÊ¹Õâ¸ö¸Å


-------------------------------------------------------- KeyPgBsave ----

BSave   Î»Í¼±£´æ
  
½«ÈÎÒâÊı¾İºÍµ÷É«°åĞÅÏ¢µÄÊı×é±£´æµ½´ÅÅÌÉÏµÄÎÄ¼şÖĞ

Óï·¨
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

ÓÃ·¨
result = BSave( filename, source [,[ size ][,{ pal | pal, bitsperpixel }]] )

²ÎÊı
filename
Òª´´½¨µÄÓÃÓÚ´æ´¢ÏñËØºÍµ÷É«°åÊı¾İµÄÎÄ¼şµÄÃû³Æ¡£
source
Òª´æ´¢µÄÊı¾İµÄµØÖ·£¬»ò null £¨£© ÓÃÓÚ´æ´¢µ±Ç°ÆÁÄ»¹¤×÷Ò³ÃæÖĞµÄÏñËØÊı¾İ¡£0
size
¿ÉÑ¡£¬Òª´æ´¢µÄÊı¾İµÄ×Ü×Ö½ÚÊı¡£³ı·ÇÊä³öÊÇ BMP ÎÄ¼ş£¬·ñÔòĞèÒª´ËÖµ¡£
pal
¿ÉÑ¡£¬°üº¬ 256 ÖÖÑÕÉ«µÄ»º³åÇøµÄµØÖ·£¬»òµ±Ç°ÆÁÄ»µ÷É«°åµÄ¿Õ £¨£©¡£Palette0
bitsperpixel
¿ÉÑ¡£¬Êä³ö BMP Í¼ÏñÇëÇóµÄÎ»Éî¶È¡£Èç¹ûÖ¸¶¨£¬Ôò»¹±ØĞëÖ¸¶¨£¨ÖÁÉÙÎª null £¨£© Öµ£©£¬·ñÔò½«»ñµÃ´íÎó¡£bitsperpixelpal0

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÁã £¨£©£¬»ò·µ»Ø·ÇÁã´íÎó´úÂëÒÔÖ¸Ê


-------------------------------------------------------- KeyPgByref ----

Byref (Parameters)   ´«Ö·
  
Í¨¹ıÒıÓÃÏÔÊ½´«µİ²ÎÊıµÄÉùÃ÷ËµÃ÷·û

Óï·¨
ByRef param As datatype

ÓÃ·¨
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype  )

ÃèÊö
Í¨¹ıÒıÓÃ£¨¼´±äÁ¿µÄµØÖ·£©½«±äÁ¿´«µİ¸ø×ÓÀı³Ì»òº¯Êı¡£µ±±äÁ¿Í¨¹ıÒıÓÃ´«µİÊ±£¬Ä¿±ê×ÓÀı³Ì»òº¯Êı¿ÉÒÔ¸ü¸Ä±äÁ¿µÄÄÚÈİ¡£
ÔÚ -lang qb ºÍ -lang fblite ·½ÑÔÖĞ£¬ÊÇÄ¬ÈÏ²ÎÊı´«µİÔ¼¶¨£¬³ı·ÇÓ


-------------------------------------------------------- KeyPgByrefFunction ----

Byref (Function Results)   ´«Ö·
  
Ö¸¶¨Í¨¹ıÒıÓÃ·µ»Øº¯Êı½á¹û

Óï·¨
Function name ( parameter-list ) ByRef As datatype

ÃèÊö
Ê¹º¯Êı½á¹û°´ÒıÓÃ¶ø²»ÊÇ°´Öµ·µ»Ø¡£·µ»ØµÄº¯Êı½«·µ»Ø±äÁ¿µÄµØÖ·£¬¶ø²»ÊÇÏñ°´Öµ·µ»ØÊ±ÄÇÑù½øĞĞ¸´ÖÆ¡£ÕâÔÊĞíº¯ÊıµÄµ÷ÓÃ·½ĞŞ¸Äº¯Êı½á¹ûÖ¸ÏòµÄ±äÁ¿¡£
Èç¹ûÎ´Ö¸¶¨£¬ÔòÄ¬ÈÏ°´Öµ·µ»Øº¯Êı½á¹û¡£
¾ßÓ


-------------------------------------------------------- KeyPgByrefVariables ----

Byref (Variables)   ´«Ö·
  
ÉùÃ÷ÒıÓÃ

Óï·¨
(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
»ò
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
»ò
[Static] Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

²ÎÊı
name
ÒıÓÃÃû³Æ
variable
ÒªÒıÓÃµÄ±äÁ¿Ãû³Æ

ÃèÊö
ÉùÃ÷¶Ô±äÁ¿µÄÒıÓÃ£¨°´Ãû³Æ£©¡£
ÒıÓÃÊÇÒ»ÖÖÊµÌå£¬ÓÃÓÚ·ÃÎÊÎ»ÓÚÄÚ´æÖĞµÄÊı¾İ¡£ÒıÓÃ²»ÊÇÊı¾İ±¾Éí£¬¶øÖ»ÊÇÓĞ¹ØÆäÎ»ÖÃµÄĞÅÏ¢¡£¿ÉÒÔ½«ÒıÓÃÊÓÎªÒşÊ½È¡ÏûÒıÓÃµÄÖ¸Õë¡£ÔÚĞí¶àÇé¿öÏÂ£¬Ëü¿ÉÒÔÓ


-------------------------------------------------------- KeyPgByte ----

Byte   ×Ö½Ú
  
±ê×¼Êı¾İÀàĞÍ£º8 Î»Ç©Ãû

Óï·¨
Dim variable As Byte

ÃèÊö
8 Î»ÓĞ·ûºÅÕûÊıÊı¾İÀàĞÍ


-------------------------------------------------------- KeyPgByval ----

ByVal   ´«Öµ
  
ÉùÃ÷ËµÃ÷·û£¬ÓÃÓÚ°´ÖµÏÔÊ½´«µİ²ÎÊı

Óï·¨
ByVal param As datatype

ÓÃ·¨
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype  )

ÃèÊö
ByValÔÚÉùÃ÷Óï¾äµÄ²ÎÊıÁĞ±íÖĞ£¬µ¼ÖÂ±äÁ¿µÄ¸±±¾Í¨¹ıÆäÖµ´«µİ¸ø¹ı³Ì£¨ÀıÈç£¬sub »òº¯Êı£©¡£
ÕâÒâÎ¶×Å£¬Èç¹û´«µİÁË±äÁ¿ x µÄÖµ£¬ÔòÔ­Ê¼±äÁ¿ x ½«²»»áÒÔÈÎºÎ·½Ê½½øĞĞĞŞ¸Ä;µ«ÊÇ£¬Èç¹û´«µİÁ


-------------------------------------------------------- KeyPgCall ----

Call   µ÷ÓÃ
  
µ÷ÓÃ×ÓÀı³ÌµÄÓï¾ä

Óï·¨
Call procname ([parameter list])

ÃèÊö
µ÷ÓÃ »ò ¡£
´Ë¹Ø¼ü×ÖÊÇ BASIC ÔçÆÚ·½ÑÔµÄ±£Áô£¬Ö÷ÒªÒÑÆúÓÃ¡£
ÔÚ -lang qb ÖĞ£¬Ëü¿ÉÓÃÓÚÔÚÉùÃ÷Ö®Ç°ÔÚ´úÂëÖĞµ÷ÓÃ s¡£¸Ãº¯Êı½«ÒşÊ½Îª 'd£¬²¢´«µİÈÎºÎ²ÎÊı¡£
×¢Òâ£


-------------------------------------------------------- KeyPgCallocate ----

CAllocate   ÄÚ´æ·ÖÅä³õÊ¼»¯
  
Îª×ÔÓÉ´æ´¢ÖĞÒ»¶¨ÊıÁ¿µÄÔªËØ·ÖÅäÄÚ´æ²¢Çå³ıÄÚÈİ

Óï·¨
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

ÓÃ·¨
result = CAllocate( num_elements [, size ] )

²ÎÊı
num_elements
ÒªÎªÆä·ÖÅäÄÚ´æµÄÔªËØÊı¡£
size
Ã¿¸öÔªËØµÄ´óĞ¡£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÒÑ·ÖÅäÄÚ´æµÄÆğÊ¼µØÖ·¡£·ñÔò£¬½«·µ»Ø¿ÕÖ¸Õë £¨£©¡£0

ÃèÊö
CAllocateÓÃÁã³õÊ¼»¯·ÖÅäµÄÄÚ´æ¡£
Òò´Ë£¬Ò²¿ÉÒÔÖ±½Ó


-------------------------------------------------------- KeyPgCase ----
Case   Ìõ
Description



-------------------------------------------------------- KeyPgCast ----

Cast   ×ª»»
  
½«±í´ïÊ½×ª»»ÎªÖ¸¶¨µÄÊı¾İÀàĞÍ

Óï·¨
Cast( datatype, expression )

²ÎÊı
datatype 
ÄÚÖÃÊı¾İÀàĞÍ£¨±ê×¼ÀàĞÍ£©
expression 
ÁíÒ»¸öÄÚÖÃÊı¾İÀàĞÍµÄ±äÁ¿

ÃèÊö
×ª»»ÎªÆäËû .µ±Î´ÖªÊ±ÒÔ¼°ÔÚ×ª»»ÎªÀàĞÍ±ğÃûÊ±£¬ÔÚºêÖĞÊ¹ÓÃ·Ç³£ÓĞÓÃ¡£
ÕâÊÇ×ª»»ÔËËã·ûµÄÒ»ÖÖÍ¨ÓÃĞÎÊ½£¬ÀıÈç »ò ¡£
ÓÃÍ¾¸ü¹ã£¬ÒòÎªËü¿ÉÒÔÓÃÓÚ¾ßÓĞÄÚÖÃµÄÄÚÖÃÀàĞ


-------------------------------------------------------- KeyPgCbool ----

CBool
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª²¼¶ûÖµ £¨Boolean)

Óï·¨
Declare Function CBool ( ByVal expression As datatype ) As Boolean

Type typename
Declare Operator Cast ( ) As Boolean
End Type

ÓÃ·¨
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÓÃ»§¶¨ÒåÀàĞÍBoolean
datatype
ÈÎºÎÊı×Ö¡¢×Ö·û´®»òÓÃ»§¶¨ÒåµÄÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£Boolean

ÃèÊö
¸Ãº¯Êı½«ÁãÖµ×ª»»Îª £¬²¢½«·ÇÁãÖµ×ª»»Îª ¡£
¸ÃÃû³Æ¿


-------------------------------------------------------- KeyPgCbyte ----

CByte   ×ª×Ö½Ú
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª ¡£Byte

Óï·¨
Declare Function CByte ( ByVal expression As datatype ) As Byte

Type typename
Declare Operator Cast ( ) As Byte
End Type

ÓÃ·¨
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½¡£Byte
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ¡£
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ¡£

·µ»ØÖµ
Öµ¡£Byte

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»Ø 8 Î»Öµ¡£¸Ãº¯Êı²»¼


-------------------------------------------------------- KeyPgCdbl ----

CDbl   ×ªË«¾«ĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª¾«È·¸¡µãDouble

Óï·¨
Declare Function CDbl ( ByVal expression As datatype ) As Double

Type typename
Declare Operator Cast ( ) As Double
End Type

ÓÃ·¨
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½Double
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
¾«¶ÈÖµ¡£Double

ÃèÊö
¸Ãº¯Êı·µ»ØÒ»¸ö 64 Î»Öµ¡£¸Ãº¯Êı²»¼ì²éÒç³ö£¬Òò´ËÇëÈ


-------------------------------------------------------- KeyPgCdecl ----

cdecl   cdecl
  
ÔÚ¹ı³ÌÉùÃ÷ÖĞÖ¸¶¨ cdecl ÑùÊ½µÄµ÷ÓÃÔ¼¶¨

Óï·¨
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

ÃèÊö
ÔÚ¹ı³ÌÉùÃ÷ÖĞ£¬Ö¸¶¨¹ı³Ì½«Ê¹ÓÃµ÷ÓÃÔ¼¶¨¡£ÔÚµ÷ÓÃÔ¼¶¨ÖĞ£¬ÈÎºÎ²ÎÊı¶¼½«ÒÔÁĞ³öËüÃÇµÄÏà·´Ë³Ğò´«µİ£¨ÍÆËÍµ½¶ÑÕ»ÉÏ£©£¬¼´´ÓÓÒµ½×ó¡£¹ı³Ì²»ĞèÒª±£Áô »ò ¼Ä´æÆ÷£¬²¢ÇÒ²»µÃÔÚ¶ÑÕ»·µ»ØÖ®Ç°ÇåÀí¶ÑÕ»£¨


-------------------------------------------------------- KeyPgChain ----

Chain   Á´½Ó
  
ÔİÊ±½«¿ØÖÆÈ¨ÒÆ½»¸øÍâ²¿³ÌĞò

Óï·¨
Declare Function Chain ( ByRef program As Const String ) As Long

ÓÃ·¨
result = Chain( program )

²ÎÊı
program
Òª½«¿ØÖÆÈ¨ÒÆ½»¸øµÄ³ÌĞò£¨¿ÉÖ´ĞĞÎÄ¼ş£©µÄÎÄ¼şÃû£¨°üÀ¨ÎÄ¼şÂ·¾¶£©¡£

·µ»ØÖµ
Èç¹û³É¹¦Ö´ĞĞ£¬Ôò·µ»ØÍâ²¿


-------------------------------------------------------- KeyPgChdir ----

ChDir   ¸ÄÂ·¾¶
  
¸ü¸Äµ±Ç°Çı¶¯Æ÷ºÍÄ¿Â¼

Óï·¨
Declare Function ChDir ( ByRef path As Const String ) As Long

ÓÃ·¨
result = ChDir( path )

²ÎÊı
path
Ö¸¶¨Òª¸ü¸ÄÎªµÄÂ·¾¶µÄ²ÎÊı¡£String

·µ»ØÖµ
³É¹¦Ê±·µ»ØÁã £¨0£©£¬Ê§°


-------------------------------------------------------- KeyPgChr ----

Chr   Êı×ª×Ö·û
  
´ÓÒ»¸ö»ò¶à¸ö ASCII ÕûÊıÖµ·µ»ØÒ»´®×Ö·û

Óï·¨
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

ÓÃ·¨
result = Chr[$]( ch0 [, ch1 ... chN ] )

²ÎÊı
ch
×Ö·ûµÄ ASCII ÕûÊıÖµ¡£

·µ»ØÖµ
·µ»Ø°üº¬×Ö·ûµÄ×Ö·û´®¡£

ÃèÊö
Chr·µ»ØÒ»¸ö×Ö·û´®£¬ÆäÖĞ°üº¬ÓÉ´«µİ¸øËüµÄ ASCII ÖµËù±íÊ¾µÄ×Ö·û¡£
µ±ÓëÊıÖµ³


-------------------------------------------------------- KeyPgCint ----

CInt   ×ªÕûĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»ÎªIntegerInteger<bits>

Óï·¨
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>

Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

ÓÃ·¨
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

²ÎÊı
bits
Ò»¸öÊı×Ö³£Á¿±í´ïÊ½£¬Ö¸Ê¾ËùĞè´óĞ¡µÄÕûÊıÎ»¡£ÔÊĞíµÄÖµÎª ¡¢ »ò ¡£8163264
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½Integer
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
°üº¬×ª»»ºóµÄÖµµÄ »ò¡£IntegerInteger<bits>

ÃèÊö
Èç¹û´«µİ¸øÒ»¸öÊı×Ö£¬ËüÊ¹ÓÃÉáÈëµ½Å¼ÊıµÄ·½·¨¶ÔÆä½øĞĞÉáÈë - ¼´ËüÉáÈëµ½×î½Ó½üµÄÕûÊıÖµ£¬Èç¹ûÊı


-------------------------------------------------------- KeyPgCircle ----

Circle   »­Ô²
  
ÓÃÓÚ»æÖÆÍÖÔ²»òÔ²µÄÍ¼ĞÎÓï¾ä

Óï·¨
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

²ÎÊı
target
¿ÉÑ¡;Ö¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄÍ¼Ïñ»º³åÇø
STEP
±íÊ¾×ø±êÊÇÏà¶ÔµÄ
(x, y)
ÍÖÔ²ÖĞĞÄµÄ×ø±ê
radius
Ô²µÄ°ë¾¶ - ¶ÔÓÚÍÖÔ²£¬Îª°ë³¤Öá£¨¼´×î³¤°ë¾¶£©
color
ÑÕÉ«ÊôĞÔ
start
ÆğÊ¼½Ç¶È
end
½áÊø½Ç¶È
aspect
ÍÖÔ²µÄ×İºá±È£¬¸ß¶ÈÓë¿í¶ÈµÄ±ÈÂÊ
F
Ìî³äÄ£Ê½Ö¸Ê¾Æ÷

ÃèÊö
Circle½«¸ù¾İ¸ø¶¨µÄ²ÎÊı»æÖÆÒ»¸öÔ²¡¢ÍÖÔ²»òÔ²»¡¡£
Ö¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø¡£ ¿ÉÄÜÊÇÊ¹ÓÃ »ò 


-------------------------------------------------------- KeyPgClass ----

Class   Àà¶ÔÏó
  
ÉùÃ÷Àà¶ÔÏó

Óï·¨
Class typename ...

²ÎÊı
typename
µÄÃû³ÆClass

ÃèÊö
ÎÒÃÇ»áÔÚÕâÀï·ÅÒ»Ğ©ÓĞÓÃµÄ¶«Î÷£¨³ÏÊµ£©£¬³ıÁËÕâ¸ö¹¦ÄÜ»¹Ã»ÓĞÔÚ±àÒëÆ÷ÖĞÊµÏÖ¡£µ«ÊÇ


-------------------------------------------------------- KeyPgClear ----

Clear   Çå³ı
  
Çå³ı»ò³õÊ¼»¯Ä³Ğ©ÄÚ´æ

Óï·¨
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

ÓÃ·¨
Clear( dst, [value], bytes )

²ÎÊı
dst
Ä³Ğ©ÄÚ´æµÄÆğÊ¼µØÖ·
value
Òª½«ËùÓĞ×Ö½ÚÉèÖÃÎªµÈÓÚµÄÖµ
bytes
ÒªÇå³ıµÄ×Ö½ÚÊı

ÃèÊö
Clear½«ÄÚ´æÖĞµÄÒ»¸ö»ò¶à¸ö×Ö½ÚÉèÖÃÎªÌØ¶¨Öµ£¨Èç¹ûÎ´Ö¸¶¨£¬ÔòÄ¬ÈÏÖµÎªÁã £¨£©¡£ÆğÊ¼µØÖ·È¡×Ô¶Ô±äÁ¿»òÊı×éÔªËØ


-------------------------------------------------------- KeyPgClng ----

CLng   ×ª³¤ĞÍ
  
½«ÊıÖµ»ò×Ö·û´®±í´ïÊ½×ª»»ÎªLong

Óï·¨
Declare Function CLng ( ByVal expression As datatype ) As Long

Type typename
Declare Operator Cast ( ) As Long
End Type

ÓÃ·¨
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½Long
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£Long

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»Ø 32 Î»Öµ¡£¸Ãº¯Êı²»¼ì²éÒç³ö£¬²¢ÇÒ¶ÔÓÚĞ¡


-------------------------------------------------------- KeyPgClngint ----

CLngInt   ×ª³¤ÕûĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª 64 Î»ÕûÊı £¨LongInt)

Óï·¨
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt

Type typename
Declare Operator Cast ( ) As LongInt
End Type

ÓÃ·¨
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½LongInt
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£LongInt

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»Ø 64 Î»Öµ¡£¸Ãº¯Êı²»¼ì²éÒç³ö£¬²¢ÇÒ¶ÔÓÚĞ¡ÓÚ»ò´óÓÚ µÄÖµ£¬Î´¶¨Òå½á¹û¡


-------------------------------------------------------- KeyPgClose ----

Close   ¹Ø±Õ
  
Á÷ I/O ¹¦ÄÜ£¬ÓÃÓÚÖÕÖ¹¶ÔÉè±¸µÄ·ÃÎÊ

Óï·¨
Close [[#]filenum ] [, [#]filenum ...]
 or 
result = Close( [#filenum] )

²ÎÊı
filenum
Òª¹Ø±ÕµÄÎÄ¼ş±àºÅÁĞ±í¡£

·µ»ØÖµ
Close³É¹¦Ê±·µ»Ø 32 Î» £ºÁã £¨£©£¬·ñÔò·µ»Ø·ÇÁã´íÎó´úÂë¡£Long0

ÃèÊö
¹Ø±ÕÆäÎÄ¼ş±àºÅ×÷Îª²ÎÊı´«µİµÄÎÄ¼ş¡£Èç¹û´«µİÁËÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ£¬Ôò·µ»Ø´íÎó¡£
Ã»ÓĞ²ÎÊı½«¹Ø±Õµ±Ç°


-------------------------------------------------------- KeyPgCls ----

Cls   ÇåÆÁ
  
ÔÚÎÄ±¾Ä£Ê½ºÍÍ¼ĞÎÄ£Ê½ÏÂÇå³ıÆÁÄ»

Óï·¨
Declare Sub Cls ( ByVal mode As Long = 1 )

ÓÃ·¨
Cls mode

²ÎÊı
mode
Ò»¸ö¿ÉÑ¡µÄÊıÖµ±äÁ¿£¬ÆäÖµÎª ´Ó µ½ ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÎª ¡£021

ÃèÊö
¿ÉÒÔ¸ø³öÒ»¸ö¿ÉÑ¡²ÎÊı£¬mode

Èç¹ûÊ¡ÂÔ£¬ÔòÇå³ıÎÄ±¾»òÍ¼ĞÎÊÓ¿Ú¡£Èç¹ûÒÑÊ¹ÓÃ¸ÃÓï¾ä¶¨ÒåÁËÍ¼ĞÎÊÓ¿Ú£¬Ôò½«Çå³ıÍ¼ĞÎÊÓ¿Ú¡£·ñÔò£¬½«Çå³ıÓÉ ¶¨ÒåµÄÎÄ±¾ÊÓ¿


-------------------------------------------------------- KeyPgColor ----

Color   ÑÕÉ«
  
ÉèÖÃÓëÎÄ±¾µÄ¿ØÖÆÌ¨Êä³öºÍÍ¼ĞÎÊä³öÒ»ÆğÊ¹ÓÃµÄÏÔÊ¾Ç°¾°/±³¾°É«

Óï·¨
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

ÓÃ·¨
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

²ÎÊı
foreground
ÒªÉèÖÃµÄÇ°¾°É«
background
ÒªÉèÖÃµÄ±³¾°ÑÕÉ«

·µ»ØÖµ
·µ»ØÒ»¸ö 32 Î»Öµ£¬ÆäÖĞ°üº¬ ÖĞµÄµ±Ç°Ç°¾°É«ºÍ ÖĞµÄµ±Ç°±³¾°É«¡£
ÔÚ¸ß/Õæ²ÊÉ«Ä£Ê½ÏÂ£¬½ö·µ»ØÇ°¾°É«£¬Õ¼ÓÃÕû¸ö 32 Î»¡£Ïà·´£¬Çë²ÎÔÄÒÔ·µ»Øµ±Ç°Í¼ĞÎÄ£Ê½ÑÕÉ«£¨Ç°¾°ºÍ±³¾°£©¡£
¿ÉÒÔÔÚÉèÖÃĞÂÑÕÉ«ÖµµÄÍ¬Ê±¼ìË÷¾ÉÑÕÉ«Öµ¡£Low WordHigh WordScreenControl

ÃèÊö
¸ÃÓï¾äÉèÖÃµ±Ç°µÄÇ°¾°É«ºÍ/»ò±³¾°É«¡£¡¢¡¢¡¢¡¢¡¢º


-------------------------------------------------------- KeyPgCommand ----

Command   ÃüÁîĞĞ
  
·µ»ØÓÃÓÚµ÷ÓÃ³ÌĞòµÄÃüÁîĞĞ²ÎÊı

Óï·¨
Declare Function Command ( ByVal index As Long = -1 ) As String

ÓÃ·¨
result = Command[$]( [ index ] )

²ÎÊı
index
ÌØ¶¨ÃüÁîĞĞ²ÎÊıµÄ´ÓÁã¿ªÊ¼µÄË÷Òı¡£

·µ»ØÖµ
·µ»ØÃüÁîĞĞ²ÎÊı¡£

ÃèÊö
Command·µ»ØÔÚÖ´ĞĞÊ±´«µİ¸ø³ÌĞòµÄÃüÁîĞĞ²ÎÊı¡£
Èç¹û Ğ¡ÓÚÁã £¨£©£¬Ôò·µ»ØËùÓĞÃüÁîĞĞ²ÎÊıµÄ¿Õ¸ñ·Ö¸ôÁĞ±í£¬·ñÔò£¬·µ»Øµ¥¸ö²ÎÊı¡£ÖµÎªÁã £¨£© ·µ»Ø¿ÉÖ´ĞĞÎÄ


-------------------------------------------------------- KeyPgCommon ----

Common   È«¾Ö±äÁ¿
  
±äÁ¿ÉùÃ÷ºÍ×÷ÓÃÓòĞŞÊÎ·û

Óï·¨
Common [Shared] symbolname[()] [AS DataType] [, ...]

ÃèÊö
ÉùÃ÷ÔÚ´úÂëÄ£¿é£¨°üÀ¨Òª±àÒëÎª¾²Ì¬ºÍ¶¯Ì¬¿â £¨DLL£© µÄ´úÂëÄ£¿é£©Ö®¼ä¹²ÏíµÄ±äÁ¿¡£
Æ¥ÅäÓï¾ä±ØĞë³öÏÖÔÚÊ¹ÓÃ¸Ã±äÁ¿µÄËùÓĞÆäËû´úÂëÄ£¿éÖĞ¡£
ÎŞ·¨³õÊ¼»¯±äÁ¿¡£
Êı×éÊ¼ÖÕÊÇ¿É±ä³¤¶ÈµÄ£¬²¢ÇÒ±


-------------------------------------------------------- KeyPgCondBroadcast ----

CondBroadcast   Ìõ¼ş±äÁ¿¹ã²¥
  
ÖØĞÂÆô¶¯¾ä±úµÄËùÓĞÏß³ÌCondWait

Óï·¨
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

ÓÃ·¨
CondBroadcast ( handle )

²ÎÊı
handle
Ìõ¼ş±äÁ¿µÄ¾ä±ú¡£

ÃèÊö
Ò»µ©Ìõ¼şÎª²¢ÇÒÏß³ÌÆô¶¯£¬ÆäÖĞÒ»¸ö£¨°üÀ¨Ö´ĞĞÖ÷³ÌĞòµÄÒşÊ½Ö÷Ïß³Ì£©¿ÉÒÔÉèÖÃÎªÌõ¼ş£¬ËüÃÇ½«±»Í£Ö¹£¬Ö±µ½µÈ´ıÏß³Ì¿ÉÒÔÖØĞÂÆô¶¯µÄÆäËûÏß³Ì¡£ ¿ÉÓÃÓÚÖØĞÂÆô¶¯µÈ´ıÌõ¼şµÄËùÓĞÏß³Ì¡


-------------------------------------------------------- KeyPgCondCreate ----

CondCreate   Ìõ¼ş±äÁ¿´´½¨
  
´´½¨ÒªÓÃÓÚÍ¬²½Ïß³ÌµÄÌõ¼ş±äÁ¿

Óï·¨
Declare Function CondCreate ( ) As Any Ptr

ÓÃ·¨
result = CondCreate

·µ»ØÖµ
ĞÂ´´½¨µÄÌõ¼ş±äÁ¿µÄ¾ä±ú£¬»òÊ§°ÜÊ±µÄ¿ÕÖ¸Õë £¨0£©¡£

ÃèÊö
Ò»µ©Ìõ¼şÎªCondcreated²¢ÇÒÏß³ÌÆô¶¯£¬ÆäÖĞÒ»¸ö»ò¶à¸öÏß³Ì£¨°üÀ¨Ö´ĞĞÖ÷³ÌĞòµÄÒşÊ½Ö÷Ïß³Ì£©¿ÉÒÔÉèÖÃÎªÌõ¼ş£¬ËüÃÇ½«±»Í£Ö¹£¬Ö±µ


-------------------------------------------------------- KeyPgCondDestroy ----

CondDestroy   Ìõ¼ş±äÁ¿Ïú»Ù
  
ÔÚ²»ÔÙĞèÒª¶àÏß³ÌÌõ¼ş±äÁ¿Ê±Ïú»Ù¸Ã±äÁ¿

Óï·¨
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

ÓÃ·¨
CondDestroy ( handle )

²ÎÊı
handle
ÒªÏú»ÙµÄÌõ¼ş±äÁ¿µÄ¾ä±ú¡£

ÃèÊö
Ò»µ©Ìõ¼şÎª d ²¢ÇÒÏß³ÌÆô¶¯£¬ÆäÖĞÒ»¸ö£¨°üÀ¨Ö´ĞĞÖ÷³ÌĞòµÄÒşÊ½Ö÷Ïß³Ì£©¿ÉÒÔÉèÖÃÎªÌõ¼şÏß³Ì£¬ËüÃÇ½«±»Í£Ö¹£¬Ö±µ½µÈ´ıÏß³Ì¿ÉÒÔÖØĞÂÆô¶¯µÄÆäËûÏß³Ì¡£ ¿ÉÓÃÓÚÖØĞÂÆô¶¯µ


-------------------------------------------------------- KeyPgCondSignal ----

CondSignal   Ìõ¼ş±äÁ¿ĞÅºÅ
  
ÖØĞÂÆô¶¯ÓÉµ÷ÓÃÔİÍ£µÄÏß³ÌCondWait

Óï·¨
Declare Sub CondSignal ( ByVal handle As Any Ptr )

ÓÃ·¨
CondSignal ( handle )

²ÎÊı
handle
Ìõ¼ş±äÁ¿µÄ¾ä±ú¡£

ÃèÊö
Ò»µ©´´½¨ÁËÌõ¼şÏß³Ì²¢Æô¶¯ÁËÏß³Ì£¬¾Í¿ÉÒÔÎªÌõ¼şÏß³ÌÉèÖÃÆäÖĞµÄ¶à¸öÏß³Ì£¨°üÀ¨Ö´ĞĞÖ÷³ÌĞòµÄÒşÊ½Ö÷Ïß³Ì£©Ö®Ò»£¬ËüÃÇ½«±»Í£Ö¹£¬Ö±µ½µÈ´ıÏß³Ì¿ÉÒÔÖØĞÂÆô¶¯µÄÆäËûÏß³Ì¡£ ¿ÉÓÃÓÚÖØ


-------------------------------------------------------- KeyPgCondWait ----

CondWait   Ìõ¼ş±äÁ¿µÈ´ı
  
Í£Ö¹Ö´ĞĞµ±Ç°Ïß³Ì£¬Ö±µ½Ä³Ğ©Ìõ¼ş±äÎª true

Óï·¨
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

ÓÃ·¨
CondWait ( handle, mutex )

²ÎÊı
handle
Ìõ¼ş±äÁ¿µÄ¾ä±ú¡£
mutex
Óë´ËÌõ¼ş±äÁ¿¹ØÁªµÄ»¥³âÌå£¬ÔÚ²âÊÔÌõ¼şºÍµ÷ÓÃ Ê±±ØĞëËø¶¨¸Ã±äÁ¿¡£CondWait

ÃèÊö
Í£Ö¹µ÷ÓÃËüµÄÏß³ÌµÄº¯Êı£¬Ö±µ½ÆäËûÏß³Ì s »ò s ³ÉÎª¾ä±ú¡£
Ò»µ©´´½¨ÁËÌõ¼ş±äÁ¿²¢Æô¶¯ÁËÏß³Ì£¬¾Í¿ÉÒÔÎªÌõ¼ş±äÁ¿ÉèÖÃÆäÖĞµÄ¶à¸ö±äÁ¿Ö®Ò»


-------------------------------------------------------- KeyPgConst ----

Const   ³£Á¿
  
²»¿ÉĞŞ¸ÄµÄ±äÁ¿ÉùÃ÷¡£

Óï·¨
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

ÃèÊö
ÉùÃ÷²»¿ÉĞŞ¸ÄµÄ³£Á¿Êı¾İ£¬ÕâĞ©Êı¾İ¿ÉÒÔÊÇÕûÊı»òÊ®½øÖÆ£¨¸¡µãÊı£©Êı×Ö»ò×Ö·û´®¡£Èç¹ûÎ´ÏÔÊ½¸ø³ö£¬Ôò½«ÍÆ¶Ï³£Á¿ÀàĞÍ¡£
²»ÔÊĞíÖ¸¶¨ »ò as¡£
ÔÊĞíÖ¸¶¨ as£¬µ«²»Æğ×÷ÓÃ£¬ÒòÎªÉú³ÉµÄÀàĞÍÊ¼ÖÕÎª .



-------------------------------------------------------- KeyPgConstMember ----

Const (Member)   ³£Á¿
  
Ö¸¶¨³ÉÔ±¹ı³ÌÎªÖ»¶Á¡£

Óï·¨
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type

[Const] Sub|Function|... typename ...
...
End Sub|Function|...

ÃèÊö
Ö¸¶¨·½·¨²»¸ü¸Äµ÷ÓÃËüµÄ¶ÔÏó¡£Òş²ØµÄ²ÎÊı½«±»ÊÓÎªÖ»¶Á¡£¸ÃÉùÃ÷¿ÉÒÔ¶Á×÷¡°µ÷ÓÃ const ·½·¨³ĞÅµ²»¸ü¸Ä¶ÔÏó¡±£¬Èç¹û³ÉÔ±¹ı³Ì³¢ÊÔ¸ü¸ÄÈÎºÎÊı¾İ×Ö¶Î»òµ÷ÓÃ·Ç const ³ÉÔ±¹ı³Ì£¬±àÒëÆ÷½«³ö´í¡£
Ö»¶Á£


-------------------------------------------------------- KeyPgConstQualifier ----

Const (Qualifier)   ³£Á¿
  
Ö¸¶¨Êı¾İÀàĞÍ»òÖ¸ÕëÊı¾İÀàĞÍÎªÖ»¶Á¡£

Óï·¨
... As [Const] datatype [ [Const] Ptr ... ]

²ÎÊı
datatype
±ê×¼»òÓÃ»§¶¨ÒåµÄÊı¾İÀàĞÍµÄÃû³Æ¡£

ÃèÊö
Ö¸¶¨½«ÏŞ¶¨·ûÓÒ²àµÄ or ÊÓÎªÖ»¶Á¡£Ö»¶Á£¨£©ÉùÃ÷ÊÇÀàĞÍ°²È«µÄ¶ÈÁ¿£¬¿ÉÒÔÀí½âÎª¡°³ĞÅµ²»¸ü¸Ä¡±¡£±àÒëÆ÷Ê¹ÓÃ const ÉùÃ÷À´¼ì²é¶Ô±äÁ¿ºÍ²ÎÊıµÄ²Ù×÷£¬²¢ÔÚ±àÒëÊ±Éú³É´íÎó£


-------------------------------------------------------- KeyPgConstructor ----

Constructor   ¹¹Ôìº¯Êı
  
ÔÚ´´½¨Àà»òÓÃ»§¶¨ÒåÀàĞÍÊ±×Ô¶¯µ÷ÓÃ

Óï·¨
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type

Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

²ÎÊı
typename 
»ò µÄÃû³ÆTypeClass

ÃèÊö
ConstructorÔÚ´´½¨ÓÃ»§¶¨Òå»ò±äÁ¿Ê±µ÷ÓÃ·½·¨¡£
ÊÇÎªÆäÉùÃ÷ºÍ¶¨Òå·½·¨µÄÀàĞÍµÄÃû³Æ¡£µÄÃû³Æ½âÎö×ñÑ­Óë ÔÚ ÖĞÊ¹ÓÃµÄ¹ı³ÌÏàÍ¬µÄ¹æÔò¡£
Ò»¸öÀàĞÍ»òÀà¿ÉÄÜ´æÔÚ¶à¸ö¹¹Ôìº¯Êı¡£µ÷ÓÃµÄ


-------------------------------------------------------- KeyPgContinue ----

Continue   ¼ÌĞø±¾´Î
  
¿ØÖÆÁ÷Óï¾äÒÔ¼ÌĞøÑ­»·µÄÏÂÒ»´Îµü´ú

Óï·¨
Continue {Do | For | While}

ÃèÊö
Ìø¹ıËùÓĞ´úÂë£¬Ö±µ½Ñ­»·½á¹¹µÄ½áÊø×Ó¾ä£¨¼´ ¡¢»ò¿é£©£¬È»ºóÖ´ĞĞÏŞÖÆÌõ¼ş¼ì²é¡£ÔÚ a µÄÇé¿öÏÂ£¬±äÁ¿¸ù¾İÖ¸¶¨µÄµİÔö¡£
Èç¹ûÓĞ¶à¸ö / / ¿éÇ¶Ì×£¬Ëü½«¼ÌĞøÔÚ¸ÃÀàĞÍµÄ×îÄÚ²ã¿éÉÏ£¬¼´ÊäÈëµÄ


-------------------------------------------------------- KeyPgCos ----

Cos   ÓàÏÒ
  
·µ»Ø½Ç¶ÈµÄÓàÏÒ

Óï·¨
Declare Function Cos ( ByVal angle As Double ) As Double

ÓÃ·¨
result = Cos( angle )

²ÎÊı
angle
½Ç¶È£¨ÒÔ»¡¶ÈÎªµ¥Î»£©

·µ»ØÖµ
½«²ÎÊıµÄÓàÏÒ×÷Îª to µÄ·¶Î§ÄÚ·µ»Ø¡£angleDouble-1.01.0

ÃèÊö
²ÎÊıÒÔ»¡¶È£¨¶ø²»ÊÇ¶È£©Îªµ¥Î»½øĞĞ¶ÈÁ¿¡£
¶ÔÓÚ¾ø¶


-------------------------------------------------------- KeyPgCptr ----

CPtr   ×ªÎªPTR
  
½«Ö¸Õë±í´ïÊ½×ª»»ÎªÖ¸¶¨µÄÊı¾İÀàĞÍÖ¸Õë

Óï·¨
CPtr( PointerDataType, expression )

ÃèÊö
×ª»»Îª .
±ØĞëÊÇÒ»ÖÖÀàĞÍ£¨ÀıÈçÊı¾İÀàĞÍ»ò £©£¬»òÕßÊÇÒ»¶ÔÒ»¡£
¿ÉÄÜ¾ßÓĞ²»Í¬µÄÖ¸ÕëÀàĞÍ£¬Ò²¿ÉÄÜÊÇ .
 ×¢Òâ£ºÄ¿Ç°£¬FBÊµ¼ÊÉÏ²¢Ã»ÓĞÇ¿ÖÆÒªÇó±ØĞëÊÇÖ¸Õë¡£²»¹ı£¬ÕâÔÚ½«À´µÄ°æ±¾ÖĞ¿ÉÄÜ»


-------------------------------------------------------- KeyPgCshort ----

CShort   ×ª¶ÌÕûĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»ÎªÕûÊı £¨Short)

Óï·¨
Declare Function CShort ( ByVal expression As datatype ) As Short

Type typename
Declare Operator Cast ( ) As Short
End Type

ÓÃ·¨
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½Short
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£Short

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»ØÒ»¸ö 16 Î»Öµ¡£¸Ãº¯Êı²»¼ì²éÒ


-------------------------------------------------------- KeyPgCsign ----

CSign   ×ª·ûºÅ
  
½«±í´ïÊ½×ª»»ÎªÓĞ·ûºÅ

Óï·¨
CSign ( expression )

ÓÃ·¨
variable = CSign ( expression )

ÃèÊö
½«ÎŞ·ûºÅ×ª»»ÎªÓĞ·ûºÅ£¬Õâ¶ÔÓÚÇ¿ÖÆ³ı·¨»ò³Ë·¨µÄÓĞ·ûºÅĞĞÎª£¨


-------------------------------------------------------- KeyPgCsng ----

CSng   ×ªµ¥¾«ĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª¾«È·¸¡µãSingle

Óï·¨
Declare Function CSng ( ByVal expression As datatype ) As Single

Type typename
Declare Operator Cast ( ) As Single
End Type

ÓÃ·¨
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½Single
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
¾«¶ÈÖµ¡£Single

ÃèÊö
¸Ãº¯Êı·µ»ØÒ»¸ö 32 Î»Öµ¡£¸Ãº¯Êı²»¼ì²éÒç³ö£¬Òò´ËÇë


-------------------------------------------------------- KeyPgCsrlin ----

CsrLin   ¹â±êĞĞ
  
·µ»ØÓÎ±êµÄĞĞÎ»ÖÃ

Óï·¨
Declare Function CsrLin ( ) As Integer

ÓÃ·¨
result = CsrLin

·µ»ØÖµ
Ö¸¶¨ÓÎ±êµÄµ±Ç°ĞĞ¡£Integer

ÃèÊö
·µ»ØÓÎ±êËùÔÚµÄµ


-------------------------------------------------------- KeyPgCubyte ----

CUByte   ×ªU×Ö½ÚĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»ÎªÎŞ·ûºÅ×Ö½Ú £¨UByte)

Óï·¨
Declare Function CUByte ( ByVal expression As datatype ) As UByte

Type typename
Declare Operator Cast ( ) As UByte
End Type

ÓÃ·¨
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½UByte
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£UByte

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»Ø 8 Î»Öµ¡£¸Ãº¯Êı²»¼


-------------------------------------------------------- KeyPgCuint ----

CUInt   ×ªUÕûĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª»òUIntegerUInteger<bits>

Óï·¨
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>

Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

ÓÃ·¨
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

²ÎÊı
bits
Ò»¸öÊıÖµ³£Á¿±í´ïÊ½£¬Ö¸Ê¾ËùĞèÎŞ·ûºÅÕûÊıÎ»µÄ´óĞ¡¡£ÔÊĞíµÄÖµÎª ¡¢ »ò ¡£8163264
expression
Òª×ª»»Îª »ò ÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½UIntegerUInteger<bits>
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
A »ò °üº¬×ª»»ºóµÄÖµ¡£UIntegerUInteger<bits>

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»ØÒ»¸öÖµ£¬»òÕßÈç¹ûÌá¹©ÁËÖµ£¬Ôò·µ»Ø¸ø¶¨´óĞ¡µÄÎŞ·ûºÅÕûÊıÀàĞÍ¡£
¸


-------------------------------------------------------- KeyPgCulng ----

CULng   ×ªU³¤ĞÍ
  
½«ÊıÖµ»ò×Ö·û´®±í´ïÊ½×ª»»ÎªULong

Óï·¨
Declare Function CULng ( ByVal expression As datatype ) As ULong

Type typename
Declare Operator Cast ( ) As ULong
End Type

ÓÃ·¨
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½ULong
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£ULong

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»Ø 32 Î»Öµ¡£¸Ãº¯


-------------------------------------------------------- KeyPgCulngint ----

CULngInt   ×ªU³¤ÕûĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»Îª 64 Î»ÎŞ·ûºÅÕûÊı £¨ULongInt)

Óï·¨
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt

Type typename
Declare Operator Cast ( ) As ULongInt
End Type

ÓÃ·¨
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½ULongInt
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£ULongInt

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»Ø 64 Î»Öµ¡£¸Ãº¯Êı²»¼ì²éÒç³ö£¬²¢ÇÒ¶ÔÓÚĞ¡ÓÚ»ò´óÓÚ µÄÖµ£¬Î´¶¨Òå½á¹û¡£´ËÍâ£¬¸¡µã±í´ïÊ½µÄÇ¿ÖÆ×ª»»µ±Ç


-------------------------------------------------------- KeyPgCunsg ----
CUnsg   ×ªÎŞ
Description



-------------------------------------------------------- KeyPgCurdir ----

CurDir   Ä¿Â¼È¡µ±Ç°
  
·µ»Øµ±Ç°Ä¿Â¼/ÎÄ¼ş¼Ğ

Óï·¨
Declare Function CurDir ( ) As String

ÓÃ·¨
result = CurDir

·µ»ØÖµ
ÉèÖÃÎªµ±Ç°Ä¿Â¼/ÎÄ¼ş¼ĞµÄÃû³Æ¡£String

ÃèÊö
·µ»Øµ±Ç°Ä¿Â¼/ÎÄ¼ş¼Ğ¡£

Àı

Print CurDir

Êä³ö»áÓĞËù²»Í¬¡£

·½ÑÔ²îÒì
ÔÚ -lang qb ·½ÑÔÖĞ²»¿ÉÓÃ£¬³ı·ÇÊ¹ÓÃ±ğÃû ÒıÓÃ¡£__Curdir




-------------------------------------------------------- KeyPgCushort ----

CUShort   ×ªU¶ÌÕûĞÍ
  
½«Êı×Ö»ò×Ö·û´®±í´ïÊ½×ª»»ÎªÎŞ·ûºÅÕûÊı £¨UShort)

Óï·¨
Declare Function CUShort ( ByVal expression As datatype ) As UShort

Type typename
Declare Operator Cast ( ) As UShort
End Type

ÓÃ·¨
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

²ÎÊı
expression
Òª×ª»»ÎªÖµµÄÊı×Ö¡¢×Ö·û´®»òÖ¸Õë±í´ïÊ½UShort
datatype
ÈÎºÎÊıÖµ¡¢×Ö·û´®»òÖ¸ÕëÊı¾İÀàĞÍ
typename
ÓÃ»§¶¨ÒåµÄÀàĞÍ

·µ»ØÖµ
Öµ¡£UShort

ÃèÊö
¸Ãº¯ÊıÉáÈëĞ¡Êı²¿·Ö²¢·µ»ØÒ»¸ö 16 Î»Öµ¡£¸Ãº¯Êı²»¼ì²


-------------------------------------------------------- KeyPgCustomgfx ----

Custom   ×Ô¶¨Òå
  
Ñ¡Ôñ×Ô¶¨Òå·½·¨µÄÍ¼ĞÎÓï¾äµÄ²ÎÊıPut

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

²ÎÊı
Custom
±ØÌî¡£
custom_function_ptr
×Ô¶¨ÒåÓÃ»§¶¨Òåº¯ÊıµÄÃû³Æ¡£
parameter
¿ÉÑ¡´«µİ¸ø×Ô¶¨Òåº¯Êı;Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÖµÎªÁã £¨£©¡£Pointer0

ÃèÊö
CustomÑ¡Ôñ×Ô¶¨ÒåÓÃ»§¶¨Òåº¯Êı×÷ÎªÉ¾³ıÍ¼Ïñ»º³åÇøµÄ·½·¨¡£
¸Ã·½·¨Ê¹ÓÃÓÃ»§¶¨ÒåµÄº¯ÊıÀ´¼ÆËãÒª»æÖÆµ½Ä¿±ê»º³åÇøµÄ×îÖÕÏñËØÖµ¡£¶ÔÓÚÔ´Í¼ÏñµÄÃ


-------------------------------------------------------- KeyPgCvaArg ----

Cva_Arg
  
ºê£¬ÓÃÓÚ´Ó¿É±ä²ÎÊıÁĞ±í¶ÔÏó»ñÈ¡ÏÂÒ»¸ö²ÎÊı¡£

Óï·¨
variable = Cva_Arg ( argument_list, datatype )

²ÎÊı
argument_list
Cva_ListÒª·ÃÎÊÏÂÒ»¸öÖµµÄÊı¾İÀàĞÍ±äÁ¿
datatype
±äÁ¿²ÎÊıÁĞ±íÖĞÏÂÒ»¸öÖµµÄÊı¾İÀàĞÍargument_list

ÃèÊö
¸ÃºêÔÊĞíÔÚº¯ÊıÖĞÊ¹ÓÃ¿É±äÊıÁ¿µÄ²ÎÊı£ºCva_Arg
 	Cva_Arg·µ»ØÁĞ±íÖĞµÄµ±Ç°²ÎÊı£¬ÆäÔ¤ÆÚÊı¾İÀàĞÍÎª ¡£argument_listdatatype
ÔÚÊ×´ÎÊ¹ÓÃÖ®Ç°£¬±


-------------------------------------------------------- KeyPgCvaCopy ----

Cva_Copy
  
ÓÃÓÚ´ÓÒÑ³õÊ¼»¯µÄ¿É±ä²ÎÊıÁĞ±í¶ÔÏó±äÁ¿³õÊ¼»¯¿É±ä²ÎÊıÁĞ±í¶ÔÏó±äÁ¿µÄºê

Óï·¨
Cva_Copy( dst_list, src_list )

²ÎÊı
dst_list
Òª³õÊ¼»¯µÄÄ¿±ê±äÁ¿Cva_List
src_list
Òª´ÓÖĞ¸´ÖÆµÄÔ´±äÁ¿Cva_List

ÃèÊö
½«Ò»¸öÀàĞÍ±äÁ¿¸´ÖÆµ½ÁíÒ»¸öÀàĞÍ±äÁ¿¡£ Ê¹ÓÃµ±Ç°×´Ì¬½øĞĞ³õÊ¼»¯£¬
±ØĞëÒÑÊ¹ÓÃÉÏÒ»¸ö»òÓï¾ä³õÊ¼»¯¡£
¾ÍÏñ¿É±ä²ÎÊıÁĞ±í¶ÔÏóµÄ¸±±¾¹¹Ôìº¯Êı£¬²¢ÇÒ×îÖ


-------------------------------------------------------- KeyPgCvaEnd ----

Cva_End
  
ÓÃÓÚÇåÀí¿É±ä²ÎÊıÁĞ±í¶ÔÏó±äÁ¿µÄºê

Óï·¨
Cva_End( argument_list )

²ÎÊı
argument_list
Cva_ListÒªÇåÀíµÄ±äÁ¿

ÃèÊö
ÇåÀíÒÔÇ°Ê¹ÓÃ »ò ³õÊ¼»¯µÄÀàĞÍ±äÁ¿£¬ÈçÎö¹¹º¯Êı¡£
±ØĞëÒÑÊ¹ÓÃÓë£¨ÎªÁË¿çÆ½Ì¨¼æÈİĞÔ£©ÏàÍ¬µÄ¹ı³ÌÖĞµÄÉÏÒ»¸


-------------------------------------------------------- KeyPgCvaList ----

Cva_List
  
¿É±ä²ÎÊıÁĞ±í¶ÔÏóÀàĞÍ

Óï·¨
Dim variable As Cva_List

ÃèÊö
Cva_ListÊÇÒ»ÖÖÄÚÖÃÊı¾İÀàĞÍ£¬ÓÃÓÚÔÚ¿É±ä²ÎÊı¹ı³ÌÖĞÊ¹ÓÃ¿É±ä³¤¶È²ÎÊıÁĞ±í¡£
ÓÃÓÚ³õÊ¼»¯±äÁ¿£¨¹¹Ôìº¯Êı£©¡£
ÓÃÓÚ¸´ÖÆ±äÁ¿£¨¸´ÖÆ¹¹Ôìº¯Êı£©¡£
ÓÃÓÚ»ñÈ¡ÏÂÒ»¸ö²ÎÊıµÄÖµ¡£
Ê¹ÓÃÍê±äÁ¿£¨Îö¹¹º¯Êı£


-------------------------------------------------------- KeyPgCvaStart ----

Cva_Start
  
ÓÃÓÚ³õÊ¼»¯¿É±ä²ÎÊıÁĞ±í¶ÔÏó±äÁ¿µÄºê

Óï·¨
Cva_Start( argument_list, last_param )

²ÎÊı
argument_list
Cva_ListÒª³õÊ¼»¯µÄÊı¾İÀàĞÍ±äÁ¿
last_param
¹ı³Ì²ÎÊıÁĞ±íÖĞÊ¡ÂÔºÅÖ®Ç°µÄ×îºóÒ»¸ö²ÎÊı ...

ÃèÊö
ÔÚ¿É±ä²ÎÊı¹ı³Ì¶¨ÒåÖĞ£¬ÊÇ¾ßÓĞ¸ÃÀàĞÍµÄ±äÁ¿£¬±ØĞëÊ¹ÓÃ¸ÃÀàĞÍ½øĞĞ³õÊ¼»¯²ÅÄÜÊ¹ÓÃ´«µİ¸ø¹ı³ÌµÄ±äÁ¿³¤¶È²ÎÊıÁĞ±í¡£
ÊÇ¿É±ä²ÎÊı¹ı³Ì¶¨ÒåÖĞÊ¡ÂÔºÅÖ®Ç°µÄ×îºó


-------------------------------------------------------- KeyPgCvd ----

CVD   ×ªÕûË«¾«ĞÍ
  
½« 64 Î»ÕûÊı»ò 8 ×Ö½Ú×Ö·û´®×ª»»ÎªË«¾«¶ÈÖµ

Óï·¨
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

ÓÃ·¨
result = CVD( l )
result = CVD( str )

²ÎÊı
l
Ò»¸ö 64 Î»£¬ÆäÖĞ´æ´¢ÁËË«¾«¶È±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£LongInt
str
³¤¶ÈÖÁÉÙÎª 8 ¸ö×Ö½Ú£¬ÆäÖĞ´æ´¢ÁËË«¾«¶È±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£String

·µ»ØÖµ
·µ»ØÒ»¸öÖµ£¬¸ÃÖµ±£´æÊäÈëÖµµÄ¶ş½øÖÆ¸±±¾¡£Double

ÃèÊö
´Ó 64 Î»»ò 8 ×Ö½Úµ½±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£Èç¹û×Ö·û´®µÄ³¤¶ÈĞ¡ÓÚ 8 ¸


-------------------------------------------------------- KeyPgCvi ----

CVI   ×ªÕûµ¥¾«ĞÍ
  
Ê¹ÓÃ¶ş½øÖÆ¸±±¾½«¸¡µãÊı»ò×Ö·û´®×ª»»ÎªÕûÊı±äÁ¿

Óï·¨
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer

Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

ÓÃ·¨
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

²ÎÊı
f
Ò»¸ö¸¡µãÊı£¬ÆäÖĞ´æ´¢ÁËÒ»¸öÕûÊı±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£Æä¾«¶È£¨»ò£©È¡¾öÓÚµ±Ç°Æ½Ì¨ÉÏµÄ´óĞ¡SingleDoubleInteger
str
°üº¬´æ´¢ÔÚÆäÖĞµÄÕûÊı±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£String
bits
Ö¸¶¨Òª·µ»ØµÄÕûÊıÀàĞÍ´óĞ¡¡£½ÓÊÜµÄÀàĞÍºÍ´óĞ¡½«È¡¾öÓÚµ÷ÓÃµÄÏàÓ¦º¯Êı¡£expr
expr
½«¸´ÖÆµ½ .Integer<bits>

·µ»ØÖµ
°üº¬ÊäÈë±í´ïÊ½µÄ¶ş½øÖÆ¸±±¾µÄ or ±äÁ¿¡£IntegerInteger<bits>

ÃèÊö
Ê¹ÓÃ¸¡µãÖµÖĞ°üº¬µÄ¶ş½øÖÆÊı¾İ»ò .Èç¹û×Ö·û´®°


-------------------------------------------------------- KeyPgCvl ----

CVL   ×ªÕûµ¥¾«ÕûĞÍ
  
½«µ¥¾«¶È¸¡µãÊı»òËÄ×Ö½Ú×Ö·û´®×ª»»ÎªÕûÊı £¨£© ±äÁ¿Long

Óï·¨
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

ÓÃ·¨
result = CVL( sng )
result = CVL( str )

²ÎÊı
sng
Ò»¸ö¸¡µãÊı£¬ÆäÖĞ´æ´¢ÁËÒ»¸öÕûÊı±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£Single
str
³¤¶ÈÖÁÉÙÎªËÄ¸ö×Ö½Ú£¬ÆäÖĞ´æ´¢ÁËÕûÊı±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£String

·µ»ØÖµ
Òª½«ÕûÊıµÄ¶ş½øÖÆ¸±±¾¸´ÖÆµ½µÄ±äÁ¿¡£Long

ÃèÊö
Ê¹ÓÃ a ÖĞ°üº¬µÄ¶ş½øÖÆÊı¾İ·µ»ØÒ»¸ö 32 Î»ÕûÊıÖµ£¬»ò³¤¶ÈÖÁÉÙÎª 4 ¸ö×Ö½ÚµÄ a¡£Èç¹û×Ö·û´®


-------------------------------------------------------- KeyPgCvlongint ----

CVLongInt   ×ªË«¾«³¤ÕûĞÍ
  
½«Ë«¾«¶È¸¡µãÊı»ò°Ë×Ö½Ú×Ö·û´®×ª»»Îª±äÁ¿LongInt

Óï·¨
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

ÓÃ·¨
result = CVLongInt( dbl )
result = CVLongInt( str )

²ÎÊı
dbl
Ò»¸ö¸¡µãÊı£¬ÆäÖĞ´æ´¢ÁË±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£DoubleLongInt
str
³¤¶ÈÖÁÉÙÎª°Ë¸ö×Ö½Ú£¬ÆäÖĞ´æ´¢ÁË±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£StringLongInt

·µ»ØÖµ
±£´æÊäÈë±äÁ¿µÄ¶ş½øÖÆ¸±±¾µÄ±äÁ¿¡£LongInt

ÃèÊö
Ê¹ÓÃ³¤¶ÈÖÁÉÙÎª 8 ¸ö×Ö½ÚµÄ a »ò a ÖĞ°üº¬µÄ¶ş½øÖÆÊı¾İ·µ»ØÒ»¸ö 64 Î»Öµ¡£Èç¹û×Ö·û´®µÄ³¤¶ÈĞ¡ÓÚ°Ë¸ö×Ö½Ú£¬


-------------------------------------------------------- KeyPgCvs ----

CVS   ×ªµ¥¾«ÕûĞÍ
  
½« 32 Î»ÕûÊı»ò 4 ×Ö½Ú×Ö·û´®×ª»»Îªµ¥¾«¶È±äÁ¿

Óï·¨
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

ÓÃ·¨
result = CVS( i )
result = CVS( str )

²ÎÊı
i
Ò»¸ö 32 Î»£¬ÆäÖĞ´æ´¢ÁËµ¥¾«¶È±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£Integer
str
³¤¶ÈÖÁÉÙÎª 4 ¸ö×Ö½Ú£¬ÆäÖĞ´æ´¢ÁËµ¥¾«¶È±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£String

·µ»ØÖµ
·µ»ØÒ»¸öÖµ£¬¸ÃÖµ±£´æÊäÈëÖµµÄ¶ş½øÖÆ¸±±¾¡£Single

ÃèÊö
´Ó 32 Î»»ò 4 ×Ö½Úµ½±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£Èç¹û×Ö·û´®µÄ³¤¶ÈĞ


-------------------------------------------------------- KeyPgCvshort ----

CVShort   ×ª×Ö¶ÌÕûĞÍ
  
½«Ë«×Ö½Ú×Ö·û´®×ª»»ÎªÕûÊı±äÁ¿Short

Óï·¨
Declare Function CVShort ( ByRef str As Const String ) As Short

ÓÃ·¨
result = CVShort( str )

²ÎÊı
str
³¤¶ÈÖÁÉÙÎªÁ½¸ö×Ö½Ú£¬ÆäÖĞ´æ´¢ÁËÕûÊı±äÁ¿µÄ¶ş½øÖÆ¸±±¾¡£StringShort

·µ»ØÖµ
 Short±£´æ µÄ¶ş½øÖÆ¸±±¾µÄ±äÁ¿¡£Keypgshort

ÃèÊö
Ê¹ÓÃ³¤¶ÈÖÁÉÙÎªÁ½¸ö×Ö½ÚµÄ a ÖĞ°üº¬µÄ¶ş½øÖÆÊı¾İ·µ»ØÒ»¸ö 16 Î»ÕûÊıÖµ¡£Èç¹û×Ö·û´®µÄ³¤¶ÈĞ¡ÓÚÁ½¸ö×Ö½Ú£¬Ôò·µ»ØÖµÎªÁã £¨£©¡£
ÓÃÓÚ×ª


-------------------------------------------------------- KeyPgData ----

Data   Êı¾İ
  
ÓÃÓÚÔÚ±àÒëÊ±´æ´¢Êı¾İµÄÓï¾ä¡£

Óï·¨
Data constant_expression1 [,constant_expression2]...

ÃèÊö
Data´æ´¢³£Á¿ÊıÖµ»ò×ÖÄ¸±í´ïÊ½µÄÁĞ±í£¬ÕâĞ©±í´ïÊ½ÔÚ±àÒëÊ±¼ÆËã£¨Ê¹ÓÃ -lang qb ³ıÍâ£©£¬²¢´æ´¢Îª³£Á¿£¬¿ÉÒÔÊ¹ÓÃ ¶ÁÈ¡µ½±äÁ¿ÖĞ¡£
³ÌĞòÖĞµÄËùÓĞÓï¾ä¶¼±íÏÖÎªµ¥¸öÁ´Ê½ÁĞ±í;¶ÁÈ¡Ò»¸öÓï¾äµÄ×îº


-------------------------------------------------------- KeyPgDate ----

Date   ÈÕÆÚ
  
ÒÔ×Ö·û´®ĞÎÊ½·µ»Øµ±Ç°ÏµÍ³ÈÕÆÚ

Óï·¨
Declare Function Date ( ) As String

ÓÃ·¨
result = Date[$]

·µ»ØÖµ
·µ»Øµ±Ç°ÏµÍ³ÈÕÆÚ£¬¸ñÊ½Îªmm-dd-yyyy

ÃèÊö
Ã»ÓĞ

Àı

Print Date ' ´òÓ¡µ±Ç°ÈÕÆÚ



ÓëQBµÄÇø±ğ
QB DATE Óï¾ä£¨ÓÃÓÚÉèÖÃÏµÍ³ÈÕÆÚ£©ÏÖÔÚ³ÆÎª ¡£SetDate
×Ö·û´®ÀàĞÍºó×º¡°$¡±ÔÚ -lang qb ·½ÑÔÖĞÊÇ±ØĞèµÄ¡£


-------------------------------------------------------- KeyPgDateAdd ----

DateAdd   ÈÕÆÚÏà¼Ó
  
ÒÔÖ¸¶¨µÄ¼ä¸ôÆ«ÒÆÈÕÆÚ

Óï·¨
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

ÓÃ·¨
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

²ÎÊı
interval
Ö¸Ê¾ÄÄ¸öÊ±¼ä¶Î¶ÔÓ¦ÓÚÒ»¸öµ¥Î»µÄ×Ö·û´®number
number
ÒªÌí¼Óµ½»ù×¼ÈÕÆÚµÄ¼ä¸ôÊı¡£¸ÃÊı×Ö½«ËÄÉáÎåÈëÎª×î½Ó½üµÄÕûÊı¡£
date_serial
»ù×¼ÈÕÆÚ

·µ»ØÖµ
·µ»ØÓëÊÕµ½µÄ ¼ÓÉÏ µÄ Ïà¶ÔÓ¦µÄ ÈÕÆÚĞòÁĞ¡£date_serialnumberintervals

ÃèÊö
¼ä¸ôÖ¸


-------------------------------------------------------- KeyPgDateDiff ----

DateDiff   ÈÕÆÚ²îÖµ
  
»ñÈ¡°´Ö¸¶¨¼ä¸ô²âÁ¿µÄÁ½¸öÈÕÆÚµÄ²îÒì

Óï·¨
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

²ÎÊı
interval
ÓÃÓÚ²âÁ¿²îÖµµÄÊ±¼äµ¥Î»£¨¼ä¸ô£©
date_serial1
¿ªÊ¼ÈÕÆÚĞòÁĞ
date_serial2
½áÊøÈÕÆÚĞòÁĞ
firstdayofweek
Ò»ÖÜµÄµÚÒ»Ìì
firstdayofyear
Ò»ÄêµÄµÚÒ»Ìì

·µ»ØÖµ
·µ»ØÒ»¸öÕûÊı£¬¸ÃÕûÊı¶ÔÓ¦ÓÚÔÚÁ½¸öÈÕÆÚĞòÁĞÖ®¼äÕÒµ½µÄ s Êı¡£
Èç¹û>£¬Ôò½á¹ûÎª¸ºÊı¡£intervaldate_serial1date_serial2

ÃèÊö
intervalÖ¸¶¨ÈçÏÂ£º

¼ÛÖµ¼ä¸ôyyyyÄêq¼¾¶È£¨Èı¸öÔÂ£©mÔÂ·İwÆßÌìÆÚ¼ä¶ÏĞøÆ÷ÈÕÀúÖÜd£¬yÈÕhĞ¡Ê


-------------------------------------------------------- KeyPgDatePart ----

DatePart   ÈÕÆÚ²¿·Ö
  
´ÓÈÕÆÚ»ñÈ¡¼ä¸ô

Óï·¨
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

²ÎÊı
interval
Ö¸Ê¾ÈÕÆÚµÄÄÄÒ»²¿·ÖĞèÒªµÄ×Ö·û´®
date_serial
Òª½âÂëµÄÈÕÆÚĞòÁĞ
firstdayofweek
Ò»ÖÜµÄµÚÒ»Ìì
firstdayofyear
Ò»ÄêµÄµÚÒ»Ìì

·µ»ØÖµ
·µ»ØÒ»¸öÕûÊı£¬±íÊ¾ ÈÕÆÚĞòÁĞÖĞµÄ ¡£interval

ÃèÊö

intervalÖ¸Ê¾ĞèÒªÈÕÆÚµÄÄÄÒ»²¿·ÖµÄ×Ö·û´®Ö¸¶¨ÈçÏÂ£º

¼ÛÖµ¼ä¸ôyyyyÄêq¼¾¶È£¨Èı¸öÔÂ£©mÔÂ·İw¹¤×÷ÈÕ¶ÏĞøÆ÷Ò»ÄêÖĞµÄÒ»ÖÜyÒ»ÄêÖĞµÄ


-------------------------------------------------------- KeyPgDateSerial ----

DateSerial   ÈÕÆÚĞòÁĞ
  
´´½¨ÈÕÆÚĞòÁĞ

Óï·¨
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = DateSerial( year, month, day )

²ÎÊı
year
Äê·İ
month
Ò»ÄêÖĞµÄÔÂ·İ
day
ÔÂ·İÖĞµÄÄ³Ò»Ìì

·µ»ØÖµ
·µ»ØÒ»¸öÈÕÆÚĞòÁĞ£¬ÆäÖĞ°üº¬ÓÉ ºÍ ²ÎÊıÖĞµÄÖµĞÎ³ÉµÄÈÕÆÚ¡£·µ»ØµÄÈÕÆÚĞòÁĞÃ»ÓĞ


-------------------------------------------------------- KeyPgDateValue ----

DateValue   ÈÕÆÚÊıÖµ
  
´Ó×Ö·û´®·µ»ØÈÕÆÚĞòÁĞ

Óï·¨
Declare Function DateValue ( ByRef date_string As String ) As Double

ÓÃ·¨
#include "vbcompat.bi"
result = DateValue( date_string )

²ÎÊı
date_string
Òª×ª»»ÎªÈÕÆÚĞòÁĞµÄ×Ö·û´®

·µ»ØÖµ
´ÓÈÕÆÚ×Ö·û´®·µ»ØÈÕÆÚĞòÁĞ¡£

ÃèÊö
ÈÕÆÚ×Ö·û´®±ØĞë²ÉÓÃÔÚ²Ù×÷ÏµÍ³µÄÇøÓòÉèÖÃÖĞÉèÖÃµÄ¸ñÊ½¡£
½öµ±ÇøÓòÉèÖÃÖ¸¶¨ÁËÓëÊ¹ÓÃµÄÏàÍ¬µÄ¶ÌÈÕÆÚ¸ñÊ½ QB £¨£© Ê±£¬²ÅÄÜÕı³£¹¤×÷¡£Çë¿¼ÂÇÔ


-------------------------------------------------------- KeyPgDay ----

Day   ÈÕÆÚÈ¡Ìì
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡ÔÂ·İÖĞµÄÄ³Ò»Ìì

Óï·¨
Declare Function Day ( ByVal date_serial As Double ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Day( date_serial )

²ÎÊı
date_serial
ÈÕÆÚ

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ·µ»ØÔÂ·İÖĞ


-------------------------------------------------------- KeyPgDddate ----

__DATE__   _±àÒë__ÈÕÆÚ__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__DATE__

ÃèÊö
½«ÎÄ±¾×Ö·û´®£¨¸ñÊ½£©


-------------------------------------------------------- KeyPgDddateiso ----

__DATE_ISO__   _±àÒë_ÈÕÆÚ_ISO
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__DATE_ISO__

ÃèÊö
½«ÎÄ±¾×Ö·û´®£¨¸ñÊ½£©ÖĞµÄ±àÒëÆ÷ÈÕÆÚÌæ»»ÎªÒÑÊ¹ÓÃµÄ


-------------------------------------------------------- KeyPgDdfb64bit ----

__FB_64BIT__   _±àÒë_64Î»
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_64BIT__

ÃèÊö
¶¨Òå±àÒëÊ±´


-------------------------------------------------------- KeyPgDdfbargc ----

__FB_ARGC__   _±àÒë´«Ãû³Æ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_ARGC__

ÃèÊö
Ìæ»»ÎªÃüÁîĞĞÉÏ´«ÈëµÄ²ÎÊıÊı¡£
 __FB_ARGC__ÊÇ´«µİ¸ø³ÌĞò


-------------------------------------------------------- KeyPgDdfbargcount ----

__FB_ARG_COUNT__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_ARG_COUNT__( args... )

²ÎÊı
args...
²ÎÊıÁĞ±í

ÃèÊö
¼ÆËã²ÎÊıÁĞ±í £¨£© ÖĞµÄ²ÎÊıÊı²¢·µ»ØÏàÓ¦µÄÖµ¡£
Ê¼ÖÕ·µ»ØÒ»¸öÖµ£¬ÆäÖĞ 0 ¶ÔÓ¦ÓÚ¿Õ²Î


-------------------------------------------------------- KeyPgDdfbargextract ----

__FB_ARG_EXTRACT__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_ARG_EXTRACT__( index, args... )

²ÎÊı
index
´ÓµÚÒ»¸ö²ÎÊı¿ªÊ¼µÄ´ÓÁã¿ªÊ¼µÄÆ«ÒÆÁ¿£¨Áã»òÕıÕûÊıÖµ£©
args...
²ÎÊıÁĞ±í

ÃèÊö
´ÓÓëË÷ÒıÖµ £¨£© ¶ÔÓ¦µÄ²ÎÊıÁĞ±í £¨£©


-------------------------------------------------------- KeyPgDdfbargleftof ----

__FB_ARG_LEFTOF__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_ARG_LEFTOF__( arg, sep [, ret] )

²ÎÊı
arg
ÂÛµã
sep
·Ö¸ô·û£¬Ã÷ÏÔ²»Í¬ÓÚ¶ººÅ £¨£¬£©
ret
Èç¹ûÎ´ÕÒµ½·Ö¸ô·û£¬ÔòÄ¬ÈÏ·µ»Ø

ÃèÊö
»ùÓÚ·Ö¸ô·û £¨£© ·µ»Ø²ÎÊı £¨£© µÄ×ó±ê¼Ç¡£
 £¨ÔÚ²ÎÊıµÄ±í´ïÊ½ÖĞ£¬±ê¼ÇºÍ·Ö¸ô·û±ØĞë¼ä¸ô£©
Ä¬ÈÏÇé¿öÏÂ£¬Èç¹ûÎ´¸ø³öÄ¬ÈÏ·µ»Ø 


-------------------------------------------------------- KeyPgDdfbargrightof ----

__FB_ARG_RIGHTOF__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_ARG_RIGHTOF__( arg, sep [, ret] )

²ÎÊı
arg
ÂÛµã
sep
·Ö¸ô·û£¬Ã÷ÏÔ²»Í¬ÓÚ¶ººÅ £¨£¬£©
ret
Èç¹ûÎ´ÕÒµ½·Ö¸ô·û£¬ÔòÄ¬ÈÏ·µ»Ø

ÃèÊö
»ùÓÚ·Ö¸ô·û £¨£© ·µ»Ø²ÎÊı £¨£© µÄÕıÈ·±ê¼Ç¡£
 £¨ÔÚ²ÎÊıµÄ±í´ïÊ½ÖĞ£¬±ê¼ÇºÍ·Ö¸ô·û±ØĞë¼ä¸ô£©
Ä¬ÈÏÇé¿öÏÂ£¬Èç¹ûÎ´¸ø³öÄ¬ÈÏ·µ»Ø


-------------------------------------------------------- KeyPgDdfbargv ----

__FB_ARGV__   _±àÒë´«ÈëÖµ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_ARGV__

ÃèÊö
Ìæ»»ÎªÖ¸ÏòÖ¸ÏòÃüÁîĞĞÉÏ´«ÈëµÄÁã¸öÖÕÖ¹µÄÃüÁîĞĞ²ÎÊıµÄÖ¸ÕëÁĞ±íµÄÖ¸Õë¡£
 __FB


-------------------------------------------------------- KeyPgDdfbarm ----

__FB_ARM__   _±àÒë_ARM_
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_ARM__

ÃèÊö
Èç¹û±àÒëÄ¿±êÊ¹ÓÃ ARM CPU 


-------------------------------------------------------- KeyPgDdfbasm ----

__FB_ASM__   _±àÒë_»ã±à
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_ASM__

ÃèÊö
__FB_ASM__·µ»ØÒ»¸ö×Ö·û´®£¬¸Ã×Ö·û´®µÈÓÚ»òÈ¡¾öÓÚÄÚÁª×°Å


-------------------------------------------------------- KeyPgDdFBBackend ----

__FB_BACKEND__   _±àÒë_ºó¶Ë
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_BACKEND__

ÃèÊö
¶¨ÒåÎª »ò £¬¾ßÌåÈ¡¾öÓ


-------------------------------------------------------- KeyPgDdFBBigEndian ----

__FB_BIGENDIAN__   _±àÒë_´ó¶Ë´æ´¢
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_BIGENDIAN__

ÃèÊö
Èç¹ûÎª´ó¶ËÄ¿±ê½øĞĞ±àÒë£¬ÔòÔÚ±àÒëÊ


-------------------------------------------------------- KeyPgDdFBBuildDate ----

__FB_BUILD_DATE__   _±àÒë_ÈÕÆÚ_
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FB_BUILD_DATE__

ÃèÊö
Ìæ»»Îª°üº¬±àÒë


-------------------------------------------------------- KeyPgDdfbbuilddateiso ----

__FB_BUILD_DATE_ISO__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FB_BUILD_DATE_ISO__

ÃèÊö
Ìæ»»Îª°üº¬ ISO ÈÕÆÚ¸ñÊ½¹¹½¨±


-------------------------------------------------------- KeyPgDdfbbuildsha1 ----

__FB_BUILD_SHA1__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FB_BUILD_SHA1__

ÃèÊö
Ìæ»»Îª±àÒëÆ÷µÄÔ´ SHA-1 ĞŞ¶©°æµÄ×Ö·û´®¡£¸ÃÖµÊÇÊ¹ÓÃÓÃÓÚÉú³É±àÒëÆ÷¶ş½øÖÆÎÄ¼şµÄÔ´´úÂëĞŞ


-------------------------------------------------------- KeyPgDdfbcygwin ----

__FB_CYGWIN__   _±àÒë_CYGWIN
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_CYGWIN__

ÃèÊö
¶¨ÒåÊ±£¬ÔÚ±àÒëÆ÷µÄ Cygwin °æ±¾ÖĞ£¬»òÕßÔÚÊ¹ÓÃ -target cygwin ÃüÁîĞĞÑ¡Ï


-------------------------------------------------------- KeyPgDdfbdarwin ----

__FB_DARWIN__   _±àÒë_DARWIN
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_DARWIN__

ÃèÊö
¶¨ÒåÊ±²»Ê¹ÓÃÔÚ±àÒëÆ÷µÄ´ï¶ûÎÄ°æ±¾ÖĞ±àÒëÊ±»òÊ¹ÓÃ -target darwin Ã


-------------------------------------------------------- KeyPgDdfbdebug ----

__FB_DEBUG__   _±àÒë_µ÷ÊÔ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_DEBUG__

ÃèÊö
__FB_DEBUG__Ö¸Ê¾±àÒëÊ±ÊÇ·ñÔÚÃüÁîĞĞÉÏÖ¸¶¨ÁË¡°Éú³Éµ÷ÊÔĞÅÏ¢¡±Ñ¡Ïî»ò¡°ÆôÓÃÄÚ²¿¶¨Òå¡±Ñ¡Ïî¡£
Èç¹ûÖ¸¶¨ÁËÈÎÒ»Ñ¡Ïî£¬Ôò·µ»Ø·ÇÁã £¨-1£©¡£·ñÔò·µ»ØÁã £¨0£©¡£
¿ÉÓÃÓÚ


-------------------------------------------------------- KeyPgDdfbdos ----

__FB_DOS__   _±àÒë_DOS
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_DOS__

ÃèÊö
Èç¹ûÎª DOS Ä¿±ê½øĞĞ±àÒë£¬Ôò¶¨ÒåÊ±²»´´½¨ÔÚ±àÒëÊ±´´½¨µÄÖµ¡£ÔÚ DOS ÍĞ¹Ü°æ±¾ÖĞÈ±Ê¡£¬»òÔÚÊ¹ÓÃ -target dos ÃüÁîĞĞÑ¡ÏîÊ±´¦ÓÚ»


-------------------------------------------------------- KeyPgDdfberr ----

__FB_ERR__   _±àÒë_´íÎó
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_ERR__

ÃèÊö
__FB_ERR__Ö¸Ê¾ÔÚ±àÒëÄ£¿éÊ±ÊÇ·ñÔÚ±àÒëÆ÷ÃüÁîĞĞÉÏÖ¸¶¨ÁË -e¡¢-ex »ò -exx¡£
Ö¸Ê¾ÔÚ±àÒëÄ£¿éÊ±£¬ÊÇ·ñÔÚ±àÒëÆ÷ÃüÁîĞĞÉÏÖ¸¶¨ÁË -earray¡¢-enullptr »ò -elocation£¬»òÕßÍ¨¹ıÊ¹ÓÃ -exx ½øĞĞ


-------------------------------------------------------- KeyPgDdfbeval ----

__FB_EVAL__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_EVAL__( arg )

²ÎÊı
arg
ÂÛµã

ÃèÊö
ÔÚ±àÒëÊ±¼ÆËã²ÎÊı£¨³£Á¿±í´ïÊ½£©¡£
µ±²ÎÊı¼ÆËãÉú³É×Ö·û´®Ê±£¬·µ»ØÊ¹ÓÃÔ¤´¦ÀíÆ÷ÔËËã·û¸ñÊ½»¯µÄ×Ö·û´®£º__FB_EVAL__
-a £¨ĞÎÊ½£º £©£¬
 - »ò £¨ĞÎÊ½£º £©Èç¹ûĞèÒª¡£Non-Escaped String 


-------------------------------------------------------- KeyPgDdfbfpmode ----

__FB_FPMODE__   _±àÒë_¿ìËÙ_
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_FPMODE__

ÃèÊö
¶¨ÒåÎªÆôÓÃÁË SSE ¿ìËÙËãÊõ£


-------------------------------------------------------- KeyPgDdfbfpu ----

__FB_FPU__   _±àÒë_¸¡µã
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_FPU__

ÃèÊö
¶¨ÒåÎªÆôÓÃÁË SSE ¸¡


-------------------------------------------------------- KeyPgDdfbfreebsd ----

__FB_FREEBSD__   _±àÒë_FREEBSD
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_FREEBSD__

ÃèÊö
¶¨ÒåÊ±ÔÚ±àÒëÊ±ÔÚ FreeBSD °æ±¾µÄ±àÒëÆ÷ÖĞ´´½¨µÄÖµ£¬»òÕßµ±Ê¹ÓÃ -target freebsd ÃüÁîĞ


-------------------------------------------------------- KeyPgDdfbgcc ----

__FB_GCC__   _±àÒë_GCC
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_GCC__

ÃèÊö
Èç¹ûÊ¹ÓÃ -gen gcc£¬Ôò¶¨ÒåÎª true


-------------------------------------------------------- KeyPgDdfbgui ----

__FB_GUI__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_GUI__

ÃèÊö
__FB_GUI__Ö¸Ê¾±àÒëÊ±ÊÇ·ñÔÚÃüÁîĞĞÉÏÖ¸¶¨ÁË¿ÉÖ´ĞĞ×ÓÏµÍ³Ñ¡Ïî '-s gui'¡£
Èç¹ûÖ¸¶¨ÁË¿ÉÖ´ĞĞ×ÓÏµÍ³Ñ¡Ïî ¡°-s gui¡±£¬Ôò·


-------------------------------------------------------- KeyPgDdfbjoin ----

__FB_JOIN__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_JOIN__( arg1, arg2 )

²ÎÊı
arg1,arg2
Òª¼ÓÈëµÄ×ó £¨1£© ºÍÓÒ £¨2£© ¸ö²ÎÊı

ÃèÊö
½«Á½¸öÁîÅÆ²ÎÊıÁ¬½


-------------------------------------------------------- KeyPgDdfblang ----

__FB_LANG__   _±àÒë_ÓïÑÔ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_LANG__

ÃèÊö
__FB_LANG__Ö¸Ê¾ÔÚ±àÒëÄ£¿éÊ±ÉèÖÃµÄÓïÑÔ¼æÈİĞÔÑ¡Ïî¡£Ä¬ÈÏÇé¿öÏÂ½«ÉèÖÃÎª ¡£¿ÉÒÔÊ¹ÓÃÒÔÏÂÒ»ÖÖ£¨»ò¶àÖÖ£©·½·¨¸ü¸ÄÓïÑÔ¼æÈİĞÔÑ¡Ïî£º__FB_LANG__"fb"
 -lang ÃüÁîĞĞÑ¡Ïî
 -forcelang ÃüÁîĞ


-------------------------------------------------------- KeyPgDdfblinux ----

__FB_LINUX__   _±àÒë_LINUX
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_LINUX__

ÃèÊö
ÔÚ±àÒëµ½ Linux Ä¿±êÊ±£¬²»Ê¹ÓÃ±àÒëÊ±´´½¨µÄÖµ½øĞĞ¶¨Òå¡£Ä¬ÈÏÎª Linux ÍĞ¹Ü°æ±¾µÄ±àÒëÆ÷£¬»òÔÚÊ¹ÓÃ -tar


-------------------------------------------------------- KeyPgDdFBMain ----

__FB_MAIN__   _±àÒë_Ö÷Ä£_
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_MAIN__

ÃèÊö
__FB_MAIN__ÔÚÖ÷Ä£¿éÖĞ¶¨Òå£¬¶ø²»ÊÇÔÚÆäËûÄ£¿éÖĞ¶¨Òå¡£
±àÒëÆ÷½«


-------------------------------------------------------- KeyPgDdFBMinVersion ----

__FB_MIN_VERSION__   _±àÒë_×îĞ¡±àÒë°æ±¾
  
ÓÃÓÚ²âÊÔ×îµÍ±àÒëÆ÷°æ±¾µÄºêº¯Êı

Óï·¨
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

ÓÃ·¨
__FB_MIN_VERSION__( major, minor, patch)

²ÎÊı
major
Òª²âÊÔµÄ×îµÍÖ÷Òª°æ±¾
minor
Òª²âÊÔµÄ×îµÍ´ÎÒª°æ±¾
patch
Òª²âÊÔµÄ×îµÍ²¹¶¡°æ±¾

·µ»ØÖµ
Èç¹û±àÒëÆ÷°æ±¾Ğ¡ÓÚÖ¸¶¨°æ±¾£¬


-------------------------------------------------------- KeyPgDdfbmt ----

__FB_MT__   _±àÒë¶àÏß³Ì
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_MT__

ÃèÊö
__FB_MT__Ö¸Ê¾±àÒëÊ±ÊÇ·ñÔÚÃüÁîĞĞÉÏÖ¸¶¨ÁË¶àÏß³ÌÑ¡Ïî -mt£¬»òÕßÊÇ·ñÔÚÔ´´úÂëÖĞ¸ü¶àµØÊ¹ÓÃÁË or ¹Ø¼ü×


-------------------------------------------------------- KeyPgDdfbnetbsd ----

__FB_NETBSD__   _±àÒë_NETBSD
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_NETBSD__

ÃèÊö
¶¨ÒåÊ±£¬ÔÚ NetBSD °æ±¾µÄ±àÒëÆ÷ÖĞ£¬»òÕßÔÚÊ¹ÓÃ -target netbsd ÃüÁîĞĞÑ¡ÏîÊ


-------------------------------------------------------- KeyPgDdfbopenbsd ----

__FB_OPENBSD__   _±àÒë_OPENBSD
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_OPENBSD__

ÃèÊö
ÔÚ OpenBSD °æ±¾µÄ±àÒëÆ÷ÖĞ£¬»òÕßÔÚÊ¹ÓÃ -target openbsd ÃüÁîĞĞÑ¡ÏîÊ±£¬¶¨ÒåÊ±


-------------------------------------------------------- KeyPgDdfboptimize ----

__FB_OPTIMIZE__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_OPTIMIZE__

ÃèÊö
Ê¼ÖÕ¶¨Òå£¬²¢ÇÒ½«¾ßÓĞ´Ó 0 µ½ 3£¨Ä¬ÈÏÇé¿öÏÂÎ


-------------------------------------------------------- KeyPgDdfboptionbyval ----

__FB_OPTION_BYVAL__   _±àÒëÑ¡ÏîÖ§³ÖÖµ´«µİ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OPTION_BYVAL__

ÃèÊö
Ö¸Ê¾µ±Î´ÏÔÊ½ÉùÃ÷ by value /by ÒıÓÃËµÃ÷·ûÊ±£¬ÊÇ·ñÍ¨¹ıÒıÓÃ´«µİ¸ø »ò °´Öµ´«µİµÄ²ÎÊı£¨Èç with £©£¬»òÕßÏñÄ¬ÈÏÇé¿öÏÂÄÇÑù°´Öµ´«µİ¡£
Èç¹ûÄ¬ÈÏÇé¿öÏÂ²ÎÊıÊÇ´«µİÖµ£¬ÔòÉèÖÃÎª·ÇÁã £


-------------------------------------------------------- KeyPgDdfboptiondynamic ----

__FB_OPTION_DYNAMIC__   _±àÒëÑ¡ÏîÊı×é±ä³¤
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OPTION_DYNAMIC__

ÃèÊö
__FB_OPTION_DYNAMIC__¶¨ÒåÎª true£¨¸ºÊı £¨-1£©£©£¬Èç¹û·¢³öÁË×î½üµÄÓï¾


-------------------------------------------------------- KeyPgDdfboptionescape ----

__FB_OPTION_ESCAPE__   _±àÒëÑ¡Ïî_Ö§³Ö×ªÒå
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OPTION_ESCAPE__

ÃèÊö
Ö¸Ê¾Ä¬ÈÏÇé¿öÏÂ£¬Èç¹ûÎ´ÒÔ $ ÔËËã·ûÏÔÊ½Ç°×º£¨¶ÔÓÚ·Ç×ªÒå×Ö·û´®£©»ò £¡×ªÒå×Ö·û´®µÄÔËËã·û¡£
´¦Àí×Ö·û´®ÎÄ±¾µÄÈ±Ê¡·½·¨ÊÇÔÚ±àÒë»òÊ¹ÓÃÔ´ÎÄ¼şÖĞµÄ -lang ÃüÁîĞĞÑ¡ÏîÆÚ


-------------------------------------------------------- KeyPgDdfboptionexplicit ----

__FB_OPTION_EXPLICIT__   _±àÒëÑ¡Ïî_Ö§³ÖEXPLICIT
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OPTION_EXPLICIT__

ÃèÊö
__FB_OPTION_EXPLICIT__Ö¸Ê¾ÒÔÇ°ÊÇ·ñÔÚÔ´ÖĞÊ¹ÓÃ¹ı¡£
Èç¹ûÉĞÎ´ÉèÖÃ¸ÃÑ¡Ïî£¬


-------------------------------------------------------- KeyPgDdfboptiongosub ----

__FB_OPTION_GOSUB__   _±àÒëÑ¡Ïî_Ö§³ÖGOSUB
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OPTION_GOSUB__

ÃèÊö
Ö¸Ê¾ÔÚ±àÒëÊ±ÈçºÎ´¦ÀíºÍ½«Òª´¦Àí¡£Èç¹û¸ÃÑ¡ÏîÉèÖÃÎª £¨-1£©£¬ÔòÔÊĞí´ËÑ¡Ïî£¬²¢ÇÒ½ö±»Ê¶±ğÎª´Ó gosub ·µ»Ø¡£Èç¹ûÎ´ÉèÖÃ¸ÃÑ¡Ïî £¨0£©£¬Ôò²»ÔÊĞíÕâÑù×ö£¬²¢ÇÒ½ö½«ÆäÊ¶±ğÎª´Ó¹ı³Ì·µ»Ø¡£
¿


-------------------------------------------------------- KeyPgDdfboptionprivate ----

__FB_OPTION_PRIVATE__   _±àÒëÑ¡Ïî_Ö§³ÖPRIVATE
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OPTION_PRIVATE__

ÃèÊö
Ö¸Ê¾ Ä¬ÈÏÇé¿öÏÂ£¬ºÍ µÄ ÊÇ·ñ¾ßÓĞÄ£¿é×÷ÓÃÓò»òÈ«¾Ö×÷ÓÃÓò£¨Èç¹ûÎ´ÓÃ »ò ÏÔÊ½Ö¸¶¨£©¡£
º¯ÊıºÍ×ÓµÄÄ¬ÈÏ×÷ÓÃÓòËµÃ÷·ûÊÇÔÚ±àÒëÆÚ¼ä»òÔÚÔ´ÎÄ¼şÖĞÊ¹ÓÃ -lang ÃüÁîĞĞÑ¡ÏîÀ´ÉèÖÃµÄ¡£
Èç¹


-------------------------------------------------------- KeyPgDdfboutdll ----

__FB_OUT_DLL__   _±àÒë_Êä³öDLL
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OUT_DLL__

ÃèÊö
__FB_OUT_DLL__Ö¸Ê¾±àÒëÊ±±àÒëÆ÷ÃüÁîĞĞÉÏÖ¸¶¨µÄÊä³öÎÄ¼şÀàĞÍÊÇ¹²Ïí¿â¡£
Èç¹ûÊä³öÊÇ¹²Ïí¿â£¬Ôò·µ»Ø·ÇÁã £¨-1£©¡£·ñÔò·µ»ØÁã £¨0£©¡£
Ö»ÓĞ ¡¢ ¡¢ »ò ÖĞµÄÒ»¸ö½«¼ÆËã


-------------------------------------------------------- KeyPgDdfboutexe ----

__FB_OUT_EXE__   _±àÒë_Êä³öEXE
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OUT_EXE__

ÃèÊö
__FB_OUT_EXE__Ö¸Ê¾±àÒëÊ±±àÒëÆ÷ÃüÁîĞĞÉÏÖ¸¶¨µÄÊä³öÎÄ¼şÀàĞÍÊÇ¿ÉÖ´ĞĞÎÄ¼ş¡£
Èç¹ûÊä³öÊÇ¿ÉÖ´ĞĞÎÄ¼ş£¬Ôò·µ»Ø·ÇÁã £¨-1£©¡£·ñÔò·µ»ØÁã £¨0£©¡£
Ö»ÓĞ ¡¢ ¡¢ »ò ÖĞµÄÒ»¸ö½«


-------------------------------------------------------- KeyPgDdfboutlib ----

__FB_OUT_LIB__   _±àÒë_Êä³öLIB
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OUT_LIB__

ÃèÊö
__FB_OUT_LIB__Ö¸Ê¾±àÒëÊ±±àÒëÆ÷ÃüÁîĞĞÉÏÖ¸¶¨µÄÊä³öÎÄ¼şÀàĞÍÊÇ¾²Ì¬¿â¡£
Èç¹ûÊä³öÊÇ¾²Ì¬¿â£¬Ôò·µ»Ø·ÇÁã £¨-1£©¡£·ñÔò·µ»ØÁã £¨0£©¡£
Ö»ÓĞ ¡¢ ¡¢ »ò ÖĞµÄÒ»¸ö½«¼ÆËã


-------------------------------------------------------- KeyPgDdfboutobj ----

__FB_OUT_OBJ__   _±àÒë_Êä³öOBJ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_OUT_OBJ__

ÃèÊö
__FB_OUT_OBJ__Ö¸Ê¾±àÒëÊ±±àÒëÆ÷ÃüÁîĞĞÉÏÖ¸¶¨µÄÊä³öÎÄ¼şÀàĞÍÊÇ¶ÔÏóÄ£¿é¡£
Èç¹ûÊä³öÊÇ¶ÔÏóÄ£¿é£¬Ôò·µ»Ø·ÇÁã £¨-1£©¡£·ñÔò·µ»ØÁã £¨0£©¡£
Ö»ÓĞÒ»¸ö ¡¢ ¡¢ »ò µÄ¼ÆËã½á


-------------------------------------------------------- KeyPgDdfbpcos ----

__FB_PCOS__   _±àÒë³£¹æPC
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_PCOS__

ÃèÊö
¶¨ÒåÔÚ±àÒëÊ±´´½¨µÄ²Ù×÷ÏµÍ³£¬Èç¹û²Ù×÷ÏµÍ³¾ßÓĞÀàËÆÓÚ³£¼û PC ²Ù×÷ÏµÍ³µÄÎÄ¼şÏµÍ³ĞĞÎª£¬ÀıÈç DOS¡


-------------------------------------------------------- KeyPgDdfbppc ----

__FB_PPC__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_PPC__

ÃèÊö
¶¨Òå±àÒëÊ±´´½¨µÄ±àÒëÄ¿±êÊÇ·ñÊ


-------------------------------------------------------- KeyPgDdfbquote ----

__FB_QUOTE__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_QUOTE__( arg )

²ÎÊı
arg
ÂÛµã

ÃèÊö
½«²ÎÊı×ª»»Îª×Ö·û´®£¬ÀàËÆÓÚ stringize ÔËËã·û £¨#£©£¬µ«¿ÉÒÔÔÚÈÎºÎÎ»ÖÃÊ¹ÓÃ£¨½«ÔÚ×ª»»Ç°Õ¹¿ª²ÎÊı£©¡£
¸ü×¼È·µØËµ£¬ÓëÍ¨¹ı²ÎÊı´«µİµÄÎÄ±¾Ïà±È£¬·µ»ØÒ»¸ö¶àÒıºÅÎÄ±¾£¨Ç°×ºÎª £


-------------------------------------------------------- KeyPgDdfbsignature ----

__FB_SIGNATURE__   _±àÒë_±àÒëÇ©Ãû
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FB_SIGNATURE__


-------------------------------------------------------- KeyPgDdfbsse ----

__FB_SSE__   _±àÒë_SSE
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_SSE__

ÃèÊö
Èç¹ûÆôÓÃÁË SSE ¸¡µ


-------------------------------------------------------- KeyPgDdfbuniqueid ----

__FB_UNIQUEID__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_UNIQUEID__( stack-id )

²ÎÊı
stack-id
Òª·ÃÎÊµÄ¶ÑÕ»µÄÃû³Æ

ÃèÊö
»ñÈ¡ÓÉ ±êÊ¶µÄ¶ÑÕ»¶¥²¿µÄ±êÊ¶·û£¨²»ĞŞ¸Ä¶ÑÕ»µÄ´óĞ¡£©¡£
 £¨ÔÊĞí½«ĞÂµÄÎ¨Ò»±êÊ¶·ûÍÆËÍµ½¶ÑÕ»£¬²¢ÔÊĞí´Ó¶ÑÕ»ÖĞµ¯³ö±êÊ¶·û£©
×¢Òâ£ºstack-id__FB_UNIQUEID_PUSH____FB_UNIQUEID_PO


-------------------------------------------------------- KeyPgDdfbuniqueidpop ----

__FB_UNIQUEID_POP__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_UNIQUEID_POP__( stack-id )

²ÎÊı
stack-id
Òªµ¯³öµÄ¶ÑÕ»µÄÃû³Æ

ÃèÊö
´Ó±êÊ¶µÄ¶ÑÕ»ÖĞµ¯³öÒ»¸ö±êÊ¶·û£¨¶ÑÕ»µÄ´óĞ¡¼õĞ¡ 1£©¡£
 £¨ÔÊĞí»ñÈ¡¶ÑÕ»¶¥²¿µÄ±êÊ¶·û£¬²¢ÔÊĞí½«ĞÂµÄÎ¨Ò»±êÊ¶·ûÍÆËÍµ½¶ÑÕ»£©
×¢Òâ£ºstack-id__FB_UNIQUEID____FB_UNIQUEID_PUSH__


-------------------------------------------------------- KeyPgDdfbuniqueidpush ----

__FB_UNIQUEID_PUSH__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_UNIQUEID_PUSH__( stack-id )

²ÎÊı
stack-id
ÒªÍÆËÍµÄ¶ÑÕ»µÄÃû³Æ

ÃèÊö
½«ĞÂµÄÎ¨Ò»±êÊ¶·ûÍÆËÍµ½ ÓÉ ±êÊ¶µÄ¶ÑÕ»£¨¶ÑÕ»µÄ´óĞ¡Ôö¼Ó 1£©¡£
 £¨ÔÊĞíÔÚ¶ÑÕ»¶¥²¿»ñÈ¡±êÊ¶·û£¬²¢ÔÊĞí´Ó¶ÑÕ»ÖĞµ¯³ö±êÊ¶·û£©
×¢Òâ£ºstack-id__FB_UNIQUEID____FB_UNIQUEID_POP__


-------------------------------------------------------- KeyPgDdfbunix ----

__FB_UNIX__   _±àÒë_UNIX
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_UNIX__

ÃèÊö
¶¨ÒåÔÚ±àÒëÊ±´´½¨µÄ²Ù×÷ÏµÍ³£¬Èç¹û²Ù×


-------------------------------------------------------- KeyPgDdfbunquote ----

__FB_UNQUOTE__
  
±àÒëÆ÷Ö´ĞĞµÄÄÚ²¿¶¨Òå£¨ºê£©¡£

Óï·¨
__FB_UNQUOTE__( arg )

²ÎÊı
arg
ÂÛµã

ÃèÊö
²ÉÓÃÎÄ±¾×Ö·û´®²¢½«Æä×ª»»»Ø±ê¼Ç¡£
¸ü×¼È·µØËµ£¬ÓëÍ¨¹ı²ÎÊı´«µİµÄÎÄ±¾Ïà±È£¬·µ»ØÒ»¸ö´ø×ÓÒıº


-------------------------------------------------------- KeyPgDdfbvectorize ----

__FB_VECTORIZE__   _±àÒë_±àºÅ¼¶±ğ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_VECTORIZE__

ÃèÊö
¶¨ÒåÎªÓÉ 


-------------------------------------------------------- KeyPgDdFBVerMajor ----

__FB_VER_MAJOR__   _±àÒë_Ö÷°æ±¾ºÅ
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MAJOR__

Description
__FB_VER_MAJOR__ will return the major version of FreeBASIC currently being used.  For example, the major version is 0 for FreeBASIC 0.90, and will remain 0 until FreeBASIC version


-------------------------------------------------------- KeyPgDdFBVerMinor ----

__FB_VER_MINOR__   _±àÒë_´Î°æ±¾ºÅ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_VER_MINOR__

ÃèÊö
__FB_VER_MINOR__½«·µ»Øµ±Ç°ÕıÔÚÊ¹ÓÃµÄ FreeBASIC µÄ´ÎÒª°æ±¾¡


-------------------------------------------------------- KeyPgDdFBVerPatch ----

__FB_VER_PATCH__   _±àÒë_°æ±¾ĞŞ¶©
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__FB_VER_PATCH__

ÃèÊö
__FB_VER_PATCH__½«·µ»Øµ±Ç°ÕıÔÚÊ¹ÓÃµÄFreeBASIC°æ±¾µÄ²¹¶¡/µß¸²/ĞŞ¶©°æºÅ¡£ÀıÈç£¬¶ÔÓÚ FreeBAS


-------------------------------------------------------- KeyPgDdfbversion ----

__FB_VERSION__   _±àÒë_°æ±¾ºÅ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
 __FB_VERSION__


-------------------------------------------------------- KeyPgDdfbwin32 ----

__FB_WIN32__   _±àÒë_Win32
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_WIN32__

ÃèÊö
Èç¹û±àÒëµ½ Win£¨32 Î»»ò 64 Î»£©Ä¿±ê£¬Ôò¶¨ÒåÔÚ±àÒëÊ±²»´´½¨Öµ¡£ÔÚ Win ÍĞ¹Ü°æ±¾ÖĞÎªÄ¬ÈÏÖµ£¬Èç¹ûÊ¹ÓÃ -target win32 »ò -


-------------------------------------------------------- KeyPgDdfbx86 ----

__FB_X86__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_X86__

ÃèÊö
¶¨Òå±àÒëÊ±´´½¨µÄ±àÒëÄ¿±êÊÇ·ñÊ¹ÓÃ X


-------------------------------------------------------- KeyPgDdfbxbox ----

__FB_XBOX__   _±àÒë_XBOX
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå

Óï·¨
__FB_XBOX__

ÃèÊö
¶¨ÒåÊ±²»Ê¹ÓÃÔÚ±àÒëÊ±Ê¹ÓÃ -target xbox ÃüÁîĞĞÑ¡ÏîÊ±´´


-------------------------------------------------------- KeyPgDdfile ----

__FILE__   __ÎÄ¼ş__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FILE__

ÃèÊö
Ìæ»»ÎªÒıÓÃµÄÔ´ÎÄ¼şÃû£


-------------------------------------------------------- KeyPgDdfilenq ----

__FILE_NQ__   __ÎÄ¼ş_Î´ÓÃ
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FILE_NQ__

ÃèÊö


-------------------------------------------------------- KeyPgDdfunction ----

__FUNCTION__   __º¯Êı__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FUNCTION__

ÃèÊö
Ìæ»»Îªµ±Ç°¹¦ÄÜ¿éµÄÒıºÅÃû³Æ¡£
ËüµÄÕı³£ÓÃÍ¾ÊÇÔÚµ÷ÊÔÖĞ±¨¸æ´íÎóµÄÖµ¡£
Èç¹ûÔÚÄ£¿é¼¶±ğÊ¹ÓÃ£¬Ôò¸ø¶¨µÄº


-------------------------------------------------------- KeyPgDdfunctionnq ----

__FUNCTION_NQ__   __º¯Êı_Î´ÒıÓÃ__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__FUNCTION_NQ__

ÃèÊö
Ìæ»»Îªµ±Ç°¹¦ÄÜ¿é£¨Èç¹ûÊ¹ÓÃ£©µÄ·ÇÒıºÅÃû³Æ¡£
Èç¹ûÔÚÄ£¿é¼¶±ğÊ¹ÓÃ£¬Ôò¸ø¶¨µÄº¯ÊıÃû³Æ½«ÓÃÓÚÖ÷Ä£¿é»òÆäËûÄ£¿é¡£µ


-------------------------------------------------------- KeyPgDdline ----

__LINE__   __ĞĞ__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__LINE__

ÃèÊö
Ìæ»»ÎªËùÓÃÔ´ÎÄ¼şµÄ


-------------------------------------------------------- KeyPgDdpath ----

__PATH__   __Â·¾¶__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºê×Ö·û´®£©

Óï·¨
__PATH__

ÃèÊö



-------------------------------------------------------- KeyPgDdtime ----

__TIME__   __Ê±¼ä__
  
±àÒëÆ÷ÉèÖÃµÄÄÚ²¿¶¨Òå£¨ºêÖµ£©

Óï·¨
__TIME__

ÃèÊö
Ìæ»»ÒÑÊ¹ÓÃµÄÎÄ±¾×Ö·û´®


-------------------------------------------------------- KeyPgDeallocate ----

Deallocate   ÄÚ´æ·ÖÅäÇå³ı
  
ÊÍ·ÅÒÔÇ°·ÖÅäµÄÄÚ´æ

Óï·¨
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

ÓÃ·¨
Deallocate( pointer )

²ÎÊı
pointer
ÒÔÇ°·ÖÅäµÄ»º³åÇøµÄµØÖ·¡£

ÃèÊö
´Ë¹ı³Ì½«ÊÍ·ÅÒÔÇ°Ê¹ÓÃ ·ÖÅäµÄÄÚ´æ¡£ ±ØĞëÊÇÓĞĞ§µÄÖ¸Õë¡£¹ı³Ì·µ»Øºó£¬½«³ÊÏÖÎªÎŞĞ§£¨Ö¸ÏòÎŞĞ§µÄÄÚ´æµØÖ·£©£¬²¢ÇÒÆäÊ¹ÓÃ£¨È¡ÏûÒıÓÃ»òÔÙ´Îµ÷ÓÃDeallocate£©½«µ¼ÖÂÎ´¶¨ÒåµÄĞĞÎª


-------------------------------------------------------- KeyPgDeclare ----

Declare   ÉùÃ÷
  
ÉùÃ÷Ä£¿é¼¶»ò³ÉÔ±¹ı³Ì

Óï·¨
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]

Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

²ÎÊı
param_list
ÓÃ¶ººÅ·Ö¸ôµÄÀ¨ºÅÀ¨ÆğÀ´µÄ²ÎÊıÁĞ±í¡£
return_type
¡¢»ò ¹ı³ÌµÄ·µ»ØÀàĞÍ¡£FunctionOperatorProperty
name
¹ı³ÌµÄÃû³Æ»ò·ûºÅ¡£
op_symbol
ÔËËã·ûµÄÃû³Æ»ò·ûºÅ¡£
T
ĞÂµÄÓÃ»§¶¨ÒåÀàĞÍµÄÃû³Æ¡£

ÃèÊö
¸ÃÓï¾äÉùÃ÷ a ¡¢ ¡¢ ¡¢ »ò ¡£
¿ÉÒÔÔÚ´úÂëÖĞÒıÓÃ¸Ã¹ı³Ì£¬¶øÎŞĞè²é¿´Æä¶¨Òå£¬¾¡¹ÜËü±ØĞëÔÚÄ³¸öÎ»ÖÃ¶¨Òå¡£´Ó±¾ÖÊÉÏ½²£¬¸ÃÉùÃ÷ÒıÈë


-------------------------------------------------------- KeyPgDefbyte ----

DefByte   Ä¬ÈÏ×Ö½Ú
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefByte start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefByteÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù


-------------------------------------------------------- KeyPgDefdbl ----

DefDbl   Ä¬ÈÏË«¾«ĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefDbl start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefDblÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±


-------------------------------------------------------- KeyPgDefined ----

defined   Ô¤¶¨Òå
  
Ô¤´¦ÀíÆ÷º¯Êı£¬ÓÃÓÚ²âÊÔÊÇ·ñ¶¨ÒåÁË½»Ò×Æ·ÖÖ

Óï·¨
defined (symbol_name)

²ÎÊı
symbol_name
Òª²âÊÔµÄÆ·ÖÖµÄÃû³Æ

·µ»ØÖµ
Èç¹ûÒÑ¶¨Òå½»Ò×Æ·ÖÖ£¬Ôò·µ»Ø·ÇÁã £¨£©£¬·ñÔò·µ»ØÁã £¨£©¡£-10

ÃèÊö
¸ø¶¨·ûºÅÃû³Æ£¬Èç¹ûÒÑ¶¨Òå·ûºÅ£¬ÔòÔ¤´¦À


-------------------------------------------------------- KeyPgDefint ----

DefInt   Ä¬ÈÏÕûĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefInt start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefIntÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±¾²


-------------------------------------------------------- KeyPgDeflng ----

DefLng   Ä¬ÈÏ³¤ĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefLng start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefLngÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù


-------------------------------------------------------- KeyPgDeflongint ----

DefLongInt   Ä¬ÈÏ³¤ÕûĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefLongInt start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefLongIntÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±¾


-------------------------------------------------------- KeyPgDefshort ----

DefShort   Ä¬ÈÏ¶ÌÕûĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefShort start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefShortÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù


-------------------------------------------------------- KeyPgDefsng ----

DefSng   Ä¬ÈÏµ¥¾«ĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefSng start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefSngÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±


-------------------------------------------------------- KeyPgDefstr ----

DefStr   Ä¬ÈÏ×Ö·û
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefStr start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefStrÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±¾


-------------------------------------------------------- KeyPgDefubyte ----

DefUByte   Ä¬ÈÏU×Ö½Ú
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefUByte start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefUByteÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±


-------------------------------------------------------- KeyPgDefuint ----

DefUInt   Ä¬ÈÏUÕûĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefUInt start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefUIntÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±¾²»


-------------------------------------------------------- KeyPgDefulongint ----

Defulongint   Ä¬ÈÏU³¤ÕûĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
Defulongint start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefulongintÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±¾²


-------------------------------------------------------- KeyPgDefushort ----

DefUShort   Ä¬ÈÏU¶ÌÕûĞÍ
  
Îª±äÁ¿Ãû³Æ·¶Î§Ö¸¶¨Ä¬ÈÏÊı¾İÀàĞÍ

Óï·¨
DefUShort start_letter[-end_letter ][, ...]

²ÎÊı
start_letter
·¶Î§ÖĞµÄµÚÒ»¸ö×ÖÄ¸
end_letter
·¶Î§ÖĞµÄ×îºóÒ»¸ö×ÖÄ¸

ÃèÊö
DefUShortÖ¸¶¨Î´Ê¹ÓÃÊı¾İÀàĞÍÉùÃ÷£¨»ò¸ù±


-------------------------------------------------------- KeyPgDestructor ----

Destructor   Îö¹¹º¯Êı
  
µ±Àà»òÓÃ»§¶¨ÒåµÄÀàĞÍ³¬³ö·¶Î§»ò±»Ïú»ÙÊ±×Ô¶¯µ÷ÓÃ

Óï·¨
Type typename
field declarations
Declare Destructor ( )
End Type

Destructor typename ( ) [ Export ]
statements
End Destructor

²ÎÊı
typename 
µÄÃû³ÆTypeClass

ÃèÊö
µ±ÓÃ»§¶¨ÒåµÄ»ò±äÁ¿³¬³ö·¶Î§»òÊ¹ÓÃÔËËã·ûÏÔÊ½Ïú»ÙÊ±£¬½«µ÷ÓÃÎö¹¹º¯Êı·½·¨¡£
ÊÇÎªÆäÉùÃ÷ºÍ¶¨Òå·½·¨µÄÀàĞÍµÄÃû³Æ¡£µÄÃû³Æ½âÎö×ñÑ­Óë ÔÚ ÖĞÊ¹ÓÃµÄ¹ı³ÌÏàÍ¬µÄ¹æÔò¡£
¸Ã·½·¨´


-------------------------------------------------------- KeyPgDim ----

Dim   ¶¨Òå
  
ÉùÃ÷±äÁ¿

Óï·¨
Dim [Shared] name1 As DataType [, name2 As DataType, ...]
»ò
Dim [Shared] As DataType name1 [, name2, ...]
Õó ÁĞ£º
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
³õÊ¼ÖµÉè¶¨Ïî£º
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

ÃèÊö
°´Ãû³ÆÉùÃ÷±äÁ¿²¢±£ÁôÄÚ´æÒÔÈİÄÉËü¡£
±äÁ¿±ØĞëÏÈÉùÃ÷£¬È»ºó²ÅÄÜÔÚ -lang fb ·½ÑÔÖĞÊ¹ÓÃ£¬»òÕßÔÚÆäËû·½ÑÔÖĞÊ¹ÓÃ¡£Ö»ÓĞÔÚ -lang qb ºÍ -lang fblite ·½ÑÔÖĞ£¬±äÁ¿¿ÉÒÔÔÚ²»Ê×ÏÈÉùÃ÷ËüÃÇµÄÇé


-------------------------------------------------------- KeyPgDir ----

Dir   Ä¿Â¼È¡Ãû³Æ
  
ÔÚÎÄ¼şÏµÍ³ÖĞËÑË÷²¢·µ»ØÓĞ¹ØÏîÄ¿µÄĞÅÏ¢;Ö´ĞĞÄ¿Â¼ËÑË÷ÊôĞÔ

Óï·¨
# Include "dir.bi"

Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

ÓÃ·¨
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

²ÎÊı
item_spec
ÒªÓëÏîÄ¿Ãû³ÆÆ¥ÅäµÄÄ£Ê½¡£
attrib_mask
ÒªÆ¥ÅäÏîÊôĞÔËùÒÀ¾İµÄÎ»ÑÚÂë¡£
out_attrib
ÒıÓÃ·ÖÅä¸øÕÒµ½µÄÃ¿¸öÏîµÄÊôĞÔ£¨Èç¹ûÓĞ£©µÄÎ»ÑÚÂë¡£
p_out_attrib
Ö¸Ïò·ÖÅäÁËÕÒµ½µÄÃ¿¸öÏîÊôĞÔ£¨Èç¹ûÓĞ£©µÄÎ»ÑÚÂëµÄÖ¸Õë¡£

·µ»ØÖµ
Èç¹ûÎ´ÕÒµ½ÓëÃû³Æ»òÊôĞÔÑÚÂëÆ¥ÅäµÄÏîÄ¿£¬Ôò £¨or £© ½«¸³ÖµÎªÁã²¢·µ»Ø¿Õ×Ö·û´®¡£·ñÔò£¬£¨»ò £©½«·ÖÅäÏîÄ¿µÄÊôĞÔÑÚÂë£¬²¢·µ»Ø²»´øÂ·¾¶µÄÏîÄ¿Ãû³Æ¡£item_specattrib_maskout_attrib*p_out_attribout_attrib*p_out_attrib

ÃèÊö
Dir·µ»ØÓë×÷Î


-------------------------------------------------------- KeyPgDo ----
Do   ÖØ¸´
Description



-------------------------------------------------------- KeyPgDoloop ----

Do...Loop
  
ÓÃÓÚÑ­»·µÄ¿ØÖÆÁ÷Óï¾ä

Óï·¨
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

ÃèÊö
¸ÃÓï¾äÖ´ĞĞÒÔÏÂÓï¾ä¿éÖĞµÄÓï¾ä£¬Ö±µ½/Í¬Ê±Ìõ¼ş£¨Èç¹ûÓĞ£©µÄ¼ÆËã½á¹ûÎª true¡£
Èç¹ûÊ¹ÓÃ£¬Ôòµ±Ìõ¼ş¼ÆËã½á¹ûÎª true Ê±£¬Óï¾ä½«Í£Ö¹ÖØ¸´Óï¾ä¿é¡£¹Ø¼ü×Ö¾ßÓĞÏà·´µÄĞ§¹û£¬Èç¹ûÌõ¼ş¼ÆËã½á¹ûÎª false£


-------------------------------------------------------- KeyPgDots ----

... (Ellipsis)
  

	ÓÃÓÚ´úÌæ¹ı³Ì²ÎÊı´«µİ¿É±äÊıÁ¿µÄ²ÎÊı£¬»òÓÃ×÷Êı×éÉùÃ÷ÖĞµÄÉÏÏŞ£¬ÒÔ±íÊ¾ÔªËØÊı½«ÓÉ³õÊ¼ÖµÉè¶¨ÏîÈ·¶¨¡£

Óï·¨
Declare { Sub | Function } proc_name cdecl ( param_list, ... )  { | [ ByRef ] As return_type }

#define identifier( [ parameters, ] variadic_parameter... ) body

Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

ÃèÊö
¿É±ä²ÎÊı³ÌĞò
Ê¡ÂÔºÅ£¨Èı¸öµã£¬£©ÔÚ¹ı³ÌÉùÃ÷ºÍ¶¨ÒåÖĞÓÃÓÚÖ¸Ê¾±äÁ¿²ÎÊıÁĞ±í¡£
±ØĞëÊ¼ÖÕÖ¸¶¨µÚÒ»¸ö²ÎÊı£¨ÖÁÉÙ£©£¬²¢ÇÒ±ØĞëÊ¹ÓÃ C µ÷ÓÃÔ¼¶¨µ÷ÓÃ¸Ã¹ı³Ì¡£
Ô


-------------------------------------------------------- KeyPgDouble ----

Double   Ë«¾«¶È
  
±ê×¼Êı¾İÀàĞÍ£º64 Î»¸¡µã

Óï·¨
Dim variable As Double

ÃèÊö
Double ÊÇÒ»ÖÖ 64 Î»¸¡µãÊı¾İÀàĞÍ£¬ÓÃÓÚ´æ´¢¸ü¾«È·µÄÊ®½øÖÆÊı¡£ËüÃÇ¿ÉÒÔÔÚ µ½ µÄ·¶Î§ÄÚ±£´æÕıÖµ£¬Ò²¿ÉÒÔÔÚ µ½ µÄ·¶Î§ÄÚ±£´æ¸ºÖµ£¬»òÕß±£´æÎª Áã £¨£©¡£ËüÃÇ×î¶à°üº¬ 53 Î»¾«¶È£¬»ò´óÔ¼ 15 Î»Ê


-------------------------------------------------------- KeyPgDraw ----

Draw   »æÍ¼
  
ÓÃÓÚĞòÁĞ»¯ÏñËØ»æÍ¼µÄÉùÃ÷

Óï·¨
Draw [target,] cmd

²ÎÊı
target
ÒªÀûÓÃµÄ»º³åÇø
cmd
°üº¬ÃüÁîĞòÁĞµÄ×Ö·û´®

ÃèÊö
»æÍ¼½«Í¨¹ı / »º³åÇø£¨Èç¹ûÖ¸¶¨£©ÔÚµ±Ç°¹¤×÷Ò³Ãæ¼¯ÉÏ½øĞĞ¡£
¸ÃÓï¾ä¿ÉÓÃÓÚÍ¬Ê±·¢³ö¶à¸ö»æÍ¼ÃüÁî;¿ìËÙ»æÖÆÍ¼ĞÎºÜÓĞÓÃ¡£ÃüÁî×Ö·û´®½ÓÊÜÒÔÏÂÃüÁî£º
ÓÃÓÚ´òÓ¡ÏñËØµÄÃüÁî£ºSc


-------------------------------------------------------- KeyPgDrawString ----

Draw String   »æÍ¼
  
ÓÃÓÚ½«ÎÄ±¾³ÊÏÖµ½Í¼Ïñ»òÆÁÄ»µÄÍ¼ĞÎÓï¾ä¡£

Óï·¨
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

ÓÃ·¨
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

²ÎÊı
buffer
ÒªÔÚÆäÉÏ»æÖÆ×Ö·û´®µÄ×Ó»­Ãæ¡£Èç¹ûÎ´Ìá¹©£¬Ëü½«±»»æÖÆµ½ÆÁÄ»ÉÏ¡£
STEP
Ê¹ÓÃÏà¶Ô×ø±ê¡£Èç¹ûÌí¼Ó£¬ÔòÏà¶ÔÓÚ×îºóÒ»¸ö»æÖÆµãÆ½ÒÆ x ºÍ y ×ø±ê¡£STEP
x,y
Òª»æÖÆµÄË®Æ½/´¹Ö±Î»ÖÃ£¬Ïà¶ÔÓÚÆÁÄ»µÄ×óÉÏ½Ç£¨³ı·ÇÊ¹ÓÃ - ¼ûÉÏÎÄ£©¡£ÎÄ±¾µÄ×óÉÏ½Ç½«ÔÚ´ËÎ»ÖÃ»æÖÆ¡£STEP
text
°üº¬Òª»æÖÆµÄÎÄ±¾µÄ×Ö·û´®
color
Èç¹ûÎ´Ìá¹©×ÖÌå£¬ÔòÔÊĞíÄúÑ¡ÔñÎÄ±¾µÄÑÕÉ«¡£Èç¹ûÊ¡ÂÔ£¬ÔòÊ¹ÓÃÄ¬ÈÏÇ°Ì¨¡£
Èç¹ûÌá¹©ÁË×ÖÌå£¬ÔòºöÂÔ£¬²¢ÇÒ×ÖÌå±¾ÉíÖ¸¶¨Ã¿¸öÏñËØµÄÑÕÉ«¡£Colorcolor
font
°üº¬×Ô¶¨Òå×ÖÌåµÄÍ¼Ïñ»º³åÇø¡£Èç¹ûÎ´Ìá¹©×ÖÌå£¬ÔòÊ¹ÓÃµ±Ç°ÎÄ±¾·Ö±æÂÊµÄ±ê×¼×ÖÌå£¬²¢ºöÂÔÒÔÏÂ²ÎÊı¡£
method|Custom
Ö¸¶¨ÈçºÎÔÚÄ¿±êÇúÃæ¶¥²¿»æÖÆ×ÖÌå×Ö·û¡£ÔÊĞíÊ¹ÓÃÓëÎªÓï¾äÕÒµ½µÄÏàÍ¬·½·¨£¬Î¨Ò»µÄÇø±ğÊÇÄ¬ÈÏ·½·¨ÊÇÓÃÓÚ´Ëº¯Êı¡£´Ë²ÎÊı½öÊÊÓÃÓÚ×Ô¶¨Òå×ÖÌå¡£PutTrans
alpha
alpha Öµ£¬·¶Î§Îª 0-255¡£´Ë²ÎÊı½öÊÊÓÃÓÚ »ò ·½·¨¡£AddAlpha
b


-------------------------------------------------------- KeyPgDylibfree ----

DyLibFree   ¶¯Ì¬¿âĞ¶ÔØ
  
´ÓÄÚ´æÖĞĞ¶ÔØ¶¯Ì¬Á´½Ó¿â

Óï·¨
Declare Sub DyLibFree ( ByVal libhandle As Any Pointer )

ÓÃ·¨
DyLibFree( libhandle )

²ÎÊı
libhandle
ÒªĞ¶ÔØµÄ¿âµÄ¾ä±ú¡£

ÃèÊö
DyLibFreeÓÃÓÚÔÚÔËĞĞÊ±¿âÖĞ·¢²¼ÒÔÇ°


-------------------------------------------------------- KeyPgDylibload ----

DyLibLoad   ¶¯Ì¬¿â¼ÓÔØ
  
ÔÚÔËĞĞÊ±¼ÓÔØµ½¶¯Ì¬Á´½Ó¿â £¨DLL£© µ½ÄÚ´æÖĞ

Óï·¨
Declare Function DyLibLoad ( ByRef libname As String ) As Any Pointer

ÓÃ·¨
result = DyLibLoad ( libname )

²ÎÊı
libname
°üº¬Òª¼ÓÔØµÄ¿âµÄÃû³Æ¡£String

·µ»ØÖµ
ÒÑ¼ÓÔØ¿âµÄ¾ä±ú¡£Áã¶Ô´íÎóPointer

ÃèÊö
DyLibLoadÓÃÓÚÔÚÔËĞĞÊ±¿âÖĞÁ´½Óµ½³ÌĞò¡£´Ëº¯ÊıÖ´ĞĞÁ´½Ó²¢·µ»ØÒ»¸ö¾ä±ú£¬¸Ã¾ä±úÔÚµ÷ÓÃ¿âÖĞµÄº¯ÊıÊ±±ØĞëÊ


-------------------------------------------------------- KeyPgDylibsymbol ----

DyLibSymbol   ¶¯Ì¬¿âµØÖ·
  
·µ»Ø dll ÖĞº¯Êı»ò±äÁ¿µÄµØÖ·

Óï·¨
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByVal symbol As Short ) As Any Ptr

ÓÃ·¨
result = DyLibSymbol ( libhandle, symbol )

²ÎÊı
libhandle
·µ»ØµÄ DLL µÄ Any Ptr ¾ä±úDyLibLoad
symbol
Ò»¸ö×Ö·û´®£¬°üº¬º¯ÊıµÄÃû³Æ£¬»ò¿âÖĞÒª·µ»ØµÄµØÖ·µÄ±äÁ¿¡£½öÔÚ Windows ÖĞ£¬Ò²¿ÉÒÔÊÇ°üº¬º¯Êı/±äÁ¿µÄĞòºÅ¡£Short

·µ»ØÖµ
A ±íÊ¾¿âÖĞµÄº¯Êı»ò±äÁ¿¡£
Èç¹ûº¯ÊıÊ§°Ü£¬Ôò·µ»ØÖµÎª 0¡£Pointer

ÃèÊö
DyLibSymbol·µ»ØÒ»¸öÖ¸Õë£¬¸ÃÖ¸ÕëÖ¸Ïò ÔÚ ËùÖ¸ÏòµÄ dll ÖĞÃûÎª µÄ±äÁ¿»òº¯Êı¡£ ÊÇÍ¨¹ıÊ¹ÓÃ ¼ÓÔØ dll


-------------------------------------------------------- KeyPgElse ----
Else   ·ñ
Description



-------------------------------------------------------- KeyPgElseif ----
ElseIf   ÓÖ
Description



-------------------------------------------------------- KeyPgEncoding ----

Encoding   ±àÂëÀàĞÍ
  
Ö¸¶¨ÎÄ±¾ÎÄ¼şµÄ×Ö·û¸ñÊ½

Óï·¨
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

²ÎÊı
filename¶ÔÓÚ {ÊäÈë|Êä³ö|×·¼Ó}
Òª´ò¿ªµÄÎÄ¼şÃû£¬»òInputOutputAppend
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
Ö¸Ê¾ÎÄ¼şµÄ±àÂëÀàĞÍ
filenum
ÒªÓë´ò¿ªµÄÎÄ¼ş¹ØÁªµÄÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ

ÃèÊö
EncodingÖ¸¶¨ Unicode ÎÄ±¾ÎÄ¼şµÄ¸ñÊ½£¬Òò´Ë²¢Ê¹ÓÃÕıÈ·µÄ±àÂë¡£Èç¹û´ÓÓï¾äÖĞÊ¡ÂÔ£¬


-------------------------------------------------------- KeyPgEnd ----

End (Statement)   ½áÊø
  
¿ØÖÆÁ÷Óï¾äÒÔ½áÊø³ÌĞò¡£

Óï·¨
Declare Sub End ( ByVal retval As Long = 0 )

ÓÃ·¨
End [ retval ]

²ÎÊı
retval
´íÎó´úÂë·µ»ØÏµÍ³¡£

ÃèÊö
ÓÃÓÚÍË³ö³ÌĞò²¢·µ»Ø²Ù×÷ÏµÍ³¡£¿ÉÒÔÖ¸¶¨¿ÉÑ¡µÄÕûÊı·µ»ØÖµÒÔÖ¸Ê¾ÏµÍ³µÄ´íÎó´úÂë¡£Èç¹ûÎ´¸ø³ö·µ»ØÖµ£¬ÔòÔÚ³ÌĞò½áÊøÊ±×Ô¶¯·µ»ØÖµ ¡£
´ËÓï¾äµÄÓÃ·¨²»»áÍêÈ«¹Ø±Õ·¶Î§¡£¾Ö²¿±äÁ¿²»»á×Ô


-------------------------------------------------------- KeyPgEndblock ----

End (Block)   ½áÊø
  
Ö¸Ê¾¸´ºÏÓï¾ä¿éµÄ½áÊø¡£

Óï·¨
End { Sub | Function | If  | Select  | Type  | Enum  | Scope  | With  | Namespace  | Extern  | Constructor  | Destructor  | Operator | Property }

ÃèÊö
ÓÃÓÚÖ¸Ê¾×îĞÂ´úÂë¿éµÄ½áÊø¡£
¿éµÄÀàĞÍ±ØĞë°üº¬ÔÚÃüÁîÖĞ£º¡¢ »ò Ö®Ò»¡£
½áÊø Ò»¸ö ¡¢ ¡¢ ¡¢ ¡¢ »ò ¿éÒ²»á¹Ø±Õ¸Ã¿éÄÚ¶¨ÒåµÄ±äÁ¿µÄ×÷ÓÃÓò¡£µ±×÷ÓÃÓò¹Ø±ÕÊ±£¬×÷ÓÃÓòÄÚ¶¨ÒåµÄ±äÁ¿½«±»Ïú»Ù£¬²¢¸ù¾


-------------------------------------------------------- KeyPgEndif ----
End If   ½á
Description



-------------------------------------------------------- KeyPgEnum ----

Enum   Ã¶¾Ù
  
ÉùÃ÷Ã¶¾ÙÀàĞÍ¡£

Óï·¨
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

²ÎÊı
typename
µÄÃû³ÆEnum
symbolname
³£Á¿µÄÃû³Æ
expression
³£Á¿±í´ïÊ½
Explicit
ÒªÇó·ûºÅ±ØĞëÓÉtypename.symbolname

ÃèÊö
Enum£¬±íÊ¾ÉùÃ÷ÓëÀëÉ¢Öµ¶ÔÓ¦µÄ·ûºÅÃû³ÆÁĞ±í¡£Èç¹ûÎ´¸ø³ö³õÊ¼Öµ£¬ÔòµÚÒ»Ïî½«ÉèÖÃÎª ¡£³ı·Ç¸ø³ö£¬·ñÔòÃ¿¸öºóĞø½»Ò×Æ·ÖÖµÄÖµ¶¼±ÈÇ°Ò»¸ö½»Ò×Æ·ÖÖ¶àÒ»¸ö¡£
·ûºÅ¿ÉÒÔ¸÷ÔÚ×Ô¼ºµÄĞ


-------------------------------------------------------- KeyPgEnviron ----

Environ   »·¾³±äÁ¿
  
·µ»ØÏµÍ³»·¾³±äÁ¿µÄÖµ

Óï·¨
Declare Function Environ ( ByRef varname As Const String ) As String

ÓÃ·¨
result = Environ[$]( varname )

²ÎÊı
varname
»·¾³±äÁ¿µÄÃû³Æ¡£

·µ»ØÖµ
·µ»Ø»·¾³±äÁ¿µÄÎÄ±¾Öµ£¬Èç¹û±äÁ¿²»


-------------------------------------------------------- KeyPgEof ----

EOF   ÎÄ¼şµ½Î²
  
¼ì²éÊÇ·ñÒÑµ½´ï´ò¿ªÎÄ¼şµÄÄ©Î²

Óï·¨
Declare Function EOF ( ByVal filenum As Long ) As Long

ÓÃ·¨
result = EOF( filenum )

²ÎÊı
filenum
´ò¿ªµÄÎÄ¼şµÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
Èç¹ûÒÑ´ïµ½ÎÄ¼şÄ©Î²£¬Ôò·µ»Ø true £¨-1£©£¬·ñÔò·µ»ØÁã £¨0£©¡£

ÃèÊö
´Ó ÖĞ´ò¿ªµÄÎÄ¼ş¶ÁÈ¡ Ê±£¬ÁË½âºÎÊ±µ½´ïÎÄ¼şÄ©Î²·Ç³£ÓĞÓÃ£¬´Ó¶ø±ÜÃâÁËÒò¶ÁÈ¡ÎÄ¼şÄ©Î²¶øµ¼ÖÂµÄ´íÎó¡£Ê¹Ó


-------------------------------------------------------- KeyPgErase ----

Erase   ²Á³ı
  
²Á³ıÊı×éµÄÉùÃ÷

Óï·¨
Declare Sub Erase ( array As Any [, ... ] )

ÓÃ·¨
Erase( array0 [, array1 ... arrayN ] )

²ÎÊı
array
Òª²Á³ıµÄÊı×é¡£

ÃèÊö
ÔÚ¹Ì¶¨³¤¶ÈµÄÊı×éÉÏÊ¹ÓÃ»áÖØÖÃËùÓĞÔªËØ£¬¶ø²»»áÊÍ·Å·ÖÅäµÄÄÚ´æ¡£
ÔÚÎïÌåµÄÇé¿öÏÂ£¬ÓĞÆÆ»µÈ»ºóÖØ½¨¡£
ÔÚ¿É±ä³¤¶ÈÊı×é£¨Êı×é´óĞ¡ÒÑµ÷Õû£©ÉÏÊ¹ÓÃ¿ÉÊÍ·Å·ÖÅä¸


-------------------------------------------------------- KeyPgErfn ----

Erfn   ´íÎóº¯Êı
  
´íÎó±¨¸æ¹¦ÄÜ

Óï·¨
Declare Function Erfn ( ) As ZString Ptr

ÓÃ·¨
result = Erfn ( ) 

·µ»ØÖµ
·µ»ØÒ»¸öÖ¸Õë£¬¸ÃÖ¸ÕëÖ¸Ïò±êÊ¶·¢Éú´íÎóµÄº¯ÊıµÄ×Ö·û´®¡£
Èç¹ûÎ´Ê¹ÓÃ -exx ±àÒë


-------------------------------------------------------- KeyPgErl ----

Erl   ´íÎóĞĞ
  
´íÎó´¦Àíº¯Êı£¬ÓÃÓÚ·µ»Ø·¢Éú´íÎóµÄĞĞ

Óï·¨
Declare Function Erl ( ) As Integer

ÓÃ·¨
result = Erl

·µ»ØÖµ
Ò»¸ö Integer ·µ»ØÖµ£¬ÆäÖĞ°üº¬ÉÏ´Î·¢Éú´íÎóµÄĞĞºÅ¡£

ÃèÊö
Erl½«·µ»ØÉÏ´Î·¢Éú´íÎóµÄĞĞºÅ¡£Èç¹ûÎ´·¢ÉúÈÎº


-------------------------------------------------------- KeyPgErmn ----

Ermn   ´íÎóÄ£¿é
  
´íÎó±¨¸æ¹¦ÄÜ

Óï·¨
Declare Function Ermn ( ) As ZString Ptr

ÓÃ·¨
result = Ermn ( ) 

·µ»ØÖµ
·µ»ØÒ»¸öÖ¸Õë£¬¸ÃÖ¸ÕëÖ¸Ïò±êÊ¶·¢Éú´íÎóµÄÄ£¿éµÄ×Ö·û´®¡£
Èç¹ûÎ´Ê¹ÓÃ -exx ±à


-------------------------------------------------------- KeyPgErr ----

Err   ´íÎó
  
»ñÈ¡»òÉèÖÃÔËĞĞÊ±´íÎóºÅ

ÓÃ·¨
result = Err( )
or
Err = number

ÃèÊö
¸Ãº¯Êı·µ»Ø FreeBASIC ÔËĞĞÊ±´íÎóºÅ£¨32 Î»£©£¬¸Ã´íÎóºÅ¿ÉÓÉÄÚÖÃÓï¾äºÍº¯ÊıÉèÖÃ£¬»òÓÉ³ÌĞòÍ¨¹ı »ò ÉèÖÃ¡£Óë ²»Í¬£¬ÉèÖÃ´íÎóºÅ¶ø²»µ÷ÓÃ´íÎó´¦Àí³ÌĞò¡£
ÓĞ¹ØÔ¤¶¨ÒåµÄÔËĞĞÊ±´íÎóºÅ¼°ÆäÏà¹Øº¬Òåµ


-------------------------------------------------------- KeyPgError ----

Error   ´íÎóºÅ
  
ÓÃÓÚÇ¿ÖÆÉú³É´íÎóµÄ´íÎó´¦ÀíÓï¾ä

Óï·¨
Declare Sub Error ( errno As Integer )

ÓÃ·¨
Error number

²ÎÊı
number
ÒªÉú³ÉµÄ´íÎóºÅ

ÃèÊö
Error µ÷ÓÃÊ¹ÓÃ On Error Ö¸¶¨µÄ´íÎó´¦Àí³ÌĞò£¬»òÕß£¬Èç¹ûÎ´ÉèÖÃÈÎºÎ´íÎó´¦Àí³ÌĞò£¬ÔòÖĞÖ¹³ÌĞò£¬´òÓ¡À


-------------------------------------------------------- KeyPgEvent ----

Event (Message Data From Screenevent)   ÊÂ¼ş
  
ScreenEvent ÓÃÓÚ·µ»ØÊÂ¼şÊı¾İµÄÔ¤¶¨Òå½á¹¹ £¨UDT£© fbgfx.bi

Óï·¨
#include once "fbgfx.bi"
using fb
Dim variable As Event

ÃèÊö
ÎªÁËÇå³şÆğ¼û£¬ÎÒÃÇÔÚÕâÀï±¨¸æ½á¹¹£º
 
¸Ã×Ö¶Î½«°üº¬ÊÂ¼şÀàĞÍ ID£¬¶øÆäÓà 4 ¸öÕûÊı½«±£´æÊÂ¼şÀàĞÍµÄÃô¸ĞÊı¾İ¡£
 ÊÂ¼şÀàĞÍEVENT
Type Event Field = 1
    Type As Long
    Union


-------------------------------------------------------- KeyPgExec ----

Exec   Íâ²¿µ÷ÓÃ
  
ÁÙÊ±½«Ö´ĞĞ×ªÒÆµ½Íâ²¿³ÌĞò

Óï·¨
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

ÓÃ·¨
result = Exec( program, arguments )

²ÎÊı
program
Òª½«¿ØÖÆÈ¨ÒÆ½»¸øµÄ³ÌĞò£¨¿ÉÖ´ĞĞÎÄ¼ş£©µÄÎÄ¼şÃû£¨°üÀ¨ÎÄ¼şÂ·¾¶£©¡£
arguments
Òª´«µİ¸ø³ÌĞòµÄÃüÁîĞĞ²ÎÊı¡£

·µ»ØÖµ
³ÌĞ


-------------------------------------------------------- KeyPgExepath ----

ExePath   ³ÌĞòÂ·¾¶
  
·µ»ØÕıÔÚÔËĞĞµÄ³ÌĞòµÄÂ·¾¶

Óï·¨
Declare Function ExePath ( ) As String

ÓÃ·¨
result = ExePath

·µ»ØÖµ
ÉèÖÃÎªÕıÔÚÔËĞĞµÄ³ÌĞòµÄÂ·¾¶µÄ±äÁ¿¡£String


-------------------------------------------------------- KeyPgExit ----

Exit   ÍË³ö
  

	Control flow statement to exit a compound statement block

Syntax
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }

Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


Description
Leaves a code block such as a , , , , , , , , , or a   block. The execution skips the rest of the block and goes to the line after its end.

Where there are multiple  /  /  /  blocks


-------------------------------------------------------- KeyPgExp ----

Exp   Ö¸Êı
  
Ìá¸ßµ½¸ø¶¨Êı×ÖµÄÃİµÄ·µ»Øe

Óï·¨
Declare Function Exp cdecl ( ByVal number As Double ) As Double

ÓÃ·¨
result = Exp( number )

²ÎÊı
number
ÄÇ±»ÌáÉıµ½È¨Á¦¡£Doublenumbere

·µ»ØÖµ
½«µÄ Double Öµ·µ»ØÎª µÄÃİ¡£enumber

ÃèÊö
ÊıÑ§³£Êı£¬Ò²³ÆÎªÅ·À­³£Êı£¬ÊÇ ºÍ µÄ»ùÊı£¬²¢ÇÒÊÇÒ»¸öÎŞÀíÊıºÍ³¬Ô½Êı¡£¶şÊ®¸öÓĞĞ§Êı×ÖµÄÖµÎª£º¡£ËùĞèµÄ²ÎÊı¿ÉÒÔÊÇº¯Êı·¶Î§ÄÚµÄÈÎºÎÓĞĞ§ÊıÖµ±í´ïÊ½¡£Èç¹ûÌ«´ó£¬Ôò·µ»


-------------------------------------------------------- KeyPgExport ----

Export   µ¼³ö
  
¶¨ÒåËµÃ÷·û£¬ÓÃÓÚÖ¸Ê¾ DLL ÖĞµÄ¹ı³ÌÓ¦´ÓÆäËû³ÌĞòÖĞ¿É¼û

Óï·¨
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

ÃèÊö
Èç¹ûÔÚ DLL ÖĞÊ¹ÓÃ´Ë×Ó¾ä¶¨ÒåÁËº¯Êı£¬Ôò¸Ãº¯Êı½«Ìí¼Óµ½¹«¹²µ¼³ö±íÖĞ£¬Òò´ËÍâ²¿


-------------------------------------------------------- KeyPgExtends ----

Extends   ÅÉÉúÀàĞÍ
  
Ö¸¶¨´ÓÖĞÅÉÉúĞÂÀàĞÍµÄ»ùÀàĞÍ

Óï·¨
Type|Union typename Extends base_typename
...
End Type|Union

ÃèÊö
ExtendsÉùÃ÷ÅÉÉú×Ô ¡£ÅÉÉúµÄÓÃ»§¶¨ÒåÀàĞÍ £¬¼Ì³Ğ»ùÀàĞÍµÄ×Ö¶ÎºÍ·½·¨¡£ ¶ÔÏó¿ÉÒÔ´úÌæ¶ÔÏóÊ¹ÓÃ¡£´Ó¼Ì³ĞµÄ×Ö¶ÎºÍ·½·¨½«Ïñ µÄ³ÉÔ±Ò»ÑùÒşÊ½·ÃÎÊ¡£
µ«ÊÇ£¬Èç¹û¼Ì³ĞµÄ³ÉÔ±¾ßÓĞÏàÍ¬µÄ±êÊ¶·û£¬ÔòÕ


-------------------------------------------------------- KeyPgExtendsWstring ----

Extends Wstring   ÅÉÉúÀàĞÍ
  
Ö¸¶¨¼Ì³Ğ Wstring ĞĞÎªµÄÀàĞÍ

Óï·¨
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

ÃèÊö
Extends WstringÉùÃ÷¼Ì³Ğ µÄÊôĞÔºÍĞĞÎª¡£Ä¿µÄÊÇÔÊĞíÓÃ»§´´½¨×Ô¶¨Òå×Ö·û´®ÀàĞÍ£¨¼´¶¯Ì¬ÄÚ´æ¹ÜÀí£©£¬ÕâĞ©ÀàĞÍ¿ÉÒÔºÜºÃµØ¼¯³Éµ½ÏÖÓĞµÄÄÚÖÃ fbc ±àÒëÆ÷ÖĞ£¨Óë fbc ÀàĞÍµÄÁ¼ºÃ»¥²Ù×÷ĞÔ£©¡£
Ê¹ÓÃºÏ


-------------------------------------------------------- KeyPgExtendsZstring ----

Extends Zstring   ÅÉÉúÀàĞÍ
  
Ö¸¶¨¼Ì³Ğ Z ×Ö·û´®ĞĞÎªµÄÀàĞÍ

Óï·¨
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

ÃèÊö
Extends ZstringÉùÃ÷¼Ì³Ğ µÄÊôĞÔºÍĞĞÎª¡£Ä¿µÄÊÇÔÊĞíÓÃ»§´´½¨×Ô¶¨Òå×Ö·û´®ÀàĞÍ£¨¼´¶¯Ì¬ÄÚ´æ¹ÜÀí£©£¬ÕâĞ©ÀàĞÍ¿ÉÒÔºÜºÃµØ¼¯³Éµ½ÏÖÓĞµÄÄÚÖÃ fbc ±àÒëÆ÷ÖĞ£¨Óë fbc ÀàĞÍµÄÁ¼ºÃ»¥²Ù×÷ĞÔ£©¡£
Ê¹Ó


-------------------------------------------------------- KeyPgExtern ----

Extern   Íâ²¿À©Õ¹
  
ÉùÃ÷¾ßÓĞÍâ²¿Á´½ÓµÄ±äÁ¿¡¢Êı×é»ò¶ÔÏó

Óï·¨
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

²ÎÊı
symbolname
±äÁ¿¡¢Êı×é»ò¶ÔÏóµÄÃû³Æ¡£
aliasname
±äÁ¿¡¢Êı×é»ò¶ÔÏóµÄ±¸ÓÃÍâ²¿Ãû³Æ¡£

ÃèÊö
ÉùÃ÷ÎªÍâ²¿Ãû³Æ£¬ÕâÒâÎ¶×ÅËüÊÇÍâ²¿Ä£¿éµÄÈ«¾ÖÄ£¿é£¬°üÀ¨ÄÇĞ©Òª±àÒëÎª¾²Ì¬ºÍ¶¯Ì¬¿â £¨DLL£© µÄÄ£¿é¡£
½öÉùÃ÷±äÁ¿¡¢Êı×éºÍ¶ÔÏó£¬¶ø²»¶¨ÒåËüÃÇ£¨Óë »ò ²


-------------------------------------------------------- KeyPgExternBlock ----

Extern...End Extern
  
Óï¾ä¿é£¬ÔÊĞíµ÷ÓÃÎªÌØ¶¨ÓïÑÔ»òÆ½Ì¨±àÒëµÄº¯Êı¡£

Óï·¨
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

ÃèÊö
Extern¿éÎª¹ı³ÌÌá¹©Ä¬ÈÏµ÷ÓÃÔ¼¶¨£¬²¢Ç¿ÖÆÒªÇóÌØ¶¨µÄÃû³ÆĞŞÊÎ¡£
¿éÎª¹ı³ÌÌá¹©ÁËÄ¬ÈÏµÄµ÷ÓÃÔ¼¶¨£¬²¢ÇÒ»¹±£ÁôÁËÆäÖĞÉùÃ÷µÄËùÓĞÃû³ÆµÄ´óĞ¡Ğ´¡£ÔÚÃ»ÓĞ EXTERN ¿éµÄÇé¿öÏÂ£¬¿ÉÒÔÍ¨¹ıÓë°üº


-------------------------------------------------------- KeyPgFalse ----

False   ¼Ù
  
±àÒëÆ÷ÉèÖÃµÄ¹ÌÓĞ³£Á¿

Óï·¨
Const False As Boolean

ÃèÊö
ÔÚÊ¹ÓÃµÄÎ»ÖÃ


-------------------------------------------------------- KeyPgFBArray ----

Fbarray (Array Descriptor Structure And Access)
  
°üº¬ÎÄ¼şÖĞµÄÔ¤¶¨Òå½á¹¹ £¨UDT£© ºÍ¹ı³ÌÉùÃ÷£¬¿ÉÓÃÓÚ·ÃÎÊÊı×éÃèÊö·ûÊı¾İ×Ö¶Î¡£fbc-int/array.bi

Óï·¨
´Ó£º./inc/fbc-int/array.bi

# If __FB_LANG__ = "fb"
Namespace FBC
# endif

Const FB_MAXDIMENSIONS As Integer = 8

Type FBARRAYDIM
    Dim As UInteger elements     ¡°¡±ÔªËØÊı

    Dim As Integer LBound        '' ³ß´çÏÂÏŞ

    Dim As Integer UBound        '' ³ß´çÉÏÏŞ

End Type

Const FBARRAY_FLAGS_DIMENSIONS = &h0000000f    ÔÚ dimTb£¨£© ÖĞ·ÖÅäµÄÌõÄ¿Êı

Const FBARRAY_FLAGS_FIXED_DIM  = &h00000010    '' Êı×é¾ßÓĞ¹Ì¶¨ÊıÁ¿µÄÎ¬¶È

Const FBARRAY_FLAGS_FIXED_LEN  = &h00000020    '' Êı×éÖ¸Ïò¹Ì¶¨³¤¶ÈÄÚ´æ

Const FBARRAY_FLAGS_RESERVED   = &hffffffc0    '' ±£Áô£¬ÇëÎğÊ¹ÓÃ


Type FBARRAY
    Dim As Any Ptr index_ptr     '' @array£¨0£¬ 0£¬ 0£¬ ... £©

    Dim As Any Ptr base_ptr      ÄÚ´æÔÚÊı×é×îµÍ±ß½ç´¦¿ªÊ¼µÄ''

    Dim As UInteger size         ¡°¡±ÒÑ·ÖÅäÄÚÈİµÄ×Ö½Ú´óĞ¡

    Dim As UInteger element_len  µ¥¸öÔªËØµÄ¡°¡±×Ö½Ú´óĞ¡

    Dim As UInteger dimensions   '' ³ß´çÊı

    Dim As UInteger flags        ¡°¡± FBARRAY_FLAGS_*


    '' ×¢Òâ³ß´çµÄÊıÁ¿;È«ÑªÏ¸°û¼ÆÊı¿É·ÖÅä

    ¡°¡±Ò»¸ö½ÏĞ¡µÄÃèÊö·û£¬ÉÙÓÚ FB_MAXDIMENSIONS

    dimTb£¨£© ÖĞµÄ ''£¬Èç¹ûÔÚ±àÒëÊ±ÒÑÖªËüÃÇ

    ÓÀÔ¶²»ĞèÒª¡°¡±¡£Ê¼ÖÕ×ğÖØÊıÁ¿

    ·ÃÎÊ dimTb£¨£© Ê±µÄ'' ³ß´ç


    Dim As FBARRAYDIM dimTb(0 To FB_MAXDIMENSIONS-1)
End Type

Extern "rtlib"
    Declare Function ArrayDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Any ) As FBC.FBARRAY Ptr
    Declare Function ArrayConstDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Const Any ) As Const FBC.FBARRAY Ptr
End Extern

# If __FB_LANG__ = "fb"
End Namespace
# endif
        
ÓÃ·¨
#include once "fbc-int/array.bi"
using FBC

' then:
Dim pd As FBARRAY Ptr
...
pd = ArrayDescriptorPtr ( array() )

' or safer:
Dim pd As Const FBARRAY Ptr
...
pd = ArrayConstDescriptorPtr ( array() )

²ÎÊı
pd 
Ö¸ÏòÊı×éÃèÊö·ûµÄÖ¸ÕëµÄÃû³Æ
array 


-------------------------------------------------------- KeyPgFBMemcopy ----

Fb_Memcopy
  
½«ÄÚ´æ¿é´ÓÒ»¸öÎ»ÖÃ¸´ÖÆµ½ÁíÒ»¸öÎ»ÖÃ

Óï·¨
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

ÓÃ·¨
[result =] fb_memcopy( dst, src, bytes )

²ÎÊı
dst
Ä¿±êÄÚ´æµÄÆğÊ¼µØÖ·
src
Ô´ÄÚ´æµÄÆğÊ¼µØÖ·
bytes
Òª¸´ÖÆµÄ×Ö½ÚÊı

·µ»ØÖµ
·µ»ØÄ¿±êÄÚ´æµÄÆğÊ¼µØÖ·¡£

ÃèÊö
fb_memcopy½«¸ø¶¨ÊıÁ¿µÄ×Ö½Ú´ÓÄÚ´æÎ»ÖÃ¸´ÖÆµ½ÄÚ´æÎ»ÖÃ¡£
Ã¿¸öÆğÊ¼µØÖ·¶¼È¡×Ô¶Ô±äÁ¿»òÊı×éÔªËØµÄÒıÓÃ¡£
ÄÚ´æÇøÓò²»µÃÖØµş£¨·ñÔò£¬²»ÄÜ±£Ö¤¸


-------------------------------------------------------- KeyPgFBMemcopyclear ----

fb_MemCopyClear
  
½«ÄÚ´æ¿éµÄµÚÒ»²¿·Ö´ÓÒ»¸öÎ»ÖÃ¸´ÖÆµ½ÁíÒ»¸öÎ»ÖÃ£¬²¢Çå³ıÆäÓà²¿·Ö

Óï·¨
Declare Sub fb_MemCopyClear ( ByRef dst As Any, ByVal dstlen As UInteger, ByRef src As Any, ByVal srclen As UInteger )

ÓÃ·¨
fb_memcopy( dst, dstlen, src, srclen )

²ÎÊı
dst
Ä¿±êÄÚ´æµÄÆğÊ¼µØÖ·
dstlen
ÒªĞ´ÈëµÄ×Ö½ÚÊı
src
Ô´ÄÚ´æµÄÆğÊ¼µØÖ·
srclen
Òª¸´ÖÆµÄµÚÒ»¸ö×Ö½ÚÊı£¨ÆäËûÒÑÇå³ı£©

ÃèÊö
fb_memcopycopy½«¸ø¶¨ÊıÁ¿µÄ×Ö½Ú£¨£©´ÓÄÚ´æÎ»ÖÃ¸´ÖÆµ½ÄÚ´æÎ»ÖÃ£¬µ«Ö»ÓĞµÚÒ»¸ö×Ö½Ú±»ÕæÕı¸´ÖÆ£¬ÆäÓàµÄ±»Çå³ı£¨-×Ö½Ú£©¡£
Ã¿¸


-------------------------------------------------------- KeyPgFBMemmove ----

Fb_Memmove
  
½«ÄÚ´æ¿é´ÓÒ»¸öÎ»ÖÃ¸´ÖÆµ½ÁíÒ»¸öÎ»ÖÃ

Óï·¨
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

ÓÃ·¨
[result =] fb_memmove( dst, src, bytes )

²ÎÊı
dst
Ä¿±êÄÚ´æµÄÆğÊ¼µØÖ·
src
Ô´ÄÚ´æµÄÆğÊ¼µØÖ·
bytes
Òª¸´ÖÆµÄ×Ö½ÚÊı

·µ»ØÖµ
·µ»ØÄ¿±êÄÚ´æµÄÆğÊ¼µØÖ·¡£

ÃèÊö
fb_memmove½«¸ø¶¨ÊıÁ¿µÄ×Ö½Ú´ÓÄÚ´æÎ»ÖÃ¸´ÖÆµ½ÄÚ´æÎ»ÖÃ¡£Ã¿¸öÆğÊ¼µØÖ·¶¼È¡×Ô¶Ô±äÁ¿»òÊı×éÔªËØµÄÒıÓÃ¡£
¸´ÖÆ¾ÍÏñÊ¹ÓÃÖĞ¼ä»º³åÇøÒ»Ñù½øĞĞ£¬ÔÊĞ


-------------------------------------------------------- KeyPgField ----

Field   ×Ö¶Î
  
Ö¸¶¨×Ö¶Î¶ÔÆë·½Ê½¡£

Óï·¨
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

ÃèÊö
Field¿ÉÓÃÓÚ´ò°ü»ò±ÈÄ¬ÈÏ²¼¾Ö¸ü½ôÃÜ¡£×î³£ÓÃµÄÖµÊÇ £¬Õâ»áµ¼ÖÂ ¾¡¿ÉÄÜ½ôÃÜµØ´ò°ü »ò£¬¶ø²»»áÔÚ×Ö¶ÎÖ®¼ä»ò Ä©Î²Ìí¼ÓÈÎºÎÌî³ä×Ö½Ú¡£ Ö»ÄÜÓÃÓÚ¼õÉÙ×Ö¶Î¶ÔÆë£


-------------------------------------------------------- KeyPgFileattr ----

FileAttr   ÎÄ¼şÊôĞÔ
  
·µ»ØÓĞ¹Ø´ò¿ªµÄÎÄ¼ş±àºÅµÄĞÅÏ¢

Óï·¨
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

ÓÃ·¨
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )

»ò

#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

²ÎÊı
filenum
´ò¿ªµÄÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅOpen
returntype
Ò»¸öÕûÊıÖµ£¬Ö¸Ê¾Òª·µ»ØµÄĞÅÏ¢ÀàĞÍ¡£

·µ»ØÖµ
Óë·µ»ØÀàĞÍ¹ØÁªµÄÖµ£¬·ñÔò³ö´íÊ±Îª 0¡£

ÃèÊö
¸ù¾İÌá¹©µÄÎÄ¼şºÅ·µ»ØÓĞ¹ØÎÄ¼ş±àºÅµÄĞÅÏ¢returntype
¼ÛÖµÃèÊö²»¶Ï1ÎÄ¼şÄ£Ê½fbFileAttrMode2ÎÄ¼ş¾ä±úfbFileAttrHandle3±àÂëfbF


-------------------------------------------------------- KeyPgFilecopy ----

FileCopy   ÎÄ¼ş¸´ÖÆ
  
¸´ÖÆÎÄ¼ş

Óï·¨
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

ÓÃ·¨
#include "file.bi"
FileCopy source, destination

»ò

#include "file.bi"
result = FileCopy( source, destination )

²ÎÊı
source
Ö¸¶¨Òª´ÓÖĞ¸´ÖÆµÄÎÄ¼şµÄÎÄ¼şÃûµÄ²ÎÊı¡£´ËÎÄ¼ş±ØĞë´æÔÚ¡£String
destination
Ö¸¶¨Òª¸´ÖÆµ½µÄÎÄ¼şµÄÎÄ¼şÃûµÄ²ÎÊı¡£Èç¹û´ËÎÄ¼ş´æÔÚ£¬Ëü½«±»¸²¸Ç¡£ÈÎºÎ´ò¿ªµÄÎÄ¼ş¾ä±úµ±Ç°¶¼²»Ó¦ÒıÓÃ´ËÎÄ¼ş¡£String

·µ»ØÖµ
³É¹¦Ê±»ò·¢Éú´íÎóÊ±·µ»Ø¡£01

ÃèÊö
½«Ô´ÎÄ¼şµÄÄÚÈİ¸´ÖÆµ½Ä¿±êÎÄ¼şÖĞ£¬¸


-------------------------------------------------------- KeyPgFiledatetime ----

FileDateTime   ÎÄ¼şÈÕÆÚÊ±¼ä
  
½«ÎÄ¼şµÄÉÏ´ÎĞŞ¸ÄÈÕÆÚºÍÊ±¼ä×÷Îª¡°´®ĞĞÈÕÆÚ¡±·µ»Ø 

Óï·¨
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

ÓÃ·¨
#include "file.bi"
result = FileDateTime( filename )

»ò

#include "vbcompat.bi"
result = FileDateTime( filename )

²ÎÊı
filename
Òª¼ìË÷ÆäÈÕÆÚºÍÊ±¼äµÄÎÄ¼şÃû¡£


-------------------------------------------------------- KeyPgFileexists ----

FileExists   ÎÄ¼ş´æÔÚ
  
²âÊÔÎÄ¼şÊÇ·ñ´æÔÚ

Óï·¨
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

ÓÃ·¨
#include "file.bi"
result = FileExists( filename )

»ò

#include "vbcompat.bi"
result = FileExists( filename )

²ÎÊı
filename
ÓÃÓÚ²âÊÔÊÇ·ñ´æÔÚµÄÎÄ¼şÃû¡£

·µ»ØÖµ
Èç¹ûÎÄ¼ş´æÔÚ£¬Ôò·µ»Ø·ÇÁã £¨£©£¬·ñÔò·µ»ØÁã £¨£©¡£-10

ÃèÊö
FileExists²âÊÔÎÄ¼şÊÇ·ñ´æÔÚ¡£
ÔÚÄÚ²¿£¬Ëü¿ÉÄÜ»á·¢³öOpen£¨£©ºÍClose£¨£©º¯Êı£¬Õâ¿ÉÄÜ»á²úÉúºó¹û - ÀıÈç£¬ÎÄ


-------------------------------------------------------- KeyPgFileflush ----

FileFlush
  
½«Ó¦ÓÃ³ÌĞòÁ÷»º³åÇøË¢ĞÂµ½ÏµÍ³£¬»ò½«ÏµÍ³»º³åÇøË¢ĞÂµ½ÎÄ¼ş

Óï·¨
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

ÓÃ·¨
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

²ÎÊı
filenum
°ó¶¨ÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡£Èç¹ûÎ´¸ø³ö£¬»ò -1£¬ÔòË¢ĞÂËùÓĞ´ò¿ªµÄÎÄ¼ş¡£
systembuffers
Èç¹ûÎª·ÇÁã£¬Ôò½«ÏµÍ³»º³åÇøË¢ĞÂµ½ÎïÀíÉè±¸¡£Ä¬ÈÏÖµÎªÁã £¨0£©¡£

·µ»ØÖµ
·µ»ØÁã £¨0£© ±íÊ¾³É¹¦£¬Èç¹ûÎŞ·¨Ë¢ĞÂÎÄ¼ş»º³åÇø£¬Ôò·µ»Ø´íÎó´úÂë¡£

ÃèÊö
FileFlush½«Ó¦ÓÃ³ÌĞò»º³åÊä³öĞ´Èë»ù´¡Á÷£¬Èç¹ûÎª·ÇÁã£¬ÔòĞ´Èë»ù´¡ÎïÀíÉ


-------------------------------------------------------- KeyPgFilelen ----

FileLen   ÎÄ¼ş´óĞ¡
  
²éÕÒ¸ø¶¨ÎÄ¼şÃûµÄÎÄ¼şµÄ³¤¶È

Óï·¨
Declare Function FileLen ( filename As String ) As LongInt

ÓÃ·¨
#include "file.bi"
result = FileLen(filename)

»ò

#include "vbcompat.bi"
result = FileLen(filename)

²ÎÊı
filename
Ò»¸ö²ÎÊı£¬Ö¸¶¨Òª·µ»ØÆä³¤¶ÈµÄÎÄ¼şµÄÎÄ


-------------------------------------------------------- KeyPgFileseteof ----

FileSetEof
  
ÉèÖÃ°ó¶¨µ½ÎÄ¼ş±àºÅµÄ´ò¿ªÎÄ¼şµÄ³¤¶È

Óï·¨
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

ÓÃ·¨
#include "file.bi"
result = FileSetEof(fnum)

²ÎÊı
filenum
°ó¶¨ÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
·µ»ØÁã £¨0£© ±íÊ¾³É¹¦£¬Èç¹ûÎŞ·¨ÉèÖÃÎÄ¼şÄ©Î²£¨ÎÄ¼ş´óĞ¡£©£¬Ôò·µ»Ø´íÎó´úÂë¡£

ÃèÊö
FileSetEof¸ù¾İµ±Ç°ÎÄ¼şÎ»ÖÃÉèÖÃÎÄ¼şµÄ½áÎ²¡£ÎÄ¼şÎ»ÖÃÓë ÖĞÒ»Ñù»ùÓÚÒ»¸ö¡£
µ±µ±Ç°ÎÄ¼şÎ»ÖÃÎ»ÓÚÎÄ¼şÄ©Î²Ö®Ç°Ê±£¬ÎÄ¼ş½«±»½Ø¶Ï¡£


-------------------------------------------------------- KeyPgFix ----

Fix   ½Ø¶Ï
  
·µ»ØÊı×ÖµÄÕûÊı²¿·Ö£¬ÉáÈëµ½Áã

Óï·¨
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

ÓÃ·¨
result = Fix( number )

²ÎÊı
number
Òª½Ø¶ÏµÄ¸¡µãÊı

·µ»ØÖµ
·µ»Ø µÄÕûÊı²¿·Ö£¬ÉáÈëµ½Áã¡£number

ÃèÊö
µÈĞ§ÓÚ£º .ÀıÈç£¬½«·µ»Ø £¬²¢½«·µ»Ø ¡£¶ÔÓÚÕûÊıÀàĞÍ£¬·µ»ØµÄÊı×Ö±£³Ö²»±ä¡£
×¢Òâ£º´Ëº¯ÊıÒ²µÈĞ§ÓÚ ¡£
Ò»Ôª¿ÉÒÔÊ¹ÓÃÓÃ


-------------------------------------------------------- KeyPgFlip ----

Flip   ·­Ò³
  
¸ü¸Äµ±Ç°ÊÓÆµÏÔÊ¾Ò³Ãæ

Óï·¨
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

ÓÃ·¨
Flip [ frompage ] [, topage ]

²ÎÊı
frompage
ÉÏÒ»Ò³
topage
ÒªÏÔÊ¾µÄĞÂÒ³Ãæ

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÁã £¨£©£¬»ò·µ»Ø·ÇÁã´íÎó´úÂëÒÔÖ¸Ê¾Ê§°Ü¡£0

ÃèÊö
ÔÚÆÕÍ¨Í¼ĞÎÄ£Ê½ÏÂ£¬ÊÇ ºÍ µÄ±ğÃû¡£ÓĞ¹ØÏêÏ¸ĞÅÏ¢£¬Çë²ÎÔÄ¡£
ÔÚ OpenGL Ä£Ê½ÏÂ£¬Ö´ĞĞÓ²¼ş·­Ò³²¢ÏÔÊ¾·´»º³åÆ÷µÄÄÚÈİ¡£½¨ÒéÄúÔÚ OpenGL Ä£Ê½ÏÂ¶¨Æ


-------------------------------------------------------- KeyPgFor ----
For   Ñ­
Description



-------------------------------------------------------- KeyPgFormat ----

Format   ¸ñÊ½»¯
  
ÒÔÖ¸¶¨µÄ¸ñÊ½ÉèÖÃÊı×ÖµÄ¸ñÊ½

Óï·¨
Declare Function Format ( ByVal numerical_expression As Double, ByRef formatting_expression As Const String = "" ) As String

ÓÃ·¨
#include "string.bi"
result = Format[$]( numerical_expression, formatting_expression )

²ÎÊı
numerical_expression
Òª¸ñÊ½»¯µÄÊı×Ö
formatting_expression
¸ñÊ½»¯Ä£Ê½

·µ»ØÖµ
Format·µ»ØÒ»¸ö×Ö·û´®£¬Æä½á¹ûµÄ¸ñÊ½ÉèÖÃÎª¸ñÊ½ÉèÖÃ±í´ïÊ½ÖĞÖ¸Ê¾µÄ¸ñÊ½¡£
¸ñÊ½±í´ïÊ½ÊÇÒ»¸ö×Ö·û´®£¬¿ÉÒÔÉú³ÉÊı×Ö»òÈÕÆÚÊ±¼äÖµ¡£

ÃèÊö
Òª»Ö¸´ÓĞÒâÒåµÄÈÕÆÚÊ±¼äÖµ£¬ÊıÖµ±í´ïÊ½±ØĞëÊÇ´ÓÏàÓ¦º¯Êı»ñÈ¡µÄÈÕÆÚĞòÁĞ¡£
´Ëº¯ÊıÊÇ FreeBASIC µÄÒ»²¿·Ö£¬µ


-------------------------------------------------------- KeyPgFornext ----

For...Next
  
ÓÃÓÚÑ­»·µÄ¿ØÖÆÁ÷Óï¾ä

Óï·¨
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

²ÎÊı
iterator
ÓÃÓÚ´Ó³õÊ¼ÖµÑ­»··ÃÎÊµ½½áÊøÖµµÄ±äÁ¿±êÊ¶·û
datatype
Èç¹ûÖ¸¶¨£¬±äÁ¿½«×Ô¶¯Ê¹ÓÃÀàĞÍÉùÃ÷iteratordatatype
startvalue
±íÊ¾µü´úÆ÷ÆğÊ¼ÖµµÄ±í´ïÊ½
endvalue
ÓÃÓÚÓëµü´úÆ÷µÄÖµ½øĞĞ±È½ÏµÄ±í´ïÊ½
stepvalue
Ã¿´Îµü´úºóÌí¼Óµ½µü´úÆ÷µÄ±í´ïÊ½

ÃèÊö
Ñ­»·³õÊ¼»¯Îª £¬È»ºóÖ´ĞĞ µİÔö £¬ Ö±µ½³¬¹ı ¡£Èç¹ûÎ´ÏÔÊ½¸ø³ö£¬Ëü½«ÉèÖÃÎª ¡£
ºÍ µÄÖµÔÚÓï¾äÖ´ĞĞºóÁ¢¼´´æ´


-------------------------------------------------------- KeyPgFrac ----

Frac   Ğ¡Êı
  
·µ»ØÊı×ÖµÄĞ¡Êı²¿·Ö

Óï·¨
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

ÓÃ·¨
result = Frac( number )

²ÎÊı
number
Òª»ñÈ¡·ÖÊı²¿·ÖµÄÊı×Ö»ò±í´ïÊ½¡£

·µ»ØÖµ
·µ»ØÊı×Ö»ò±í´ïÊ½µÄĞ¡Êı²¿·Ö¡£

ÃèÊö
µÈĞ§ÓÚ£º .
ÀıÈç£¬½«·µ»Ø £¬²¢½«·µ»Ø ¡£¶ÔÓÚÕûÊıÀàĞÍ£¬Ê¼ÖÕ·µ»Ø¸ÃÖµ¡£
Ò»Ô


-------------------------------------------------------- KeyPgFre ----

Fre   ÄÚ´æ¿ÉÓÃÖµ
  
·µ»Ø¿ÉÓÃÄÚ´æÁ¿

Óï·¨
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

ÓÃ·¨
result = Fre( [ value ] )

²ÎÊı
value
±£ÁôÎ´Ê¹ÓÃµÄĞéÄâ²ÎÊıÒÔÏòºó¼æÈİ;¿ÉÒÔºöÂÔ¡£

·µ»ØÖµ
·µ»Ø¿É


-------------------------------------------------------- KeyPgFreefile ----

FreeFile   ÎÄ¼şºÅ
  
·µ»Ø¿ÉÓÃÎÄ¼ş±àºÅ

Óï·¨
Declare Function FreeFile ( ) As Long

ÓÃ·¨
result = FreeFile

·µ»ØÖµ
ÏÂÒ»¸ö¿ÉÓÃÎÄ¼ş±àºÅ£¨Èç¹ûÓĞ£©£¬·ñÔòÎªÁã £¨£©¡£0

ÃèÊö
·µ»ØÏÂÒ»¸ö¿ÉÓÃÎÄ¼şºÅµÄ±àºÅ£¬ÆäÓĞĞ§ÖµÎª £¬»òÕßÈç¹ûÒÑ´ò¿ªÁË 255 ¸öÎÄ¼ş¡£´ËÖµÊÇÎÄ¼şµÄ±ØĞè²ÎÊı¡£ ÔÚ³ÌĞòÔ±ÎŞ·¨¸ú×ÙÒÑÓÃÎÄ¼ş±àºÅµÄ¸´ÔÓ³ÌĞòÖĞ´ò¿ªÎÄ¼şÊ±·Ç³£ÓĞÓÃ¡£


-------------------------------------------------------- KeyPgFunction ----

Function   º¯Êı
  
¶¨Òå·µ»ØÖµµÄ¹ı³Ì

Óï·¨
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

²ÎÊı
identifier£ºº¯Êı
µÄÃû³Æ£ºÍâ²¿¿É¼ûµÄ£¨¶ÔÁ´½ÓÆ÷£©Ãû³ÆÀ¨ÔÚÒıºÅÖĞ
£º 
 £ºexternal_identifierparameter_listparameter[, parameter[, ...]]parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier£ºº¯ÊıÖĞÒıÓÃµÄ±äÁ¿µÄÃû³Æ¡£Èç¹û²ÎÊıÊÇÊı×é£¬Ôò±êÊ¶·ûºó±ØĞë¸ú¿ÕÀ¨ºÅ¡£
 £º±äÁ¿
µÄÀàĞÍ £ºÈç¹ûµ÷ÓÃÖĞÎ´Ö¸¶¨ÈÎºÎ²ÎÊı£¬Ôò²ÎÊıµÄÖµtypedefault_value
return_type£ºº¯Êı
·µ»ØµÄ±äÁ¿µÄÀàĞÍ£º×é³Éº¯ÊıÌå
µÄÒ»¸ö»ò¶à¸öÓï¾ä£º´Óº¯Êı·µ»ØµÄÖµstatementsreturn_value

ÃèÊö
º¯Êı¶¨ÒåÒ»¸ö´úÂë¿é£¬¸Ã´úÂë¿é¿ÉÒÔÊ¹ÓÃµ¥¸öÓï¾ä£¨º¯Êıµ÷ÓÃ£©Ö´ĞĞ£


-------------------------------------------------------- KeyPgFunctionPtr ----

Function Pointer   º¯Êı
  
´æ´¢Ö¸Ïò·µ»ØÖµµÄ¹ı³ÌµÄÖ¸ÕëµÄÊı¾İÀàĞÍFunction

Óï·¨
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

²ÎÊı
parameter_list£º ²ÎÊı[£¬ ²ÎÊı[£¬ ...]]
 £ºparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier£ºº¯Êı
ÖĞÒıÓÃµÄ±äÁ¿µÄÃû³Æ£º±äÁ¿
µÄÀàĞÍ£ºÈç¹ûµ÷ÓÃÖĞÎ´Ö¸¶¨ÈÎºÎ²ÎÊı£¬Ôò²ÎÊıµÄÖµtypedefault_value
return_value£º´Óº¯Êı
·µ»ØµÄÖµ £ºÒªÉèÖÃÎª³õÊ¼ÖµµÄº¯ÊıµÄµØÖ·intializer

ÃèÊö
Ö¸ÕëÊÇÒ»¸ö¹ı³ÌÖ¸Õë£¬ÓÃÓÚ´æ´¢·µ»ØÖµµÄÒÑ±àÒë´úÂëµÄÄÚ´æÎ»ÖÃ¡£Èç¹ûÎ´¸ø³ö³õÊ¼Öµ£¬ÔòÄ¬ÈÏ³õÊ¼ÖµÎªÁã £¨0£©¡£



-------------------------------------------------------- KeyPgGetfileio ----

Get (File I/O)   »ñÈ¡
  
½«Êı¾İ´ÓÎÄ¼ş¶ÁÈ¡µ½»º³åÇø

Óï·¨
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

ÓÃ·¨
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

²ÎÊı
filenum
´ò¿ªÎÄ¼şÊ±´«µİ¸øµÄÖµ¡£Open
position
±ØĞë¿ªÊ¼¶ÁÈ¡µÄÎ»ÖÃ¡£Èç¹ûÎÄ¼ş±»´ò¿ª£¬²ÖÎ»ÔÚ¼ÇÂ¼ÖĞ;·ñÔò£¬ËüÒÔ×Ö½ÚÎªµ¥Î»¡£Èç¹ûÊ¡ÂÔ£¬Ôò´Óµ±Ç°ÎÄ¼şÖ¸ÕëÎ»ÖÃ¿ªÊ¼¶ÁÈ¡¡£Î»ÖÃÊÇ´Ó 1 ¿ªÊ¼µÄ£º¼´ÎÄ¼şµÄµÚÒ»Ìõ¼ÇÂ¼»ò×Ö½ÚÎ»ÓÚ Î»ÖÃ ¡£
Èç¹ûÊ¡ÂÔ»òÎªÁã £¨£©£¬ÔòÎÄ¼ş¶ÁÈ¡½«´Óµ±Ç°ÎÄ¼şÎ»ÖÃ¿ªÊ¼¡£For Random1position0
data
Ğ´ÈëÊı¾İµÄ»º³åÇø¡£Ëü¿ÉÒÔÊÇÊıÖµ±äÁ¿¡¢×Ö·û´®¡¢Êı×é¡¢ÓÃ»§¶¨ÒåÀàĞÍ»òÈ¡ÏûÒıÓÃµÄÖ¸Õë¡£¶ÁÈ¡²Ù×÷½«³¢ÊÔÍêÈ«Ìî³ä±äÁ¿£¬³ı·Ç´ïµ½¡£
»ñÈ¡Êı×éÊ±£¬ºó¸úÒ»¶Ô¿ÕÀ¨ºÅ£º¡°¡±¡£ ½«¶ÁÈ¡Êı×éÖĞËùÓĞÖµµÄÊı¾İ¡£ ÊÇ²»ÔÊĞíµÄ¡£
»ñÈ¡ s Ê±£¬¶ÁÈ¡µÄ×Ö½ÚÊıÓë×Ö·û´®Êı¾İÖĞµÄ×Ö½ÚÊıÏàÍ¬¡£ ÊÇ²»ÔÊĞíµÄ¡£
×¢Òâ£ºÈç¹ûÒª½«Öµ¶ÁÈë»º³åÇø£¬Ôò²»Ó¦½«Ö¸Õë´«µİµ½»º³åÇø;Ïà·´£¬ÄúÓ¦¸Ã´«µİ»º³åÇøÖĞµÄµÚÒ»¸ö±äÁ¿£¨Õâ¿ÉÒÔÍ¨¹ıÈ¡ÏûÒıÓÃÖ¸ÕëÀ´Íê³É£©¡£Èç¹ûÖ±½Ó´«µİÖ¸Õë£¬Ôò½«¸²¸ÇÖ¸Õë±äÁ¿£¬¶ø²»ÊÇËüÖ¸ÏòµÄÄÚ´æ¡£EOFdata()GetamountStringamountOperator * (Value Of)Get
amount
Ê¹´ÓÎÄ¼ş¶ÁÈ¡µ½ÄÚ´æµÄÁ¬Ğø±äÁ¿£¬¼´´Ó µÄÄÚ´æÎ»ÖÃ¿ªÊ¼½«ÎÄ¼şÖĞµÄÊı¾İ×Ö½Ú¶ÁÈ¡µ½ÄÚ´æÖĞ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÎª £¬±íÊ¾Ö»¶


-------------------------------------------------------- KeyPgGetgraphics ----

Get (Graphics)   »ñÈ¡
  
»ñÈ¡µ±Ç°¹¤×÷Ò³µÄÒ»²¿·Ö»òÍ¼Ïñ»º³åÇøµÄ¸±±¾

Óï·¨
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

²ÎÊı
source
Í¼Ïñ»º³åÇøµÄµØÖ·¡£Èç¹ûÊ¡ÂÔËü£¬Ôò»á¸´ÖÆµ±Ç°¹¤×÷Ò³Ãæ¡£
STEP
±íÊ¾ÒÔÏÂ×ø±ê²»ÊÇ¾ø¶Ô×ø±ê¡£
[STEP](x1, y1)
Òª¸´ÖÆµÄ×ÓÍ¼Ïñ×óÉÏ½ÇµÄ×ø±ê¡£ Ö¸Ê¾Æ«ÒÆÁ¿Ïà¶ÔÓÚµ±Ç°Í¼ĞÎ¹â±êÎ»ÖÃ¡£STEP(x1, y1)
[STEP](x2, y2)
Òª¸´ÖÆµÄ×ÓÍ¼ÏñÓÒÏÂ½ÇµÄ×ø±ê¡£ Ö¸Ê¾ ºÍ ·Ö±ğÏà¶ÔÓÚ ºÍ¡£STEPx2y2x1y1
dest
ÒÔÇ°·ÖÅäµÄ»º³åÇøµÄµØÖ·£¬ÓÃÓÚ´æ´¢Í¼ÏñÊı¾İ¡£

ÃèÊö
Get¸´ÖÆµ±Ç°¹¤×÷Ò³ÃæµÄ¾ØĞÎ²¿·Ö£¬¸Ã×ø±êÓÉ×ø±ê £¨£¬ £© 


-------------------------------------------------------- KeyPgGetjoystick ----

GetJoystick   ÓÎÏ·¸Ë»ñÈ¡
  
´ÓÁ¬½ÓµÄÓÎÏ·Éè±¸¶ÁÈ¡°´Å¥ºÍÖáĞÅÏ¢

Óï·¨
Declare Function GetJoystick ( ByVal id As Long, ByRef buttons As Integer = 0, ByRef a1 As Single = 0, ByRef a2 As Single = 0, ByRef a3 As Single = 0, ByRef a4 As Single = 0, ByRef a5 As Single = 0, ByRef a6 As Single = 0, ByRef a7 As Single = 0, ByRef a8 As Single = 0 ) As Integer

ÓÃ·¨
result = GetJoystick( id[, buttons[, a1[, a2[, a3[, a4[, a5[, a6[, a7[, a8]]]]]]]]] )

²ÎÊı
id
Éè±¸ id ºÅ £¨0 - 15£©
buttons
°´Å¥×´Ì¬
a1
µÚÒ»ÖáÖµ
a2
µÚ¶şÖáÖµ
a3
µÚÈıÖáÖµ
a4
µÚËÄÖáÖµ
a5
µÚÎåÖáÖµ
a6
µÚÁùÖáÖµ
a7
µÚÆßÖáÖµ
a8
µÚ°ËÖáÖµ

·µ»ØÖµ
0³É¹¦»òÊ§°Ü¡£ËùÓĞÖáÎ»ÖÃ¶¼ÒÔ¸¡µã¸ñÊ½·µ»Ø¡£1

ÃèÊö
GetJoystick½«¼ìË÷°´Å¥×´Ì¬£¬ÒÔ¼°×î¶à 8 ¸öÖáµÄÖáÎ»ÖÃ£¬¶ÔÓÚÓÉ ºÍ Ö®¼äµÄÊı×ÖÈ·¶¨µÄ²Ù×İ¸Ë¡£°´Å¥µÄ´æ´¢·½Ê½Óë


-------------------------------------------------------- KeyPgGetkey ----

GetKey   ¼üÈ¡Öµ
  
·µ»Ø¼üÅÌ»º³åÇøÖĞµÚÒ»¸ö¼üµÄ ascii ´úÂë

Óï·¨
Declare Function GetKey ( ) As Long

ÓÃ·¨
result = GetKey

·µ»ØÖµ
·µ»ØµÄ ascii ´úÂëµÄÖµ¡£

ÃèÊö
Ëü·µ»Ø¼üÅÌ»º³åÇøÖĞµÚÒ»¸ö¼üµÄ ascii ´úÂë¡£¸Ã¼ü½«´Ó»º³åÇøÖĞÉ¾³ı¡£Èç¹û²»´æÔÚÃÜÔ¿£¬ÇëµÈ´ıËü¡£
¶ÔÓÚÀ©Õ¹¼ü£¨·µ»ØÁ½¸ö×Ö·û£©£¬À©Õ¹´úÂëÔÚµÚÒ»¸ö×Ö½ÚÖĞ·µ»Ø£¬³£¹æ´úÂëÔÚµÚ¶


-------------------------------------------------------- KeyPgGetmouse ----

GetMouse   Êó±ê»ñÈ¡
  
¼ìË÷Êó±êÖ¸ÕëÉè±¸µÄ×´Ì¬

Óï·¨
Declare Function GetMouse ( ByRef x As Long, ByRef y As Long, ByRef wheel As Long = 0, ByRef buttons As Long = 0, ByRef clip As Long = 0 ) As Long
Declare Function GetMouse ( ByRef x As LongInt, ByRef y As LongInt, ByRef wheel As LongInt = 0, ByRef buttons As LongInt = 0, ByRef clip As LongInt = 0 ) As Long

ÓÃ·¨
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

²ÎÊı
x
x ×ø±êÖµ
y
y ×ø±êÖµ
wheel
¹öÂÖÖµ
buttons
°´Å¥×´Ì¬
clip
¼ô¼­×´Ì¬

·µ»ØÖµ
0³É¹¦Ê±£¬»ò³ö´íÊ±£¨ÀıÈç£¬ÒòÎªÊó±êÎ»ÓÚÍ¼ĞÎ´°¿ÚÍâ£©»òÊ§°ÜÊ±¡££¨ÉèÖÃÔËĞĞÊ±´íÎó£©1

ÃèÊö
GetMouse¼ìË÷Êó±êÎ»ÖÃºÍ°´Å¥×´Ì¬;ĞÅÏ¢ÔÚÍ¨¹ıÒıÓÃ´«µİ¸ø´Ëº¯ÊıµÄ±äÁ¿ÖĞ·µ»Ø¡£Èç¹ûÊó±ê²»¿ÉÓÃ£¬ÔòËùÓĞ±äÁ¿¶¼½«°üº¬¸ÃÖµ¡£
È


-------------------------------------------------------- KeyPgGosub ----

GoSub   Ìø×ª
  
¿ØÖÆÁ÷Óï¾äÒÔÊ¹ÓÃÒ»¶Î´úÂë²¢·µ»Ø¡£

Óï·¨
GoSub label

ÃèÊö
Ö´ĞĞÌø×ªµ½ÓÉĞĞ±êÇ©±ê¼ÇµÄ×ÓÀı³Ì¡£Ê¼ÖÕÊ¹ÓÃ ÍË³ö a £¬Ö´ĞĞ½«ÔÚ Ö®ºóµÄÏÂÒ»¸öÓï¾äÉÏ¼ÌĞø¡£
Ìø×ª±ØĞëÓë ÏàÍ¬µÄ main/function/sub ¿éÖĞµÄĞĞ±êÇ©¡£×ÓÀı³ÌÖĞµÄËùÓĞ±äÁ¿¶¼Óë¿é¹²Ïí£¬²»ÄÜÊ¹ÓÃ


-------------------------------------------------------- KeyPgGoto ----

Goto   ×ªµ½
  
¿ØÖÆÁ÷Óï¾äÌø×ªµ½³ÌĞòµÄÁíÒ»²¿·Ö

Óï·¨
Goto label

ÃèÊö
½«´úÂëÖ´ĞĞÌø×ªµ½ĞĞ±êÇ©¡£
Ê¹ÓÃÍË³ö×÷ÓÃÓòÊ±£¬½«Ïú»ÙÔÚ¸Ã×÷ÓÃÓòÖĞ¶¨ÒåµÄÈÎºÎ¾Ö²¿±äÁ¿£¨µ÷ÓÃÎö¹¹º¯Êı£©¡£
µ± Ìø¹ı±äÁ¿¶¨Òå¶ø²»ÊÇ±äÁ¿×÷ÓÃÓòµÄÄ©Î²Ê±£¬¿ÉÄÜ»á²»ÔÊĞíÊ¹ÓÃ¡£Èç¹û±äÁ¿ĞèÒª¹¹Ô


-------------------------------------------------------- KeyPgHex ----

Hex   Ê®Áù½øÖÆ
  
·µ»Ø¸ø¶¨Êı×ÖµÄÊ®Áù½øÖÆÊı

Óï·¨
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String

Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

ÓÃ·¨
result = Hex[$]( number [, digits ] )

²ÎÊı
number
¼ÆËãÎªÊı×ÖµÄÊı×Ö»ò±í´ïÊ½¡£¸¡µãÊı½«×ª»»Îª .LongInt
digits
Òª·µ»ØµÄ¿ÉÑ¡Î»Êı¡£

·µ»ØÖµ
°üº¬ µÄÎŞ·ûºÅÊ®Áù½øÖÆ±íÊ¾ĞÎÊ½µÄ×Ö·û´®¡£number

ÃèÊö
·µ»ØÕûÊı µÄÎŞ·ûºÅÊ®Áù½øÖÆ×Ö·û´®±íÊ¾ĞÎÊ½¡£Ê®Áù½øÖÆÊı×ÖµÄ·¶Î§Îª 0-9 »ò A-F¡£
Èç¹ûÖ¸¶¨ > 0£¬Ôò½á¹û×Ö·û´®½«Ç¡ºÃÊÇ¸Ã³¤¶È¡£Èç


-------------------------------------------------------- KeyPgHibyte ----

HiByte   µ¥×Ö½Ú¸ßÎ»
  
»ñÈ¡²Ù×÷ÊıµÄµÚ¶ş¸ö×Ö½Ú¡£

Óï·¨
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

ÓÃ·¨
result = HiByte( expr )

²ÎÊı
expr
×ª»»ÎªÖµµÄÊıÖµ±í´ïÊ½¡£UInteger

·µ»ØÖµ
·µ»Ø expr µÄµÍ 16 Î»×ÖµÄ¸ß×Ö½ÚÖµ¡£

ÃèÊö
´Ëºê½«ÊıÖµ±í´ïÊ½×ª»»ÎªÖµ£¬È»ºóÕ¹¿ªÎ


-------------------------------------------------------- KeyPgHiword ----

HiWord   Ë«×Ö½Ú¸ßÎ»
  
»ñÈ¡²Ù×÷ÊıµÄµÚ¶ş¸ö 16 Î»×Ö¡£

Óï·¨
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

ÓÃ·¨
result = HiWord( expr )

²ÎÊı
expr
×ª»»ÎªÖµµÄÊıÖµ±í´ïÊ½¡£UInteger

·µ»ØÖµ
·µ»Ø expr µÄµÍ 32 Î» dword µÄ 16 Î»¸ß×ÖµÄÖµ¡£

ÃèÊö
´Ëºê½«ÊıÖµ±í´ïÊ½×ª»»ÎªÒ»¸öÖµ£¬È»ºóÀ©Õ¹Îª±íÊ¾ÆäµÚ¶


-------------------------------------------------------- KeyPgHour ----

Hour   Ê±¼äÈ¡Ğ¡Ê±
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡Ò»ÌìÖĞµÄĞ¡Ê±Êı 

Óï·¨
Declare Function Hour ( ByVal date_serial As Double ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Hour( dateserial )

²ÎÊı
date_serial
ÈÕÆÚĞòÁĞ

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ


-------------------------------------------------------- KeyPgIfthen ----

If...Then
  
ÓÃÓÚÌõ¼ş·ÖÖ§µÄ¿ØÖÆÁ÷Óï¾ä

Óï·¨
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

±¸×¢£º£¨²»´ø¿Õ¸ñ£©Ò²ÏñÔÚQBÖĞÒ»ÑùÖ§³ÖÏòºó¼æÈİ¡£EndIf

ÃèÊö
If...ThenÊÇÒ»ÖÖ×ö¾ö¶¨µÄ·½Ê½¡£
ËüÊÇÒ»ÖÖ½öÔÚÌõ¼şÎª true Ê±²ÅÖ´ĞĞ´úÂëµÄ»úÖÆ£¬²¢ÇÒ¿ÉÒÔ¸ù¾İ¸ü¶àÌõ¼şÌá¹©ÒªÖ´ĞĞµÄÌæ´ú´úÂë£º
Èç¹ûÌõ¼şÎªÕæ£¬ÔòÖ´ĞĞ´úÂë£¨½ôËæÆäºó£©¡£


-------------------------------------------------------- KeyPgIif ----

IIf   Èç¹ûÊÇ
  
·µ»ØÁ½¸öÖµÖ®Ò»µÄÌõ¼şº¯Êı¡£

Óï·¨
IIf ( condition, expr_if_true, expr_if_false )

²ÎÊı
condition
Òª²âÊÔµÄÌõ¼ş¡£
·ÇÁãÖµµÄ¼ÆËã½á¹ûÎª true£¬¶øÁãÖµµÄ¼ÆËã½á¹ûÎª false¡£
expr_if_true
Òª¼ÆËã²¢·µ»Ø if Îª true µÄ±í´ïÊ½¡£
Ëü±ØĞë·µ»Ø£ºcondition
Ò»¸öÊıÖµ£¬¿ÉÒÔÊÇÕûÊı¡¢¸¡µãÊı»òÖ¸Õë£¬°üÀ¨²¼¶ûÖµ£¬
»ò×Ö·û´®Öµ£¬
»ò UDT Öµ¡£
expr_if_false
Òª¼ÆËã²¢·µ»Ø if Îª false µÄ±í´ïÊ½¡£
Ëü±ØĞëÓë£¨Êı×Ö¡¢×Ö·û´®»ò UDT£©µÄÀàĞÍÏàÍ¬¡£conditionexpr_if_true

·µ»ØÖµ
if Îª·ÇÁã£¬·ñÔòconditionexpr_if_trueexpr_if_false

ÃèÊö
IIf·µ»Ø²»Í¬µÄÊı×Ö»ò×Ö·û´®»ò UDT Öµ£¨²»ÊÇÒıÓÃ£©£¬¾ßÌåÈ¡¾


-------------------------------------------------------- KeyPgImageConvertRow ----

ImageConvertRow   Í¼Ïñ×ª»»ĞĞ
  
½«Ò»ĞĞÍ¼ÏñÊı¾İ×ª»»ÎªÆäËûÑÕÉ«Éî¶È

Óï·¨
Declare Sub ImageConvertRow ( ByVal src As Any  Ptr, ByVal src_bpp As Long, ByVal dst As Any  Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

ÓÃ·¨
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

²ÎÊı
src
Ô´ĞĞ¿ªÍ·µÄµØÖ·¡£Ô´¿ÉÒÔÊÇÎ»Éî¶ÈÎªÃ¿ÏñËØ 24 Î»»ò 32 Î»µÄÈ«²ÊÉ«Í¼Ïñ£¬Ò²¿ÉÒÔÊÇÎ»Éî¶ÈÎªÃ¿ÏñËØ 1-8 Î»µÄµ÷É«°åÍ¼Ïñ¡£Ö»ÓĞÔÚ½øĞĞ×ª»»Ê±´¦ÓÚÊ¹ÓÃÕıÈ·µ÷É«°åµÄÆÁÄ»Ä£Ê½Ê±£¬×ª»»µ÷É«°åÍ¼Ïñ²ÅÄÜÕı³£¹¤×÷¡£
src_bpp
Ô´ĞĞÖĞÃ¿¸öÏñËØµÄÎ»Êı¡£µÚ1-8¡¢24ºÍ32¶Î¡£
dst
Ä¿±êĞĞ¿ªÍ·µÄµØÖ·¡£Í¼Ïñ¿ÉÒÔÊÇÃ¿ÏñËØ 16 Î»»ò 32 Î»µÄÈ«²ÊÉ«Í¼Ïñ¡£Èç¹ûÔ´ÊÇµ÷É«°åÍ¼Ïñ£¬ÔòÄ¿±êÒ²¿ÉÒÔÊÇÃ¿ÏñËØ 1 µ½ 8 Î»


-------------------------------------------------------- KeyPgImagecreate ----

ImageCreate   Í¼Ïñ´´½¨
  
ÎªÓ³Ïñ·ÖÅäºÍ³õÊ¼»¯´æ´¢

Óï·¨
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

ÓÃ·¨
result = ImageCreate( width, height [, [ color ][, depth ]] )

²ÎÊı
width
ËùĞè¿í¶È£¬ÒÔÏñËØÊıÎªµ¥Î»¡£
height
ËùĞè¸ß¶È£¨ÒÔÏñËØÊıÎªµ¥Î»£©¡£
color
ÓÃÓÚÌî³äÍ¼ÏñÇøÓòµÄÏñËØÖµ¡£
depth
ËùĞèµÄÑÕÉ«Éî¶È£¬ÒÔÃ¿ÏñËØÎ»ÊıÎªµ¥Î»¡£

·µ»ØÖµ
Èç¹ûÎŞ·¨´´½¨Ó³Ïñ£¬Ôò·µ»Ø NULL £¨£©£¬·ñÔò·µ»ØÓ³ÏñµÄµØÖ·¡£ ±ØĞëÔÚÍ¼ĞÎÄ£Ê½³õÊ¼»¯ºóµ÷ÓÃ£¬·ñÔòËü½«·µ»Ø ¡£
Òò´Ë£¬ÔÚ±äÁ¿ÉùÃ÷µÄÇé¿öÏÂ£¬²»ÄÜÓÃ×÷¼¯³É³õÊ¼ÖµÉè¶¨Ïî£¬¼´Ê¹ÔÚ£¨ÔÚ³ÉÔ±×Ö¶Î»ò¹¹Ôìº¯ÊıÖĞ£©ÖĞÒ²ÊÇÈç´Ë£¬ÒòÎª£¨¹²Ïí±äÁ¿µÄ£©³õÊ¼»¯ÖµÊÇÔÚ³ÌĞò¿ªÊ¼Ê±ÉèÖÃµÄ£¬È»ºóÔËĞĞÈÎºÎÓÃ»§´úÂë¡£Í¼Ïñ·ÖÅäµ÷ÓÃ±ØĞëÔÚµ¥¶ÀµÄ¿ÉÖ´ĞĞÖ¸ÁîÖĞ£¬²¢ÇÒÔÚÍ¼ĞÎÄ£Ê½³õÊ¼»


-------------------------------------------------------- KeyPgImageDestroy ----

ImageDestroy   Í¼ÏñÏú»Ù
  
Ïú»ÙºÍÈ¡Ïû·ÖÅäÓ³ÏñµÄ´æ´¢

Óï·¨
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

ÓÃ·¨
ImageDestroy( image )

²ÎÊı
image
ÒªÏú»ÙµÄÓ³ÏñµÄµØÖ·¡£

ÃèÊö
Ïú»Ù ËùÖ¸Ïò µÄÍ¼Ïñ£¬¸ÃÍ¼Ïñ±ØĞëÊÇ´Óµ÷ÓÃ ·


-------------------------------------------------------- KeyPgImageInfo ----

ImageInfo   Í¼ÏñĞÅÏ¢
  
¼ìË÷ÓĞ¹ØÍ¼ÏñµÄĞÅÏ¢

Óï·¨
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As Long = 0, ByRef height As Long = 0, ByRef bypp As Long = 0, ByRef pitch As Long = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As LongInt, ByRef height As LongInt, ByRef bypp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long

ÓÃ·¨
in the LONG (or INTEGER<32>) version of the function:
result = ImageInfo( image [, [ width ] [, [ height ] [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]]]] )
in the LONGINT (or INTEGER<64>) version of the function:
result = ImageInfo( image , width , height [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]] )

²ÎÊı
image
Ó³ÏñµÄµØÖ·¡£
width
´æ´¢Í¼ÏñµÄ¿í¶È£¨ÒÔÏñËØÎªµ¥Î»£©¡£
height
´æ´¢Í¼ÏñµÄ¸ß¶È£¨ÒÔÏñËØÎªµ¥Î»£©¡£
bypp
´æ´¢Í¼ÏñÃ¿ÏñËØµÄ×Ö½ÚÊı - ¼´µ¥¸öÏñËØµÄ´óĞ¡£¬ÒÔ×Ö½ÚÎªµ¥Î»¡£
pitch
´æ´¢Í¼ÏñµÄ¼ä¾à - ¼´Ã¿ÌõÉ¨ÃèÏß£¨ĞĞ£©µÄ´óĞ¡£¬ÒÔ×Ö½ÚÎªµ¥Î»¡£Çë×¢Òâ£¬Õâ¿ÉÄÜ²»½ö½öÊÇ £¬ÒòÎªÉ¨ÃèÏß¿ÉÄÜ»á±»Ìî³ä£¬ÒÔÔÊĞíËüÃÇÔÚÄÚ´æÖĞ¸üºÃµØ¶ÔÆë¡£width * bypp
pixdata
´æ´¢Í¼ÏñµÄµÚÒ»ÌõÉ¨ÃèÏßµÄÆğÊ¼µØÖ·¡£
size
½«Ó³ÏñµÄ´óĞ¡´æ´¢ÔÚÄÚ´æÖĞ£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£

·µ»ØÖµ
Èç¹ûÎ´Ö¸ÏòÓĞĞ§Í¼Ïñ£¬Ôò·µ»ØÒ»¸ö £¨£©¡£·ñÔò£¬½«Îª ¡¢ ¡¢ ºÍ ·ÖÅäÊÊµ±µÄÖµ£¬²¢·µ»ØÁã £¨£©¡£image1widt


-------------------------------------------------------- KeyPgImplements ----

Implements   ¼Ì³Ğ½Ó¿Ú
  
Ö¸¶¨ÒªÓÉÓÃ»§¶¨ÒåÀàĞÍ
ÊµÏÖµÄ½Ó¿Ú ×¢Òâ£º´æ¸ùÒ³¡£¼´Ê¹´Ë¹Ø¼ü×ÖÒÑ±£Áô£¬½Ó¿ÚÉĞÎ´ÊµÏÖ¡£

Óï·¨
Type typename Implements interface
...
End Type

ÃèÊö

Àı

·½ÑÔ²îÒì
ÔÚ -lang qb ·½ÑÔÖĞ²»¿ÉÓÃ£¬³ı·ÇÊ¹ÓÃ±ğÃû ÒıÓÃ¡£__Implements

ÓëQBµÄÇø±ğ
FreeBASIC µÄ


-------------------------------------------------------- KeyPgImport ----

Import   µ¼Èë
  
Î»ÓÚ DLL ÖĞµÄ¹«¹²Êı¾İµÄÍâ²¿Á´½ÓÊôĞÔ

Óï·¨
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

ÃèÊö
½öÔÚÍâ²¿Ä£¿éÖĞ£¨Ê¹ÓÃ¹Ø¼ü×Ö£©ÓÃÓÚ·ÃÎÊ Win32 DLL ÖĞµÄÈ«¾Ö±äÁ¿£º±äÁ¿Ãû³Æ½«Ìí¼Óµ½¶¯Ì¬¿


-------------------------------------------------------- KeyPgInclib ----

#inclib   #°üº¬¿â
  
Ô¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#inclib "libname"

ÃèÊö
ÔÚÁ´½Ó¹ı³ÌÖĞ°üº¬Ò»¸ö¿â£¬¾Í


-------------------------------------------------------- KeyPgInclude ----

#include   #°üº¬
  
Ô¤´¦ÀíÆ÷Óï¾ä£¬ÓÃÓÚ°üº¬ÁíÒ»¸öÔ´ÎÄ¼şµÄÄÚÈİ

Óï·¨
#include [once] "file"

ÃèÊö
#includeÔÚÖ¸Áî³öÏÖµÄÎ»ÖÃ²åÈëÀ´×ÔÁíÒ»¸öÎÄ¼şµÄÔ´´úÂë¡£Õâ¾ßÓĞ´Ó°üº¬ÎÄ¼ş±àÒëÔ´´úÂëµÄĞ§¹û£¬¾ÍºÃÏñËüÊÇ°üº¬ËüµÄÔ´ÎÄ¼şµÄÒ»²¿·ÖÒ»Ñù¡£Ò»µ©±àÒëÆ÷µ½´ï°üº¬ÎÄ¼şµÄÄ©Î²£¬Ô­Ê¼Ô´ÎÄ¼ş½«¼ÌĞ


-------------------------------------------------------- KeyPgInkey ----

Inkey   ¼üÊäÈë
  
·µ»ØÒ»¸ö×Ö·û´®£¬±íÊ¾ÔÚ¼üÅÌ»º³åÇøÖĞµÈ´ıµÄµÚÒ»¸ö¼ü

Óï·¨
Declare Function Inkey ( ) As String

ÓÃ·¨
result = Inkey[$]

·µ»ØÖµ
ÔÚ¼üÅÌ»º³åÇøÖĞÕÒµ½µÄµÚÒ»¸ö×Ö·û£¬Èç¹ûÎ´ÕÒµ½£¬ÔòÎª¿Õ×Ö·û´® £¨£©¡£""

ÃèÊö
É¨ÊÓ¼üÅÌ»º³åÇø²¢·µ»ØÕÒµ½µÄµÚÒ»¸ö×Ö·û£¨Èç¹ûÓĞ£©µÄ±íÊ¾ĞÎÊ½¡£È»ºó£¬¸Ã¼ü½«´Ó»º³åÇøÖĞÉ¾³ı£¬²¢ÇÒ²»»á»ØÏÔµ½ÆÁÄ»ÉÏ¡£Èç¹û¼üÅÌ»º³åÇøÎª¿Õ£¬


-------------------------------------------------------- KeyPgInp ----

Inp   ¶Ë¿Ú
  
·µ»ØÓ²¼ş¶Ë¿Ú´¦µÄÖµ¡£

Óï·¨
Declare Function Inp ( ByVal port As UShort ) As Integer

ÓÃ·¨
value = Inp(port)

²ÎÊı
port
Òª¶ÁÈ¡µÄ¶Ë¿ÚºÅ¡£

·µ»ØÖµ
Ö¸¶¨¶Ë¿Ú´¦


-------------------------------------------------------- KeyPgInput ----

Input   ÊäÈë
  
´Ó¼üÅÌ¶ÁÈ¡ÖµÁĞ±í

Óï·¨
Input [;] ["prompt" ,|; ] variable_list

²ÎÊı
prompt
×÷ÎªÌáÊ¾Ğ´ÈëÆÁÄ»µÄ¿ÉÑ¡×Ö·û´®ÎÄ±¾¡£Èç¹ûºó¸ú·ÖºÅ £¨£©£¬ÔòÌáÊ¾·ûºóÃæ½«¸½¼ÓÒ»¸öÎÊºÅ £¨£©¡£Èç¹ûËüºó¸ú¶ººÅ£¬Ôò²»»á¸½¼ÓÈÎºÎÄÚÈİ¡£;"? "
variable_list
¶ººÅ·Ö¸ôµÄ±äÁ¿ÁĞ±í£¬ÓÃÓÚ±£´æ´ÓÓÃ»§¶ÁÈ¡µÄÖµ¡£

ÃèÊö
´Ó¼üÅÌ¶ÁÈ¡ÁĞ±íÖµ£¬Ö±µ½µÚÒ»¸ö»Ø³µ·û¡£ÊıÖµ´ÓÆä×Ö·û´®±íÊ¾ĞÎÊ½×ª»»Îª±äÁ¿ÁĞ±íÖĞµÄÏàÓ¦ÀàĞÍ¡£×Ö·ûÔÚ¼üÈëÊ


-------------------------------------------------------- KeyPgInputfilemode ----

Input (File Mode)   ÊäÈë
  
Ö¸¶¨ÒªÎªÊäÈëÄ£Ê½´ò¿ªµÄÎÄ±¾ÎÄ¼ş

Óï·¨
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

²ÎÊı
filename
Òª´ò¿ªÒÔ½øĞĞÊäÈëµÄÎÄ¼şÃû
encoding_type
Ö¸Ê¾ÎÄ¼şµÄ±àÂëÀàĞÍ
lock_type
Ëø¶¨ÒÔÔÚÎÄ¼ş´ò¿ªÊ±Ê¹ÓÃ
filenum
ÒªÓë´ò¿ªµÄÎÄ¼ş¹ØÁªµÄÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ

ÃèÊö
ÓÃÓÚ´ò¿ªÎÄ±¾ÎÄ¼ş½øĞĞ¶ÁÈ¡µÄÎÄ¼şÄ£Ê½¡£
´ËÄ£Ê½ÔÊĞíÊ¹ÓÃ °´Ë³Ğò¶ÁÈ¡ÎÄ±¾ĞĞ£¬»ò¶ÁÈ¡ ÒÔ ¶ººÅ·Ö¸ôµÄÖµ¡£
ÎÄ±¾ÎÄ¼ş²»ÄÜÔÚFreeBASICÖĞ


-------------------------------------------------------- KeyPgInputnum ----

Input()
  
´Ó¿ØÖÆÌ¨»òÎÄ¼şÖĞ¶ÁÈ¡Ğí¶à×Ö·û

Óï·¨
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

ÓÃ·¨
result = Input[$]( n [, [#]filenum ] )

²ÎÊı
n
Òª¶ÁÈ¡µÄ×Ö½ÚÊı¡£
filenum
°ó¶¨ÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
·µ»Ø¶ÁÈ¡µÄ×Ö·ûÖĞµÄ a ¸ö¡£String

ÃèÊö
´Ó ¿ØÖÆÌ¨»ò Ö¸¶¨µÄ°ó¶¨ÎÄ¼ş/Éè±¸¶ÁÈ¡Ğí¶à×Ö·û¡£
µÚ


-------------------------------------------------------- KeyPgInputPp ----

Input #   ÊäÈë
  
´ÓÎÄ±¾ÎÄ¼şÖĞ¶ÁÈ¡ÖµÁĞ±í

Óï·¨
Input # filenum, variable_list

²ÎÊı
filenum
Îª´ò¿ªµÄÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅInput
variable_list
ÓÃÓÚ±£´æ¶ÁÈ¡µÄÖµµÄ±äÁ¿ÁĞ±í

ÃèÊö
Í¨¹ı°ó¶¨ÎÄ¼ş±àºÅ´ÓÎÄ±¾ÎÄ¼ş¶ÁÈ¡Ò»×éÒÔ·Ö¸ô·û·Ö¸ôµÄÖµ£¬²¢°´¶ÁÈ¡Ë³Ğò½«ËüÃÇĞ´Èë ÖĞµÄ±äÁ¿¡£Èç¹û±äÁ¿ÊÇÊıÖµ£¬Ôò¶ÁÈ¡Öµ½«´ÓÆä×Ö·û´®±íÊ¾ĞÎÊ½×ª»»ÎªÏàÓ¦µÄÀàĞÍ¡£



-------------------------------------------------------- KeyPgInstr ----

InStr   ×Ö·û´®ËÑË÷
  
²éÕÒ×Ö·û´®ÖĞ×Ó×Ö·û´®»ò×Ö·ûµÄµÚÒ»¸öÆ¥ÅäÏî

Óï·¨
Declare Function InStr ( ByRef str As Const String,  [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

ÓÃ·¨
first = InStr( [ start, ] str, [ Any ] substring )

²ÎÊı
str
ÒªËÑË÷µÄ×Ö·û´®¡£
substring
Òª²éÕÒµÄ×Ó×Ö·û´®¡£
start
ËÑË÷¿ªÊ¼µÄÎ»ÖÃ¡£µÚÒ»¸ö×Ö·û´ÓÎ»ÖÃ 1 ¿ªÊ¼¡£str

·µ»ØÖµ
ÖĞµÚÒ»¸ö³öÏÖµÄ µÄÎ»ÖÃ¡£substringstr

ÃèÊö
¶¨Î»×Ó×Ö·û´®»ò×Ö·ûÔÚ×Ö·û´®ÖĞÊ×´Î³öÏÖµÄÎ»ÖÃ¡£ÔÚµÚÒ»ÖÖĞÎÊ½£¨²»´ø²ÎÊı£©ÖĞ£¬ËÑË÷´ÓµÚÒ»¸ö×Ö·û¿ªÊ¼¡£
Èç


-------------------------------------------------------- KeyPgInstrrev ----

InStrRev   ×Ö·û´®ËÑË÷·´Ïò
  
²éÕÒ×Ö·û´®ÖĞ×Ó×Ö·û´®»ò×Ö·ûµÄ×îºóÒ»¸öÆ¥ÅäÏî

Óï·¨
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

ÓÃ·¨
last = InStrRev( str, [ Any ] substring [, start ]  )

²ÎÊı
str
ÒªËÑË÷µÄ×Ö·û´®¡£
substring
Òª²éÕÒµÄ×Ó×Ö·û´®¡£
start
ËÑË÷¿ªÊ¼µÄÎ»ÖÃ¡£µÚÒ»¸ö×Ö·û´ÓÎ»ÖÃ 1 ¿ªÊ¼¡£str

·µ»ØÖµ
ÖĞ×îºó³öÏÖµÄ µÄÎ»ÖÃ¡£substringstr

ÃèÊö
¶¨Î»×Ó×Ö·û´®»ò×Ö·ûÔÚ×Ö·û´®ÖĞ×îºó³öÏÖµÄÎ»ÖÃ¡£Èç¹ûÎ´¸ø³ö²ÎÊı»òĞ¡ÓÚÁã£¬ÔòËÑË÷´Ó×îºóÒ»¸ö×Ö·û¿ªÊ¼¡£
Èç¹û³öÏÖÒÔÏÂÇé


-------------------------------------------------------- KeyPgInt ----

Int   ÊıÈ¡Õû
  
·µ»ØÊı×ÖµÄÏÂÏŞ

Óï·¨
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

ÓÃ·¨
result = Int( number )

²ÎÊı
number
ÒªÉáÈëµÄ¸¡µãÊı

·µ»ØÖµ
·µ»Ø µÄÏÂÏŞ£¬¼´Ğ¡ÓÚ»òµÈÓÚËüµÄ×î´óÕûÊı¡£number

ÃèÊö
 Int·µ»Ø µÄµ×Ïß¡£ÀıÈç£¬½«·µ»Ø £¬²¢½«·µ»Ø ¡£¶ÔÓÚÕûÊıÀàĞÍ£¬


-------------------------------------------------------- KeyPgInteger ----

Integer   ÕûÊıĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º32 Î»»ò 64 Î»ÓĞ·ûºÅ£¬´óĞ¡ÓëSizeOf(Any Ptr)

Óï·¨
Dim variable As Integer
Dim variable As Integer<bits>

²ÎÊı
bits
Ò»¸öÊı×Ö³£Á¿±í´ïÊ½£¬Ö¸Ê¾ËùĞè´óĞ¡µÄÕûÊıÎ»¡£ÔÊĞíµÄÖµÎª ¡¢ »ò ¡£8163264

ÃèÊö
ÕûÊıÊÇ FreeBASIC ÓÃÓÚÕûÊıÊıÑ§ÔËËãºÍ°´Î»ÔËËãµÄÖ÷ÒªÊı¾İÀàĞÍ¡£ËüÊÇÊı×ÖÎÄ±¾µÄÄ¬ÈÏÀàĞÍ¡£
ÔÚµÚÒ»ÖÖĞÎÊ½ÖĞ£¬Integer ÊÇ 32 Î»»ò 64 Î»ÓĞ·ûºÅÕûÊıÊı¾İÀ


-------------------------------------------------------- KeyPgIs ----

Is   ÊÇÀà
  
Óï¾ä¿éÖĞµÄ×Ó¾ä¡£Select Case

Óï·¨
Case Is expression

ÃèÊö
Ö¸¶¨½«»ùÓÚ±í´ïÊ½£¨°üÀ¨´óÓÚ £¨>£© »òĞ¡ÓÚ £¨<£© ÔË


-------------------------------------------------------- KeyPgIsDate ----

IsDate   ÊÇÈÕÆÚ
  
²âÊÔ×Ö·û´®ÊÇ·ñ¿ÉÒÔ×ª»»ÎªÈÕÆÚĞòÁĞ

Óï·¨
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = IsDate( stringdate )

²ÎÊı
stringdate
Òª²âÊÔµÄ×Ö·û´®

·µ»ØÖµ
Èç¹ûÈÕÆÚ×Ö·û´®¿ÉÒÔ×ª»»ÎªÈÕÆÚĞòÁĞ£¬Ôò·µ»Ø·ÇÁã £¨-1£©£¬·ñÔò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÈÕÆÚ×Ö·û´®±ØĞë²ÉÓÃÔÚ²Ù×÷ÏµÍ³µÄÇøÓòÉèÖÃÖĞÉèÖÃµÄ¸ñÊ½£¬²ÅÄÜ±»ÊÓÎª


-------------------------------------------------------- KeyPgIsredirected ----

IsRedirected   ÊÇÖØ¶¨Ïò
  
¼ì²é stdin »ò stdout ÊÇ·ñÖØ¶¨Ïòµ½ÎÄ¼ş

Óï·¨
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

ÓÃ·¨
#include "fbio.bi"
result = IsRedirected( is_input )

²ÎÊı
is_input
Ö¸Ê¾Òª·µ»ØµÄĞÅÏ¢ÀàĞÍµÄ A¡£Long

·µ»ØÖµ
Èç¹û stdin »ò stdout ±»ÖØ¶¨Ïò£¬Ôò·µ»Ø·ÇÁã £¨£©£¬·ñÔò·µ»ØÁã £¨£©¡£-10

ÃèÊö
IsRedirected ¼ì²é stdin »ò stdout ÊÇ·ñÖØ¶¨Ïòµ½ÎÄ¼ş£¬¶ø²»ÊÇÏñÍù³£Ò»ÑùÁ¬½Óµ½¿ØÖÆÌ¨/ÖÕ¶Ë¡£
Èç¹û


-------------------------------------------------------- KeyPgKill ----

Kill   É¾ÎÄ¼ş
  
´Ó´ÅÅÌ/´æ´¢½éÖÊÖĞÉ¾³ıÎÄ¼ş¡£

Óï·¨
Declare Function Kill ( ByRef filename As Const String ) As Long

ÓÃ·¨
result = Kill( filename )

²ÎÊı
filename
ÎÄ¼şÃûÊÇÒªÉ¾³ıµÄ´ÅÅÌÎÄ¼şµÄÃû³Æ¡£Èç¹ûÎÄ¼ş²»ÔÚµ±Ç°Ä¿Â¼ÖĞ£¬ÔòÂ·¾¶Ò²±ØĞëÖ¸¶¨Îª ¡£path/file

·µ»ØÖµ
³É¹¦Ê±·µ»ØÁã £¨£©£¬³ö´íÊ±·µ»Ø·ÇÁã¡£0

Ã


-------------------------------------------------------- KeyPgLbound ----

LBound   Êı×éÈ¡ÏÂÏŞ
  
·µ»ØÊı×éÎ¬¶ÈµÄÏÂÏŞ

Óï·¨
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

ÓÃ·¨
result = LBound( array [, dimension ] )

²ÎÊı
array
ÈÎºÎÀàĞÍµÄÊı×é
dimension
Òª»ñÈ¡ µÄÏÂÏŞµÄÎ¬¶È

·µ»ØÖµ
·µ»ØÊı×éÎ¬¶ÈµÄÏÂÏŞ¡£
ÃèÊö
LBound·µ»Ø¿ÉÓÃ×÷Êı×éÌØ¶¨Î¬¶ÈµÄË÷ÒıµÄ×îĞ¡Öµ¡£
Êı×éÎ¬¶È´ÓÒ» £¨£© µ½ µÄ±àºÅ£¬ÆäÖĞÎ¬¶ÈµÄ×ÜÊı¡£Èç¹ûÎ´Ö¸¶¨£¬½«·µ»ØµÚÒ»¸öÎ¬¶ÈµÄÏÂÏŞ¡£
Èç¹ûÎªÁã £¨£©£¬


-------------------------------------------------------- KeyPgLcase ----

LCase   ×Ö·û´®Ğ¡Ğ´
  
·µ»Ø×Ö·û´®µÄĞ¡Ğ´¸±±¾

Óï·¨
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

ÓÃ·¨
result = LCase[$]( str [ , mode ] )

²ÎÊı
str
Òª×ª»»ÎªĞ¡Ğ´µÄ×Ö·û´®¡£
mode
×ª»»Ä£Ê½£º0 = µ±Ç°ÇøÓòÉèÖÃ£¬1 = ½ö ASCII

·µ»ØÖµ
µÄĞ¡Ğ´¸±±¾¡£str

Ã


-------------------------------------------------------- KeyPgLeft ----

Left   ×Ö·û´®È¡×ó
  
·µ»Ø×Ö·û´®×î×ó²àµÄ×Ó×Ö·û´®

Óï·¨
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

ÓÃ·¨
result = Left[$]( str, n )

²ÎÊı
str
Ô´×Ö·û´®¡£
n
Òª´ÓÔ´×Ö·û´®·µ»ØµÄ×Ö·ûÊı¡£

·µ»ØÖµ
·µ»Ø ×î×ó±ßµÄ×Ó×Ö·û´®¡£str

ÃèÊö
·µ»Ø´Ó µÄ×ó²à£¨¿ªÍ·£©¿ªÊ¼µÄ×î×ó²à×Ö


-------------------------------------------------------- KeyPgLen ----

Len   ×Ö·û´®×Ü³¤
  
·µ»Ø±í´ïÊ½»òÊı¾İÀàĞÍµÄ³¤¶È

Óï·¨
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer

Declare Operator Len ( ByRef expression As datatype ) As datatype

Declare Function Len ( datatype ) As Integer	

ÓÃ·¨
result = Len( expression )
»ò
result = Len( DataType )

²ÎÊı
expression
ÈÎºÎÀàĞÍµÄ±í´ïÊ½¡£
datatype
Êı¾İÀàĞÍ¡£

·µ»ØÖµ
·µ»Ø±í´ïÊ½»òÊı¾İÀàĞÍ£¨°üÀ¨ UDT µÄÊı¾İ×Ö¶Î£©µÄ´óĞ¡£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£

ÃèÊö
Len·µ»Ø±í´ïÊ½µÄ³¤¶È»òÊı¾İÀàĞÍµÄ´óĞ¡£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£
ÔÚµÚÒ»ÖÖĞÎÊ½ÖĞ£¬Èç¹û ÊÇ £¬ »ò £¬½«·µ»Ø×Ö·û´®µÄ³¤¶È£¨ÒÔ×Ö·ûÎªµ¥Î»£


-------------------------------------------------------- KeyPgLet ----

Let   ¸³Öµ
  
Ö¸Ê¾¸³ÖµÔËËã·û¡£

Óï·¨
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

ÃèÊö
¸ÃÃüÁîÖ¼ÔÚ°ïÖú³ÌĞòÔ±Çø·Ö¸³ÖµÓï¾ä£¨ÀıÈç£©ºÍÏàµÈĞÔ²âÊÔ£¨ÀıÈç£©¡£ÓÉÓÚ±àÒëÆ÷²»ĞèÒªËü£¬Òò´ËÍ¨³£»áÊ¡ÂÔËü¡£
 let ¿ÉÒÔÓÃ×÷×ó²àÔËËã·û£¬½«ÓÃ»§¶¨ÒåÀàĞÍµÄ³ÉÔ±·ÖÅä¸ø¶à¸ö


-------------------------------------------------------- KeyPgLib ----

Lib   ¿â
  
Ö¸¶¨¿ÉÔÚÆäÖĞÕÒµ½×ÓÏî»òº¯Êı×÷ÎªÉùÃ÷µÄÒ»²¿·ÖµÄ¿â

Óï·¨
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type

Extern "mangling" lib "libname"
declarative statements
end Extern

Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type


ÃèÊö
ÔÚ »òÉùÃ÷ÖĞ£¬ÒÔ¼°ÔÚÀà·½·¨ÉùÃ÷£¨°üÀ¨¹¹Ôìº¯ÊıºÍÎö¹¹º¯Êı£©ÖĞ£¬Ö¸Ê¾°üº¬º¯ÊıµÄ¿â¡£ÒÔÕâÖÖ·½Ê½Ö¸¶¨µÄ¿â±»Á´½Ó½øÀ´£¬¾ÍºÃÏñ»òÒÑ¾­Ê¹ÓÃ¹ı


-------------------------------------------------------- KeyPgLinegraphics ----

Line (Graphics)   »­Ïß
  
»æÖÆÏßÌõ

Óï·¨
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

²ÎÊı
target
Ö¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø
STEP
Ö¸Ê¾ÆğÊ¼×ø±êÊÇÏà¶ÔµÄ
(x1, y1)
ÏßÂ·µÄÆğÊ¼×ø±ê
STEP
Ö¸Ê¾½áÊø×ø±êÊÇÏà¶ÔµÄ
(x2, y2)
ÏßµÄ½áÊø×ø±ê
color
ÑÕÉ«ÊôĞÔ¡£
B|BF
Ö¸¶¨¿ò»ò¿òÌî³äÄ£Ê½
style
ÏßÌõÑùÊ½

ÃèÊö
ÔÚÁ½µãÖ®¼ä»æÖÆÖ±Ïß»ò¿òµÄÍ¼ĞÎÓï¾ä¡£¸Ã²Ù×÷½«ÔÚÍ¨¹ı ÉèÖÃµÄµ±Ç°¹¤×÷Ò³ÃæÉÏ½øĞĞ£¬»òÕßÈç¹ûÖ¸¶¨£¬ÔòÔÚ»º³åÇø/»º³åÇøÉÏ½øĞĞ¡£
×ø±ê


-------------------------------------------------------- KeyPgLineinput ----

Line Input   »­Ïß
  
´Ó¼üÅÌ¶ÁÈ¡Ò»ĞĞÊäÈë

Óï·¨
Line Input [;] [promptstring {;|,} ] stringvariable

²ÎÊı
promptstring
ÔÚµÈ´ıÊäÈëÖ®Ç°ÏÔÊ¾µÄ¿ÉÑ¡ÌáÊ¾¡£Èç¹ûºó¸ú·ÖºÅ £¨£©£¬ÔòÌáÊ¾·ûºóÃæ½«¸½¼ÓÒ»¸öÎÊºÅ £¨£©¡£Èç¹ûËüºó¸ú¶ººÅ£¬Ôò²»»á¸½¼ÓÈÎºÎÄÚÈİ¡£;"? "
stringvariable
ÓÃÓÚ½ÓÊÕÎÄ±¾ĞĞµÄ±äÁ¿

ÃèÊö
´Ó¼üÅÌ¶ÁÈ¡Ò»ĞĞÎÄ±¾²¢½«Æä´æ´¢ÔÚ×Ö·û´®±äÁ¿ÖĞ¡£
£¨Èç¹ûÓĞ£© ½«Ğ´Èëµ±Ç°¹â±êÎ»ÖÃµÄÆÁÄ»£¬²¢ÇÒ¶ÁÈ¡µÄ×Ö·ûÔÚÌáÊ¾·ûÖ®ºóÁ


-------------------------------------------------------- KeyPgLineinputPp ----

Line Input #   »­Ïß
  
´ÓÎÄ¼şÖĞ¶ÁÈ¡Ò»ĞĞÎÄ±¾

Óï·¨
Line Input #file number, string_variable

²ÎÊı
file number
ÎªÆä´ò¿ªµÄÎÄ¼şµÄÎÄ¼ş±àºÅInput
string_variable
ÓÃÓÚ½ÓÊÕÎÄ±¾ĞĞµÄ±äÁ¿

ÃèÊö
´Ó´ò¿ªµÄÎÄ±¾ÎÄ¼şÖĞ¶ÁÈ¡Ò»ĞĞ£¨Í¨¹ı°ó¶¨µÄÎÄ¼ş±àºÅ´ò¿ª£©£¬²¢½«Æä´æ´¢ÔÚ×Ö·û´®±ä


-------------------------------------------------------- KeyPgLoByte ----

LoByte   µ¥×Ö½ÚµÍÎ»
  
»ñÈ¡²Ù×÷ÊıµÄ×îµÍ×Ö½Ú¡£

Óï·¨
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

ÓÃ·¨
result = LoByte( expr )

²ÎÊı
expr
×ª»»ÎªÖµµÄÊıÖµ±í´ïÊ½¡£UInteger

·µ»ØÖµ
·µ»Ø expr µÄµÍ×Ö½ÚÖµ¡£

ÃèÊö
´Ëºê½«ÊıÖµ


-------------------------------------------------------- KeyPgLoc ----

LOC   ÎÄ¼şÎ»ÖÃ
  
·µ»ØÉÏ´ÎÖ´ĞĞÎÄ¼ş¶Á/Ğ´²Ù×÷µÄÎÄ¼şÎ»ÖÃ

Óï·¨
Declare Function LOC ( ByVal filenum As Long ) As LongInt

ÓÃ·¨
result = LOC( filenum )

²ÎÊı
filenum
´ò¿ªµÄÎÄ¼şµÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
ÉÏ´ÎÖ´ĞĞ¶Á/Ğ´²Ù×÷µÄÎÄ¼şÎ»ÖÃ¡£

ÃèÊö
·µ»ØÉÏ´ÎÖ´ĞĞÎÄ¼ş¶Á/Ğ´µÄÎ»ÖÃ¡£
¸ÃÎ»ÖÃÔÚ¼ÇÂ¼ÖĞ±êÃ÷£º
ÔÚËæ»ú´ò¿ªµÄÎÄ¼şÖĞ£¬´ò¿ªÎÄ¼şÊ±Ö¸¶¨µÄ¼ÇÂ¼³¤¶ÈÓÃÓÚ
ÎÄ±¾ÎÄ¼ş£¨FOR INPUT|Êä³ö|×·¼Ó£¬¼ÇÂ¼


-------------------------------------------------------- KeyPgLocal ----

Local   ±¾µØ
  
ÓÃÓÚÉèÖÃµ±Ç°´íÎó´¦Àí³ÌĞòµÄ´íÎó´¦ÀíÓï¾ä

Óï·¨
On Local Error Goto label

ÃèÊö
¹¹ÔìÖĞµÄ×Ó¾äÔÊĞíÔÚÏàÍ¬»ò in ÖĞ¶¨Òå´íÎó´¦Àí³ÌĞò¡£
 ±¸×¢£ºÄ¿Ç°£¬±àÒëÆ÷»áºöÂÔ¸Ã×Ó¾ä£¨½öÔÚ Sub/Function ÄÚ²¿ÊÚÈ¨£©£¬²¢ÇÒ´íÎó´¦Àí³ÌĞò¿ÉÒÔÔÚ On [Local] Error ËùÔÚµÄÍ¬Ò»¹ı³ÌµÄ×


-------------------------------------------------------- KeyPgLocate ----

Locate   ¹â±ê¶¨Î»
  
ÉèÖÃµ±Ç°¹â±êÎ»ÖÃ

Óï·¨
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

ÓÃ·¨
Locate [row], [column], [state]

result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

²ÎÊı
row
¿ØÖÆÌ¨ÖĞ»ùÓÚ 1 µÄ´¹Ö±×Ö·ûÎ»ÖÃ¡£
column
¿ØÖÆÌ¨ÖĞ»ùÓÚ 1 µÄË®Æ½×Ö·ûÎ»ÖÃ¡£
state
ÓÎ±ê½öÔÚ¿ØÖÆÌ¨Ä£Ê½ÏÂµÄ×´Ì¬£º¹Ø±Õ£¬´ò¿ª;ÎÄ±¾¹â±êÔÚÍ¼ĞÎÄ£Ê½ÏÂ´Ó²»¿É¼û¡£01
start
ºöÊÓ¡£½öÔÊĞí -lang qb ·½ÑÔ¼æÈİĞÔ¡£
stop
ºöÊÓ¡£½öÔÊĞí -lang qb ·½ÑÔ¼æÈİĞÔ¡£

·µ»ØÖµ
·µ»Ø°üº¬µ±Ç°ÓÎ±êÎ»ÖÃºÍ×´Ì¬µÄ 32 Î»¡£µÍ×ÖµÄµÍ×Ö½Ú°üº¬ÁĞ£¬µÍ×ÖµÄ¸ß×Ö½Ú°üº¬ĞĞ£¬¸ß×Ö°üº¬ÓÎ±ê×´Ì¬¡£
Èç¹ûÈÎºÎĞĞ¡¢ÁĞ»ò×´Ì¬²ÎÊıÖ»ÊÇÓÉµ÷ÓÃ À´ÉèÖÃµÄ£¬Ôò·µ»ØÖµ½«·´Ó³ÕâĞ©ĞÂÖµ£¬¶ø²»ÊÇÒÔÇ°µÄÖµ¡£Èç¹ûÔÚµ÷ÓÃ ÖĞÊ¡ÂÔÁË


-------------------------------------------------------- KeyPgLock ----

Lock   Ëø¶¨
  
ÏŞÖÆ¶ÔÎÄ¼ş»òÎÄ¼ş²¿·ÖµÄ¶Á/Ğ´·ÃÎÊ

Óï·¨
Lock #filenum, record
Lock #filenum, start To end

²ÎÊı
filenum
ÓÃÓÚÎÄ¼şµÄÎÄ¼ş±àºÅ¡£Open
record
ÒªËø¶¨µÄ¼ÇÂ¼£¨ÎÄ¼ş£©¡£Random
start
Òª´ÓÖĞËø¶¨µÄµÚÒ»¸ö×Ö½ÚÎ»ÖÃ£¨ÎÄ¼ş£©¡£Binary
end
ÒªËø¶¨µ½µÄ×îºóÒ»¸ö×Ö½ÚÎ»ÖÃ£¨ÎÄ¼ş£©¡£Binary

ÃèÊö
LockÔİÊ±ÏŞÖÆÆäËûÏß³Ì»ò³ÌĞò¶ÔÎÄ¼ş»òÎÄ¼ş²¿·


-------------------------------------------------------- KeyPgLof ----

LOF   ÎÄ¼ş³¤¶È
  
·µ»Ø´ò¿ªµÄ´ÅÅÌÎÄ¼şµÄ³¤¶È

Óï·¨
Declare Function LOF ( ByVal filenum As Long ) As LongInt

ÓÃ·¨
result = LOF( filenum )

²ÎÊı
filenum
´ò¿ªµÄ´ÅÅÌÎÄ¼şµÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
´ò¿ªµÄ´ÅÅÌÎÄ¼şµÄ³¤¶È£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£

ÃèÊö
·µ»ØÒÔÇ°Ê¹ÓÃ¸ø¶


-------------------------------------------------------- KeyPgLog ----

Log   ¶ÔÊı
  
·µ»Ø¸ø¶¨Êı×ÖµÄ×ÔÈ»¶ÔÊı

Óï·¨
Declare Function Log cdecl ( ByVal number As Double ) As Double

ÓÃ·¨
result = Log( number )

²ÎÊı
number
ÓÃÓÚ¼ÆËã×ÔÈ»¶ÔÊıµÄÊı×Ö¡£

·µ»ØÖµ
·µ»ØÒÔ e Îªµ×Êı£¨Ò²³ÆÎª×ÔÈ»¶ÔÊı£©µÄ¶ÔÊı¡£number

ÃèÊö
ÕâÖÖ·ûºÅ¿ÉÄÜ»áÓĞĞ©»ìÏı£¬ÒòÎªÔÚÊıÑ§ÖĞ£¬×ÔÈ»¶ÔÊıº¯ÊıÍ¨³£±íÊ¾ÎªLN£¬¶øÒÔ10Îªµ×µÄ¶ÔÊıÍ¨³£±íÊ¾ÎªLOG¡£FreeBASIC£¬Ïñ´ó¶àÊı¼ÆËã»ú±à³ÌÓïÑÔÒ»Ñù£¬Ê¹ÓÃLO


-------------------------------------------------------- KeyPgLong ----

Long   ³¤ĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º32 Î»ÓĞ·ûºÅÕûÊı

Óï·¨
Dim variable As Long

ÃèÊö
32 Î»ÓĞ·ûºÅÕûÊıÊı¾İÀàĞÍ¡£¿ÉÒÔ±£´æ´Ó µ½ µÄÖµ¡


-------------------------------------------------------- KeyPgLongint ----

LongInt   ³¤ÕûĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º64 Î»ÓĞ·ûºÅ

Óï·¨
Dim variable As LongInt

ÃèÊö
64 Î»ÓĞ·ûºÅÕûÊıÊı¾İÀàĞÍ¡£¿ÉÒÔ±£´æ´Ó -9 223 372 036 854 775 808 µ½ 9 223 372 0


-------------------------------------------------------- KeyPgLoop ----
Loop   ÖØ¸´
Description



-------------------------------------------------------- KeyPgLoWord ----

LoWord   Ë«×Ö½ÚµÍÎ»
  
»ñÈ¡²Ù×÷ÊıµÄ×îµÍ 16 Î»×Ö¡£

Óï·¨
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

ÓÃ·¨
result = LoWord( expr )

²ÎÊı
expr
×ª»»ÎªÖµµÄÊıÖµ±í´ïÊ½¡£UInteger

·µ»ØÖµ
·µ»Ø expr µÄµÍ×ÖµÄÖµ¡£

ÃèÊö
´Ëºê½«ÊıÖµ±í´


-------------------------------------------------------- KeyPgLpos ----

LPos   ´òÓ¡Î»ÖÃ
  
·µ»ØÔÚ×îºóÒ»ÌõÓï¾äÖĞ·¢ËÍµ½´òÓ¡»ú¶Ë¿ÚµÄ×Ö·ûÊı¡£LPrint

Óï·¨
Declare Function LPos ( ByVal printer As Long ) As Long

ÓÃ·¨
result = LPOS(printer)

²ÎÊı
printer
0¡¢1¡¢2 »ò 3¡£±íÊ¾´òÓ¡»ú¶Ë¿Ú £¨LPT#£©

·µ»ØÖµ
·µ»Ø


-------------------------------------------------------- KeyPgLprint ----

LPrint   ´òÓ¡»ú´òÓ¡
  
½«ÎÄ±¾Ğ´ÈëÄ¬ÈÏ´òÓ¡»ú¡£

Óï·¨
LPrint  [ Using formatstring,] [expressionlist] [(, | ;)] ...

²ÎÊı
formatstring
Ö¸¶¨Êä³ö¸ñÊ½µÄ×Ö·û´®¡£
expressionlist
Òª¸ù¾İÖ¸¶¨¸ñÊ½Êä³öµÄ±äÁ¿ÁĞ±í¡£

ÃèÊö
´òÓ¡µ½Á¬½Óµ½²¢ĞĞ¶Ë¿Ú LPT1 µÄ´òÓ¡»ú£¬»òÕßÈç¹û²»´æÔÚ£¬Ôò´òÓ¡µ½Ä¬ÈÏ´òÓ¡»ú¡£Òª´òÓ¡µ½ÓëÈ±Ê¡´òÓ¡»ú²»Í¬µÄ´òÓ¡»ú£¬ÇëÊ¹ÓÃ ¡£
×Ó¾äµÄ¸ñÊ½¸ù¾İ ¡£³ıÁËUDT£¬ÈÎºÎ


-------------------------------------------------------- KeyPgLset ----

LSet   ×Ö·û´®×óÆë
  
×ó¶ÔÆë×Ö·û´®

Óï·¨
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

ÓÃ·¨
LSet dst, src
LSet dst_udt, src_udt

²ÎÊı
dst
ÓÃÓÚ½ÓÊÕÊı¾İµÄ×Ö·û´®¡£String
src
»ñÈ¡Êı¾İµÄÔ´¡£String
dst_udt
ÓÃ»§¶¨ÒåÒÔ½ÓÊÕÊı¾İ¡£Type
src_udt
ÓÃ»§¶¨ÒåÒª´ÓÖĞ¸´ÖÆÊı¾İ¡£Type

ÃèÊö
LSetleft ½«ÎÄ±¾¶ÔÆëµ½×Ö·û´®»º³åÇøÖĞ£¬ÓÃ¿Õ¸ñÌî³ä×Ö·û´®µÄ×ó²à£¬ÓÃ¿Õ¸ñÌî³äÓÒ²à²¿·Ö¡£²»»áĞŞ¸Ä×Ö·û´®»º³åÇø´óĞ¡¡£
Èç¹ûÎÄ±¾¶ÔÓÚ×Ö


-------------------------------------------------------- KeyPgLtrim ----

LTrim   ×Ö·û´®É¾¿Õ¸ñ×ó±ß
  
É¾³ı×Ö·û´®×ó²àµÄÖÜÎ§×Ó×Ö·û´®»ò×Ö·û

Óï·¨
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

ÓÃ·¨
result = LTrim[$]( str [, [ Any ] trimset ] )

²ÎÊı
str
Ô´×Ö·û´®¡£
trimset
ÒªĞŞ¼ôµÄ×Ó×Ö·û´®¡£

·µ»ØÖµ
·µ»ØĞŞ¼ô¹ıµÄ×Ö·û´®¡£

ÃèÊö
´Ë¹ı³Ì´ÓÔ´×Ö·û´®µÄ×ó²à£¨¿ªÍ·£©ĞŞ¼ôÖÜÎ§µÄ×Ö·û¡£Èç¹ûÖ¸¶¨£¬½«ĞŞ¼ôÆ


-------------------------------------------------------- KeyPgMemberFunction ----

Function (Member)   º¯Êı
  
ÉùÃ÷»ò¶¨Òå·µ»ØÖµµÄ³ÉÔ±¹ı³Ì

Óï·¨
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }

Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

²ÎÊı
typename 
¡¢»ò µÄÃû³ÆTypeClassUnion
fieldname 
¹ı³ÌµÄÃû³Æ
external_name
Íâ²¿Á´½ÓÊ±¿´µ½µÄ×Ö¶ÎÃû³Æ
parameters 
Òª´«µİ¸ø¹ı³ÌµÄ²ÎÊı
calling convention specifier	
¿ÉÒÔÊÇÒÔÏÂÖ®Ò»£º»òcdeclstdcallpascal

ÃèÊö
FunctionÊ¹ÓÃ»òµ÷ÓÃ·µ»ØÖµµÄ³ÉÔ±¹ı³Ì·ÃÎÊ³ÉÔ±¹ı³Ì£¨Ò²¿ÉÒÔÍ¨¹ıÖ¸¶¨ ·µ»ØÒıÓÃ£©¡£¸Ã¹ı³Ì¿ÉÒÔÑ¡ÔñĞÔµØ½ÓÊÜ²ÎÊı»ò ¡£ ÔÚÃ»ÓĞÏÔÊ½Ê¹ÓÃ¹Ø¼ü×ÖµÄÇé¿öÏ


-------------------------------------------------------- KeyPgMemberSub ----

Sub (Member)   ¹ı³Ì
  
ÉùÃ÷»ò¶¨Òå³ÉÔ±¹ı³Ì

Óï·¨
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }

Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

²ÎÊı
typename 
¡¢»ò µÄÃû³ÆTypeClassUnion
fieldname 
¹ı³ÌµÄÃû³Æ
external_name
Íâ²¿Á´½ÓÊ±¿´µ½µÄ×Ö¶ÎÃû³Æ
parameters 
Òª´«µİ¸ø¹ı³ÌµÄ²ÎÊı
calling convention specifier	
¿ÉÒÔÊÇÒÔÏÂÖ®Ò»£º»òcdeclstdcallpascal

ÃèÊö
Sub³ÉÔ±Ê¹ÓÃ»òµ÷ÓÃ³ÉÔ±¹ı³Ì½øĞĞ·ÃÎÊ£¬²¢ÇÒ¿ÉÒÔÑ¡Ôñ½ÓÊÜ²ÎÊı»ò ¡£ ÔÚÃ»ÓĞÏÔÊ½Ê¹ÓÃ¹Ø¼ü×ÖµÄÇé¿öÏÂÖØÔØ¡£
ÊÇÎªÆäÉùÃ÷ºÍ¶¨Òå·½·¨µÄÀàĞÍµÄÃû³Æ¡£µÄÃû³Æ½


-------------------------------------------------------- KeyPgMetaDynamic ----

$Dynamic   $¶¯Ì¬Êı×é
  
ÔªÃüÁî£¬ÓÃÓÚ¸ü¸ÄÊı×éµÄ·ÖÅä·½Ê½

Óï·¨
'$Dynamic
or
Rem $Dynamic

ÃèÊö
'$DynamicÊÇÒ»¸öÔªÃüÁî£¬ËüÖ¸¶¨ÒÔÏÂÈÎºÎÊı×éÉùÃ÷¶¼ÊÇ¿É±ä³¤¶ÈµÄ£¬ÎŞÂÛËüÃÇÊÇ·ñÊ¹ÓÃ³£Á¿ÏÂ±ê·¶Î§ÉùÃ÷¡£Õâ


-------------------------------------------------------- KeyPgMetaInclude ----

$Include   $°üº¬ÎÄ¼ş
  
ÔªÃüÁîÓï¾äÒÔ°üº¬ÁíÒ»¸öÔ´ÎÄ¼şµÄÄÚÈİ

Óï·¨
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

ÃèÊö
$IncludeÔÚÔªÃüÁî³öÏÖµÄÎ»ÖÃ²åÈëÀ´×ÔÁíÒ»¸öÎÄ¼şµÄÔ´´úÂë¡£Õâ¾ßÓĞ´Ó°üº¬ÎÄ¼ş±àÒëÔ´´úÂëµÄĞ§¹û£¬¾ÍºÃÏñËüÊÇ°üº¬ËüµÄÔ´ÎÄ¼şµÄÒ»²¿·ÖÒ»Ñù¡£Ò»µ©±àÒëÆ÷µ½´ï°üº¬ÎÄ¼şµÄÄ©Î²£¬Ô­Ê¼Ô´ÎÄ¼ş


-------------------------------------------------------- KeyPgMetaLang ----

$Lang   $ÓïÑÔ
  
ÔªÃüÁîÓï¾ä£¬ÓÃÓÚÉèÖÃ±àÒëÆ÷·½ÑÔ¡£

Óï·¨
'$lang: "lang"
or
Rem $lang: "lang"

²ÎÊı
"lang"
ÒªÉèÖÃµÄ·½ÑÔ£¬À¨ÔÚË«ÒıºÅÖĞ£¬²¢ÇÒ±ØĞëÊÇ ¡¢ ¡¢ »ò Ö®Ò»¡£"fb""fblite""qb""deprecated"

ÃèÊö
Èç¹ûÎ´ÔÚÃüÁîĞĞÉÏÌá¹© -forcelang Ñ¡Ïî£¬Ôò¿ÉÓÃÓÚÉèÖÃÏÔÊ¾¸ÃÑ¡ÏîµÄÔ´Ä£¿éµÄ·½ÑÔ¡£×î¶à½«ÔÚÔ´Ä£¿éÉÏ½øĞĞÁ½´Î´«µİ¡£ÔÚµÚÒ»´Î´«µİÊ±£¬Èç¹ûÖ¸¶¨µÄ·½ÑÔ²»ÊÇÄ¬ÈÏ·½


-------------------------------------------------------- KeyPgMetaStatic ----

$Static   $¾²Ì¬Êı×é
  
ÔªÃüÁî£¬ÓÃÓÚ¸ü¸ÄÊı×éµÄ·ÖÅä·½Ê½

Óï·¨
'$Static
or
Rem $Static

ÃèÊö
'$StaticÊÇ¸²¸Ç µÄĞĞÎªµÄÔªÃüÁî£¬Ò²¾ÍÊÇËµ£¬Ê¹ÓÃ³£Á¿ÏÂ±ê·¶Î§ÉùÃ÷µÄÊı×éÊÇ¹Ì¶¨³¤¶ÈµÄ¡£Õâ¶ÔÓÚËùÊ¹ÓÃµÄÄ£


-------------------------------------------------------- KeyPgMidfunction ----

Mid (Function)   ×Ö·û´®È¡×Ó´®
  
·µ»Ø×Ö·û´®µÄ×Ó×Ö·û´®

Óï·¨
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

ÓÃ·¨
result = Mid[$]( str, start [, n ] )

²ÎÊı
str
Ô´×Ö·û´®¡£
start
×Ó×Ö·û´®ÖĞµÄÆğÊ¼Î»ÖÃ¡£µÚÒ»¸ö×Ö·û´ÓÎ»ÖÃ 1 ¿ªÊ¼¡£str
n
×Ó×Ö·û´®³¤¶È£¬ÒÔ×Ö·ûÎªµ¥Î»¡£

ÃèÊö
·µ»Ø´Ó ÖĞ¿ªÊ¼µÄ×Ó×Ö·û´®¡£Èç¹û Îª¿Õ£¬Ôò·µ»Ø¿Õ×Ö·û´® £¨£©¡£Èç¹û»òÈ»ºó·µ»Ø¿Õ×Ö·û´® £¨£©¡£



-------------------------------------------------------- KeyPgMidstatement ----

Mid (Statement)   ×Ö·û´®È¡×Ó´®
  
ÓÃÁíÒ»¸ö×Ö·û´®¸²¸ÇÒ»¸ö×Ö·û´®µÄ×Ó×Ö·û´®

Óï·¨
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

ÓÃ·¨
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

²ÎÊı
text
ÒªÊ¹ÓÃµÄ×Ö·û´®¡£
start
Òª¸²¸ÇµÄ×Ó×Ö·û´®µÄÆğÊ¼Î»ÖÃ¡£µÚÒ»¸ö×Ö·û´ÓÎ»ÖÃ 1 ¿ªÊ¼¡£text
length
Òª¸²¸ÇµÄ×Ö·ûÊı¡£

ÃèÊö
½« µÄ×î´ó×Ö·û¸´ÖÆµ½ ÖĞ£¬´Ó ¿ªÊ¼¡£
Èç¹ûÎ´Ö¸¶¨£¬Ôò¸´ÖÆËùÓĞ×Ö·û´®µÄ´óĞ¡±£³Ö²»±ä;Èç¹ûÌ«´ó£


-------------------------------------------------------- KeyPgMinute ----

Minute   Ê±¼äÈ¡·Ö
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡Ğ¡Ê±µÄ·ÖÖÓÊı 

Óï·¨
Declare Function Minute ( ByVal date_serial As Double ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Minute( date_serial )

²ÎÊı
date_serial
ÈÕÆÚĞòÁĞ

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ·µ


-------------------------------------------------------- KeyPgMkd ----

MKD   Êı×ª×Ö·ûË«¾«ĞÍ
  
ÊÇ·ñ½«¶ş½øÖÆ´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æä³¤¶ÈÉèÖÃÎª 8 ¸ö×Ö½ÚDoubleString

Óï·¨
Declare Function MKD ( ByVal number As Double ) As String

ÓÃ·¨
result = MKD[$]( number )

²ÎÊı
number
Òª½«±äÁ¿¶ş½øÖÆ¸´ÖÆµ½ .DoubleString

·µ»ØÖµ
·µ»Ø ´øÓĞ µÄ¶ş½øÖÆ¸±±¾µÄ ¡£StringDouble

ÃèÊö
ÊÇ·ñ´Ó±äÁ¿µ½ µÄ¶ş½øÖÆ¸´ÖÆ½«Æä³¤¶ÈÉ


-------------------------------------------------------- KeyPgMkdir ----

MkDir   Ä¿Â¼ĞÂ½¨
  
ÔÚ±¾µØÎÄ¼şÏµÍ³ÉÏ´´½¨ÎÄ¼ş¼Ğ/Ä¿Â¼

Óï·¨
Declare Function MkDir ( ByRef folder As Const String ) As Long

ÓÃ·¨
result = MkDir( folder )

²ÎÊı
folder
Òª´´½¨µÄĞÂÄ¬ÈÏÎÄ¼ş¼Ğ/Ä¿Â¼£¬»òÒª´´½¨µÄ×ÓÎÄ¼ş¼Ğ/×ÓÄ¿Â¼µÄÂ·¾¶¡£

·µ»ØÖµ
³É¹¦Ê±·µ»ØÁã £¨0£©£¬Ê§°ÜÊ±·µ»Ø¸º 1 £¨-1£©¡£

ÃèÊö
ÔÚ±¾µØÎÄ¼şÏµÍ³ÉÏ´´½¨ÎÄ¼ş¼


-------------------------------------------------------- KeyPgMki ----

MKI   Êı×ª×Ö·ûÕûĞÍ
  
ÊÇ·ñ´ÓÕûÊı±äÁ¿¸´ÖÆµ½ÓëÊäÈë±äÁ¿´óĞ¡³¤¶ÈÏàÍ¬µÄ¶ş½øÖÆ±äÁ¿String

Óï·¨
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

ÓÃ·¨
result = MKI[$]( number )
result = MKI[$]<bits>( number )

²ÎÊı
number
½« »ò±äÁ¿¸´ÖÆµ½ ¶ş½øÖÆÎÄ¼ş¡£IntegerInteger<bits>String

·µ»ØÖµ
·µ»Ø °üº¬ µÄ¶ş½øÖÆ¸±±¾¡£Stringnumber

ÃèÊö
ÊÇ·ñ´Ó »ò ±äÁ¿µ½ µÄ¶ş½øÖÆ¸±±¾½«Æä³¤¶ÈÉèÖÃÎªÀàĞÍÖĞµÄ×Ö½ÚÊı¡£Éú³ÉµÄ×Ö·û´®¿ÉÒÔÊ¹ÓÃ »ò ¶Á»ØÕûÊıÀàĞÍ¡£
´Ëº¯Êı¿ÉÓÃÓÚÔÚ²»Ê¹ÓÃ¶¨ÒåµÄÇé


-------------------------------------------------------- KeyPgMkl ----

MKL   Êı×ª×Ö·û³¤ĞÍ
  
ÊÇ·ñ½«¶ş½øÖÆ´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æä³¤¶ÈÉèÖÃÎª 4 ¸ö×Ö½ÚLongString

Óï·¨
Declare Function MKL ( ByVal number As Long ) As String

ÓÃ·¨
result = MKL( number )

²ÎÊı
number
Òª½«±äÁ¿¶ş½øÖÆ¸´ÖÆµ½ .LongString

·µ»ØÖµ
·µ»Ø ´øÓĞ µÄ¶ş½øÖÆ¸±±¾µÄ ¡£StringLong

ÃèÊö
ÊÇ·ñ½«¶ş½øÖÆ¸±±¾´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æ


-------------------------------------------------------- KeyPgMklongint ----

MKLongInt   Êı×ª×Ö·û³¤ÕûĞÍ
  
ÊÇ·ñ½«¶ş½øÖÆ´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æä³¤¶ÈÉèÖÃÎª 8 ¸ö×Ö½ÚLongIntString

Óï·¨
Declare Function MKLongInt ( ByVal number As LongInt ) As String

ÓÃ·¨
result = MKLongInt[$]( number )

²ÎÊı
number
Òª½«±äÁ¿¶ş½øÖÆ¸´ÖÆµ½ .LongIntString

·µ»ØÖµ
·µ»Ø ´øÓĞ µÄ¶ş½øÖÆ¸±±¾µÄ ¡£StringLongInt

ÃèÊö
Ö´ĞĞ´Ó±äÁ¿µ½×Ö·û´®µÄ¶ş½øÖÆ¸´ÖÆ£¬½«Æä³¤¶ÈÉèÖ


-------------------------------------------------------- KeyPgMks ----

MKS   Êı×ª×Ö·ûµ¥¾«ĞÍ
  
ÊÇ·ñ½«¶ş½øÖÆ´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æä³¤¶ÈÉèÖÃÎª 4 ¸ö×Ö½ÚSingleString

Óï·¨
Declare Function MKS ( ByVal number As Single ) As String

ÓÃ·¨
result = MKS[$]( number )

²ÎÊı
number
Òª½«±äÁ¿¶ş½øÖÆ¸´ÖÆµ½ .SingleString

·µ»ØÖµ
·µ»Ø ´øÓĞ µÄ¶ş½øÖÆ¸±±¾µÄ ¡£StringSingle

ÃèÊö
ÊÇ·ñ½«¶ş½øÖÆ¸±±¾´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æä³¤


-------------------------------------------------------- KeyPgMkshort ----

MKShort   Êı×ª×Ö·û¶ÌĞÍ
  
ÊÇ·ñ½«¶ş½øÖÆ´Ó±äÁ¿¸´ÖÆµ½ £¬½«Æä³¤¶ÈÉèÖÃÎª 2 ¸ö×Ö½ÚShortString

Óï·¨
Declare Function MKShort ( ByVal number As Short ) As String

ÓÃ·¨
result = MKShort[$](number)

²ÎÊı
number
Òª½«±äÁ¿¶ş½øÖÆ¸´ÖÆµ½ .ShortString

·µ»ØÖµ
·µ»Ø ´øÓĞ µÄ¶ş½øÖÆ¸±±¾µÄ ¡£StringShort

ÃèÊö
Ö´ĞĞ´Ó SHORT ±äÁ¿µ½×Ö·û´®µÄ¶ş½øÖÆ¸´ÖÆ£¬


-------------------------------------------------------- KeyPgModuleConstructor ----

Constructor (Module)   ¹¹Ôìº¯Êı
  
Ö¸¶¨ÔÚÄ£¿é¼¶´úÂëÖ®Ç°Ö´ĞĞ¹ı³Ì

Óï·¨
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

ÃèÊö
¹Ø¼ü×ÖÔÚ¶¨ÒåÖĞÊ¹ÓÃ£¨ÔÚÉùÃ÷ĞĞ¼¶±ğ½ûÖ¹£©£¬ÒÔÇ¿ÖÆÖ´ĞĞÄ£¿é¼¶´úÂëÖ®Ç°µÄ¹ı³Ì¡£¶¨ÒåÎª¹¹Ôìº¯ÊıµÄ¹ı³ÌµÄÊ¹ÓÃ·½Ê½¿ÉÄÜÓëÆÕÍ¨¹ı³ÌÏàÍ¬£¬Ò²¾ÍÊÇËµ£¬¿ÉÒÔ´ÓÄ£¿é¼¶´úÂëÒÔ¼°ÆäËû¹ı³ÌÖĞµ÷ÓÃËüÃÇ¡£


-------------------------------------------------------- KeyPgModuleDestructor ----

Destructor (Module)   Îö¹¹º¯Êı
  
Ö¸¶¨ÔÚ³ÌĞòÖÕÖ¹Ê±Ö´ĞĞ¹ı³Ì

Óï·¨
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

ÃèÊö
¶¨ÒåÒª´ÓÒÑ±àÒë³ÌĞòµÄ½áÊø´úÂë×Ô¶¯µ÷ÓÃµÄ¹ı³Ì¡£½áÊø´úÂëÓÉ±àÒëÆ÷Éú³É£¬²¢ÔÚ³ÌĞòÕı³£ÖÕÖ¹Ê±Ö´ĞĞ¡£¶¨ÒåÎªÎö¹¹º¯ÊıµÄ¹ı³ÌµÄÊ¹ÓÃ·½Ê½¿ÉÄÜÓëÆÕÍ¨¹ı³ÌÏàÍ¬£¬Ò²¾ÍÊÇËµ£¬¿ÉÒÔ´ÓÄ£¿é¼¶´úÂëÒÔ¼°ÆäËû¹


-------------------------------------------------------- KeyPgMonth ----

Month   ÈÕÆÚÈ¡ÔÂ·İ
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡Ò»ÄêÖĞµÄÔÂ·İ

Óï·¨
Declare Function Month ( ByVal date_serial As Double ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Month( date_serial )

²ÎÊı
date_serial
ÈÕÆÚ

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ·µ»ØÔÂ·İ±àºÅ¡£
ÔÂ·İÖµµÄ·¶Î§Îª 1-12£¬1


-------------------------------------------------------- KeyPgMonthname ----

MonthName   ÈÕÆÚÔÂÃû³Æ
  
´ÓÆäÕûÊı±íÊ¾ĞÎÊ½ÖĞ»ñÈ¡ÔÂ·İµÄÃû³Æ

Óï·¨
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

ÓÃ·¨
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

²ÎÊı
month
Ò»ÄêÖĞÔÂ·İµÄÊı×Ö - 1£º1 ÔÂµ½ 12£º12 ÔÂ
abbreviate
±êÖ¾£¬Ö¸Ê¾Ãû³ÆÓ¦ËõĞ´

·µ»ØÖµ
´ÓÖµ 1 µ½ 12 ·µ»Ø±¾µØ²Ù×÷ÏµÍ³ÓïÑÔÔÂ·İÃû³Æ¡£month

ÃèÊö
Èç¹ûÎª true£¬Ôò·µ»ØÔÂ·İ


-------------------------------------------------------- KeyPgMultikey ----

MultiKey   É¨Ãè¼üÂë
  
Í¨¹ı¼üÅÌÉ¨ÃèÂë¼ì²â°´¼üµÄ×´Ì¬¡£

Óï·¨
Declare Function MultiKey ( ByVal scancode As Long ) As Long

ÓÃ·¨
result = MultiKey(scancode)

²ÎÊı
scancode
Òª¼ì²éµÄÃÜÔ¿µÄÉ¨ÃèÂë¡£

·µ»ØÖµ
Èç¹û°´ÏÂÖ¸¶¨É¨Ãè´úÂëµÄ¼ü£¬Ôò·µ»Ø£¬·ñÔò·µ»Ø ¡£-10

ÃèÊö
MultiKeyÊÇÒ»¸ö¹¦ÄÜ£¬Ëü½«ËæÊ±¼ì²âÓÉÉ¨ÃèÂëÈ·¶¨µÄÈÎºÎÃÜÔ¿µÄ×´Ì¬¡£Èç¹û°´ÏÂ¸Ã¼ü£¬Ëü½«·µ»Ø£¬·ñÔòËü½«·µ»Ø ¡£
Ê¹ÓÃÊ±Î´½ûÓÃ¼üÅÌÊäÈë»º³åÇø;Ò²


-------------------------------------------------------- KeyPgMutexCreate ----

MutexCreate   »¥³âËø´´½¨
  
´´½¨ÓÃÓÚÍ¬²½Ïß³ÌÖ´ĞĞµÄ»¥³âÌå

Óï·¨
Declare Function MutexCreate ( ) As Any Ptr

ÓÃ·¨
result = MutexCreate

·µ»ØÖµ
´´½¨µÄ»¥³âÌåµÄ¾ä±ú£¬»òÊ§°ÜÊ±µÄ¿ÕÖ¸Õë £¨0£©¡£Any Ptr

ÃèÊö
»¥³âÌåÊÇ¡°»¥³â¡±µÄËõĞ´£¬ÊÇÒ»ÖÖÔÚÏß³ÌÄÚÍ¬²½¹²ÏíÊı¾İµÄ·½·¨¡£Èç¹û´æÔÚ¶à¸öÏß³ÌÊ¹ÓÃµÄÈ«¾Ö±äÁ¿£¨»òÓÉ¶à¸öÏß³Ì¶à´Îµ÷ÓÃµÄµ¥¸öÏß³ÌÊ¹ÓÃµÄ¾Ö²¿¾²Ì¬±äÁ¿£©£¬ÔòÔÚ


-------------------------------------------------------- KeyPgMutexDestroy ----

MutexDestroy   »¥³âËøÏú»Ù
  
Ïú»Ù»¥³âÌå

Óï·¨
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

ÓÃ·¨
MutexDestroy( id )

²ÎÊı
id
ÒªÏú»ÙµÄ»¥³âÌåµÄ¾ä±ú¡£Any Ptr

ÃèÊö
Mutexdestroy·ÅÆú ÓÉ ´´½¨µÄ»¥³âÌå¡£´Ëµ÷ÓÃÓ¦ÔÚÊ¹ÓÃ»¥³âËøµÄÈÎºÎÏß


-------------------------------------------------------- KeyPgMutexLock ----

MutexLock   »¥³âËøËø×¡
  
»ñÈ¡»¥³âÌå

Óï·¨
Declare Sub MutexLock ( ByVal id As Any Ptr )

ÓÃ·¨
MutexLock( id )

²ÎÊı
id
ÒªËø¶¨µÄ»¥³âÌåµÄ¾ä±ú¡£Any Ptr

ÃèÊö
MutexlockÊ¹ÓÃÓÉ Éú³ÉµÄ»¥³âÌå¡°¾ä±ú¡±Í£Ö¹ÈÎºÎÆäËûÏß³Ì£¬Ö±µ½¸Ã¾ä±ú±» ½âËø¡£
´ËÀàÒÑÍ£Ö¹µÄÏß³Ì½«¹ÒÆğÆäÖ´ĞĞ£¬²¢ÇÒ


-------------------------------------------------------- KeyPgMutexUnlock ----

MutexUnlock   »¥³âËø½âËø
  
ÊÍ·Å»¥³âËø

Óï·¨
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

ÓÃ·¨
MutexUnlock( id )

²ÎÊı
id
Òª½âËøµÄ»¥³âÌåµÄ¾ä±ú¡£Any Ptr

ÃèÊö
MutexunlockÊÍ·ÅÓÉ ´´½¨²¢ÓÃ Ëø¶¨µÄ»¥³âÌå¡°¾ä±ú¡±¡£ÕâÔÊĞí¹²Ïí»¥³âÌåµÄÆäËûÏß


-------------------------------------------------------- KeyPgNaked ----

Naked   Âã´úÂë
  
±àĞ´Ã»ÓĞĞòÑÔ/ºó¼Ç´úÂëµÄº¯Êı

Óï·¨
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

²ÎÊı
identifier- ³ÌĞòµÄÃû³Æ¡£
 - µ÷ÓÃ¹ı³ÌµÄÔ¼¶¨ - ¿ÉÒÔÊÇ ¡¢ »ò 
 - ¹ı³ÌÕıÎÄÖĞµÄ´úÂë¡£ÓÃÓÚ´¦Àí²ÎÊıºÍ·µ»ØÖµµÄ´úÂë¶¼±ØĞëÊÖ¶¯Íê³É¡£Çë×¢Òâ£¬Ö´ĞĞÕâĞ©²Ù×÷µÄ·½·¨¿ÉÄÜ»á¸ü¸Ä£¬¾ßÌåÈ¡¾öÓÚµ÷ÓÃÔ¼¶¨¡£
 - Òª´«µİ¸ø¹ı³ÌµÄ²ÎÊı¡£
 - º¯ÊıµÄÊı¾İÀàĞÍ¡£calling_conventioncdeclpascalstdcallasm_statementsparam_l


-------------------------------------------------------- KeyPgName ----

Name
  
ÖØÃüÃû´ÅÅÌÉÏµÄÎÄ¼ş

Óï·¨
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

ÓÃ·¨
result = Name( oldname, newname )

²ÎÊı
oldname
ÏÖÓĞÎÄ¼şµÄÃû³Æ¡£
newname
ÎÄ¼şµÄĞÂÃû³Æ¡£

·µ»ØÖµ
³É¹¦Ê±·µ»ØÁã £¨£©£¬Ê§°ÜÊ±·µ»Ø·ÇÁã¡£0

ÃèÊö
ÖØÃüÃû×î³õµ÷ÓÃµÄÎÄ¼ş»òÎÄ¼ş¼Ğ¡£
Èç¹û´æÔÚÍ¬ÃûµÄÎÄ¼ş/ÎÄ¼ş¼Ğ£¬Ôò²»ÄÜ±£Ö¤¸Ãº


-------------------------------------------------------- KeyPgNamespace ----

Namespace   ÃüÃû¿Õ¼ä
  
ÉùÃ÷ÃüÃû¿Õ¼ä¿é¡£

Óï·¨
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

²ÎÊı
identifier
ÃüÃû¿Õ¼äµÄÃû³Æ£¨°üÀ¨Ç¶Ì×Ãû³ÆËµÃ÷·û£©¡£
aliasname
ÃüÃû¿Õ¼äµÄ±¸ÓÃÍâ²¿Ãû³Æ¡£

ÃèÊö
ÃüÃû¿Õ¼äÔÊĞí½«¶ÔÏó£¨Ô¤¶¨ÒåµÄÊı¾İÀàĞÍºÍ UDT£¬°üÀ¨ÁªºÏºÍÃ¶¾Ù£©ºÍ¹ı³Ì£¨°üÀ¨ÆäÉùÃ÷£©µÈÊµÌå·Ö×éµ½Ãû³ÆÏÂ¡£ÕâÑù£¬È«¾Ö·¶Î§¿ÉÒÔ·ÖÎª¡°×Ó·¶Î§¡±£¬Ã¿¸ö×Ó·¶Î§¶¼


-------------------------------------------------------- KeyPgNext ----

Next   ÏÂ²½
  
¿ØÖÆÁ÷Óï¾äÒÔ±ê¼ÇÑ­»·µÄ½áÊø¡£For...Next

Óï·¨
Next [ identifier_list ]

ÃèÊö
Ö¸Ê¾ÓëÆ¥ÅäÓï¾ä¹ØÁªµÄÓï¾ä¿éµÄ½áÎ²¡£
µ±ÔÚÃ»ÓĞidentifier_listµÄÇé¿öÏÂµ¥¶ÀÊ¹ÓÃÊ±£¬Ëü½«¹Ø±Õ×îĞÂµÄÓï¾ä¿é¡£
ÊÇ¿ÉÑ¡µÄ£¬¿ÉÒÔÊÇÒ»¸ö»ò¶à¸öÓÃ¶ººÅ·Ö¸ôµÄ±äÁ¿Ãû³Æ¡£±£Áô´ËĞÎÊ½µÄÓï¾äÊÇÎ


-------------------------------------------------------- KeyPgNow ----

Now   ÏÖÔÚ
  
ÒÔÈÕÆÚĞòÁĞĞÎÊ½»ñÈ¡µ±Ç°ÏµÍ³Ê±¼ä 

Óï·¨
Declare Function Now ( ) As Double

ÓÃ·¨
#include "vbcompat.bi"
result = Now

·µ»ØÖµ
·µ»ØÒ»¸öÈÕÆÚĞòÁĞ£¬ÆäÖĞ°üº¬ÏµÍ³ÔÚÖ´ĞĞÊ±µÄÈÕÆÚºÍÊ±¼ä¡£

ÃèÊö
ÓÉÓÚÊ±¼äÊÇÈÕÆÚĞòÁĞµÄĞ¡Êı²¿·Ö£¬Èç¹û


-------------------------------------------------------- KeyPgObject ----

Object   ¶ÔÏó
  
Ìá¹©ÔËĞĞÊ±ÀàĞÍĞÅÏ¢µÄÄÚÖÃÀàĞÍ

Óï·¨
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

ÓÃ·¨
Type typename Extends Object
End Type

Dim variable As Object

ÃèÊö
Object ÊÇÒ»ÖÖÄÚÖÃÀàĞÍ£¬ËüÎª´ÓËüÅÉÉúµÄËùÓĞÀàĞÍÌá¹©ÔËĞĞÊ±ÀàĞÍĞÅÏ¢ £¨RTTI£©£¬ÔÊĞíËüÃÇÓë Ò»ÆğÊ¹ÓÃ£¬²¢Ö§³ÖºÍ·½·¨¡£
À©Õ¹ÄÚÖÃ¶ÔÏóÀàĞÍÔÊĞíÔÚ µÄ¶¥²¿Ìí¼ÓÒ»¸ö¶îÍâµÄÒş²Ø vtable Ö¸Õë×Ö¶


-------------------------------------------------------- KeyPgOct ----

Oct   °Ë½øÖÆ
  
½«Êı×Ö×ª»»Îª°Ë½øÖÆ±íÊ¾ĞÎÊ½

Óï·¨
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String

Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

ÓÃ·¨
result = Oct[$]( number [, digits ] )

²ÎÊı
number
¼ÆËãÎªÊı×ÖµÄÊı×Ö»ò±í´ïÊ½¡£¸¡µãÊı½«×ª»»Îª .LongInt
digits
·µ»ØµÄ×Ö·û´®ÖĞËùĞèµÄÎ»Êı¡£

·µ»ØÖµ
°üº¬ µÄÎŞ·ûºÅ°Ë½øÖÆ±íÊ¾ĞÎÊ½µÄ×Ö·û´®¡£number

ÃèÊö
·µ»Ø µÄÎŞ·ûºÅ°Ë½øÖÆ×Ö·û´®±íÊ¾ĞÎÊ½¡£°Ë½øÖÆÊı×ÖµÄ·¶Î§´Ó 0 µ½ 7¡£
Èç¹ûÖ¸¶¨ > 0£¬Ôò½á¹û×Ö·û´®½«Ç¡ºÃÊÇ¸Ã³¤¶È¡£ÈçÓĞ±ØÒª£¬Ë


-------------------------------------------------------- KeyPgOffsetof ----

OffsetOf   È¡Æ«ÒÆÖµ
  
·µ»ØÀàĞÍÖĞ×Ö¶ÎµÄÆ«ÒÆÁ¿¡£

Óï·¨
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname )	

ÓÃ·¨
result = OffsetOf( typename, fieldname )

²ÎÊı
typename
Ê¹ÓÃÓï¾ä¶¨ÒåµÄÀàĞÍµÄÃû³Æ¡£Type...End Type
fieldname
ÔÚÀàĞÍ£¨»òÅÉÉúÀàĞÍµÄ»ùÀàĞÍ£©ÖĞ¶¨ÒåµÄ×Ö¶ÎµÄÃû³Æ¡£

ÃèÊö
¶ÔÓÚ·ÇÅÉÉúÀàĞÍ£¬½«·µ»ØÎ»ÖÃ£¬×÷Îª´Ó ¿ªÍ·¿ªÊ¼µÄÆ«ÒÆÁ¿£¨ÒÔ×Ö½ÚÎªµ¥Î»£© ·µ»Ø¡£
¶ÔÓÚÅÉÉúÀàĞÍ£¬½«·µ»Ø


-------------------------------------------------------- KeyPgOnerror ----

On Error   ÔÚ
  
ÓÃÓÚÉèÖÃµ±Ç°´íÎó´¦Àí³ÌĞòµÄ´íÎó´¦ÀíÓï¾ä

Óï·¨
On [Local] Error Goto label

²ÎÊı
label
·¢Éú´íÎóÊ±ÒªÌø×ªµ½µÄ±êÇ©

ÃèÊö
¡°³ö´í¡±ÉÏ£¬ÔÚ·¢Éú´íÎóÊ±´¥·¢Ìø×ªµ½´íÎó´¦Àí³ÌĞò¡£´ËÀà´íÎó¿ÉÓÉÄÚÖÃÓï¾ä´¥·¢£¬ÀıÈç £¬»òÔÚÊ¹ÓÃÓï¾äÊ±´¥·¢¡£
×¢£º ½öµ±Ê¹ÓÃ -e¡¢-ex »ò -exx Ñ¡ÏîÖ®Ò»±àÒë³ÌĞòÊ±£¬²Å»á


-------------------------------------------------------- KeyPgOngosub ----

On...Gosub
  
»ùÓÚ±í´ïÊ½µ÷ÓÃ±êÇ©

Óï·¨
On expression GoSub label1[, ...]

ÃèÊö
¸ù¾İ±í´ïÊ½µÄÖµ·ÖÖ§µ½²»Í¬µÄ±êÇ©¡£±í´ïÊ½Öµ 1 ½«·ÖÖ§µ½µÚÒ»¸ö±êÇ©£¬Öµ 2 ½«·ÖÖ§µ½µÚ¶ş¸ö±êÇ©£¬ÒÀ´ËÀàÍÆ¡£Èç¹û±í´ïÊ½µÄÖµÎªÁã £¨0£© »ò´óÓÚÁĞ±íÖĞµÄÏîÄ¿Êı£¬ÔòÔÚ ºóÃæµÄÏÂÒ»¸öÓï¾äÉÏ¼ÌĞøÖ´ĞĞ¡£
´Ë


-------------------------------------------------------- KeyPgOngoto ----

On...Goto
  
Ìø×ªµ½»ùÓÚ±í´ïÊ½µÄ±êÇ©¡£

Óï·¨
On expression Goto label1[, ...]

ÃèÊö
¸ù¾İ±í´ïÊ½µÄÖµ·ÖÖ§µ½²»Í¬µÄ±êÇ©¡£±í´ïÊ½Öµ 1 ½«·ÖÖ§µ½µÚÒ»¸ö±êÇ©£¬Öµ 2 ½«·ÖÖ§µ½µÚ¶ş¸ö±êÇ©£¬ÒÀ´ËÀàÍÆ¡£Èç¹û±í´ïÊ½µÄÖµÎªÁã £¨0£© »ò´ó


-------------------------------------------------------- KeyPgOpAdd ----

Operator + (Addition)   ÔËËã·û
  
¶ÔÁ½¸ö±í´ïÊ½ÇóºÍ

Óï·¨
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer

Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

ÓÃ·¨
result = lhs + rhs

²ÎÊı
lhs
ÒªÇóºÍµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÇóºÍµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
·µ»ØÁ½¸ö±í´ïÊ½µÄ×ÜºÍ¡£

ÃèÊö
µ±×ó²àºÍÓÒ²à±í´ïÊ½ÊÇÊıÖµÊ±£¬ÔËËã·û + £¨Add£© ½«·µ»ØÁ½¸öÖµµÄ×ÜºÍ¡£
µ±×ó²àºÍÓÒ²à±í´ïÊ½ÊÇ×Ö·û´®ÖµÊ±£¬ÔËËã·û +£¨Add£© Á¬½ÓÁ½¸ö×Ö·û´®²¢·µ»Ø


-------------------------------------------------------- KeyPgOpAnd ----

Operator And (Conjunction)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ°´Î»ºÍ£¨Á¬´Ê£©

Óï·¨
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs And rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ°´Î»ºÍ£¨ºÏ´Ê£©¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄ°´Î»ºÍ£¬ÕâÊÇÒ»¸öÂß¼­ÔËËã£¬¸Ã²Ù×÷½«Éú³ÉÒ»¸öÖµ£¬ÆäÎ»ÉèÖÃÈ¡¾öÓÚ²Ù×÷ÊıµÄÎ»£¨¶ÔÓÚ½«²¼¶ûÖ


-------------------------------------------------------- KeyPgOpAndAlso ----

Operator Andalso (Short Circuit Conjunction)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ¶ÌÂ·ºÍ£¨ºÏÏà£©

Óï·¨
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs AndAlso rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ¶ÌÂ·ºÍ£¨ºÏÏà£©¡£

ÃèÊö
´ËÔËËã·û¼ÆËã×ó²à±í´ïÊ½¡£Èç¹û½á¹ûÎªÁã£¬ÔòÁ¢¼´·µ»ØÁã¡£Èç¹û½á¹ûÎª·ÇÁã£¬Ôò¼ÆËãÓÒ²à£¬²¢·µ»ØÆäÂß¼­½á¹û¡£
 £¨¶Ô


-------------------------------------------------------- KeyPgOpArrayIndex ----

Operator () (Array Index)   ÔËËã·û
  
·µ»Ø¶ÔÊı×éÖĞÔªËØµÄÒıÓÃ

Óï·¨
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

ÓÃ·¨
result = lhs ( rhs [, ...] )
or
lhs ( rhs [, ...] ) = value

²ÎÊı
lhs
Êı×é¡£
rhs
Êı×éÖĞÔªËØµÄË÷Òı¡£
T
ÈÎºÎÊı¾İÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û·µ»Ø¶ÔÊı×éÖĞÔªËØµÄÒıÓÃ¡£¶ÔÓÚ¶àÎ¬Êı×é£¬±ØĞëÖ¸¶¨¶à¸öË÷Òı£¨×


-------------------------------------------------------- KeyPgOpAssignment ----

Operator =[>] (Assign)   ÔËËã·û
  
Îª±äÁ¿¸³Öµ

Óï·¨
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs = rhs
»ò
lhs => rhs

»òÕß£¬ÔÚ QB·½ÑÔ£¬

[ Let ] lhs = rhs
»ò
[ Let ] lhs => rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊı×Ö¡¢²¼¶ûÖµ¡¢×Ö·û´®»òÖ¸ÕëÀàĞÍ¡£
rhs
Òª·ÖÅä¸ø µÄÖµ¡£lhs
T2
ÈÎºÎÀàĞÍ¾ù¿É×ª»»Îª ¡£T2

ÃèÊö
´ËÔËËã·û½«ÆäÓÒ²à²Ù×÷Êı £¨£© µÄÖµ·ÖÅä¸øÆä×ó²à²Ù×÷Êı £¨£©¡£ÓÒ²à²Ù×÷Êı±ØĞëÒşÊ½×ª»»Îª×ó²àÀàĞÍ £¨£©£¨¶ÔÓÚ²¼¶ûÖµµ½ÕûÊıµÄ×ª»»£¬false »


-------------------------------------------------------- KeyPgOpAt ----

Operator @ (Address Of)   ÔËËã·û
  
·µ»Ø×Ö·û´®ÎÄ±¾¡¢±äÁ¿¡¢¶ÔÏó»ò¹ı³ÌµÄµØÖ·

Óï·¨
Declare Operator @ ( ByRef rhs As T ) As T Pointer

ÓÃ·¨
result = @ rhs

²ÎÊı
rhs
Òª¼ìË÷ÆäµØÖ·µÄ×Ö·û´®ÎÄ±¾¡¢±äÁ¿¡¢¶ÔÏó»ò¹ı³Ì¡£
T
ÈÎºÎ±ê×¼¡¢ÓÃ»§¶¨Òå»ò¹ı³ÌÀàĞÍ¡£

·µ»ØÖµ
·µ»ØÓÒ²à £¨£© ²Ù×÷ÊıµÄµØÖ·¡£rhs

ÃèÊö
ÔËËã·û @ £¨µØÖ·£© ·µ»ØÆä²Ù×÷ÊıµÄÄÚ´æµØÖ·¡£
µ±²Ù×÷ÊıÎª ÀàĞÍÊ±£¬½«·µ»ØÄÚ²¿×Ö·û´®ÃèÊö·ûµÄµØÖ·¡£Ê¹ÓÃ£¨×Ö·û´®


-------------------------------------------------------- KeyPgOpCast ----

Operator Cast   ÔËËã·û
  
ÓÃÓÚ½« UDT£¨ÓÃ»§¶¨ÒåÀàĞÍ£©±äÁ¿×ª»»ÎªÖ¸¶¨Êı¾İÀàĞÍµÄÔËËã·û

Óï·¨
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

ÓÃ·¨
Cast( datatype, expression )

²ÎÊı
typename 
¡¢»ò µÄÃû³ÆTypeClassUnion
datatype 
Òª×ª»»ÎªËüµÄÀàĞÍµÄÃû³Æ¡¢ÄÚÖÃÊı¾İÀàĞÍ£¨±ê×¼Êı¾İÀàĞÍ£©»ò UDT ²»Í¬ÓÚtypename
expression 
Òª×ª»»µÄ±í´ïÊ½£¬ÊµÀıtypename

ÃèÊö
½«£¨±äÁ¿£©×ª»»ÎªÆäËû .
±ØĞëÔÚ ¡¢ ¡¢ »ò ÄÚÉùÃ÷¡£
ÓëËùÓĞ·Ç¾²Ì¬³ÉÔ±¹ı³ÌÒ»Ñù£¬Ëü´«µİÁËÒ»¸öÒş²Ø²ÎÊı¡£
µ±Ö»ÓĞ·µ»ØÀàĞ


-------------------------------------------------------- KeyPgOpCombineAdd ----

Operator += (Add And Assign)   ÔËËã·û
  
Ïò±äÁ¿Ìí¼ÓºÍ¸³Öµ

Óï·¨
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )

Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

ÓÃ·¨
lhs += rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊıÖµÀàĞÍ¡£
rhs
ÒªÌí¼Óµ½ µÄÖµ¡£lhs
T2
ÈÎºÎÊıÖµÀàĞÍ¡£
T
ÈÎºÎÊı¾İÀàĞÍ¡£

ÃèÊö
´ËÔËËã·ûÏò±äÁ¿Ìí¼Ó²¢¸³Öµ¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º
¶ÔÓÚÊıÖµÀàĞÍ£¬ÓÒ²à±í´ïÊ½ £¨£© ½«×ª»»Îª×ó²àÀàĞÍ £¨£©¡£
¶ÔÓÚ×Ö·û´®ÀàĞÍ£¬´ËÔËËã·ûÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ 


-------------------------------------------------------- KeyPgOpCombineAnd ----

Operator And= (Conjunction And Assign)   ÔËËã·û
  
Ö´ĞĞ°´Î»ºÍ£¨Á¬´Ê£©²¢½«½á¹û¸³¸ø±äÁ¿

Óï·¨
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs And= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
Óë Ö´ĞĞ°´Î»ºÍ£¨²¢Èë£©µÄÖµ¡£lhs
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û°´Î»Ö´ĞĞ and ²¢½«½á¹û¸³¸ø±äÁ¿£¨¶ÔÓÚ½«²¼¶ûÖµ×ª»»ÎªÕûÊı£¬false »ò true ²¼¶ûÖµ±äÎª 0 »ò -1 ÕûÊıÖµ£©¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º



-------------------------------------------------------- KeyPgOpCombineConcat ----

Operator &= (Concatenate And Assign)   ÔËËã·û
  
½«Ò»¸ö×Ö·û´®×·¼Ó²¢·ÖÅä¸øÁíÒ»¸ö×Ö·û´®

Óï·¨
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

ÓÃ·¨
lhs &= rhs

²ÎÊı
lhs
ÒªÎªÆä·ÖÅäµÄ×Ö·û´®¡£
rhs
Òª×·¼Óµ½ µÄÖµ¡£lhs
T2
ÈÎºÎ¿ÉÒÔ×ª»»Îª×Ö·û´®µÄÊı×Ö¡¢×Ö·û´®»òÓÃ»§¶¨ÒåÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û½«Ò»¸ö×Ö·û´®×·¼Óµ½ÁíÒ»¸ö×Ö·û´®ÉÏ¡£ÓÒ²à±í´ïÊ½ £¨£© ÔÚ´®ÁªÖ®Ç°×ª»»Îª×Ö·û´®¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£¬
ÆäÖĞ½á¹û±»·ÖÅä»Ø×ó²à×Ö


-------------------------------------------------------- KeyPgOpCombineDivide ----

Operator /= (Divide And Assign)   ÔËËã·û
  
½«Öµ³ı·¨²¢¸³¸ø±äÁ¿

Óï·¨
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs /= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊıÖµÀàĞÍ¡£
rhs
Òª³ıÒÔµÄÖµ¡£lhs
T2
ÈÎºÎÊıÖµÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û½«Öµ³ı·¨²¢¸³¸ø±äÁ¿¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º
lhs = lhs / rhs

¶ÔÓÚÊ¹Ó


-------------------------------------------------------- KeyPgOpCombineEqv ----

Operator Eqv= (Equivalence And Assign)   ÔËËã·û
  
Ö´ĞĞ°´Î» eqv£¨µÈĞ§ĞÔ£©²¢½«½á¹û·ÖÅä¸ø±äÁ¿

Óï·¨
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs Eqv= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
Óë Ö´ĞĞ°´Î» eqv£¨µÈĞ§£©µÄÖµ¡£lhs
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£

ÃèÊö
´ËÔËËã·ûÖ´ĞĞ°´Î» eqv ²¢½«½á¹û¸³¸ø±äÁ¿£¨¶ÔÓÚ½«²¼¶ûÖµ×ª»»ÎªÕûÊı£¬false »ò true ²¼¶ûÖµ±äÎª 0 »ò -1 ÕûÊıÖµ£©¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º



-------------------------------------------------------- KeyPgOpCombineExponentiate ----

Operator ^= (Exponentiate And Assign)   ÔËËã·û
  
¶Ô±äÁ¿½øĞĞÃİ»¯²¢¸³Öµ

Óï·¨
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

ÓÃ·¨
lhs ^= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
rhs
ÒªÃİËùÒÀ¾İµÄÖµ¡£lhs

ÃèÊö
´ËÔËËã·û¶Ô±äÁ¿½øĞĞÃİÃİ¸³Öµ¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º
lhs = lhs ^ rhs

¶ÔÓÚÊ¹ÓÃÊÊµ±Óï·¨×÷Îª³ÉÔ±µÄÓÃ»§¶¨ÒåÀàĞÍ£¬¿ÉÒÔÖØÔØ´ËÔËËã·û¡£
×¢Òâ£º´Ë


-------------------------------------------------------- KeyPgOpCombineImp ----

Operator Imp= (Implication And Assign)   ÔËËã·û
  
Ö´ĞĞ°´Î» imp£¨Òşº¬£©²¢½«½á¹û·ÖÅä¸ø±äÁ¿

Óï·¨
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs Imp= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
Ê¹ÓÃ Ö´ĞĞ°´Î» imp£¨Òşº¬£©µÄÖµ¡£lhs
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£

ÃèÊö
´ËÔËËã·ûÖ´ĞĞ°´Î» imp ²¢½«½á¹û¸³¸ø±äÁ¿£¨¶ÔÓÚ½«²¼¶ûÖµ×ª»»ÎªÕûÊı£¬false »ò true ²¼¶ûÖµ±äÎª 0 »ò -1 ÕûÊıÖµ£©¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º



-------------------------------------------------------- KeyPgOpCombineIntegerDivide ----

Operator \= (Integer Divide And Assign)   ÔËËã·û
  
ÕûÊı³ıÒÔ±äÁ¿²¢½«Æä¸³Öµ

Óï·¨
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs \= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊıÖµÀàĞÍ¡£
rhs
Òª³ıÒÔµÄÖµ¡£lhs
T2
ÈÎºÎÊıÖµÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û³ı·¨£¨ÕûÊı³ı·¨£©²¢Îª±äÁ¿¸³Öµ¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º
lhs = lhs \ rhs




-------------------------------------------------------- KeyPgOpCombineModulus ----

Operator Mod= (Modulus And Assign)   ÔËËã·û
  
³ıÒÔÒ»¸öÖµ²¢½«ÓàÊı¸³¸ø±äÁ¿

Óï·¨
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

ÓÃ·¨
lhs Mod= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
rhs
Òª³ıÒÔµÄÖµ¡£lhs

ÃèÊö
´ËÔËËã·û½«Á½¸öÀàĞÍµÄÖµ³ıÒÔ£¬²¢½«ÓàÊı¸³¸øÆä×ó²à £¨£© ±äÁ¿¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£ºIntegerlhs
lhs = lhs Mod rhs

¶ÔÓÚÊ


-------------------------------------------------------- KeyPgOpCombineMultiply ----

Operator *= (Multiply And Assign)   ÔËËã·û
  
½«ÖµÏà³Ë²¢¸³Öµ¸ø±äÁ¿

Óï·¨
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs *= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊıÖµÀàĞÍ¡£
rhs
Òª³ËÒÔµÄÖµ¡£lhs
T2
ÈÎºÎÊıÖµÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û½«ÖµÏà³Ë²¢¸³Öµ¸ø±äÁ¿¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º
lhs = lhs * rhs

ÓÒ²à±í´ïÊ½ £¨£© ½«×ª»»Îª×ó²àÀàĞÍ 


-------------------------------------------------------- KeyPgOpCombineOr ----

Operator Or= (Inclusive Disjunction And Assign)   ÔËËã·û
  
Ö´ĞĞ°´Î»»ò£¨°üÀ¨·ÖÀë£©²¢½«½á¹û¸³¸ø±äÁ¿

Óï·¨
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs Or= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
Óë Ö´ĞĞ°´Î»»ò£¨°üÀ¨¶Ï¿ª£©µÄÖµ¡£lhs
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£

ÃèÊö
´ËÔËËã·ûÖ´ĞĞ°´Î» or ²¢½«½á¹û¸³¸ø±äÁ¿£¨¶ÔÓÚ½«²¼¶ûÖµ×ª»»ÎªÕûÊı£¬false »ò true ²¼¶ûÖµ±äÎª 0 »ò -1 ÕûÊıÖµ£©¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£


-------------------------------------------------------- KeyPgOpCombineShiftLeft ----

Operator Shl= (Shift Left And Assign)   ÔËËã·û
  
Ïò×óÒÆ¶¯²¢½«Öµ¸³¸ø±äÁ¿

Óï·¨
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

ÓÃ·¨
lhs shl= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
rhs
ÒªÏò×óÒÆ¶¯µÄÖµ¡£lhs

ÃèÊö
´ËÔËËã·û½«×ó²à £¨£© ²ÎÊıÖĞµÄÎ»ÒÆ¶¯ÆäÓÒ²à £¨£© ²ÎÊıÖ¸¶¨µÄ´ÎÊı£¬²¢½«½á¹û·ÖÅä¸ø ¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£ºlhsrhslhs
lhs = lhs Shl rhs


-------------------------------------------------------- KeyPgOpCombineShiftRight ----

Operator Shr= (Shift Right And Assign)   ÔËËã·û
  
ÏòÓÒÒÆ¶¯²¢Îª±äÁ¿¸³Öµ

Óï·¨
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

ÓÃ·¨
lhs shr= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
rhs
ÒªÖ±½ÓÒÆ¶¯µÄÖµ¡£lhs

ÃèÊö
´ËÔËËã·û½«×ó²à £¨£© ²ÎÊıÖĞµÄÎ»ÒÆ¶¯ÆäÓÒ²à £¨£© ²ÎÊıÖ¸¶¨µÄ´ÎÊı£¬²¢½«½á¹û·ÖÅä¸ø ¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£ºlhsrhslhs
lhs = lhs Shr rhs


-------------------------------------------------------- KeyPgOpCombineSub ----

Operator -= (Subtract And Assign)   ÔËËã·û
  
¼õÈ¥±äÁ¿²¢½«Æä¸³Öµ

Óï·¨
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

ÓÃ·¨
lhs -= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊıÖµÀàĞÍ¡£
rhs
Òª´Ó ÖĞ¼õÈ¥µÄÖµ¡£lhs
T2
ÈÎºÎÊıÖµÀàĞÍ¡£
T
ÈÎºÎÊı¾İÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û¼õÈ¥±äÁ¿²¢½«Æä¸³Öµ¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º
lhs = lhs - rhs

¶ÔÓÚÊıÖµÀàĞÍ£¬ÓÒ²à±í´ïÊ½ £¨£© ½«×


-------------------------------------------------------- KeyPgOpCombineXor ----

Operator Xor= (Exclusive Disjunction And Assign)   ÔËËã·û
  
Ö´ĞĞ°´Î» xor£¨¶ÀÕ¼ÎöÈ¡£©²¢½«½á¹û¸³¸ø±äÁ¿

Óï·¨
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

ÓÃ·¨
lhs Xor= rhs

²ÎÊı
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
Ê¹ÓÃ Ö´ĞĞ°´Î» xor£¨¶ÀÕ¼»ò£©µÄÖµ¡£lhs
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£

ÃèÊö
´ËÔËËã·ûÖ´ĞĞ°´Î» or ²¢½«½á¹û¸³¸ø±äÁ¿£¨¶ÔÓÚ½«²¼¶ûÖµ×ª»»ÎªÕûÊı£¬false »ò true ²¼¶ûÖµ±äÎª 0 »ò -1 ÕûÊıÖµ£©¡£ËüÔÚ¹¦ÄÜÉÏµÈĞ§ÓÚ£º


-------------------------------------------------------- KeyPgOpConcat ----

Operator + (String Concatenation)   ÔËËã·û
  
Á¬½ÓÁ½¸ö×Ö·û´®

Óï·¨
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

ÓÃ·¨
result = lhs + rhs

²ÎÊı
lhs
ÒªÁ¬½ÓµÄ×ó²à×Ö·û´®¡£
rhs
ÒªÁ¬½ÓµÄÓÒ²à×Ö·û´®¡£

ÃèÊö
´ËÔËËã·ûÁ¬½ÓÁ½¸ö×Ö·û´®¡£Óë Operator &£¨´ø×ª»»µÄ×Ö·û´®´®Áª£©²»Í¬£¬ÕâÁ½¸ö±í´ïÊ½¶¼±ØĞëÊÇ×


-------------------------------------------------------- KeyPgOpConcatConvert ----

Operator & (String Concatenation With Conversion)   ÔËËã·û
  
Á¬½ÓÁ½¸ö×Ö·û´®£¬¸ù¾İĞèÒª½«·Ç×Ö·û´®×ª»»Îª×Ö·û´®

Óï·¨
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

ÓÃ·¨
result = lhs & rhs

²ÎÊı
lhs
ÒªÁ¬½ÓµÄ×ó²à±í´ïÊ½¡£
T
¿É×ª»»Îª±ê×¼Êı¾İÀàĞÍµÄÈÎºÎ±ê×¼Êı¾İÀàĞÍ»òÓÃ»§¶¨ÒåÀàĞÍ¡£
rhs
ÒªÁ¬½ÓµÄÓÒ²à±í´ïÊ½¡£
U
¿É×ª»»Îª±ê×¼Êı¾İÀàĞÍµÄÈÎºÎ±ê×¼Êı¾İÀàĞÍ»òÓÃ»§¶¨ÒåÀàĞÍ¡£
V
Éú³ÉµÄ×Ö·û´®ÀàĞÍ£¨Òò²Ù×÷Êı¶øÒì£©¡£

ÃèÊö
´ËÔËËã·ûÁ¬½ÓÁ½¸ö±í´ïÊ½¡£Èç¹ûÈÎÒ


-------------------------------------------------------- KeyPgOpDelete ----

Operator Delete Statement   ÔËËã·û
  
²Ù×÷Ô±Ïú»ÙÊı¾İ²¢ÊÍ·ÅÓëOperator New Expression

ÓÃ·¨
Delete buf
or
Delete[] buf

²ÎÊı
buf 
Ö¸ÏòÒÑÓÉÔËËã·û»òÔËËã·û·ÖÅäµÄÄÚ´æµÄÖ¸Õë£¬ÔËËã·ûµÄÊı×é°æ±¾£¨±ØĞë¸ù¾İÒªÉ¾³ıµÄÊı¾İÀàĞÍÌá¹©ÀàĞÍ»¯Ö¸Õë£©¡£New ExpressionNew[] ExpressionNew Expression

ÃèÊö
ÔËËã·ûÓÃÓÚÏú»ÙºÍÊÍ·ÅÊ¹ÓÃÔËËã·û´´½¨µÄ¶ÔÏóµÄÄÚ´æ¡£É¾³ı TYPE Ê±£¬½«µ÷ÓÃÆäÎö¹¹º¯Êı¡£ ÔËËã·ûÓ¦½öÓë´ÓÔËËã·û·µ»ØµÄµØÖ·Ò»ÆğÊ¹ÓÃ¡£
ÔË


-------------------------------------------------------- KeyPgOpDeleteOverload ----

Operator Delete Overload   ÔËËã·û
  
³ÉÔ±ÔËËã·û£¬ÓÃÓÚÔÚÓ¦ÓÃÓÚ UDT£¨ÓÃ»§¶¨ÒåµÄÀàĞÍ£©Ê±Ìá¹©¹ıÔØÄÚ´æ½â³ı·ÖÅä½ø³Ì²¿·Ö¡£Operator Delete Statement

Óï·¨
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator delete[] ( buf  As Any Ptr )

²ÎÊı
buf 
Ö¸ÏòÒÑÓÉÔËËã·û»òÔËËã·û£¨ÔËËã·ûµÄÊı×é°æ±¾£©·ÖÅäµÄÄÚ´æµÄÖ¸Õë¡£New OverloadNew[] OverloadNew Overload

ÃèÊö
³ÉÔ±ÔËËã·ûÔÚÓ¦ÓÃÓÚ UDT£¨ÓÃ»§¶¨ÒåµÄÀàĞÍ£©Ê±ÖØÔØÔËËã·ûÌá¹©µÄÄÚ´æ½â³ı·ÖÅä½ø³Ì²¿·Ö¡£Òò´Ë£¬ÓÃ»§¿ÉÒÔ¶¨Òå×Ô¼ºµÄÄÚ´æ½â³ı·ÖÅä½ø³


-------------------------------------------------------- KeyPgOpDivide ----

Operator / (Divide)   ÔËËã·û
  
³ıÒÔÁ½¸öÊıÖµ±í´ïÊ½

Óï·¨
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

ÓÃ·¨
result = lhs / rhs

²ÎÊı
lhs
×ó²àµÄºìÀû±í´ïÊ½¡£
rhs
ÓÒ²à³ıÊı±í´ïÊ½¡£

·µ»ØÖµ
·µ»Ø¹ÉÏ¢ºÍ³ıÊıµÄÉÌ¡£

ÃèÊö
ÔËËã·û / £¨³ı·¨£©·µ»Ø¹ÉÏ¢ºÍ³ıÊıµÄÉÌ¡£
ÕâÁ½¸ö²Ù×÷Êı¶¼²»»áÒÔÈÎºÎ·½Ê½½øĞĞĞŞ¸Ä¡£ÓëÕûÊı³ı·¨²»


-------------------------------------------------------- KeyPgOpen ----

Open   ÎÄ¼ş´ò¿ª
  
Ê¹ÓÃÎÄ¼ş²Ù×÷´ò¿ª´ÅÅÌÎÄ¼şÒÔ½øĞĞ¶ÁÈ¡»òĞ´Èë

Óï·¨
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber

Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

ÓÃ·¨
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
»ò
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
»ò
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len =  record_length] )
»ò
Open filename For {Input|Output|Append} As filenumber
»ò
Open filename For Binary Access {Read|Write} As filenumber
»ò
Open filename For Random Access {Read|Write} As filenumber [Len =  record_length]


²ÎÊı
filename
Òª´ò¿ªµÄ´ÅÅÌÎÄ¼şµÄÃû³ÆµÄ×Ö·û´®Öµ¡£Ïà¶ÔÎÄ¼şÂ·¾¶Ïà¶ÔÓÚµ±Ç°Ä¿Â¼£¨Çë²Î¼û£©¡£CurDir
encoding_type
¶ÁÈ¡»òĞ´ÈëÎÄ±¾Ê±ÒªÊ¹ÓÃµÄ±àÂë¿ÉÒÔÊÇ£º
 Encoding "ascii" £¨Ä¬ÈÏÊ¹ÓÃ ASCII ±àÂë£©
 Encoding "utf8" £¨Ê¹ÓÃ 8 Î» Unicode ±àÂë£©
 Encoding "utf16" £¨Ê¹ÓÃ 16 Î» Unicode ±àÂë£©
 Encoding "utf32" £¨Ê¹ÓÃ 32 Î» Unicode ±àÂë£©
access_type
µ÷ÓÃ½ø³ÌÇëÇóµÄ·ÃÎÊÀàĞÍ¡£
 Access [Read] [Write] £¨¿ÉÒÔÊ¹ÓÃ¶ÁĞ´·ÃÎÊÈ¨ÏŞ£¬ÕâÊÇÄ¬ÈÏÉèÖÃ£©
lock_type
¶ÔÀ´×ÔÆäËû½ø³Ì£¨Ïß³Ì»ò³ÌĞò£©µÄ´ÅÅÌÎÄ¼ş·ÃÎÊÊ©¼ÓÏŞÖÆ£¬¿ÉÒÔÊÇ£º
 Shared £¨ÎÄ¼ş¿ÉÓÉÆäËû½ø³Ì×ÔÓÉ·ÃÎÊ£©
 Lock [Read] [Write] £¨¿ÉÒÔ¾Ü¾ø¶ÔÆäËû½ø³ÌµÄ¶ÁĞ´·ÃÎÊÈ¨ÏŞ£©
filenumber
Òª°ó¶¨µ½´ÅÅÌÎÄ¼şµÄ¿ÉÓÃÎÄ¼ş±àºÅ£¬¿ÉÍ¨¹ı ÕÒµ½¸ÃÎÄ¼ş¡£FreeFile
record_length
´Ó´ÅÅÌÎÄ¼ş¶ÁÈ¡»òĞ´Èë´ÅÅÌÎÄ¼şµÄÃ¿Ìõ¼ÇÂ¼µÄ´óĞ¡£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£È±Ê


-------------------------------------------------------- KeyPgOpenCom ----

Open Com   ÎÄ¼ş´ò¿ª
  
´ò¿ªÓÃÓÚÊäÈëºÍÊä³öµÄ´®ĞĞ¶Ë¿Ú

Óï·¨
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

ÓÃ·¨
result = Open Com( options[,] As[#] filenumber )

²ÎÊı
options
Ò»¸ö×Ö·û´®£¬°üº¬ÓÃÓÚ¿ØÖÆ¶Ë¿ÚµÄÑ¡Ïî¡£
filenumber
Òª°ó¶¨µ½¶Ë¿ÚµÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
Open Com()³É¹¦Ê±·µ»Ø 32 Î» £ºÁã £¨£©£¬·ñÔò·µ»Ø·ÇÁã´íÎó´úÂë¡£Long0

ÃèÊö
´ËÃüÁî´ò¿ªPCµÄ´®ĞĞ¶Ë¿Ú£¬ÔÊĞíÊ¹ÓÃÕı³£µÄÎÄ¼şÃüÁî·¢ËÍºÍ½ÓÊÕÊı¾İ£¬Èç£¬£¬£¬...
Ö÷Òª²ÎÊıÊÇ a£¬ËüÖÁÉÙÃèÊöÁËÒª´ò¿ªµÄÍ¨ĞÅ¶


-------------------------------------------------------- KeyPgOpenCons ----

Open Cons   ????
  
?????????? ?stdin? ??? ?stdout? ?????????????

??
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

??
result = Open Cons( [For {Input|Output}[,]] As filenumber )
??????QB?????
Open Cons [For {Input|Output}] As filenumber

??
filenumber
???? stdin ? stdout ??????????? ???????FreeFile

???
?????????? 32 ? ??????? ?0?????????????Open Cons()Long

??
Open Cons?????? stdin ? stdout ?????????????????????????????? ? ???????? ??????????
 ?????? stdin ?????????? ????????? stdout ?????????? ?????????????????
 stdin ? stdout ?????????????? OS ????


-------------------------------------------------------- KeyPgOpenErr ----

Open Err   ÎÄ¼ş´ò¿ª
  
´ò¿ªÎÄ¼ş²Ù×÷µÄ±ê×¼ÊäÈë £¨stdin£© ºÍ±ê×¼´íÎó £¨stderr£© Á÷¡£

Óï·¨
Open Err [for mode] As [#]filenumber As Long

ÓÃ·¨
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

²ÎÊı
mode
ºöÊÓ¡£
filenumber
Î´Ê¹ÓÃµÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
Èç¹û³É¹¦Íê³É£¬Ôò·µ»Ø 32 Î» £ºÁã£¬·ñÔò·µ»Ø·ÇÁãÖµÒÔÖ¸Ê¾Ê§°Ü¡£LongOpen Err()

ÃèÊö
´ËÃüÁî´ò¿ªÒÔ¶ÁÈ¡ºÍĞ´Èë¿ØÖÆÌ¨£¬´Ó¶øÔÊĞíÊ¹ÓÃÆÕÍ¨ÎÄ¼şÃüÁîÖ´ĞĞ¶ÁÈ¡ºÍĞ´Èë²Ù×÷¡£
ÊÇ²»Í¬ÓÚÔÊĞí½«´íÎóÏûÏ¢ÓëÖ÷¿ØÖÆÌ¨Êä³ö·Ö¿ªÖØ¶


-------------------------------------------------------- KeyPgOpenLpt ----

Open Lpt   ÎÄ¼ş´ò¿ª
  
´ò¿ª´òÓ¡»úÉè±¸

Óï·¨
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

ÓÃ·¨
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

²ÎÊı
x
Ö¸¶¨¶Ë¿ÚºÅ¡£Èç¹ûÊ¡ÂÔ£¬Êä³ö½«·¢ËÍµ½ÏµÍ³´òÓ¡ºóÌ¨´¦Àí³ÌĞò¡£
Printer_Name
Òª´ò¿ªµÄ´òÓ¡»úµÄÃû³Æ¡£´Ë²ÎÊıÔÚ DOS ÉÏ±»ºöÂÔ¡£
TITLE=Doc_Title
´òÓ¡»úºóÌ¨´¦Àí³ÌĞò¿´µ½µÄ´òÓ¡×÷ÒµµÄ±êÌâ¡£´Ë²ÎÊıÔÚ DOS ÉÏ±»ºöÂÔ¡£
EMU=TTY
Ê¹ÓÃÇı¶¯³ÌĞòÎÄ±¾Ó³ÏñÔÚ Windows GDI ´òÓ¡»úÉÏÄ£Äâ TTY Êä³ö¡£´Ë²ÎÊıÔÚ DOS ºÍ Linux ÉÏ±»ºöÂÔ¡£
For Input|Output
×Ó¾äÊÇÔÊĞí¼æÈİµÄ£¬µ«Ëü±»ºöÂÔ¡£
filenumber
Òª·ÖÅä¸øÉè±¸µÄÎ´Ê¹ÓÃÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
Èç¹û³É¹¦Íê³É£¬Ôò·µ»Ø 32 Î» £º£¬·ñÔò·µ»Ø·ÇÁãÖµÒÔÖ¸Ê¾Ê§°Ü¡£Long0Open Lpt()

ÃèÊö
Open Lpt´ò


-------------------------------------------------------- KeyPgOpenPipe ----

Open Pipe   ÎÄ¼ş´ò¿ª
  
´ò¿ªÍâ²¿½ø³ÌµÄ±ê×¼ÊäÈë £¨stdin£© »òÊä³ö £¨stdout£© Á÷ÒÔ½øĞĞÎÄ¼ş²Ù×÷¡£

Óï·¨
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

ÓÃ·¨
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
»ò
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
£¨»òÀàËÆQBµÄÓï·¨£¬£©
Open Pipe filename For {Input|Output} As filenumber
£¨»ò£¬£©
Open Pipe filename For Binary access_type As filenumber

²ÎÊı
shell_command
ÒªÔÚ²Ù×÷ÏµÍ³ÃüÁîÍâ¿ÇÖĞÖ´ĞĞµÄÍâ²¿½ø³Ì¡£Ïà¶ÔÎÄ¼şÂ·¾¶Ïà¶ÔÓÚµ±Ç°Ä¿Â¼£¨Çë²Î¼û£©¡£ÎªĞèÒªÔÚÆä¿ÉÖ´ĞĞÂ·¾¶»ò²ÎÊıÖĞÊ¹ÓÃË«ÒıºÅµÄ½ø³Ì´ò¿ª¹ÜµÀÊ±£¬Õû¸ö¹ÜµÀ×Ö·û´®Ó¦Ç¶Ì×ÔÚË«ÒıºÅÄÚ¡£CurDir
access_type
µ÷ÓÃ½ø³ÌÇëÇóµÄ¶ÁÈ¡»òĞ´Èë·ÃÎÊÈ¨ÏŞµÄÀàĞÍ¡£
 Access {Read|}£¨  ¿ÉÒÔ´ò¿ªÍâ²¿½ø³ÌµÄ stdin »ò stdout Á÷£©Write
filenumber
Òª°ó¶¨µ½Íâ²¿½ø³ÌµÄ stdin »ò stdout Á÷µÄ¿ÉÓÃÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
ÔÚµÚÒ»´ÎÊ¹ÓÃÖĞ£¬·µ»Ø 32 Î» £º³É¹¦Ê±·µ»ØÁã £¨£©£¬·ñÔò·µ»Ø·ÇÁã´íÎó´úÂë¡


-------------------------------------------------------- KeyPgOpenScrn ----

Open Scrn   ÎÄ¼ş´ò¿ª
  
Ö±½Ó´ò¿ª¿ØÖÆÌ¨£¬½«ÊäÈëºÍÊä³ö×÷ÎªÎÄ¼ş

Óï·¨
Open Scrn [for mode] As [#]filenumber As Long

ÓÃ·¨
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

²ÎÊı
mode
ÒªÃ´»ò .Èç¹ûÊ¡ÂÔ£¬Ôò¼Ù¶¨Îª¡£InputOutputOutput
filenumber
Î´Ê¹ÓÃµÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
Èç¹û³É¹¦Íê³É£¬Ôò·µ»Ø 32 Î» £ºÁã £¨£©£¬·ñÔò·µ»Ø·ÇÁãÖµÒÔÖ¸Ê¾Ê§°Ü¡£Long0Open Scrn()

ÃèÊö
´ËÃüÁî½«×÷ÎªÎÄ¼ş´ò¿ªÊäÈëºÍÊä³ö¿ØÖÆÌ¨£¬ÔÊĞíÊ¹ÓÃÆÕÍ¨ÎÄ¼şÃüÁî¶ÔÆä½øĞĞ¶Á/Ğ´¡£
ÔÚÄ³Ğ©ÊµÏÖÖĞ£¬´ËÃüÁî¿ÉÄÜÊ¹ÓÃ¶Ô¿ØÖÆÌ¨


-------------------------------------------------------- KeyPgOpEqual ----

Operator = (Equal)   ÔËËã·û
  
±È½ÏÁ½¸ö±í´ïÊ½µÄÏàµÈĞÔ

Óï·¨
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

ÓÃ·¨
result = lhs = rhs

²ÎÊı
lhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
Èç¹û±í´ïÊ½ÏàµÈ£¬Ôò·µ»Ø¸º 1 £¨-1£©;Èç¹û±í´ïÊ½²»ÏàµÈ£¬Ôò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÔËËã·û = £¨ÏàµÈ£© ÊÇÒ»¸ö¶şÔªÔËËã·û£¬Ëü±È½ÏÁ½¸ö±í´ïÊ½µÄÏàµÈĞÔ²¢·µ»Ø½á¹û - Ò»¸ö²¼¶ûÖµ£¬Ö÷ÒªÒÔ£º ¸º 1 £¨-1£©


-------------------------------------------------------- KeyPgOpEqv ----

Operator Eqv (Equivalence)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ°´Î»ºÍ£¨µÈĞ§£©

Óï·¨
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs Eqv rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ°´Î»µÈĞ§ĞÔ¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄ°´Î»µÈĞ§ĞÔ£¬ÕâÊÇÒ»ÖÖÂß¼­ÔËËã£¬¸Ã²Ù×÷½«Éú³ÉÒ»¸öÖµ£¬ÆäÎ»ÉèÖÃÈ¡¾öÓÚ²Ù×÷ÊıµÄÎ»£¨¶ÔÓÚ½«²¼¶


-------------------------------------------------------- KeyPgOperator ----

Operator   ÔËËã·û
  
ÉùÃ÷»ò¶¨ÒåÖØÔØÔËËã·û¡£

Óï·¨
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator Delete[] ( buf  As Any Ptr )
End { Type | Class | Union }

{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }

Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator typename.[] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf  As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf  As Any Ptr ) [ Export ]

²ÎÊı
typename 
¡¢ ¡¢ »ò µÄÃû³Æ¡£TypeClassUnionEnum
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

ÃèÊö
ÄÚÖÃÔËËã·û£¨Èç ¡¢£©ÔÚ±í´ïÊ½ÖĞÊ¹ÓÃÊ±¾ßÓĞÔ¤¶¨ÒåµÄĞĞÎª¡£µ±ÔËËã·ûµÄÖÁÉÙÒ»¸ö²ÎÊıÊÇ ¡¢ ¡¢ »òÊı¾İÀàĞÍÊ±£¬¿ÉÒÔÖØÔØÕâĞ©ÔËËã·ûÒÔÖ´ĞĞÔ¤¶¨Òå²Ù×÷ÒÔÍâµÄ²Ù×÷¡£
ÔËËã·ûÖ»ÊÇº¯Êı¡£ÔËËã·û


-------------------------------------------------------- KeyPgOpExponentiate ----

Operator ^ (Exponentiate)   ÔËËã·û
  
½«ÊıÖµ±í´ïÊ½Ìá¸ßµ½Ò»¶¨¹¦Ğ§

Óï·¨
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

ÓÃ·¨
result = lhs ^ rhs

²ÎÊı
lhs
×ó²à»ù±¾±í´ïÊ½¡£
rhs
ÓÒ²àÖ¸Êı±í´ïÊ½¡£

·µ»ØÖµ
·µ»ØÌá¸ßµ½Ä³¸öÖ¸ÊıµÄ»ù±¾±í´ïÊ½µÄÃİ¡£

ÃèÊö
ÔËËã·û ^ £¨Ãİ£© ·µ»Ø»ù±í´ïÊ½ £¨£© Ìá¸ßµ½Ä³¸öÖ¸Êı±í´ïÊ½ £¨£© µÄ½á¹û¡£ ½öÊÊÓÃÓÚË«¸¡µãÊı£¬ÆäËûÀàĞÍµÄ²Ù×÷Êı½«ÔÚÖ´ĞĞÃİÖ®Ç°×ª»»ÎªË«¾«¶È¡£Ğ¡Ê


-------------------------------------------------------- KeyPgOpFor ----

Operator For (Iteration)   ÔËËã·û
  
ÉùÃ÷»ò¶¨Òå¾ßÓĞÓÃ»§¶¨ÒåÀàĞÍ±äÁ¿µÄÑ­»·Ê¹ÓÃµÄÔËËã·ûFor...Next

Óï·¨
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

ÓÃ·¨
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

²ÎÊı
(including arguments)
typename
¡¢»ò µÄÃû³ÆTypeClassUnion
stp,step_value
ÓÃ×÷ÔöÁ¿ÖµµÄ¶ÔÏótypename
iterator
ÓÃ×÷µü´úÆ÷µÄ¶ÔÏótypename
end_value
ÓÃ×÷Ñ­»·ÖÕÖ¹ÖµµÄ¶ÔÏótypename
start_value
×î³õÓÃÓÚ½«¹¹Ôì»ò¸³Öµ¸´ÖÆµ½µü´úÆ÷µÄ¶ÔÏótypename

ÃèÊö
Operator For£¬²¢ÇÒ¿ÉÒÔÔÚÓÃ»§¶¨ÒåµÄÀàĞÍ¶¨ÒåÖĞÖØÔØ£¬ÒÔÔÊĞí½«¸ÃÀàĞÍµÄ¶ÔÏóÓÃ×÷Ñ­»·ÖĞµÄµü´úÆ÷ºÍ²½ÖèÖµ¡£
ÓëËùÓĞ·Ç¾²


-------------------------------------------------------- KeyPgOpGreaterThan ----

Operator > (Greater Than)   ÔËËã·û
  
±È½ÏÒ»¸ö±í´ïÊ½´óÓÚÁíÒ»¸ö±í´ïÊ½

Óï·¨
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

ÓÃ·¨
result = lhs > rhs

²ÎÊı
lhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
Èç¹û×ó²à±í´ïÊ½´óÓÚÓÒ²à±í´ïÊ½£¬Ôò·µ»Ø¸º 1 £¨-1£©;Èç¹ûĞ¡ÓÚ»òµÈÓÚ£¬Ôò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÔËËã·û > £¨´óÓÚ£©ÊÇ


-------------------------------------------------------- KeyPgOpGreaterThanOrEqual ----

Operator >= (Greater Than Or Equal)   ÔËËã·û
  
±È½Ï´óÓÚ»òµÈÓÚÁíÒ»¸ö±í´ïÊ½µÄ±í´ïÊ½

Óï·¨
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

ÓÃ·¨
result = lhs >= rhs

²ÎÊı
lhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
Èç¹û×ó²à±í´ïÊ½´óÓÚ»òµÈÓÚÓÒ²à±í´ïÊ½£¬Ôò·µ»Ø¸º 1 £¨-1£©;Èç¹ûĞ¡ÓÚ£¬Ôò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÔËËã·û >=£¨´óÓÚ»òµÈÓÚ£©ÊÇÒ»¸ö¶şÔªÔ


-------------------------------------------------------- KeyPgOpImp ----

Operator Imp (Implication)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ°´Î»ºÍ£¨°µÊ¾£©

Óï·¨
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs Imp rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ°´Î»º¬Òå¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄ°´Î»º¬Òå£¬ÕâÊÇÒ»ÖÖÂß¼­ÔËËã£¬¸Ã²Ù×÷½«Éú³ÉÒ»¸öÖµ£¬ÆäÎ»ÉèÖÃÈ¡¾öÓÚ²Ù×÷ÊıµÄÎ»£¨¶ÔÓÚ½«²¼¶ûÖµ


-------------------------------------------------------- KeyPgOpIntegerDivide ----

Operator \ (Integer Divide)   ÔËËã·û
  
»®·ÖÁ½¸ö±í´ïÊ½Integer

Óï·¨
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

ÓÃ·¨
result = lhs \ rhs

²ÎÊı
lhs
×ó²àµÄºìÀû±í´ïÊ½¡£
rhs
ÓÒ²à³ıÊı±í´ïÊ½¡£

·µ»ØÖµ
·µ»Ø¹ÉÏ¢ºÍ³ıÊıµÄÉÌ¡£Integer

ÃèÊö
ÔËËã·û \£¨ÕûÊı³ı·¨£©½«Á½¸ö±í´ïÊ½Ïà³ı²¢·µ»Ø½á¹û¡£¸¡µãÊıÖµÍ¨¹ıÏòÉÏ»òÏòÏÂÉáÈë×ª»»Îª£¬²¢ÇÒÉú³ÉµÄÉÌµÄĞ¡Êı²¿·


-------------------------------------------------------- KeyPgOpIs ----

Operator Is (Run-Time Type Information)   ÔËËã·û
  
¼ì²é¶ÔÏóÊÇ·ñÓë´ÓÆä±àÒëÊ±ÀàĞÍÅÉÉúµÄÀàĞÍ
¼æÈİ£¨ÔÚ¼Ì³ĞÉÏÏÂÎÄÖĞ£©

Óï·¨
result = expression Is  typename

²ÎÊı
expression
Òª¼ì²éµÄ±í´ïÊ½£¬ÊÇÖ±½Ó»ò¼ä½ÓÅÉÉú×Ô Ê¹ÓÃµÄ ÀàĞÍµÄ¶ÔÏó¡£ObjectExtends
typename
Òª¼ì²éµÄ×ÓÀàĞÍ¡£´ËÀàĞÍ±ØĞëÖ±½Ó»ò¼ä½ÓÅÉÉú×Ô±í´ïÊ½ÀàĞÍ£¨¶ÔÏóµÄ±àÒëÊ±ÀàĞÍ£©¡£

·µ»ØÖµ
Èç¹û±í´ïÊ½ÊÇÊµÀàĞÍµÄ¶ÔÏó»òÆä´Ó±í´ïÊ½ÀàĞÍÅÉÉúµÄ»ùÀàĞÍÖ®Ò»£¬Ôò·µ»Ø¸º 1 £¨£©;Èç¹û±í´ïÊ½ÊÇ²»¼æÈİÀàĞÍµÄ¶ÔÏó£¬Ôò·µ»ØÁã £¨£©¡£-1typename0

ÃèÊö
¸ÃÔËËã·û±ØĞëÓë¼Ì³Ğ½áºÏÊ¹ÓÃ£¬ÒÔ±ã´


-------------------------------------------------------- KeyPgOpLessThan ----

Operator < (Less Than)   ÔËËã·û
  
±È½ÏÒ»¸ö±í´ïÊ½Ğ¡ÓÚÁíÒ»¸ö±í´ïÊ½

Óï·¨
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

ÓÃ·¨
result = lhs < rhs

²ÎÊı
lhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
Èç¹û×ó²à±í´ïÊ½Ğ¡ÓÚÓÒ²à±í´ïÊ½£¬Ôò·µ»Ø¸º 1 £¨-1£©;Èç¹û´óÓÚ»òµÈÓÚ£¬Ôò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÔËËã·û < £¨Ğ¡ÓÚ£© ÊÇÒ»¸


-------------------------------------------------------- KeyPgOpLessThanOrEqual ----

Operator <= (Less Than Or Equal)   ÔËËã·û
  
±È½ÏĞ¡ÓÚ»òµÈÓÚÁíÒ»¸ö±í´ïÊ½µÄ±í´ïÊ½

Óï·¨
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

ÓÃ·¨
result = lhs <= rhs

²ÎÊı
lhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
Èç¹û×ó²à±í´ïÊ½Ğ¡ÓÚ»òµÈÓÚÓÒ²à±í´ïÊ½£¬Ôò·µ»Ø¸º 1 £¨-1£©;Èç¹û´óÓÚ£¬Ôò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÔËËã·û <=£¨Ğ¡ÓÚ»òµÈÓÚ


-------------------------------------------------------- KeyPgOpLet ----

Operator Let (Assign)   ÔËËã·û
  
Ö¸Ê¾ÖØÔØÔËËã·û = £¨¸³Öµ£© Ê±µÄ¸³ÖµÔËËã·û

Óï·¨
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }

Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

ÓÃ·¨
lhs = rhs
»ò
lhs => rhs

²ÎÊı
typename 
¡¢ »ò µÄÃû³Æ¡£TypeClassUnion
lhs
Òª·ÖÅäµ½µÄ±äÁ¿¡£
rhs
Òª·ÖÅäµÄÖµ¡£

ÃèÊö
LetÓÃÓÚÖØÔØÔËËã·û²¢½«ÆäÓë±È½ÏÔËËã·ûÇø·Ö¿ªÀ´¡£
½«Í¨¹ıµ÷ÓÃ ÖĞ¶¨ÒåµÄÔËËã·û¹ı³Ì½« ·ÖÅä¸ø ¡£
Õâ°üÀ¨Í¨¹ıÊ¹ÓÃ £¨»ò £© ¸³Öµ´Óº¯Êı·µ»ØµÄ¶ÔÏóµÄÇé¿ö¡£
Ä¿


-------------------------------------------------------- KeyPgOpLetlist ----

Operator Let() (Assignment)   ÔËËã·û
  
½«ÓÃ»§¶¨ÒåÀàĞÍµÄ×Ö¶Î·ÖÅä¸ø±äÁ¿ÁĞ±í

Óï·¨
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
»ò
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

²ÎÊı
variable1 [, variable2 [, ... ]]
ÒÔ¶ººÅ·Ö¸ôµÄ±äÁ¿ÁĞ±í£¬ÓÃÓÚ½ÓÊÕ±äÁ¿×Ö¶ÎµÄÖµ¡£UDT
UDT_var
ÓÃ»§¶¨ÒåµÄÀàĞÍ±äÁ¿¡£

ÃèÊö
½«±äÁ¿×Ö¶ÎÖĞµÄÖµ·ÖÅä¸ø±äÁ¿ÁĞ±í¡£
µ±Îª a Base Ê±£¬ÓÉÔËËã·û·ÖÅäµ


-------------------------------------------------------- KeyPgOpMemberAccess ----

Operator . (Member Access)   ÔËËã·û
  
´Ó¶Ô¶ÔÏóµÄÒıÓÃ·µ»Ø¶Ô³ÉÔ±µÄÒıÓÃ

Óï·¨
Declare Operator . ( ByRef lhs As T ) ByRef As U

ÓÃ·¨
result = lhs . rhs

²ÎÊı
lhs
¶ÔÏó¡£
T
ÓÃ»§¶¨ÒåµÄÀàĞÍ¡£
rhs
Òª·ÃÎÊµÄ³ÉÔ±µÄÃû³Æ¡£
U
ÒıÓÃµÄÀàĞÍ¡£rhs

·µ»ØÖµ
·µ»Ø¶Ô Ö¸¶¨µÄ³ÉÔ±µÄÒıÓÃ¡£rhs

ÃèÊö
ÔËËã·û .£¨³


-------------------------------------------------------- KeyPgOpModulus ----

Operator Mod (Modulus)   ÔËËã·û
  
´Ó³ı·¨²Ù×÷ÖĞ²éÕÒÊ£Óà²¿·Ö

Óï·¨
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

ÓÃ·¨
result = lhs Mod rhs

²ÎÊı
lhs
×ó²àµÄºìÀû±í´ïÊ½¡£
rhs
ÓÒ²à³ıÊı±í´ïÊ½¡£

·µ»ØÖµ
·µ»Ø³ı·¨²Ù×÷µÄÆäÓà²¿·Ö¡£

ÃèÊö
ÔËËã·û Mod£¨Ä£Êı£©³ıÒÔÁ½¸ö±í´ïÊ½²¢·µ»ØÓàÊı¡£¸


-------------------------------------------------------- KeyPgOpMultiply ----

Operator * (Multiply)   ÔËËã·û
  
½«Á½¸öÊıÖµ±í´ïÊ½Ïà³Ë

Óï·¨
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

ÓÃ·¨
result = lhs * rhs

²ÎÊı
lhs
×ó²à³ËÊı±í´ïÊ½¡£
rhs
ÓÒ²à³ËÊı±í´ïÊ½¡£

·µ»ØÖµ
·µ»ØÁ½¸ö³ËÊıµÄ³Ë»ı¡£

ÃèÊö
ÔËËã·û * £¨³Ë·¨£


-------------------------------------------------------- KeyPgOpNegate ----

Operator - (Negate)   ÔËËã·û
  
¸ü¸ÄÊıÖµ±í´ïÊ½µÄ·ûºÅ

Óï·¨
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

ÓÃ·¨
result = - rhs

²ÎÊı
rhs
Òª·ñ¶¨µÄÓÒ²àÊıÖµ±í´ïÊ½¡£

·µ»ØÖµ
·µ»Ø±í´ïÊ½µÄ¸ºÊı¡£

ÃèÊö
ÔËËã·û - £¨·ñ¶¨£©ÊÇ·ñ


-------------------------------------------------------- KeyPgOpNew ----

Operator New Expression   ÔËËã·û
  
ÓÃÓÚ¶¯Ì¬·ÖÅäÄÚ´æ²¢¹¹ÔìÖ¸¶¨ÀàĞÍµÄÊı¾İµÄÔËËã·û¡£

ÓÃ·¨
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

²ÎÊı
datatype
Òª´´½¨µÄÊı¾İÀàĞÍµÄÃû³Æ¡£
initializers
±äÁ¿µÄ³õÊ¼Öµ¡£
count
Òª·ÖÅäµÄÔªËØµÄÈ·ÇĞÊıÁ¿¡£

·µ»ØÖµ
Êı¾İÀàĞÍÎªÖ¸ÏòĞÂ·ÖÅäÊı¾İµÄÖ¸Õë£¬Èç¹ûÄÚ´æ·ÖÅäÊ§°Ü£¬ÔòÎª¿ÕÖ¸Õë¡£

ÃèÊö
ÔËËã·û¶¯Ì¬·ÖÅäÄÚ´æ²¢¹¹ÔìÖ¸¶¨µÄÊı¾İÀàĞÍ¡£
¶ÔÓÚ¼òµ¥ÀàĞÍ£¨ÈçÕûÊı£©£¬¿ÉÒÔ¸ø³ö³õÊ¼Öµ¡£¶ÔÓÚÃ»ÓĞ¹¹Ôìº¯Êı


-------------------------------------------------------- KeyPgOpNewOverload ----

Operator New Overload   ÔËËã·û
  
³ÉÔ±ÔËËã·û£¬ÓÃÓÚ¹ıÔØÓ¦ÓÃÓÚ UDT£¨ÓÃ»§¶¨ÒåµÄÀàĞÍ£©Ê±Ìá¹©µÄ¶¯Ì¬ÄÚ´æ·ÖÅä¹ı³Ì²¿·Ö¡£Operator New Expression

Óï·¨
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

²ÎÊı
size 
Òª·ÖÅäµÄ×Ö½ÚÊı¡£
·µ»ØÖµ
ÀàĞÍÎª Any Ptr µÄÖ¸Õë£¬Ö¸ÏòĞÂ·ÖÅäµÄÄÚ´æµÄ¿ªÊ¼¡£

ÃèÊö
³ÉÔ±ÔËËã·ûÔÚÓ¦ÓÃÓÚ UDT£¨ÓÃ»§¶¨ÒåÀàĞÍ£©Ê±£¬»áÖØÔØ¸ÃÔËËã·ûÌá¹©µÄ¶¯Ì¬ÄÚ´æ·ÖÅä½ø³Ì²¿·Ö¡£Òò´Ë£¬ÓÃ»§¿ÉÒÔ¶¨Òå×Ô¼ºµÄ¶¯Ì¬ÄÚ´æ·ÖÅ


-------------------------------------------------------- KeyPgOpNext ----

Operator Next (Iteration)   ÔËËã·û
  
È·¶¨ÊÇ·ñÓ¦ÖÕÖ¹Ñ­»·For...Next

Óï·¨
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

ÓÃ·¨
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

²ÎÊı
(including arguments)
typename
¡¢»ò µÄÃû³ÆTypeClassUnion
cond,end_value
ÓÃ×÷Ñ­»·ÖÕÖ¹ÖµµÄ¶ÔÏótypename
stp,step_value
ÓÃ×÷ÔöÁ¿ÖµµÄ¶ÔÏótypename
iterator
ÓÃ×÷µü´úÆ÷µÄ¶ÔÏótypename
start_value
×î³õÓÃÓÚ½«¹¹Ôì»ò¸³Öµ¸´ÖÆµ½µü´úÆ÷µÄ¶ÔÏótypename

ÃèÊö
Operator For£¬²¢ÇÒ¿ÉÒÔÔÚÓÃ»§¶¨ÒåµÄÀàĞÍ¶¨ÒåÖĞÖØÔØ£¬ÒÔÔÊĞí½«¸ÃÀàĞÍµÄ¶ÔÏóÓÃ×÷Ñ­»·ÖĞµÄµü´úÆ÷ºÍ²½ÖèÖµ¡£
ÓëËùÓĞ·Ç¾²Ì¬³ÉÔ±¹ı³ÌÒ»Ñù£


-------------------------------------------------------- KeyPgOpNot ----

Operator Not (Complement)   ÔËËã·û
  
·µ»ØÊıÖµµÄ°´Î»·Ç²¹Âë

Óï·¨
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer

Declare Operator Not ( ByRef rhs As T ) As T

ÓÃ·¨
result = Not rhs

²ÎÊı
rhs
ÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£

·µ»ØÖµ
·µ»ØÆä²Ù×÷ÊıµÄ°´Î»²¹¼¯¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄ°´Î»²¹¼¯£¬ÕâÊÇÒ»¸öÂß¼­ÔËËã£¬ËüÉú³ÉÒ»¸öÖµ£¬ÆäÎ»ÉèÖÃÈ¡¾öÓÚ²Ù×÷ÊıµÄÎ»¡£
 £¨¶ÔÓÚ²¼¶ûÀàĞÍ£


-------------------------------------------------------- KeyPgOpNotEqual ----

Operator <> (Not Equal)   ÔËËã·û
  
±È½Ï²»µÈÊ½µÄÁ½¸ö±í´ïÊ½

Óï·¨
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

ÓÃ·¨
result = lhs <> rhs

²ÎÊı
lhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄ×ó²à±í´ïÊ½¡£
rhs
ÒªÓëÖ®½øĞĞ±È½ÏµÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
Èç¹û±í´ïÊ½²»ÏàµÈ£¬Ôò·µ»Ø¸º 1 £¨-1£©;Èç¹û±í´ïÊ½ÏàµÈ£¬Ôò·µ»ØÁã £¨0£©¡£

ÃèÊö
ÔËËã·û <> £¨²»µÈÓÚ£© ÊÇÒ»¸ö¶şÔªÔËËã·û£¬Ëü±È½ÏÁ½¸ö±í´ïÊ½µÄ²»µÈÊ½²¢·µ»Ø½á¹û - Ò


-------------------------------------------------------- KeyPgOpOr ----

Operator Or (Inclusive Disjunction)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ°´Î»»ò£¨°üÀ¨ÎöÈ¡£©

Óï·¨
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs Or rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ°´Î»ÎöÈ¡¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄ°´Î»ÎöÈ¡£¬ÕâÊÇÒ»ÖÖÂß¼­ÔËËã£¬¸Ã²Ù×÷²úÉúÒ»¸öÖµ£¬ÆäÎ»ÉèÖÃÈ¡¾öÓÚ²Ù×÷ÊıµÄÎ»£¨¶ÔÓÚ½«²¼¶ûÖµ


-------------------------------------------------------- KeyPgOpOrElse ----

Operator Orelse (Short Circuit Inclusive Disjunction)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ¶ÌÂ·»ò£¨·Ç¶ÀÕ¼·ÖÀë£©

Óï·¨
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs OrElse rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ¶ÌÂ·»ò£¨°üÀ¨ÎöÈ¡£©¡£

ÃèÊö
´ËÔËËã·û¼ÆËã×ó²à±í´ïÊ½¡£Èç¹û½á¹ûÎª·ÇÁã£¬ÔòÁ¢¼´·µ»Ø£¨true£©¡£Èç¹û½á¹ûÎªÁã£¬Ôò¼ÆËãÓÒ²à£¬²¢·µ»ØÆäÂß¼­½á


-------------------------------------------------------- KeyPgOpPlacementNew ----

Operator Placement New   ÔËËã·û
  
ÓÃÓÚÔÚÖ¸¶¨ÄÚ´æµØÖ·´¦¹¹Ôì¶ÔÏóµÄÔËËã·û¡£

Óï·¨
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

²ÎÊı
address 
ÄÚ´æÖĞÒª¹¹ÔìµÄÎ»ÖÃ¡£À¨ºÅ²»ÊÇ¿ÉÑ¡µÄ¡£
initializers
±äÁ¿µÄ³õÊ¼Öµ¡£
datatype
Òª¹¹ÔìµÄÊı¾İÀàĞÍµÄÃû³Æ¡£
count
Òª¹¹ÔìµÄÔªËØÊı¡£

·µ»ØÖµ
Ö¸ÏòĞÂ¹¹ÔìÊı¾İµÄÀàĞÍµÄÖ¸Õë¡£datatype

ÃèÊö
ÔËËã·ûÔÚÖ¸¶¨µÄÄÚ´æÎ»ÖÃ¹¹ÔìÖ¸¶¨µÄÊı¾İÀàĞÍ¡£
¶ÔÓÚ¼òµ¥ÀàĞÍ£¨ÈçÕûÊı£©£¬¿ÉÒÔ¸ø³ö³õÊ¼Öµ¡£¶ÔÓÚÃ»ÓĞ s µÄÀàĞÍ£¬¿É


-------------------------------------------------------- KeyPgOpPpConcat ----

Operator ## (Preprocessor Concatenate)   ÔËËã·û
  
ÓÃÓÚÁ¬½Ó×Ö·û´®µÄÔ¤´¦ÀíÆ÷ÔËËã·û

Óï·¨
text##text

ÃèÊö
´ËÔËËã·ûÍ¨¹ıÁ¬½ÓÁîÅÆÁ½²àµÄÎÄ±¾À´´´½¨ĞÂÁîÅÆ¡£´ËÎÄ±¾¿ÉÒÔ±»ÆäËûºêÊ¶±ğ²¢½øÒ»²½À©Õ¹¡£Ò»ÖÖÓÃÍ¾ÊÇ´´½¨Ò»¸öºê£¬¸Ãºê¸ù¾


-------------------------------------------------------- KeyPgOpPpEscape ----

Operator ! (Escaped String Literal)   ÔËËã·û
  
ÏÔÊ½Ö¸Ê¾Ó¦Îª×ªÒåĞòÁĞ´¦Àí×Ö·û´®ÎÄ±¾¡£

Óï·¨
!"text"

²ÎÊı
!
Ô¤´¦ÀíÆ÷×ªÒå×Ö·û´®ÔËËã·û
"text"	
°üº¬×ªÒå×Ö·ûµÄ×Ö·û´®ÎÄ±¾

ÃèÊö
´ËÔËËã·ûÏÔÊ½Ö¸Ê¾Ó¦´¦ÀíÆäºóÃæµÄ×Ö·û´®ÎÄ±¾£¨ÓÃË«ÒıºÅÀ¨ÆğÀ´£©×÷Îª×ªÒåĞòÁĞ¡£ÕâÊÇÒ»¸öÔ¤´¦ÀíÆ÷ÔËËã·û£¬Ö»ÄÜÔÚ±àÒëÊ±Óë×Ö·û´®ÎÄ±¾Ò»ÆğÊ¹ÓÃ¡£
×Ö·û´®ÎÄ±¾µ


-------------------------------------------------------- KeyPgOpPpNoescape ----

Operator $ (Non-Escaped String Literal)   ÔËËã·û
  
ÏÔÊ½Ö¸Ê¾²»Ó¦Îª×ªÒåĞòÁĞ´¦Àí×Ö·û´®ÎÄ±¾¡£

Óï·¨
$"text"

²ÎÊı
$
Ô¤´¦ÀíÆ÷·Ç×ªÒåÔËËã·û
"text"	
×Ö·û´®ÎÄ±¾

ÃèÊö
´ËÔËËã·ûÏÔÊ½Ö¸Ê¾²»Ó¦´¦ÀíÆäºóÃæµÄ×Ö·û´®ÎÄ±¾£¨ÓÃË«ÒıºÅÀ¨ÆğÀ´£©×÷Îª×ªÒåĞòÁĞ¡£ÕâÊÇÒ»¸öÔ¤´¦ÀíÆ÷ÔËËã·û£¬Ö»ÄÜÔÚ±àÒëÊ±Óë×Ö·û´®ÎÄ±¾Ò»ÆğÊ¹ÓÃ¡£
×Ö·û´®ÎÄ±¾µÄÄ¬ÈÏĞ


-------------------------------------------------------- KeyPgOpPpStringize ----

Operator # (Preprocessor Stringize)   ÔËËã·û
  
ÓÃÓÚ½«ºê²ÎÊı×ª»»Îª×Ö·û´®µÄÔ¤´¦ÀíÆ÷ÔËËã·û

Óï·¨
#macro_argument

ÃèÊö
´ËÔËËã·û½« ×ª»»ÎªÒ»¸ö×Ö·û´®£¬ÆäÖµÎª²ÎÊıµÄÃû³Æ¡£´ËÌæ»»ÊÇÔÚºêÀ©Õ¹ÆÚ¼ä£¨±àÒëÖ®Ç°£©½øĞĞµÄ¡£
 ×¢Òâ£ºÓÉÓÚ´Ë¹¦ÄÜ£¬ÔÚºêÖĞÊ¹ÓÃÎÄ¼ş´¦ÀíÓï¾äÊ±Ó¦Ğ¡ĞÄ¡£ÓÉÓÚ²ÉÓÃ¡°#¡±²ÎÊıµÄÎÄ¼ş´¦ÀíÓ


-------------------------------------------------------- KeyPgOpProcptr ----

Operator Procptr (Procedure Pointer)   ÔËËã·û
  
·µ»Ø¹ı³ÌµÄµØÖ·

Óï·¨
Declare Operator ProcPtr ( ByRef identifier As proctype [, proctype ] ) As proctype Ptr

ÓÃ·¨
result = ProcPtr ( identifier [, proctype ] )

²ÎÊı
identifier
¹ı³Ì±êÊ¶·û¡£
proctype
ÈÎºÎÀàĞÍµÄ¹ı³Ì£¨×Ó/º¯Êı£©¡£

·µ»ØÖµ
·µ»Ø¹ı³ÌµÄµØÖ·¡£

ÃèÊö
´ËÔËËã·û·µ»Ø »ò ¹ı³ÌµÄµØÖ·¡£
Ê¹ÓÃÁ½¸ö²ÎÊıÓï·¨Ê±£¬ÕâÔÊĞí»ùÓÚ×Ó/º¯ÊıÀàĞÍ»ñÈ¡ ¹ı³ÌÖ¸Õë¡£
ÕâÑù¾Í¿ÉÒÔÏÔÊ½Ö¸¶¨×Ó/º¯ÊıµÄ¡°ÀàĞÍ¡±£¬ÒÔ½â¾ö¹ı³ÌÖØÔØ»ò¼ì²é·Ç


-------------------------------------------------------- KeyPgOpPtrIndex ----

Operator [] (Pointer Index)   ÔËËã·û
  
·µ»Ø¶ÔÀ´×ÔµØÖ·µÄÄÚ´æÆ«ÒÆÁ¿µÄÒıÓÃ

Óï·¨
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T


ÓÃ·¨
result = lhs [ rhs ]
or
lhs [ rhs ] = value

²ÎÊı
lhs
»ùÖ·¡£
rhs
´Ó µÄÓĞ·ûºÅÆ«ÒÆÁ¿¡£lhs
T
ÈÎºÎÊı¾İÀàĞÍ¡£

ÃèÊö
´ËÔËËã·û·µ»Ø¶ÔÄÚ´æÖĞ¾à»ùÖ·Ò»¶¨¾àÀëµÄÖµµÄÒıÓÃ¡£Ëü±¾ÖÊÉÏÊÇ¡°¡±µÄ¼òĞ´£¬ÒòÎªÒıÓÃ¿ÉÒÔ±»ÈÏÎªÊÇ¾ßÓĞÄÚ´æÎ»ÖÃ¡°¡±×÷ÎªÖµµÄÖ¸Õë£¬²¢ÇÒÒşÊ½È¡ÏûÒıÓÃ;Á½Õß¶¼×öÍ¬ÑùµÄ


-------------------------------------------------------- KeyPgOpPtrMemberAccess ----

Operator -> (Pointer To Member Access)   ÔËËã·û
  
´ÓÖ¸Ïò¶ÔÏóµÄÖ¸Õë·µ»Ø¶Ô³ÉÔ±µÄÒıÓÃ

Óï·¨
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

ÓÃ·¨
result = lhs -> rhs

²ÎÊı
lhs
¶ÔÏóµÄµØÖ·¡£
T
ÓÃ»§¶¨ÒåµÄÀàĞÍ¡£
rhs
Òª·ÃÎÊµÄ³ÉÔ±µÄÃû³Æ¡£
U
ÒıÓÃµÄÀàĞÍ¡£rhs

·µ»ØÖµ
·µ»Ø¶Ô Ö¸¶¨µÄ³ÉÔ±µÄÒıÓÃ¡£rhs

ÃèÊö
ÔËËã·û ->£¨Ö¸Ïò³ÉÔ±·ÃÎÊµÄÖ¸Õë£©Í¨¹ıÖ¸ÏòÄ³¸ö¶ÔÏóµÄ³ÉÔ±µÄÖ¸Õë·µ»Ø¶Ô¸Ã¶ÔÏóµÄÒıÓÃ¡£Ëü¾ßÓĞÈ¡ÏûÒıÓÃÖ¸Ïò¶ÔÏóµÄÖ¸Õë£¬È»ºóÊ¹ÓÃ µÄĞ§¹


-------------------------------------------------------- KeyPgOpShiftLeft ----

Operator Shl (Shift Left)   ÔËËã·û
  
½«ÊıÖµ±í´ïÊ½µÄÎ»Ïò×óÒÆ¶¯

Óï·¨
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shl ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shl ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

ÓÃ·¨
result = lhs Shl rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
rhs
ÓÒ²àÆ«ÒÆ±í´ïÊ½¡£

·µ»ØÖµ
·µ»ØÏò×óÒÆ¶¯´ÎÊıµÄ½á¹û¡£lhsrhs

ÃèÊö
ÔËËã·û Shl£¨Ïò×óÒÆ£©½«×ó²à±í´ïÊ½ £¨£© ÖĞµÄËùÓĞÎ»Ïò×óÒÆ¶¯£¬ÓÉÓÒ²à±í´ïÊ½ £¨£© Ö¸¶¨¶à´Î¡£´ÓÊıÖµÉÏ½²£¬½á¹ûÓë ¡°¡± ÏàÍ¬¡£ÀıÈç£¬¡°¡± ·µ»Ø¶ş½øÖÆÊı£¬¡°


-------------------------------------------------------- KeyPgOpShiftRight ----

Operator Shr (Shift Right)   ÔËËã·û
  
½«ÊıÖµ±í´ïÊ½µÄÎ»ÏòÓÒÒÆ¶¯

Óï·¨
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shr ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shr ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

ÓÃ·¨
result = lhs Shr rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
rhs
ÓÒ²àÆ«ÒÆ±í´ïÊ½¡£

·µ»ØÖµ
·µ»ØÓÒÒÆÒÆ´ÎÊıµÄ½á¹û¡£lhsrhs

ÃèÊö
ÔËËã·û Shr£¨ÏòÓÒÒÆ¶¯£©½«×ó²à±í´ïÊ½ £¨£© ÖĞµÄËùÓĞÎ»ÏòÓÒÒÆ¶¯£¬ÓÉÓÒ²à±í´ïÊ½ £¨£© Ö¸¶¨¶à´Î¡£´ÓÊıÖµÉÏ½²£¬½á¹ûÓë¡° / ¡±ÏàÍ¬¡£ÀıÈç£¬¡°¡± ·µ»Ø¶ş½øÖÆÊı£¬


-------------------------------------------------------- KeyPgOpStep ----

Operator Step (Iteration)   ÔËËã·û
  
µİÔöÑ­»·µÄµü´úÆ÷For...Next

Óï·¨
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

ÓÃ·¨
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

²ÎÊı
(including arguments)
typename
¡¢»ò µÄÃû³ÆTypeClassUnion
stp,step_value
ÓÃ×÷ÔöÁ¿ÖµµÄ¶ÔÏótypename
iterator
ÓÃ×÷µü´úÆ÷µÄ¶ÔÏótypename
end_value
ÓÃ×÷Ñ­»·ÖÕÖ¹ÖµµÄ¶ÔÏótypename
start_value
×î³õÓÃÓÚ½«¹¹Ôì»ò¸³Öµ¸´ÖÆµ½µü´úÆ÷µÄ¶ÔÏótypename

ÃèÊö
Operator For£¬²¢ÇÒ¿ÉÒÔÔÚÓÃ»§¶¨ÒåµÄÀàĞÍ¶¨ÒåÖĞÖØÔØ£¬ÒÔÔÊĞí½«¸ÃÀàĞÍµÄ¶ÔÏóÓÃ×÷Ñ­»·ÖĞµÄµü´úÆ÷ºÍ²½ÖèÖµ¡£
ÓëËùÓĞ·Ç¾²Ì¬³ÉÔ±¹ı³ÌÒ»Ñù£¬


-------------------------------------------------------- KeyPgOpStringIndex ----

Operator [] (String Index)   ÔËËã·û
  
·µ»Ø¶Ô×Ö·û´®ÖĞ×Ö·ûµÄÊıÖµµÄÒıÓÃ

Óï·¨
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

ÓÃ·¨
result = lhs [ rhs ]
or
lhs [ rhs ] = value

²ÎÊı
lhs
×Ö·û´®£¨×Ö·û´®ÒıÓÃ£¬¶ø²»ÊÇ×÷Îª±¾µØ¸±±¾·µ»ØµÄ×Ö·û´®£©¡£
rhs
ÓëµÚÒ»¸ö×Ö·ûµÄ´ÓÁã¿ªÊ¼µÄÆ«ÒÆÁ¿¡£
T
¿í×Ö·ûÀàĞÍ£¨ÒòÆ½Ì¨¶øÒì£©¡£

ÃèÊö
ÒÔÏÂÔËËã·û·µ»Ø¶Ô×Ö·û´®ÖĞÌØ¶¨×Ö·ûµÄÊıÖµµÄÒıÓÃ£º
¶ÔÓÚÒ»¸ö»òÒ»¸ö£ºStringZString
a£¨°üº¬×Ö·ûµÄ ASCII Öµ£©¡£UByte
¶


-------------------------------------------------------- KeyPgOpStrptr ----

Operator Strptr (String Pointer)   ÔËËã·û
  
·µ»Ø×Ö·û´®µÄ×Ö·ûÊı¾İµÄµØÖ·¡£

Óï·¨
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

ÓÃ·¨
result = StrPtr ( lhs )

²ÎÊı
lhs
×Ö·û´®¡£

·µ»ØÖµ
Ïò×Ö·û´®/×Ö·û´®µÄ×Ö·ûÊı¾İ·µ»Ø a£¨Èç¹ûÎª¿Õ×Ö·û´®£¬ÔòÎª null Öµ£©¡£ZString/WString Ptr

ÃèÊö
´ËÔËËã·û·µ»ØÖ¸Ïò×Ö·û´®/×Ö·û´®µÄ×Ö·ûÊı¾İ¿ªÍ·µÄ ¡£ ÊÇ»ñÈ¡×Ö·û´®×Ö·ûÊı¾İµØÖ·µÄÕıÈ··½·¨¡£
Èç¹ûÎª¿Õ£¨½öÊÊÓÃÓÚ³¤¶È¿É±äµÄ×Ö·û´®£©£¬Ôò·µ»Ø¿ÕÖ¸


-------------------------------------------------------- KeyPgOpSubtract ----

Operator - (Subtract)   ÔËËã·û
  
¼õÈ¥Á½¸ö±í´ïÊ½

Óï·¨
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer

Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

ÓÃ·¨
result = lhs - rhs

²ÎÊı
lhs
Òª´ÓÖĞ¼õÈ¥µÄ×ó²à±í´ïÊ½¡£
rhs
Òª¼õÈ¥µÄÓÒ²à±í´ïÊ½¡£
T
ÈÎºÎÖ¸ÕëÀàĞÍ¡£

·µ»ØÖµ
·µ»ØÁ½¸ö±í´ïÊ½µÄ¼õ·¨¡£

ÃèÊö
µ±×ó²àºÍÓÒ²à±í´ïÊ½ÊÇÊıÖµÊ±£¬ÔËËã·û - £¨¼õÈ¥£©·µ»ØÁ½¸öÖµµÄ¼õ·¨¡£
Èç¹û×ó²àºÍÓÒ²à±í´ïÊ½¶¼ÊÇÀàĞÍ£¬Ôò¶ÔÓÚÄ³ÖÖÀàĞÍ£¬ÔËËã·û¶ÔµØÖ·Ö´ĞĞÖ¸Õë¼õ·


-------------------------------------------------------- KeyPgOption ----

Option()
  
Ö¸¶¨·ûºÅµÄÆäËûÊôĞÔºÍ/»òÌØÕ÷¡£

Óï·¨
Option( "literal-text" )

²ÎÊı
literal-text
Ö¸¶¨Ñ¡ÏîµÄÎÄ×ÖÎÄ±¾¡£Çë²ÎÔÄËµÃ÷¡£

ÃèÊö
Option()ÔÊĞí³ÌĞòÔ±Ö¸¶¨ÆäËûÊôĞÔ»òÌØÕ÷¡£ÔÚÓï·¨ÖĞ£¬ĞèÒª½«×Ö·û´®À¨ÔÚÒıºÅºÍÀ¨ºÅÖĞ¡£ÎŞ·¨Ê¶±ğµÄÑ¡Ïî½«±»ºöÂÔ¡£
»¹¿ÉÒÔÓÃ×÷Óï¾äÀ´Ö¸¶¨ÆäËû±àÒëÊ±Ñ¡Ïî¡£Çë²Î¼û±àÒëÆ÷¿ª¹Ø¡£


-------------------------------------------------------- KeyPgOptionbase ----

Option Base   Ñ¡Ïî
  
Ö¸¶¨Êı×éÉùÃ÷µÄÄ¬ÈÏÏÂÏŞ

Óï·¨
Option Base base_subscript

²ÎÊı
base_subscript
Êı×ÖÎÄ±¾Öµ

ÃèÊö
Option BaseÊÇÎªÒÔÏÂÈÎºÎÊı×éÉùÃ÷ÉèÖÃÄ¬ÈÏÏÂÏŞµÄÓï¾ä¡£´ËÄ¬ÈÏÖµ¶ÔÓÚÊ¹ÓÃÄ£¿éµÄÆäÓà²¿·ÖÈÔÈ»ÓĞĞ§£¬²¢ÇÒ¿É


-------------------------------------------------------- KeyPgOptionbyval ----

Option ByVal   Ñ¡Ïî
  
Ö¸¶¨Ä¬ÈÏÇé¿öÏÂÔÚ¹ı³ÌÉùÃ÷ÖĞ°´Öµ´«µİ²ÎÊı

Óï·¨
Option ByVal

ÃèÊö
Option ByValÊÇÒ»¸öÓï¾ä£¬Ëü½«¹ı³Ì²ÎÊıµÄÈ±Ê¡´«µİÔ¼¶¨ÉèÖÃÎª°´Öµ£¬¾ÍÏñÓÃ ÉùÃ÷Ò»Ñù¡£´ËÄ¬ÈÏ


-------------------------------------------------------- KeyPgOptiondynamic ----

Option Dynamic   Ñ¡Ïî
  
Ö¸¶¨¿É±ä³¤¶ÈÊı×éÉùÃ÷

Óï·¨
Option Dynamic

ÃèÊö
Option DynamicÊÇÒ»¸öÓï¾ä£¬ËüÖ¸¶¨ÈÎºÎºóĞøÊı×éÉùÃ÷¶¼ÊÇ¿É±ä³¤¶ÈµÄ£¬ÎŞÂÛËüÃÇÊÇ·ñÊ¹ÓÃ³£Á¿ÏÂ±ê·¶Î§ÉùÃ÷¡£Õâ¶ÔÓÚËùÊ¹ÓÃµÄÄ£¿


-------------------------------------------------------- KeyPgOptionescape ----

Option Escape   Ñ¡Ïî
  
Ö¸¶¨Ä¬ÈÏÇé¿öÏÂÓ¦ÎªÀàËÆ C µÄ×ªÒåĞòÁĞ´¦Àí×Ö·û´®ÎÄ±¾

Óï·¨
Option Escape

ÃèÊö
Option EscapeÊÇÒ»¸öÓï¾ä£¬Ä¬ÈÏÇé¿öÏÂ£¬Ëü»áµ¼ÖÂÕë¶ÔÀàËÆ C µÄ×ªÒåĞòÁĞ´¦Àí×Ö·û´®ÎÄ±¾¡£Í¨³££¬×ªÒåĞòÁĞÔÚ×Ö·û´®ÎÄ±¾ÖĞ²»Æğ×÷ÓÃ£¬³ı·Ç×Ö·û´®ÒÔ £¡ ÎªÇ°×º¡£ÔËËã·û£¨×ªÒå×Ö·û´®ÎÄ±¾


-------------------------------------------------------- KeyPgOptionexplicit ----

Option Explicit   Ñ¡Ïî
  
Ç¿ÖÆÔÚÊ¹ÓÃ±äÁ¿¡¢¶ÔÏóºÍÊı×éÖ®Ç°¶ÔÆä½øĞĞÉùÃ÷

Óï·¨
Option Explicit

ÃèÊö
Option ExplicitÊÇÒ»¸öÓï¾ä£¬ËüÇ¿ÖÆÈÎºÎÒÔÏÂ±äÁ¿¡¢¶ÔÏó»òÊı×éÓÃ·¨Ç°Ãæ¼ÓÉÏÉùÃ÷£¬ÀıÈç£¬


-------------------------------------------------------- KeyPgOptiongosub ----

Option Gosub   Ñ¡Ïî
  

	Enables support for GoSub and On Gosub.

Syntax
Option Gosub

Description
Option Gosub enables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to 


-------------------------------------------------------- KeyPgOptionnogosub ----

Option Nogosub   Ñ¡Ïî
  
½ûÓÃ¶Ô ºÍ µÄÖ§³Ö¡£GoSubOn Gosub

Óï·¨
Option Nogosub

ÃèÊö
Option Nogosub½ûÓÃ¶Ô ºÍ µÄÖ§³Ö£¨´Ó gosub£©¡£
ÒòÎª¿ÉÄÜÒâÎ¶×Å´Ó gosub ·µ»Ø»ò´Ó¹ı³Ì·µ»Ø£¬²¢ÇÒ¿ÉÓÃÓÚÆôÓÃºÍ½ûÓÃÖ§³Ö¡£µ±Ö§³Ö±»½ûÓÃÊ±£¬½«±»Ê¶±ğÎª


-------------------------------------------------------- KeyPgOptionnokeyword ----

Option NoKeyword   Ñ¡Ïî
  
¡°Î´¶¨Òå¡±±£Áô¹Ø¼ü×Ö

Óï·¨
Option NoKeyword keyword

²ÎÊı
keyword
ÒªÈ¡Ïû¶¨ÒåµÄ¹Ø¼ü×Ö

ÃèÊö
Option NoKeywordÊÇÒ»¸öÈ¡Ïû¶¨Òå FreeBASIC ±£Áô¹Ø¼ü×ÖµÄÓï¾ä£¬ÕâÒâÎ¶×ÅËü¿ÉÒÔÓÃ×÷±äÁ¿¡¢¶ÔÏó


-------------------------------------------------------- KeyPgOptionprivate ----

Option Private   Ñ¡Ïî
  
Ä¬ÈÏÇé¿öÏÂÎª¹ı³ÌÉùÃ÷Ö¸¶¨ÄÚ²¿Á´½Ó

Óï·¨
Option Private

ÃèÊö
Option PrivateÊÇÒ»¸öÓï¾ä£¬Ä¬ÈÏÇé¿öÏÂ£¬ËüÎªÒÔÏÂÈÎºÎ¹ı³ÌÉùÃ÷ÄÚ²¿Á´½Ó£¬¾ÍÏñÓÃ ÉùÃ÷Ò»Ñù¡£´ËÈ±Ê¡Öµ¶ÔÓÚ


-------------------------------------------------------- KeyPgOptionstatic ----

Option Static   Ñ¡Ïî
  
»Ö¸´ÎªÄ¬ÈÏÊı×éÉùÃ÷ĞĞÎª

Óï·¨
Option Static

ÃèÊö
Option StaticÊÇÒ»¸öÓï¾ä£¬Ëü¸²¸Ç µÄĞĞÎª£¬¼´Ê¹ÓÃ³£Á¿ÏÂ±ê·¶Î§ÉùÃ÷µÄÊı×éÊÇ¹Ì¶¨³¤¶ÈµÄ¡£Õâ¶ÔÓÚËùÊ¹ÓÃµÄÄ£¿éµÄÆäÓà²¿·ÖÈÔÈ»ÓĞĞ§£


-------------------------------------------------------- KeyPgOpValueOf ----

Operator * (Value Of)   ÔËËã·û
  
È¡ÏûÒıÓÃÖ¸Õë

Óï·¨
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T


ÓÃ·¨
result = * rhs
or
* rhs = value

²ÎÊı
rhs
ÒªÈ¡ÏûÒıÓÃµÄµØÖ·¡£
T
ÈÎºÎ±ê×¼¡¢ÓÃ»§¶¨Òå»ò¹ı³ÌÀàĞÍ¡£

·µ»ØÖµ
·µ»Ø¶Ô´æ´¢ÔÚµØÖ· ÖĞµÄÖµµÄÒıÓÃ¡£rhs

ÃèÊö
ÔËËã·û * £¨ÖµµÄ£©·µ»Ø¶Ô´æ´¢ÔÚµØÖ·´¦µÄÖµµÄÒıÓÃ£¬Í¨³£³ÆÎªÈ¡ÏûÒıÓÃÔËËã·û¡£²Ù×÷Êı²»»áÒÔÈÎºÎ·½Ê½½øĞĞĞŞ¸Ä¡£
¿ÉÒÔÈ¡ÏûÒıÓÃµÄÈÎºÎÀàĞÍµÄ £¬µ« .



-------------------------------------------------------- KeyPgOpVarptr ----

Operator Varptr (Variable Pointer)   ÔËËã·û
  
·µ»Ø±äÁ¿»ò¶ÔÏóµÄµØÖ·

Óï·¨
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

Óï·¨
result = VarPtr ( lhs )

²ÎÊı
lhs
±äÁ¿»ò¶ÔÏó¡£
T
ÈÎºÎÊı¾İÀàĞÍ¡£

·µ»ØÖµ
·µ»Ø±äÁ¿»ò¶ÔÏóµÄµØÖ·¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄµØÖ·¡£
µ±²Ù×÷ÊıÎª ÀàĞÍÊ±£¬½«·µ»ØÄÚ²¿×Ö·û´®ÃèÊö·ûµÄµØÖ·¡£ÓÃÓÚ¼ìË÷×Ö·û´®Êı¾İµÄµØÖ·¡£
²Ù×÷Êı²»ÄÜÊÇÊı×é£¬µ«¿ÉÒÔÊÇÊı×éÔªËØ¡£ÀıÈç


-------------------------------------------------------- KeyPgOpXor ----

Operator Xor (Exclusive Disjunction)   ÔËËã·û
  
·µ»ØÁ½¸öÊıÖµµÄ°´Î»Òì¹¹£¨¶ÀÕ¼ÎöÈ¡£©

Óï·¨
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

ÓÃ·¨
result = lhs Xor rhs

²ÎÊı
lhs
×ó²à±í´ïÊ½¡£
T1
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
rhs
ÓÒ²à±í´ïÊ½¡£
T2
ÈÎºÎÊı×Ö»ò²¼¶ûÀàĞÍ¡£
Ret
Êı×Ö»ò²¼¶ûÀàĞÍ£¨Ëæ ºÍ ¶øÒì£©¡£T1T2

·µ»ØÖµ
·µ»ØÁ½¸ö²Ù×÷ÊıµÄ°´Î» xor¡£

ÃèÊö
´ËÔËËã·û·µ»ØÆä²Ù×÷ÊıµÄ°´Î»ÅÅ³ı£¬ÕâÊÇÒ»ÖÖÂß¼­ÔËËã£¬¸Ã²Ù×÷½«Éú³ÉÒ»¸öÖµ£¬ÆäÎ»ÉèÖÃÈ¡¾öÓÚ²Ù×÷ÊıµÄÎ»£¨¶ÔÓÚ½«²¼¶ûÖ


-------------------------------------------------------- KeyPgOrGfx ----

Or   »ò
  
Í¼ĞÎÓï¾äµÄ²ÎÊı£¬¸ÃÓï¾äÊ¹ÓÃ°´Î»×÷Îª blitting ·½·¨PutOr

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

²ÎÊı
Or
±ØÌî¡£

ÃèÊö
¸Ã·½·¨Ê¹ÓÃ°´Î»º¯Êı½«Ã¿¸öÔ´ÏñËØÓëÏàÓ¦µÄÄ¿±êÏñËØ×éºÏÔÚÒ»Æğ¡£ÕâÑù×öµÄ½á¹ûÊÇÊä³öÎªÄ¿±êÏñËØ¡£
´Ë·½·¨ÊÊÓÃÓÚËùÓĞÍ¼ĞÎÄ£Ê½¡£Ã»ÓĞÃÉ°æÑÕÉ«£¬¾¡¹ÜÑÕÉ«Öµ£¨ÔÚÈ«²ÊÉ«Ä£Ê½ÏÂ£©²»»á²úÉú


-------------------------------------------------------- KeyPgOut ----

Out   ¶Ë¿ÚÊä³ö
  
½«ÖµÊä³öµ½Ó²¼ş¶Ë¿Ú¡£

Óï·¨
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

ÓÃ·¨
Out port,value

²ÎÊı
port
ÒªĞ´ÈëµÄÓ²¼ş¶Ë¿Ú¡£
data
ÒªĞ´ÈëµÄÊı¾


-------------------------------------------------------- KeyPgOutput ----

Output   Êä³ö
  
Ö¸¶¨ÒªÎªÊä³öÄ£Ê½´ò¿ªµÄÎÄ±¾ÎÄ¼ş

Óï·¨
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

²ÎÊı
filename
Òª´ò¿ªÒÔ½øĞĞÊä³öµÄÎÄ¼şÃû
encoding_type
Ö¸Ê¾ÎÄ¼şµÄ±àÂëÀàĞÍ
lock_type
Ëø¶¨ÒÔÔÚÎÄ¼ş´ò¿ªÊ±Ê¹ÓÃ
filenum
ÒªÓë´ò¿ªµÄÎÄ¼ş¹ØÁªµÄÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ

ÃèÊö
ÓÃÓÚ´ò¿ªÎÄ±¾ÎÄ¼ş½øĞĞĞ´ÈëµÄÎÄ¼şÄ£Ê½¡£
´ËÄ£Ê½ÓÃÓÚĞ´Èë´øÓĞ µÄÎÄ±¾£¬»òÒÔ¶ººÅ·Ö¸ôµÄÖµ¡£
ÎÄ±¾ÎÄ¼ş²»ÄÜÔÚFreeBASICÖĞÍ¬Ê±¶ÁÈ¡ºÍĞ´


-------------------------------------------------------- KeyPgOverload ----

Overload   ¶ÔÏóÖØÔØ
  
Ö¸¶¨¹ı³ÌÃû³Æ¿ÉÒÔÖØÔØ

Óï·¨
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]

Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]

[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

ÃèÊö
ÔÚ¹ı³ÌÉùÃ÷ÖĞ£¬ÔÊĞíÖØÔØ¹ı³ÌÃû³Æ£¬Ò²¾ÍÊÇËµ£¬Èç¹ûÆäËû¹ı³Ì£¨ÎŞÂÛÊÇ×Ó¹ı³Ì»¹ÊÇº¯Êı£©µÄ²ÎÊıÁĞ±íÊÇÎ¨Ò»µÄ£¬Ôò¿ÉÒÔÊ¹ÓÃÏàÍ¬µÄÃû³ÆÉùÃ÷ÆäËû¹ı³Ì£¨ ÎŞÂÛËüÃÇÊÇ×Ó»¹ÊÇº¯Êı£©¡£Èç¹ûÁ½¸ö²ÎÊıÁĞ±í°üº¬


-------------------------------------------------------- KeyPgOverride ----

Override   ¶ÔÏó¸²¸Ç
  
·½·¨ÊôĞÔ;Ö¸¶¨·½·¨±ØĞë¸²¸ÇĞéÄâ

Óï·¨
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

ÃèÊö
ÔÚ·½·¨ÉùÃ÷ÖĞ£¬¿ÉÓÃÓÚÖ¸Ê¾´Ë·½·¨Ó¦ÖØĞ´»ùÀàÖĞµÄĞéÄâ»ò³éÏó·½·¨¡£È»ºó£¬Èç¹û¸Ã·½·¨²»ÖØĞ´ÈÎºÎÄÚÈİ£¨Ö»ÓĞ·Ç¾²Ì¬·½·¨¿ÉÒÔÖØĞ´ĞéÄâ»ò³éÏó·½·¨£©£¬±àÒëÆ÷½«ÏÔÊ¾´íÎó¡£
Ç¿ÁÒ½¨Òé²»ÒªÇ¿ÖÆÊ¹ÓÃ 


-------------------------------------------------------- KeyPgPaint ----

Paint   Ìî³ä
  
Ìî³äÓÉÖ¸¶¨ÑÕÉ«µÄ±ß¿ò·Ö¸ôµÄÇøÓò

Óï·¨
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

²ÎÊı
target
Ö¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø¡£
STEP
±íÊ¾×ø±êÊÇÏà¶ÔµÄ
(x, y)
ÓÃÓÚ¿ªÊ¼·º¹âÌî³ä£¨»æ»­£©µÄÏñËØµÄ×ø±ê
paint
ÑÕÉ«ÊôĞÔ»òÌî³äÍ¼°¸
 Ò»¸öÊıÖµ±íÊ¾Ò»ÖÖÑÕÉ«£¬¶øÒ»¸ö×Ö·û´®±íÊ¾Ò»¸öÌî³äÍ¼°¸
border_color
Ìî³äµÄ±ß½çÑÕÉ«

ÃèÊö
Í¼ĞÎÃüÁî£¬ÓÃÓÚÌî³äÓÉÖ¸¶¨ÑÕÉ«µÄ±ß¿ò·Ö¸ôµÄÇøÓò¡£Ò²³ÆÎª¡°·ºË®Ìî³ä¡±»ò¡°ÓÍÆáÍ°¡±¡£
¿ÉÒÔÔÚÓï¾äÉè


-------------------------------------------------------- KeyPgPalette ----

Palette   µ÷É«Ä£Ê½
  
Ê¹ÓÃµ÷É«°åÑÕÉ«×Ô¶¨ÒåÄ£Ê½ÖĞµÄÑÕÉ«

Óï·¨
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

²ÎÊı
Get
Ö¸Ê¾»ñÈ¡Ñ¡Ïî°åĞÅÏ¢£¬¶ø²»ÊÇÉèÖÃÑ¡Ïî°åĞÅÏ¢
index
µ÷É«°åË÷Òı
color
ÑÕÉ«ÊôĞÔ
r
ºìÉ«³É·Ö
g
ÂÌÉ«³É·Ö
b
À¶É«·ÖÁ¿
Using
Ö¸Ê¾Ê¹ÓÃÑÕÉ«ÖµÊı×é
arrayname(idx)
ÓÃÓÚ»ñÈ¡/ÉèÖÃÑÕÉ«ÊôĞÔµÄÊı×éºÍË÷Òı

ÃèÊö
¸ÃÓï¾äÓÃÓÚ¼ìË÷»ò×Ô¶¨ÒåÑÕÉ«Éî¶È¸ß´ï8bppµÄÍ¼ĞÎÄ£Ê½µÄµ±Ç°µ÷É«°å;ÔÚ¾ßÓĞ½Ï¸ßÑÕÉ«Éî¶ÈµÄÄ£Ê½ÏÂÊ¹ÓÃÊ±½«²»Æğ×÷ÓÃ


-------------------------------------------------------- KeyPgPascal ----

pascal   pascal
  
ÔÚ¹ı³ÌÉùÃ÷ÖĞÖ¸¶¨ Pascal ÑùÊ½µÄµ÷ÓÃÔ¼¶¨

Óï·¨
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

ÃèÊö
ÔÚ¹ı³ÌÉùÃ÷ÖĞ£¬Ö¸¶¨¹ı³Ì½«Ê¹ÓÃµ÷ÓÃÔ¼¶¨¡£ÔÚ Pascal µ÷ÓÃÔ¼¶¨ÖĞ£¬ÈÎºÎ²ÎÊı¶¼½«ÒÔÓëËüÃÇÁĞ³öµÄË³ĞòÏàÍ¬µÄË³Ğò´«µİ£¨ÍÆËÍµ½¶ÑÕ»ÉÏ£©£¬¼´´Ó×óµ½ÓÒ¡£¹ı³Ì²»ĞèÒª±£Áô »ò ¼Ä´æÆ÷£¬²¢ÇÒ±ØĞëÔÚ¶ÑÕ»·µ


-------------------------------------------------------- KeyPgPcopy ----

PCopy   ¸´ÖÆPÄ£Ê½
  
½«Ò»¸öÍ¼ĞÎ»òÎÄ±¾Ò³Ãæ¸´ÖÆµ½ÁíÒ»¸öÍ¼ĞÎ»òÎÄ±¾Ò³Ãæ

Óï·¨
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

ÓÃ·¨
PCopy [ source ] [, destination ]

²ÎÊı
source
Òª´ÓÖĞ¸´ÖÆµÄÒ³Ãæ
destination
Òª¸´ÖÆµ½µÄÒ³Ãæ

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÁã £¨£©£¬»ò·µ»Ø·ÇÁã´íÎó´úÂëÒÔÖ¸Ê¾Ê§°Ü¡£0

ÃèÊö
½«Ò»¸öÍ¼ĞÎ»òÎÄ±¾ÊÓÆµÒ³Ãæ¸´ÖÆµ½ÁíÒ»¸öÍ¼ĞÎ»òÎÄ±¾ÊÓÆµÒ³Ãæ¡£ÓÃÓÚÔÚÒ»¸ö²»¿É¼ûÒ³ÃæÉÏ»æÖÆËùÓĞÍ¼ĞÎ²¢½«Æä¸´ÖÆµ½»î¶¯µÄ¿É¼ûÒ³Ã


-------------------------------------------------------- KeyPgPeek ----

Peek   ÄÚ´æÈ¡µØÖ·
  
»ñÈ¡ÄÚ´æÖĞÄ³¸öµØÖ·´¦µÄÈÎÒâÀàĞÍµÄÖµ

Óï·¨
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

ÓÃ·¨
Peek( [ datatype, ] address )

²ÎÊı
address
ÄÚ´æÖĞÒª´ÓÖĞ»ñÈ¡ÖµµÄµØÖ·¡£
datatype
Òª»ñÈ¡µÄÖµµÄÀàĞÍ¡£Èç¹ûÊ¡ÂÔ£¬Ôò¼Ù¶¨Îª¡£UByte

ÃèÊö
´Ë¹ı³Ì·µ»Ø¶ÔÄÚ´æµØÖ·ÔÚÄÚ´æÖĞ¸ø³öµÄÖµµÄÒıÓÃ£¬²¢ÇÒµÈĞ§ÓÚ£º
*cast(ubyte ptr, address)
»ò
*cast(datatype ptr, address)



-------------------------------------------------------- KeyPgPmap ----

PMap   Ó³ÉäPÄ£Ê½
  
Ó³ÉäÊÓÍ¼ºÍÎïÀíÓ³ÉäÖ®¼äµÄ×ø±ê¡£

Óï·¨
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

ÓÃ·¨
result = PMap( coord, func )

²ÎÊı
coord
Ö¸Ê¾ÒªÓ³ÉäµÄ×ø±êµÄ±í´ïÊ½¡£
func
ÒªÓ¦ÓÃÓÚ¸ø¶¨×ø±êµÄÓ³Éäº¯Êı±àºÅ¡£

·µ»ØÖµ
Ó³ÉäµÄ×ø±êÖµ¡£

ÃèÊö
´Ëº¯Êı×ª»»ÊÓÍ¼£¨ÓÉÓï¾ä¶¨Òå£©ºÍÎïÀí£¨ÓÉÓï¾äÉèÖÃ£©Ó³ÉäÖ®¼äµÄ×ø±ê¡£¸ù¾İ µÄÖµ£¬ÓÃÓÚ¼ÆËãÒªÓÉ ÒÔÏÂÕß·µ»ØµÄ²»Í¬Ó³Éä£ºWindowView (Graphic


-------------------------------------------------------- KeyPgPoint ----

Point   µã
  
·µ»ØÖ¸¶¨ÏñËØ×ø±êµÄÑÕÉ«ÊôĞÔ

Óï·¨
result = Point( coord_x, coord_y [,buffer] )
or
result = Point( function_index )


ÓÃ·¨
coord_x
ÏñËØµÄ x ×ø±ê
coord_y
ÏñËØµÄ y ×ø±ê
buffer
Òª´ÓÖĞ¶ÁÈ¡µÄÍ¼Ïñ»º³åÇø
function_index
Òª·µ»ØµÄÆÁÄ»×ø±êÀàĞÍ£ºÖµÖ®Ò» ¡¢ ¡¢ ¡¢0123

·µ»ØÖµ
·µ»ØÊı¾İÀàĞÍÎª .
Èç¹ûÌá¹©ÁËÏñËØµÄ×ø±ê£¬Point ½«·µ»ØÖ¸¶¨×ø±ê´¦µÄÑÕÉ«ÊôĞÔ£¬×÷Îª 8 ¸ö bpp Ë÷ÒıÄ£Ê½ÏÂµÄ 8 Î»µ÷É«°åË÷Òı¡¢16 ¸ö bpp Ä£Ê½ÏÂµÄ 24 Î» RGB Öµ£¨Î´Ê¹ÓÃµÄÇ° 8 Î»£¬R¡¢G£¬B µÄ¾«¶ÈÓĞÏŞ£©ÒÔ¼° 32 bpp Ä£Ê½ÏÂµÄ 32 Î» RGB »ò RGBA Öµ£¨¸ß 8 Î»Î´Ê¹ÓÃ»ò±£³Ö Alpha£©¡£Çë×¢Òâ£¬Ëü²»»á·µ»Ø 16 Î»Öµ£¨5 Î» R + 6 Î» G + 5 Î» B£©¡£
Èç¹û²ÎÊıÊÇº¯ÊıË÷Òı£¬Ôò Point ½«·µ»ØÓÉ×îºóÒ»¸öÍ¼ĞÎÃüÁîÉèÖÃµÄÍ¼ĞÎ¹â±ê×ø±êÖ®Ò»¡£ULongx, y

ÂÛµã·µ»ØµÄÖµ0µ±Ç°ÎïÀí x ×ø±ê¡£1µ±Ç°ÎïÀí y ×ø±ê¡£2µ±Ç°ÊÓÍ¼ x ×ø±ê¡£Èç¹ûÉĞÎ´Ê¹ÓÃ WINDOW Óï¾ä£¬Ôò·µ»ØÓë POINT£¨0£© º¯ÊıÏàÍ¬µÄÖµ¡£3


-------------------------------------------------------- KeyPgPointCoord ----

PointCoord   µã×ø±ê
  
²éÑ¯µÄ±ÊÔÚÍ¼ĞÎÄ£Ê½ÏÂµÄÎ»ÖÃDraw

Óï·¨
Declare Function PointCoord( ByVal func As Long ) As Single

ÓÃ·¨
result = PointCoord( func )

ÃèÊö
¸Ãº¯Êı¿ÉÓÃÓÚÔÚÍ¼ĞÎÄ£Ê½ÏÂ²éÑ¯±ÊµÄ x ºÍ y Î»ÖÃ¡£½á¹ûÖµÈ¡¾öÓÚ´«µİµÄ func Öµ£ºPointCoordDraw

º¯×ÓÖµ£º·µ»ØÖµ£º0x ÎïÀí×ø±ê£¬Óë PMap£¨ µã×ø


-------------------------------------------------------- KeyPgPoke ----

Poke   ÄÚ´æ¶ÁÖ·
  
½«Öµ·ÖÅä¸øÄÚ´æÖĞµÄÎ»ÖÃ¡£

Óï·¨
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

ÓÃ·¨
Poke [ datatype, ] address, value

²ÎÊı
datatype
Ö¸¶¨µØÖ·´¦µÄÊı¾İÀàĞÍ¡£Èç¹ûÊ¡ÂÔ£¬Ôò¼Ù¶¨Îª¡£UByte
address
ÄÚ´æÖĞÒª·ÖÅäµ½µÄÎ»ÖÃ¡£
value
Òª·ÖÅäµÄÖµ¡£

ÃèÊö
PokeÎªÄÚ´æÖĞµÄÄ³¸öÎ»ÖÃ¸³Öµ¡£ËüµÈĞ§ÓÚ
*cast(ubyte ptr, address) = value
»ò
*cast(datatype ptr, address) = value

µ± ÊÇÓÃ»§¶¨ÒåµÄÀ


-------------------------------------------------------- KeyPgPos ----

Pos   Î»ÖÃ
  
·µ»ØÎÄ±¾¹â±êµÄË®Æ½£¨´Ó×óµ½ÓÒ£©Î»ÖÃ

Óï·¨
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

ÓÃ·¨
result = Pos[ ( dummy ) ]

²ÎÊı
dummy
ÎªÏòºó¼æÈİ QBASIC ¶ø±£ÁôµÄÎ´Ê¹ÓÃ²ÎÊı¡£

·µ»ØÖµ
·µ»ØÎÄ±¾¹


-------------------------------------------------------- KeyPgPpassert ----

#assert   #±àÒëÖĞ¶Ï
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#assert  condition

²ÎÊı
condition
¼Ù¶¨ÎªÕæµÄÌõ¼ş±í´ïÊ½

ÃèÊö
ÔÚ±àÒëÊ±¶ÏÑÔÌõ¼ş±í´ïÊ½µÄÕæÊµĞÔ¡£Èç¹û Îª false£¬Ôò±àÒë½«Òò´íÎó¶øÍ£Ö¹¡£
´ËÓï


-------------------------------------------------------- KeyPgPpcmdline ----

#Cmdline
  
Ô¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#cmdline "args..."

²ÎÊı
args...
ÓĞĞ§ÇÒÍ¨ÓÃÑ¡ÏîµÄ²ÎÊıÁĞ±í£¨ÓÃ¿Õ¸ñ·Ö¸ô£©¡£Compiler Options-print-help

ÃèÊö
#cmdlineÊÇÒ»¸öÔ¤´¦ÀíÆ÷Ö¸Áî£¬ÔÊĞí´ÓµÚÒ»¸öÖ¸¶¨µÄ fb Ô´ÎÄ¼şÄÚ²¿½øĞĞÖ¸¶¨¡£µÚÒ»¸öÔ´ÎÄ¼şÊÇÔÚ shell »ò IDE ÃüÁîĞĞÉÏµ÷ÓÃ fbc ±àÒëÆ÷µÄµÚÒ»¸öÖ¸¶¨µÄ '.bas' ÎÄ¼ş¡£ ÔÚµÚÒ»¸öÔ´Î


-------------------------------------------------------- KeyPgPpdefine ----

#define   #Ô¤¶¨Òå
  
ÓÃÓÚ¶¨ÒåºêµÄÔ¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

ÃèÊö
#defineÔÊĞíÉùÃ÷»ùÓÚÎÄ±¾µÄÔ¤´¦ÀíÆ÷ºê¡£Ò»µ©±àÒëÆ÷¿´µ½ a£¬Ëü½«¿ªÊ¼ÓÃ Ìæ»» µÄ½øÒ»²½³öÏÖ¡£ ¿ÉÄÜÎª¿Õ¡£À©Õ¹ÒÔµİ¹é·½Ê½Íê³É£¬Ö±µ½Ã»ÓĞ¸ü¶àÒªÀ©Õ¹µÄÄÚÈİ£¬±àÒëÆ÷¿ÉÒÔ¼ÌĞø·ÖÎöÉú³ÉµÄ´úÂë¡£ ¿ÉÓ


-------------------------------------------------------- KeyPgPpelse ----

#else   #·ñÔò
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

ÃèÊö
#else¿ÉÒÔÌí¼Óµ½ ¡¢ »ò ¿éÖĞ£¬ÒÔ±ãÎªÌõ¼ş


-------------------------------------------------------- KeyPgPpelseif ----

#elseif   #ÓÖÈç
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

ÃèÊö
¿ÉÒÔ½«#elseifÌ


-------------------------------------------------------- KeyPgPpendif ----

#endif   #½áÊøÈç¹û
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#endif

ÃèÊö
½áÊøÒ»×éÌõ¼şÖ¸Áî Çë²ÎÔÄ
 ¡¢»


-------------------------------------------------------- KeyPgPperror ----

#error   #´íÎó
  
Ô¤´¦ÀíÆ÷Õï¶ÏÖ¸Áî

Óï·¨
#error error_text

²ÎÊı
error_text
ÏÔÊ¾ÏûÏ¢

ÃèÊö
#errorÖĞ¶Ï±àÒëÒÔÔÚ±àÒëÆ÷ÕÒµ½ËüÊ±ÏÔÊ¾£¬È»ºó½âÎö¼ÌĞø¡£
´Ë¹Ø¼ü×Ö±ØĞëÓÉ ...À¨ÆğÀ´£¬Òò´Ë±àÒëÆ÷Ö»ÓĞÔÚÂú×ãÊ±²ÅÄÜ·ÃÎÊ¡£


-------------------------------------------------------- KeyPgPpif ----

#if   #Èç¹û
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#if (expression)
' Conditionally included statements
#endif

ÃèÊö
ÓĞÌõ¼şµØÔÚ±àÒëÊ±°üº¬Óï¾ä¡£
Èç¹û¼ÆËã½á¹ûÎª True£¨·ÇÁã£©£¬Ôò°üÀ¨ / ¿éÖĞ°üº¬µÄÓï¾ä;Èç¹û¼ÆËã½á¹ûÎª False £¨£©£¬Ôò°üÀ¨ÅÅ³ı£¨ºöÂÔ£©¡£
´ËÌõ¼şÖ¸


-------------------------------------------------------- KeyPgPpifdef ----

#ifdef   #Èç¹û¶¨Òå
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#ifdef symbol
' Conditionally included statements
#endif

ÃèÊö
ÓĞÌõ¼şµØÔÚ±àÒëÊ±°üº¬Óï¾ä¡£
Èç¹ûÒÑ¶¨Òå£¬Ôò°üÀ¨¿éÖĞµÄÓï¾ä£¬Èç¹ûÎ´¶¨Òå£¬ÔòÅÅ³ı£¨ºöÂÔ£©¡£
µÈĞ§ÓÚ#i


-------------------------------------------------------- KeyPgPpifndef ----

#ifndef   #Èç¹ûÎ´¶¨Òå
  
Ô¤´¦ÀíÆ÷Ìõ¼şÖ¸Áî

Óï·¨
#ifndef symbol
' Conditionally included statements
#endif

ÃèÊö
ÓĞÌõ¼şµØÔÚ±àÒëÊ±°üº¬Óï¾ä¡£
Èç¹ûÎ´¶¨Òå£¬Ôò°üÀ¨¿éÖĞµÄÓï¾ä£¬Èç¹ûÎ´¶¨Òå·ûºÅ£¬ÔòÅÅ³ı£¨ºöÂÔ£©¡£
µÈĞ§


-------------------------------------------------------- KeyPgPplang ----

#lang   #ÓïÑÔ
  
ÓÃÓÚÉèÖÃ±àÒëÆ÷·½ÑÔµÄÔ¤´¦ÀíÆ÷Óï¾ä¡£

Óï·¨
#lang "lang"

²ÎÊı
"lang"
ÒªÉèÖÃµÄ·½ÑÔ£¬À¨ÔÚË«ÒıºÅÖĞ£¬²¢ÇÒ±ØĞëÊÇ ¡¢ ¡¢ »ò Ö®Ò»¡£"fb""fblite""qb""deprecated"

ÃèÊö
Èç¹ûÎ´ÔÚÃüÁîĞĞÉÏÌá¹© -forcelang Ñ¡Ïî£¬Ôò¿ÉÓÃÓÚÉèÖÃÏÔÊ¾¸ÃÑ¡ÏîµÄÔ´Ä£¿éµÄ·½ÑÔ¡£×î¶à½«ÔÚÔ´Ä£¿éÉÏ½øĞĞÁ½´Î´«µİ¡£ÔÚµÚÒ»´Î´«µİÊ±£¬Èç¹ûÖ¸¶¨µÄ·½ÑÔ²»ÊÇÄ¬ÈÏ·


-------------------------------------------------------- KeyPgPplibpath ----

#libpath   #¿âÂ·¾¶
  
ÓÃÓÚÌí¼Ó¿âËÑË÷Â·¾¶µÄÔ¤´¦ÀíÆ÷Óï¾ä

Óï·¨
#libpath "path"

ÃèÊö
½«¿âËÑË÷Â·¾¶Ìí¼Óµ½Á´½ÓÆ÷µÄËÑË÷Â·¾¶ÁĞ±íÖĞ£¬¾ÍÏñÔÚÃüÁîĞĞÉÏÊ¹ÓÃ¡°-p¡±Ñ¡ÏîÖ¸¶¨Ò»Ñù¡£
Â


-------------------------------------------------------- KeyPgPpline ----

#line   #ĞĞºÅ
  
ÓÃÓÚÉèÖÃµ±Ç°ĞĞºÅºÍÎÄ¼şÃûµÄÔ¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#line number [ "name" ]

²ÎÊı
number 
ĞÂĞĞºÅ
"name"
ĞÂÎÄ¼şÃû£¨¿ÉÑ¡£©

ÃèÊö
Í¨Öª±àÒëÆ÷ĞĞºÅºÍÎÄ¼şÃûµÄ¸ü¸Ä£¬²¢ÏàÓ¦µØ¸üĞÂ ºÍ ºêÖµ¡£
±àÒëÊ±ÏûÏ¢ºÍÔËĞĞÊ±ÏûÏ¢¶¼ÊÜ´ËÖ¸ÁîµÄÓ°Ïì


-------------------------------------------------------- KeyPgPpmacro ----

#Macro...#Endmacro
  
ÓÃÓÚ¶¨Òå¶àĞĞºêµÄÔ¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#macro identifier [?] ( [ parameters ] )
body
#endmacro

#macro identifier [?] ( [ parameters, ] Variadic_Parameter... )
body
#endmacro

ÃèÊö
#macroÊÇ µÄ¶àĞĞ°æ±¾¡£
Èç¹ûÔÚ¶¨ÒåÓï·¨ÖĞÊ¹ÓÃ ¿ÉÑ¡µÄÎÊºÅ £¨£¿£©£¬Ôò¿ÉÒÔµ÷ÓÃ´øÓĞ²ÎÊıµÄºê£¬¶øÎŞĞèÔÚ²ÎÊıÁ½±ßÊ¹ÓÃÀ¨ºÅ¡£
 ×¢Òâ£ºÇë×¢Òâ´¥·¢µÄ¿ÉÄÜĞÔ£¬ÒÔÃâÓë°üº¬ºêÃû³Æ×÷ÎªÆäÊõÓïÖ®Ò»µÄ±í´


-------------------------------------------------------- KeyPgPpPragma ----

#pragma   #¼æÈİÉè¶¨
  
Ô¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#pragma option [ = value ]
»ò»ò
#pragma push ( option [, value ] )

#pragma pop ( option )

²ÎÊı
ºÍÏà¹Ø s µÄ¿ÉÄÜÖµ£ºoptionvalue

Ñ¡Ôñ¼ÛÖµÃèÊömsbitfields¼ÙÊ¹ÓÃÓë gcc ¼æÈİµÄÎ»×Ö¶Î£¨Ä¬ÈÏ£©msbitfieldsÕæÊ¹ÓÃÓë Microsoft C ±àÒëÆ÷ÖĞÊ¹ÓÃµÄÎ»×Ö¶Î¼æÈİµÄÎ»×Ö¶ÎÒ»´Î²»ÊÊÓÃµ¼ÖÂ±àÒëÖ¸Ê¾µÄÔ´ÎÄ¼şµÄĞĞÎª¾ÍÏñËüÔø¾­°üº¬ÔÚ#includeÒ»Ñù...¹ÌÖ´ĞÔ¼Ù½ûÓÃµ±Ç°Ô´ÖĞµÄ¡°CONST ÏŞ¶¨·ûÒÑ¶ªÆú¡±¾¯¸æ¹ÌÖ´ĞÔÕæÔÚµ±Ç°Ô´ÖĞÆôÓÃ¡°ÒÑ¶ªÆú CONST ÏŞ¶¨·û¡±¾¯¸æ²éÕÒ108¼Ù¶Ô·ÇÏŞ¶¨·ûºÅÃû³ÆÊ¹ÓÃ³£¹æ·ûºÅ²éÕÒ²éÕÒ108Õæ¶Ô·ÇÏŞ¶¨·ûºÅÃû³ÆÊ¹ÓÃ fbc-1.08.x »ò¸üÔç°æ±¾µÄ·ûºÅ²éÕÒ
Èç¹ûÎ´¸ø³öÖµ£¬±àÒëÆ÷½«¼Ù¶¨Îª True £¨-1£©¡£¿ÉÒÔÊ¹ÓÃÁã £¨0£© Öµ´úÌæ False¡£¿ÉÒÔÊ¹


-------------------------------------------------------- KeyPgPpPragmaReserve ----

#Pragma Reserve   #¼æÈİÉè¶¨
  
Ô¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#pragma reserve symbol
°ÂÂŞÂŞ
#pragma reserve (extern) symbol

#pragma reserve (asm) symbol

#pragma reserve (asm, extern) symbol)»ò#pragma reserve (extern, asm) symbol)

²ÎÊı
symbol
Òª±£ÁôµÄ·ûºÅÃû³Æ¡£

ÃèÊö
#pragma reservedÓï¾äÊÇÔ¤´¦ÀíÆ÷Ö¸Áî£¬ÔÊĞíÓÃ»§Í¨¹ı·ÃÎÊ fbc ±àÒëÆ÷µÄÄÚ²¿·ûºÅ±íÀ´±£Áô·ûºÅÃû³Æ£º
- #pragma reserve symbol
Óï¾ä½«ÔÚµ±Ç°·¶Î§/ÃüÃû¿Õ¼äÖĞ±£ÁôÒ»¸ö·ûºÅÃû³Æ£¬Èç


-------------------------------------------------------- KeyPgPpprint ----

#print   #Êä³ö
  
Ô¤´¦ÀíÆ÷Õï¶ÏÖ¸Áî

Óï·¨
#print text

ÃèÊö
Ê¹±àÒëÆ÷


-------------------------------------------------------- KeyPgPpundef ----

#undef   #È¡Ïû¶¨Òå
  
ÓÃÓÚÈ¡Ïû¶¨ÒåºêµÄÔ¤´¦ÀíÆ÷Ö¸Áî

Óï·¨
#undef symbol

ÃèÊö
È¡Ïû¶¨ÒåÒÔÇ°ÓÃ ¶¨ÒåµÄ·ûºÅ¡£
¿ÉÓÃÓÚÈ·±£ºê»ò·ûºÅµÄÉú´æÆÚÓĞÏŞ£¬²¢ÇÒ²»»áÓëÉÔºó¿ÉÄÜÔÚÔ´´úÂëÖĞ¶¨ÒåµÄÀàËÆºê¶¨Òå³åÍ»¡£
 £


-------------------------------------------------------- KeyPgPreserve ----

Preserve   Êı×é±£Áô
  
ÓÃÓÚ±£ÁôÄÚÈİ½«µ÷ÕûÊı×é´óĞ¡ReDim

Óï·¨
ReDim Preserve array(...) [As datatype]

ÃèÊö
ÓÃÓÚ£¬ÒÔ±ãÔÚµ÷ÕûÊı×é´óĞ¡Ê±£¬²»»áÖØÖÃÊı¾İ£¬¶øÊÇ±£ÁôÊı¾İ¡£ÕâÒâÎ¶×Åµ±ÕóÁĞÀ©´óÊ±£¬Ö»ÓĞĞÂÊı¾İ±»ÖØÖÃ£¬¶ø¾ÉÊı¾İ±£³Ö²»±ä£¨µ«²»Ò»¶¨ÔÚÄÚ´æÖĞµÄÏàÍ¬¾ø¶ÔµØÖ·£©¡£
 ×¢Òâ£º¿ÉÄÜÎŞ·¨ÔÚËùÓĞÇé¿


-------------------------------------------------------- KeyPgPreset ----

PReset   »æÖÆÏñËØ
  
»æÖÆµ¥¸öÏñËØ

Óï·¨
PReset [target ,] [STEP] (x, y) [,color]

²ÎÊı
target
Ö¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø¡£
STEP
±íÊ¾×ø±êÊÇÏà¶ÔµÄ
(x, y)
ÏñËØµÄ×ø±ê¡£
color
ÑÕÉ«ÊôĞÔ¡£

ÃèÊö
targetÖ¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø¡£ ¿ÉÄÜÊÇÊ¹ÓÃ »ò ´´½¨µÄÓ³Ïñ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¿±êÄ¬ÈÏÎªÆÁÄ»µÄµ±Ç°¹¤×÷Ò³Ãæ¡£
ÊÇÏñËØµÄ×ø±ê¡£STEP£¨Èç¹û´æÔÚ£©£¬Ôò±íÊ¾×ø±êÏà


-------------------------------------------------------- KeyPgPrint ----

(Print | ?)
  
½«ÎÄ±¾Ğ´ÈëÆÁÄ»

Óï·¨
(Print | ?) [ expressionlist ] [ , | ; ]

²ÎÊı
expressionlist
Òª´òÓ¡µÄÏîÄ¿ÁĞ±í

ÃèÊö
Print½«ÖµÁĞ±íÊä³öµ½ÆÁÄ»¡£ÊıÖµ½«×ª»»ÎªÆä×Ö·û´®±íÊ¾ĞÎÊ½£¬·ûºÅµÄ×óÌî³ä¡£ÓÃ»§¶¨ÒåÀàĞÍµÄ¶ÔÏó±ØĞëÖØÔØ ¡£
±í´ïÊ½ÁĞ±íÖĞµÄÁ¬ĞøÖµÓÉ¶ººÅ £¨£© »ò·ÖºÅ £¨£© ·Ö¸ô¡£¶ººÅ±íÊ¾´òÓ¡Ó¦Î»ÓÚÏÂÒ»¸ö


-------------------------------------------------------- KeyPgPrintPp ----

(Print | ?) #
  
½«ÖµÁĞ±íĞ´ÈëÎÄ¼ş»òÉè±¸

Óï·¨
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

²ÎÊı
filenum
Îª ´ò¿ªµÄÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡£OutputAppend
expressionlist
ÒªĞ´ÈëµÄÖµµÄÁĞ±í¡£

ÃèÊö
Print #½«ÖµÁĞ±íÊä³öµ½ÎÄ±¾ÎÄ¼ş»òÉè±¸¡£ÊıÖµ½«×ª»»ÎªÆä×Ö·û´®±íÊ¾ĞÎÊ½£¬·ûºÅµÄ×óÌî³ä¡£ÓÃ»§¶¨ÒåÀàĞÍµÄ¶ÔÏó±ØĞëÖØÔØ ¡£
±í´ïÊ½ÁĞ±íÖĞµÄÁ¬ĞøÖµÓÉ¶ººÅ £¨£© »ò·ÖºÅ £¨£


-------------------------------------------------------- KeyPgPrintusing ----

(Print | ?) Using
  
½«¸ñÊ½»¯ÎÄ±¾Êä³öµ½ÆÁÄ»»òÊä³öÉè±¸¡£

Óï·¨
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

²ÎÊı
filenum
Îª ´ò¿ªµÄÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡££¨»òÕß£¬¿ÉÔÚÊÊµ±Çé¿öÏÂÊ¹ÓÃ£¬¶ø²»ÊÇOutputAppendLPrintPrint #)
printexpressionlist
Òª´òÓ¡µÄÏîÄ¿µÄ¿ÉÑ¡Ç°ÃæÁĞ±í£¬ÒÔ¶ººÅ £¨£© »ò·ÖºÅ £¨£© ·Ö¸ô£¨ÓĞ¹ØÏêÏ¸ĞÅÏ¢£¬Çë²ÎÔÄ£©¡£,;Print
formatstring
ÒªÊ¹ÓÃµÄ×Ö·û´®¸ñÊ½¡£
expressionlist
ÒªÉèÖÃ¸ñÊ½µÄÏîÄ¿ÁĞ±í£¬ÒÔ·ÖºÅ £¨£© ·Ö¸ô¡£;

ÃèÊö
Ê¹ÓÃ²ÎÊıÈ·¶¨µÄ¸ñÊ½´òÓ¡µ½ÆÁÄ»ÏÔÊ¾¸÷ÖÖ±í´ïÊ½¡£ÔÚÄÚ²¿£¬Ê¹ÓÃ 2048 ×Ö½ÚµÄ»º³å


-------------------------------------------------------- KeyPgPrivate ----

Private   Ë½ÓĞ
  
Ö¸¶¨¾ßÓĞÄÚ²¿Á´½ÓµÄ¹ı³Ì

Óï·¨
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

ÃèÊö
ÔÚ¹ı³Ì¶¨Òå£¨ÔÚÉùÃ÷ĞĞ¼¶±ğ½ûÖ¹£©ÖĞ£¬Ö¸¶¨¹ı³Ì¾ßÓĞÄÚ²¿Á´½Ó£¬ÕâÒâÎ¶×ÅÆäÃû³Æ¶ÔÍâ²¿Ä£¿é²»¿É¼û¡£
Òò´Ë£¬ÔÚ±àÒëµÄÄ£¿éÖĞ£¬Èç¹ûÁ½¸ö¹ı³Ì¶¼ÊÇ £¬Ôò¿ÉÄÜ´æÔÚÁ½¸ö¾ßÓĞÏàÍ¬±êÊ¶·ûµ«¶¨ÒåÔÚ²»Í¬Ä£¿éÄÚµ


-------------------------------------------------------- KeyPgProperty ----

Property   ÀàÊôĞÔ
  
ÉùÃ÷»ò¶¨ÒåÀàĞÍ»òÀàÖĞµÄÊôĞÔ

Óï·¨
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }

Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

²ÎÊı
typename 
»ò µÄÃû³ÆTypeClass
fieldname 
ÊôĞÔµÄÃû³Æ
new_value 
´«µİ¸øÒª·ÖÅäµÄÊôĞÔµÄÖµ
index 
ÊôĞÔË÷ÒıÖµ

ÃèÊö
Property×Ö¶ÎÓÃÓÚ»ñÈ¡ºÍÉèÖÃ a µÄÖµ£¬»òÕßÒÔÓëÆäËûÊı¾İ×Ö¶ÎÏàÍ¬µÄ·½Ê½ÉèÖÃ a µÄÖµ£¬Ö»ÊÇÖ´ĞĞ¹ı³Ì£¬¶ø²»ÊÇ¼òµ¥µØ·ÖÅäµ½×Ö¶Î»ò´Ó×Ö¶ÎÖĞ¼ìË÷µ½µÄÖµ¡£
ÊÇÎªÆäÉùÃ÷


-------------------------------------------------------- KeyPgPset ----

PSet   »æµã
  
»æÖÆµ¥¸öÏñËØ

Óï·¨
PSet [target ,] [STEP] (x, y) [,color]

²ÎÊı
target
Ö¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø¡£
STEP
±íÊ¾×ø±êÊÇÏà¶ÔµÄ
(x, y)
ÏñËØµÄ×ø±ê¡£
color
ÑÕÉ«ÊôĞÔ¡£

ÃèÊö
targetÖ¸¶¨ÒªÔÚÆäÉÏ»æÖÆµÄ»º³åÇø¡£ ¿ÉÄÜÊÇÊ¹ÓÃ »ò ´´½¨µÄÓ³Ïñ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÎªÆÁÄ»µÄµ±Ç°¹¤×÷Ò³Ãæ¡£
ÊÇÏñËØµÄ×ø±ê¡£ Èç¹û´æÔÚ£¬ÔòÖ¸Ê¾×ø±êÏà¶ÔÓÚÍ¼ĞÎ¹â±êÎ


-------------------------------------------------------- KeyPgPsetGfx ----

PSet   »æµã
  
Ñ¡Ôñ×÷Îª blitting ·½·¨µÄÍ¼ĞÎÓï¾äµÄ²ÎÊıPutPSet

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

²ÎÊı
PSet
±ØÌî¡£

ÃèÊö
¸Ã·½·¨½«Ô´ÏñËØÖµ¸´ÖÆµ½Ä¿±êÏñËØÉÏ¡£
ÕâÊÇ×î¼òµ¥µÄ·½·¨¡£Ä¿±ê»º³åÇøÖĞµÄÏñËØ½«Ö±½Ó±»Ô´»º³


-------------------------------------------------------- KeyPgPtr ----

(Pointer | Ptr)
  
±äÁ¿ÉùÃ÷ÀàĞÍĞŞÊÎ·û

Óï·¨
... As DataType {Pointer | Ptr}

ÃèÊö
ÉùÃ÷Ö¸Õë±äÁ¿¡£
±äÁ¿ÀàĞÍ¿ÉÒÔÊÇÔ¤¶¨ÒåÀàĞÍ£¬Ò²¿ÉÒÔÊÇÓÃ»§¶¨ÒåÀàĞÍ¡£
ÔËËã·û »ò ÓÃÓÚ»ñÈ¡±äÁ¿µÄµØÖ·¡£ÔËËã·ûÓÃÓÚÈ¡ÏûÒıÓÃÖ¸Õë£¬¼´·ÃÎ


-------------------------------------------------------- KeyPgPublic ----

Public   ¹«¹²
  
Ö¸¶¨¾ßÓĞÍâ²¿Á´½ÓµÄ¹ı³Ì¡£

Óï·¨
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

ÃèÊö
ÔÚ¹ı³Ì¶¨Òå£¨ÔÚÉùÃ÷ĞĞ¼¶±ğ½ûÖ¹£©ÖĞ£¬Ö¸¶¨¹ı³Ì¾ßÓĞÍâ²¿Á´½Ó£¬ÕâÒâÎ¶×ÅÆäÃû³Æ¶ÔÍâ²¿


-------------------------------------------------------- KeyPgPutfileio ----

Put (File I/O)   Ğ´Èë×Ö½Ú
  
½«Êı¾İ´Ó»º³åÇøĞ´ÈëÎÄ¼ş

Óï·¨
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

ÓÃ·¨
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

²ÎÊı
filenum
´ò¿ªÎÄ¼şÊ±´«µİ¸øµÄÖµ¡£Open
position
ÎÄ¼şÖĞ±ØĞë´ÓºÎ´¦¿ªÊ¼µÄÎ»ÖÃ¡£Èç¹ûÎÄ¼şÒÑ´ò¿ª£¬Ôò¸ÃÎ»ÖÃÎ»ÓÚ¼ÇÂ¼ÖĞ£¬·ñÔòÒÔ×Ö½ÚÎªµ¥Î»¸ø³ö¡£Èç¹ûÊ¡ÂÔ£¬Ôò´Óµ±Ç°ÎÄ¼şÖ¸ÕëÎ»ÖÃ¿ªÊ¼Ğ´Èë¡£¸ÃÎ»ÖÃÊÇ´Ó 1 ¿ªÊ¼µÄ£º¼´ÎÄ¼şµÄµÚÒ»¸ö¼ÇÂ¼»ò×Ö½ÚÎ»ÓÚ Î»ÖÃ ¡£
Èç¹ûÊ¡ÂÔ»òÎªÁã £¨£©£¬ÔòÎÄ¼şĞ´Èë½«´Óµ±Ç°ÎÄ¼şÎ»ÖÃ¿ªÊ¼¡£PutFor Random1position0
data
´ÓÖĞĞ´ÈëÊı¾İµÄ»º³åÇø¡£Ëü¿ÉÒÔÊÇÊıÖµ±äÁ¿¡¢×Ö·û´®¡¢Êı×é»òÓÃ»§¶¨ÒåµÄÀàĞÍ¡£¸Ã²Ù×÷½«³¢ÊÔ½«ÍêÕûµÄ±äÁ¿´«Êäµ½´ÅÅÌ£¬³ı·Ç¸ø³ö¡£
·ÅÖÃÊı×éÊ±£¬ºóÃæÓ¦¸úÒ»¶Ô¿ÕµÄÀ¨ºÅ£º¡°¡±¡£ ½«Ğ´ÈëÊı×éÖĞµÄËùÓĞÊı¾İ¡£ ÊÇ²»ÔÊĞíµÄ¡£
ÊäÈë s Ê±£¬Ğ´ÈëµÄ×Ö½ÚÊıÓë×Ö·û´®Êı¾İÖĞµÄ×Ö½ÚÊıÏàÍ¬¡£ ÊÇ²»ÔÊĞíµÄ¡£
×¢Òâ£ºÈç¹ûÒª´Ó»º³åÇøĞ´ÈëÖµ£¬Ôò²»Ó¦½«Ö¸Õë´«µİµ½»º³åÇø;Ïà·´£¬ÄúÓ¦¸Ã´«µİ»º³åÇøÖĞµÄµÚÒ»¸ö±äÁ¿£¨Õâ¿ÉÒÔÍ¨¹ıÈ¡ÏûÒıÓÃÖ¸ÕëÀ´Íê³É£©¡£Èç¹ûÖ±½Ó´«µİÖ¸Õë£¬Ôò½«·ÅÖÃÖ¸Õë±äÁ¿ÖĞµÄÄÚ´æ£¬¶ø²»ÊÇËüÖ¸ÏòµÄÄÚ´æ¡£amountdata()PutamountStringamountOperator * (Value Of)Put
amount
Ê¹Ğ´ÈëÎÄ¼şµÄÁ¬Ğø±äÁ¿µ½ÎÄ¼şÖĞ - ¼´Ëü½«×Ö½


-------------------------------------------------------- KeyPgPutgraphics ----

Put (Graphics)   Ğ´Èë×Ö½Ú
  
½«Í¼Ïñ¸´ÖÆµ½ÁíÒ»¸öÍ¼Ïñ»òÆÁÄ»

Óï·¨
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

²ÎÊı
target
ÊÇÒªÔÚÆäÖĞ»æÖÆÍ¼ÏñµÄ»º³åÇøµÄµØÖ·¡£Èç¹ûÊ¡ÂÔ£¬Í¼Ïñ½«±»Ä£ºıµ½ÆÁÄ»ÉÏ¡£¼ûÏÂÎÄ¡£
[STEP](x, y)
Ö¸¶¨´ÓÄ¿±ê»º³åÇø»òÆÁÄ»µÄ×óÉÏ½Ç¿ªÊ¼µÄÆ«ÒÆÁ¿£¬ÒÔ±ã½«Í¼Ïñ»æÖÆµ½¸Ã»º³åÇø»òÆÁÄ»¡£ Ö¸Ê¾Æ«ÒÆÁ¿Ïà¶ÔÓÚµ±Ç°Í¼ĞÎ¹â±êÎ»ÖÃ¡£STEP(x, y)
source
ÊÇÒª»æÖÆµÄÍ¼ÏñµÄ»º³åÇøµÄµØÖ·¡£¼ûÏÂÎÄ¡£
(x1, y1)-[STEP](x2, y2)
ÔÚÔ´»º³åÇøÖĞÖ¸¶¨Òª»æÖÆµÄ¾ØĞÎÇøÓò¡£Èç¹ûÊ¡ÂÔ£¬Ôò»æÖÆÕû¸ö»º³åÇø¡£ Ö¸Ê¾ ºÍ ·Ö±ğÏà¶ÔÓÚ ºÍ¡£STEPx2y2x1y1
method
Ö¸¶¨ÓÃÓÚ½«Í¼Ïñ»æÖÆµ½Ä¿±ê»º³åÇøµÄ·½·¨£¬²¢ÇÒ¿ÉÒÔÊÇÒÔÏÂÈÎÒ»·½·¨£¨Ä¬ÈÏ·½·¨ÊÇ£©£º
 Óë±³¾°ÎŞ¹ØµÄ·½·¨XOR
PSet£ºÔ´ÏñËØÖµ½«¸´ÖÆ¶ø²»½øĞĞĞŞ¸Ä¡£
 £ºÔ´ÏñËØÖµÔÚ¸´ÖÆÖ®Ç°±»·ñ¶¨Îª 1 µÄ²¹Âë¡£
 £ºÔ´ÏñËØÖµ½«¸´ÖÆ¶ø²»½øĞĞĞŞ¸Ä¡£²»»æÖÆÃÉ°æÑÕÉ«µÄÔ´ÏñËØ¡£¼ûÏÂÎÄ¡£PRESETTrans
ÒÀÀµÓÚ±³¾°µÄ·½·¨
And£ºÄ¿±êÏñËØÓëÔ´ÏñËØ°´Î»ÅÅÁĞ¡£¼ûÏÂÎÄ¡£
 £ºÄ¿±êÏñËØÓëÔ´ÏñËØ°´Î»ÅÅÁĞ¡£¼ûÏÂÎÄ¡£
 £ºÄ¿±êÏñËØÓëÔ´ÏñËØ°´Î»ÅÅÁĞ¡£¼ûÏÂÎÄ¡£
 £ºÔ´Óë²ÎÊı»òÍ¼ÏñµÄµ¥¸öÏñËØÖĞÖ¸¶¨µÄÍ¸Ã÷¶ÈÒò×Ó»ìºÏ¡£¼ûÏÂÎÄ¡£
 £ºÔ´³ËÒÔÖµ£¬²¢Ëæ×Å±¥ºÍ¶ÈÌí¼Óµ½


-------------------------------------------------------- KeyPgRandom ----

Random   Ëæ»ú·ÃÎÊ
  
Ö¸¶¨ÒªÎªËæ»ú·ÃÎÊÄ£Ê½´ò¿ªµÄÎÄ¼ş»òÉè±¸

Óï·¨
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

²ÎÊı
filename
Òª´ò¿ªµÄÎÄ¼şÃû
access_type
Ö¸Ê¾ÎÄ¼şÊÇ¿ÉÒÔ´ÓÖĞ¶ÁÈ¡¡¢Ğ´ÈëÎÄ¼ş»¹ÊÇÍ¬Ê±¶ÁÈ¡µ½Á½Õß
lock_type
Ëø¶¨ÒÔÔÚÎÄ¼ş´ò¿ªÊ±Ê¹ÓÃ
filenum
ÒªÓë´ò¿ªµÄÎÄ¼ş¹ØÁªµÄÎ´Ê¹ÓÃµÄÎÄ¼ş±àºÅ
record_length
ÓÃÓÚÎÄ¼şµÄ¼ÇÂ¼µÄ´óĞ¡

ÃèÊö
´ò¿ªÒ»¸öÎÄ¼ş»òÉè±¸£¬ÓÃÓÚ¶ÁÈ¡ºÍ/»òĞ´Èë¸ø¶¨ÎÄ¼şÖĞµÄ¶ş½øÖÆÊı¾İ£¬ÆäÖĞ°üº¬´óĞ¡Îª µÄ¼ÇÂ¼¡£
Èç¹û¸ÃÎÄ¼ş


-------------------------------------------------------- KeyPgRandomize ----

Randomize   Ëæ»ú³õÊ¼»¯
  
ÎªËæ»úÊıÉú³ÉÆ÷Éè¶¨ÖÖ×Ó

Óï·¨
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

ÓÃ·¨
Randomize [ seed ][, algorithm ]

²ÎÊı
seed
Ëæ»úÊıÉú³ÉÆ÷µÄÖÖ×ÓÖµ£¬µ«¶ÔÓÚ³ıËã·¨ #4 Ö®ÍâµÄËùÓĞËã·¨£¬Ğ¡Êı²¿·Ö¶¼±»¼ô²Ã£¨¼ûÏÂÎÄ£©¡£Èç¹ûÊ¡ÂÔ£¬½«¸ÄÓÃ»ùÓÚ µÄÖµ¡£DoubleTimer
algorithm
ÓÃÓÚÑ¡ÔñËã·¨µÄÕûÊıÖµ£¨ÓĞ¹Ø¿ÉÓÃËã·¨£¬Çë²ÎÔÄ±ê×¼±êÍ·¡°fbmath.bi¡±£©¡£Èç¹ûÊ¡ÂÔ£¬ÔòÊ¹ÓÃµ±Ç°ÓïÑÔ·½ÑÔµÄÄ¬ÈÏËã·¨¡£

ÃèÊö
ÉèÖÃÓĞÖúÓÚÉú³ÉËæ»úÊıµÄËæ»úÖÖ×Ó£¬²¢Ñ¡ÔñÒªÊ¹ÓÃµÄËã·¨¡£
µÄ³£Á¿ÔÚ ÖĞ¶¨Òå¡


-------------------------------------------------------- KeyPgRead ----

Read   ¶ÁÈ¡
  
¶ÁÈ¡ÓëÓï¾äÒ»Æğ´æ´¢µÄÖµ¡£Data

Óï·¨
Read variable_list

ÃèÊö
Ê¹ÓÃÃüÁî¶ÁÈ¡´æ´¢ÔÚÓ¦ÓÃ³ÌĞòÖĞµÄÊı¾İ¡£
µÄÔªËØ±ØĞëÊÇ»ù±¾ÀàĞÍ£¬Êı×Ö£¬×Ö·û´®»òÊı×éºÍÓÃ»§¶¨ÒåÀàĞÍµÄÔªËØ¡£
³ÌĞòÖĞµÄËùÓĞÓï¾ä¶¼±íÏÖÎªµ¥¸öÁĞ±í£¬ÔÚ¶ÁÈ¡Ò»¸öÓï¾äµÄ×îºóÒ»¸öÔªËØºó£¬½«¶ÁÈ¡ÒÔÏ


-------------------------------------------------------- KeyPgReadFile ----

Read (File Access)   ¶ÁÈ¡
  
ÎÄ¼ş·ÃÎÊËµÃ÷·û

Óï·¨
Open filename As String For Binary Access Read As #filenum As Integer

ÃèÊö
Óï¾äÖĞ×Ó¾äµÄËµÃ÷·û¡£ Ö¸¶¨


-------------------------------------------------------- KeyPgReadWriteFile ----

Read Write (File Access)   ¶ÁÈ¡
  
ÎÄ¼ş·ÃÎÊËµÃ÷·û

Óï·¨
Open filename As String For Binary Access Read Write As #filenum As Integer

ÃèÊö
Óï¾äÖĞ×Ó¾äµÄËµÃ÷·û¡£ Ö¸¶¨ÎÄ¼ş¶ÔÊäÈëº


-------------------------------------------------------- KeyPgReallocate ----

Reallocate   ÖØ·ÖÅäÄÚ´æ
  
ÎªÏÖÓĞµÄ±£ÁôÄÚ´æ¿éÖØĞÂ·ÖÅä´æ´¢

Óï·¨
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

ÓÃ·¨
result = Reallocate( pointer, count )

²ÎÊı
pointer
ÒªÖØĞÂ·ÖÅäµÄÒÑ·ÖÅäÄÚ´æµÄµØÖ·¡£
count
ÒªÖØĞÂ·ÖÅäµÄ×Ü×Ö½ÚÊı¡£

·µ»ØÖµ
ÖØĞÂ·ÖÅäµÄÄÚ´æµÄµØÖ·¡£Èç¹ûÖØĞÂ·ÖÅä²»³É¹¦£¬²¢ÇÒ ËùÖ¸ÏòµÄÔ­Ê¼ÄÚ´æ±£³Ö²»±ä£¬Ôò·µ»Ø null £¨£© Ö¸Õë¡£0pointer

ÃèÊö
³¢ÊÔÖØĞÂ·ÖÅäÒÔÇ°Ê¹ÓÃ »ò ·ÖÅäµÄÄÚ´æµÄ´óĞ¡¡£»º³åÇøµÄÄÚÈİ½«±»±£Áô£¬µ«Èç¹ûĞ¡ÓÚÄÚ´æ¿éµÄÔ­Ê¼´óĞ¡£¬»º


-------------------------------------------------------- KeyPgRedim ----

ReDim   ÖØ¶¨Òå
  
¶¨Òå¿É±ä³¤¶ÈÊı×é»òµ÷ÕûÆä´óĞ¡

Óï·¨
ÉùÃ÷¶¯Ì¬Êı×é£º
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
µ÷Õû¶¯Ì¬Êı×éµÄ´óĞ¡£º
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]
ÒÕÊõ
ReDim [ Preserve ] [ ( ] expression [ ) ] ([subscript [, ...]]) [, ...]

²ÎÊı
Shared
Ö¸¶¨ÔÚÕû¸öÄ£¿éÖĞ¶ÔÕóÁĞµÄ¹²Ïí£¨ÎÄ¼ş·¶Î§£©·ÃÎÊ¡£
Preserve
ÓëÏÖÓĞÕóÁĞÒ»ÆğÊ¹ÓÃÊ±£¬ÔÚµ÷Õû´óĞ¡Ê±½«±£ÁôÕóÁĞµÄÄÚÈİ¡£Çë×¢Òâ£¬ÔÚÄ³Ğ©Çé¿öÏÂ£¬Êı¾İ²»»á±£ÁôÆäÔ­Ê¼Ë÷Òı£¬Çë²ÎÔÄÏÂÎÄ¡£Preserve
symbolname
ĞÂµÄ»òÏÖÓĞµÄÊı×é±êÊ¶·û¡£
expression»ò(expression)
ÒıÓÃÏÖÓĞÊı×éµÄ±í´ïÊ½¡£Õâ¿ÉÓÃÓÚµ÷Õû×÷ÎªÓÃ»§¶¨ÒåÀàĞÍ³ÉÔ±µÄÊı×éµÄ´óĞ¡¡£ÔÚÄ³Ğ©Çé¿öÏÂ£¬ÓĞ±ØÒªÔÚ±í´ïÊ½Á½±ßÖ¸¶¨À¨ºÅ£¨ÌØ±ğÊÇÈç¹ûÊı×é±í´ïÊ½±¾Éí°üº¬À¨ºÅ£© - Çë²ÎÔÄÏÂÃæµÄÊ¾Àı¡£
subscript: [lowerbound To ] upperbound
Êı×éÎ¬¶ÈµÄÏÂÏŞºÍÉÏÏŞ·¶Î§¡£ÏÂÏŞÄ¬ÈÏÖµÎªÁã £¨£©£¬Èç¹ûÎ´Ö¸¶¨£¬


-------------------------------------------------------- KeyPgRem ----

Rem   ×¢ÊÍ
  
Ö¸Ê¾Ô´´úÂëÖĞµÄ×¢ÊÍ¡£

Óï·¨
Rem comment

' Comment

/' Multi-line
   comment '/

ÃèÊö
ÒÔ ¿ªÍ·µÄÔ´´úÂëĞĞÖ¸Ê¾¸ÃĞĞÊÇ×¢ÊÍ£¬²»»á½øĞĞ±àÒë¡£
µ¥ÒıºÅ×Ö·û £¨'£© Ò²¿ÉÓÃÓÚÖ¸Ê¾×¢ÊÍ£¬²¢¿ÉÄÜ³öÏÖÔÚÔ´


-------------------------------------------------------- KeyPgReset ----

Reset   ÖØÖÃ
  
¹Ø±ÕËùÓĞ´ò¿ªµÄÎÄ¼ş£¬»òÖØÖÃ±ê×¼ I/O ¾ä±ú¡£

Óï·¨
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

ÓÃ·¨
Reset
or
Reset( streamno )

²ÎÊı
streamno
ÒªÖØÖÃµÄÁ÷±àºÅ£¬ÓÃÓÚ stdin »ò stdout¡£01

ÃèÊö
Reset£¬µ±µ÷ÓÃÊ±²»´øÈÎºÎ²ÎÊıÊ±£¬½«¹Ø±ÕËùÓĞ´ÅÅÌÎÄ¼ş¡£
 £¬µ±Ê¹ÓÃ²ÎÊıµ÷ÓÃÊ±£¬½«ÖØÖÃÓë stdin £¨£© »ò stdout £¨£© ¹ØÁªµÄÖØ¶¨ÏòÁ÷»ò¹ÜµÀÁ÷¡£
 ÔËĞĞÊ±´íÎó£º
¿ÉÒÔÉ


-------------------------------------------------------- KeyPgRestore ----

Restore   »Ö¸´Êı¾İ
  
¸ü¸ÄÓëÓï¾äÒ»Æğ´æ´¢µÄÖµµÄÏÂÒ»¸ö¶ÁÈ¡Î»ÖÃ¡£Data

Óï·¨
Restore [label]

ÃèÊö
½«ÏÂÒ»¸öÒª¶ÁÈ¡µÄÊı¾İÖ¸ÕëÉèÖÃÎª±êÇ©Ö®ºóµÚÒ»¸öÓï¾äµÄµÚÒ»¸öÔªËØ¡£±êÇ©±ØĞë°üº¬ÔÚÓëµ±Ç°ÕıÔÚÖ´ĞĞµÄ´úÂëÏàÍ¬µÄÄ£¿éÖĞ¡£ ¸Ä±äÕı³£µÄ´ÓÉÏµ½ÏÂµÄË³Ğò£¬ÆäÖĞ ÊÇ 


-------------------------------------------------------- KeyPgResume ----

Resume   »Ö¸´ĞĞ
  
ÔÚÌø×ªµ½´íÎó´¦Àí³ÌĞòºó»Ö¸´Ö´ĞĞµÄ´íÎó´¦ÀíÓï¾ä

Óï·¨
Resume

ÃèÊö
ResumeÔÚ´íÎó´¦Àí³ÌĞò£¨ÓÉ µ÷ÓÃ£©ÖĞµÄ´«Í³ QB ´íÎó´¦Àí»úÖÆÖĞÊ¹ÓÃ£¬ÒÔ½«Ö´ĞĞ·µ»Øµ½µ¼ÖÂ´íÎóµÄĞĞ¡


-------------------------------------------------------- KeyPgResumenext ----

Resume Next   »Ö¸´ĞĞ
  
ÔÚÌø×ªµ½´íÎó´¦Àí³ÌĞòºó»Ö¸´Ö´ĞĞµÄ´íÎó´¦ÀíÓï¾ä

Óï·¨
Resume Next

ÃèÊö
Resume NextÔÚ´íÎó´¦Àí³ÌĞò£¨ÓÉ µ÷ÓÃ£©ÖĞµÄ´«Í³ QB ´íÎó´¦Àí»úÖÆÖĞÊ¹ÓÃ£¬ÒÔ½«Ö´ĞĞ·µ»Øµ½µ¼ÖÂ´


-------------------------------------------------------- KeyPgReturn ----

Return (From Procedure)   ·µ»Ø
  
¿ØÖÆÒª´Ó¹ı³Ì»ò ·µ»ØµÄÁ÷Óï¾ä¡£GoSub

Óï·¨
Return expression

ÃèÊö
ReturnÓÃÓÚ´Ó¹ı³Ì·µ»Ø¡£
ÒòÎª¿ÉÄÜÒâÎ¶×Å´Ó gosub ·µ»Ø»ò´Ó¹ı³Ì·µ»Ø£¬²¢ÇÒ¿ÉÓÃÓÚÆôÓÃºÍ½ûÓÃÖ§³Ö¡£µ±Ö§³Ö±»½ûÓÃÊ±£¬½«±»Ê¶±ğÎª´Ó¹ı³Ì·µ»Ø¡£ÆôÓÃÖ§³Öºó£¬½«Ê¶±ğÎª´Ó gosub ·µ»Ø¡£
 £¨from p


-------------------------------------------------------- KeyPgReturnGosub ----

Return (From Gosub)   ·µ»Ø
  
¿ØÖÆÒª´Ó¹ı³Ì»ò ·µ»ØµÄÁ÷Óï¾ä¡£GoSub

Óï·¨
Return [ label ]

ÃèÊö
ReturnÓÃÓÚ´Ó gosub ·µ»Ø¡£
ÒòÎª¿ÉÄÜÒâÎ¶×Å´Ó gosub ·µ»Ø»ò´Ó¹ı³Ì·µ»Ø£¬²¢ÇÒ¿ÉÓÃÓÚÆôÓÃºÍ½ûÓÃÖ§³Ö¡£µ±Ö§³Ö±»½ûÓÃÊ±£¬½«±»Ê¶±ğÎª´Ó¹ı³Ì·µ»Ø¡£ÆôÓÃÖ§³Öºó£¬½«Ê¶±ğÎª´Ó gosub ·µ»Ø¡£
 £¨À´×


-------------------------------------------------------- KeyPgRgb ----

RGB   RGB
  
¼ÆËã¸ß/Õæ²ÊÉ«Ä£Ê½µÄÓĞĞ§ÑÕÉ«Öµ

Óï·¨
#define RGB(r,g,b) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (&hFF000000ul))

ÓÃ·¨
result = RGB(red, green, blue)

²ÎÊı
red
ºìÉ«·ÖÁ¿Öµ
green
ÂÌÉ«·ÖÁ¿Öµ
blue
À¶É«·ÖÁ¿Öµ

·µ»ØÖµ
×éºÏÑÕÉ«¡£

ÃèÊö
redºÍÊÇ -µÄ·ÖÁ¿·¶Î§Îª -¡£
¸Ãº¯Êı¿ÉÓÃÓÚ¼ÆËãÔÚ¸ß/Õæ²ÊÉ«Ä£Ê½ÏÂÊ¹ÓÃµÄÓĞĞ§ÑÕÉ«Öµ¡£Ëü·µ»ØÒ»¸öÎŞ·ûºÅ long£¬¸ñÊ½Îª £¬ÆäÖĞ £¬µÈÓÚÒÔÊ®Áù½øÖÆ¸ñÊ½´«µİ¸ø´Ëº¯ÊıµÄÖ


-------------------------------------------------------- KeyPgRgba ----

RGBA   RGBA
  
¼ÆËãÓĞĞ§µÄÑÕÉ«Öµ£¬°üÀ¨¸ß/Õæ²ÊÉ«Ä£Ê½µÄ alpha£¨Í¸Ã÷¶È£©

Óï·¨
#define RGBA(r,g,b,a) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (CUByte(a) Shl 24))

ÓÃ·¨
result = RGBA(red, green, blue, alpha)

²ÎÊı
red
ºìÉ«·ÖÁ¿Öµ
green
ÂÌÉ«·ÖÁ¿Öµ
blue
À¶É«·ÖÁ¿Öµ
alpha
°¢¶û·¨·ÖÁ¿Öµ

·µ»ØÖµ
×éºÏÑÕÉ«

ÃèÊö
red¡¢ºÍ ÊÇ·¶Î§Îª -µÄ×é¼ş¡£
¸Ãº¯Êı¿ÉÓÃÓÚ¼ÆËãÓĞĞ§µÄÑÕÉ«Öµ£¬°üÀ¨ÓÃÓÚÔÚ¸ß/Õæ²ÊÉ«Ä£Ê½ÏÂÊ¹ÓÃµÄ Alpha Í¨µÀ¡£Ëü·µ»ØÒ»¸öÎŞ·ûºÅ³¤ÕûĞÍ£¬¸ñÊ½Îª £¬Æ


-------------------------------------------------------- KeyPgRight ----

Right   ×Ö·û´®È¡ÓÒ±ß
  
·µ»Ø×Ö·û´®×îÓÒ±ßµÄ×Ó×Ö·û´®

Óï·¨
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

ÓÃ·¨
result = Right[$]( str, n )

²ÎÊı
str
Ô´×Ö·û´®¡£
n
×Ó×Ö·û´®³¤¶È£¬ÒÔ×Ö·ûÎªµ¥Î»¡£

·µ»ØÖµ
·µ»Ø ×îÓÒ±ßµÄ×Ó×Ö·û´®¡£str

ÃèÊö
·µ»Ø´Ó µÄÓÒ²à£¨½áÎ²£©¿ªÊ¼µÄ×îÓÒ±ßµ


-------------------------------------------------------- KeyPgRmdir ----

RmDir   É¾Ä¿Â¼
  
´ÓÎÄ¼şÏµÍ³ÖĞÉ¾³ıÎÄ¼ş¼Ğ/Ä¿Â¼

Óï·¨
Declare Function RmDir ( ByRef folder As Const String ) As Long

ÓÃ·¨
result = RmDir( folder )

²ÎÊı
folder
ÒªÉ¾³ıµÄÎÄ¼ş¼Ğ/Ä¿Â¼¡£

·µ»ØÖµ
³É¹¦Ê±·µ»ØÁã £¨0£©£¬Ê§°ÜÊ±·µ»Ø


-------------------------------------------------------- KeyPgRnd ----

Rnd   Ëæ»úÖµ
  
·µ»Ø·¶Î§ÖĞµÄËæ»úË«¾«¶ÈÊı×Ö[0, 1)

Óï·¨
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

ÓÃ·¨
result = Rnd( seed )

²ÎÊı
seed
¿ÉÑ¡²ÎÊı¡£Èç¹ûµÄÖµÎªÁã £¨£©£¬ÔòÉú³ÉµÄ×îºóÒ»¸öËæ»úÊıÎª repeate¡£¶ÔÓÚÈÎºÎÆäËûÊı×Ö£¬½«·µ»ØÒ»¸öĞÂµÄËæ»úÊı¡£Ê¹ÓÃÓë QB ¼æÈİµÄËã·¨£¬¸ºÊı½«ÍêÈ«ÖØĞÂÉè¶¨Éú³ÉÆ÷µÄÖÖ×Ó¡£no ²ÎÊıµÄÄ¬ÈÏÖµÊÇ·µ»ØÒ»¸öĞÂµÄËæ»úÊı¡£Singleseed0.0

·µ»ØÖµ
·µ»ØÉú³ÉµÄËæ»úÊı¡£

ÃèÊö
»ùÓÚËæ»úÖÖ×Ó·µ»ØÇøÓòÖĞµÄĞí¶àÀàĞÍ£¨¼´ £©£¬Çë²Î¼û¡£
¿ÉÒÔÊ¹ÓÃ¸÷ÖÖ²»Í¬µÄË


-------------------------------------------------------- KeyPgRset ----

RSet   ×Ö·û´®¶ÔÆëÏòÓÒ
  
ÓÒ¶ÔÆë×Ö·û´®»º³åÇøÖĞµÄ×Ö·û´®

Óï·¨
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

ÓÃ·¨
RSet dst, src

²ÎÊı
dst
ÓÃÓÚ½«ÎÄ±¾¸´ÖÆµ½ÆäÖĞµÄ»º³åÇø¡£StringWString
src
À´Ô´»òÕıÈ·Ö¤Ã÷¡£StringWString

ÃèÊö
RSetright ½«ÎÄ±¾¶ÔÆëµ½×Ö·û´®»º³åÇøÖĞ£¬ÓÃ¿Õ¸ñÌî³ä×Ö·û


-------------------------------------------------------- KeyPgRtrim ----

RTrim   ×Ö·û´®É¾¿Õ¸ñÓÒ±ß
  
É¾³ı×Ö·û´®ÓÒ²àµÄÖÜÎ§×Ó×Ö·û´®»ò×Ö·û

Óï·¨
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

ÓÃ·¨
result = RTrim[$]( str [, [ Any ] trimset ] )

²ÎÊı
str
Ô´×Ö·û´®¡£
trimset
ÒªĞŞ¼ôµÄ×Ó×Ö·û´®¡£

·µ»ØÖµ
·µ»ØĞŞ¼ô¹ıµÄ×Ö·û´®¡£

ÃèÊö
´Ë¹ı³Ì´ÓÔ´×Ö·û´®µÄÓÒ²à£¨Ä©Î²£©ĞŞ¼ôÖÜÎ§µÄ×Ö·û¡£Èç¹ûÖ¸¶¨£¬½«ĞŞ¼ôÆ


-------------------------------------------------------- KeyPgRun ----

Run   ÔËĞĞ
  
½«Ö´ĞĞ×ªÒÆµ½Íâ²¿³ÌĞò

Óï·¨
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

ÓÃ·¨
result = Run( program [, arguments ] )

²ÎÊı
program
Òª½«¿ØÖÆÈ¨ÒÆ½»¸øµÄ³ÌĞò£¨¿ÉÖ´ĞĞÎÄ¼ş£©µÄÎÄ¼şÃû£¨°üÀ¨ÎÄ¼şÂ·¾¶£©¡£
arguments
Òª´«µİ¸ø³ÌĞòµÄÃüÁîĞĞ²ÎÊı¡£

·µ»Ø


-------------------------------------------------------- KeyPgSadd ----

SAdd   È¡µØÖ·
  
·µ»ØÖ¸Ïò×Ö·û´®±äÁ¿Êı¾İµÄÖ¸Õë

Óï·¨
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

ÓÃ·¨
result = SAdd( str )

²ÎÊı
str
ÓÃÓÚ»ñÈ¡ µØÖ·µÄ×Ö·û´®±í´ïÊ½»ò±äÁ¿

·µ»ØÖµ
Ö¸ÏòÓ


-------------------------------------------------------- KeyPgScope ----

Scope...End Scope
  
ÓÃÓÚ¿ªÊ¼ĞÂ×÷ÓÃÓò¿éµÄÓï¾ä

Óï·¨
Scope
[statements]
End Scope

ÃèÊö
Scope ¿éÔÊĞíÔÚ³ÌĞòÖĞ£¨ÖØĞÂ£©¶¨ÒåºÍÔÚ±¾µØÊ¹ÓÃ±äÁ¿¡£
µ±±äÁ¿ÔÚ×÷ÓÃÓò½á¹¹ÄÚ£¨ÖØĞÂ£©¶¨ÒåÊ±£¬¿ÉÒÔ´ÓÆä£¨ÖØĞÂ£©¶¨Òåµ½×÷ÓÃÓò½áÊøÊ¹ÓÃ´Ë¾Ö²¿¹¤×÷±äÁ¿¡£ÔÚ´ËÆÚ¼ä£¬×÷ÓÃÓòÍâ¾ßÓĞÏàÍ¬Ãû³ÆµÄÈÎºÎ±äÁ


-------------------------------------------------------- KeyPgScreenCons ----

Screen (Console)   ÆÁÄ»
  
»ñÈ¡¸ø¶¨Î»ÖÃµÄ×Ö·û»òÑÕÉ«ÊôĞÔ

Óï·¨
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

ÓÃ·¨
result = Screen( row, column [, colorflag ] )

²ÎÊı
row
´Ó¿ØÖÆÌ¨×óÉÏ½Ç¿ªÊ¼µÄ´Ó 1 ¿ªÊ¼µÄÆ«ÒÆÁ¿¡£
column
´Ó¿ØÖÆÌ¨×óÉÏ½Ç¿ªÊ¼µÄ´Ó 1 ¿ªÊ¼µÄÆ«ÒÆÁ¿¡£
colorflag
Èç¹ûµÈÓÚ 0£¬Ôò·µ»Ø ASCII ´úÂë£¬·ñÔò·µ»Ø color ÊôĞÔ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÎª 0¡£

·µ»ØÖµ
×Ö·ûµÄ ASCII »òÑÕÉ«ÊôĞÔ¡£

ÃèÊö
Screen·µ»ØÔÚ¿ØÖÆÌ¨Êä³öµÄ¸ø¶¨Î»ÖÃÕÒµ½µÄ×Ö·û»ò color ÊôĞÔ¡£ËüÔÚ¿ØÖÆÌ¨Ä£Ê½ºÍÍ¼ĞÎÄ£Ê½ÏÂ¹¤×÷¡£
 col


-------------------------------------------------------- KeyPgScreencontrol ----

ScreenControl   ÆÁÄ»¿ØÖÆ
  
ÉèÖÃ»ò»ñÈ¡ÄÚ²¿Í¼ĞÎ¿âÉèÖÃ

Óï·¨
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As Long = &h80000000, ByRef param2 As Long = &h80000000, ByRef param3 As Long = &h80000000, ByRef param4 As Long = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As LongInt, ByRef param2 As LongInt = &h80000000, ByRef param3 As LongInt = &h80000000, ByRef param4 As LongInt = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param As String)

ÓÃ·¨
in the LONG (or INTEGER<32>) version of the sub:
ScreenControl( what [, [ param1 ] [, [ param2 ] [, [ param3 ] [, param4 ]]]] )
or,
ScreenControl( what , param )
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenControl( what , param1 [, [ param2 ] [, [ param3 ] [, param4 ]]] )
or,
ScreenControl( what , param )

²ÎÊı
what
Ö¸¶¨ÒªÖ´ĞĞµÄ¹¦ÄÜ
param1
µÚÒ»¸öÕûÊı²ÎÊı£¬°üº¬ÒªÔÚ½øÈëÊ±ÉèÖÃµÄÖµ»òÔÚÍË³öÊ±»ñµÃµÄÖµ
param2
µÚ¶ş¸öÕûÊı²ÎÊı£¬°üº¬ÒªÔÚ½øÈëÊ±ÉèÖÃµÄÖµ»òÔÚÍË³öÊ±»ñµÃµÄÖµ
param3
µÚÈı¸öÕûÊı²ÎÊı£¬°üº¬ÒªÔÚ½øÈëÊ±ÉèÖÃµÄÖµ»òÔÚÍË³öÊ±»ñµÃµÄÖµ
param4
µÚËÄ¸öÕûÊı²ÎÊı£¬°üº¬ÒªÔÚ½øÈëÊ±ÉèÖÃµÄÖµ»òÔÚÍË³öÊ±»ñµÃµÄÖµ
param
×Ö·û´®²ÎÊı£¬°üº¬ÒªÔÚÊäÈëÊ±ÉèÖÃµÄÎÄ±¾»òÔÚÍË³öÊ±»ñµÃµÄÎÄ±¾

ÃèÊö
´Ëº¯Êı¿ÉÓÃÓÚÉèÖÃ»ò»ñÈ¡Ä


-------------------------------------------------------- KeyPgScreencopy ----

ScreenCopy   ÆÁÄ»¸´ÖÆ
  
½«Í¼ĞÎÒ³µÄÄÚÈİ¸´ÖÆµ½ÁíÒ»¸öÍ¼ĞÎÒ³

Óï·¨
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

ÓÃ·¨
ScreenCopy [ from_page ] [, to_page ]

²ÎÊı
from_page
Òª´ÓÖĞ¸´ÖÆµÄÒ³Ãæ
to_page
Òª¸´ÖÆµ½µÄÒ³Ãæ

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÁã £¨£©£¬»ò·µ»Ø·ÇÁã´íÎó´úÂëÒÔÖ¸Ê¾Ê§°Ü¡£0

ÃèÊö
from_pageÊÇÒª´ÓÖĞ¸´ÖÆµÄÒ³Ãæ¡£Èç¹ûÊ¡ÂÔ´Ë²ÎÊı£¬Ôò¼Ù¶¨µ±Ç°¹¤×÷Ò³¡£ ÊÇÒª¸´ÖÆµ½µÄÒ³Ãæ¡£Èç¹ûÊ¡ÂÔ´Ë²ÎÊı£¬Ôò¼Ù¶¨µ±Ç°¿É¼ûµÄÒ³Ãæ¡£Ò³


-------------------------------------------------------- KeyPgScreenevent ----

ScreenEvent   ÆÁÄ»ÊÂ¼ş
  
²éÑ¯ºÍ¼ìË÷ÏµÍ³ÊÂ¼ş¡£

Óï·¨
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

ÓÃ·¨
result = ScreenEvent( [ event ] )

²ÎÊı
event
Ö¸¶¨º¯ÊıÓ¦ÔÚÆäÖĞ´æ´¢ÊÂ¼şÊı¾İµÄ»º³åÇø¡£

·µ»ØÖµ
Èç¹ûÓĞÒª¼ìË÷µÄ¹ÒÆğÊÂ¼ş£¬Ôò·µ»Ø£¬·ñÔò¡£-10

ÃèÊö
´Ëº¯Êı´ÓÄÚ²¿ GfxLib ÊÂ¼ş¶ÓÁĞÖĞ·µ»Ø×îĞÂµÄ¿ÉÓÃÏµÍ³ÊÂ¼ş¡£ÀıÈç£¬ÎÒÃÇËùËµµÄ¡°ÊÂ¼ş¡±ÊÇÖ¸ÈÎºÎÊó±ê»ò¼üÅÌ»î¶¯¡£
ÊÂ¼şÊı¾İ£¨Èç¹û¿ÉÓÃ£©½«±»¸´ÖÆ


-------------------------------------------------------- KeyPgScreenglproc ----

ScreenGLProc   ÆÁÄ»GLµØÖ·
  
»ñÈ¡ OpenGL ¹ı³ÌµÄµØÖ·

Óï·¨
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

²ÎÊı
procname
Òª¼ìË÷ µØÖ·µÄ¹ı³ÌµÄÃû³Æ

ÃèÊö
´Ëº¯Êı¿ÉÓÃÓÚ»ñÈ¡ÈÎºÎ OpenGL ¹ı³ÌµÄµØÖ·£¬ÒÔÓÃÓÚ¼ìË÷Ö¸ÏòÓë OpenGL À©Õ¹¹ØÁªµ


-------------------------------------------------------- KeyPgScreengraphics ----

Screen (Graphics)   ÆÁÄ»
  
Ê¹ÓÃÀàËÆ QB µÄÄ£Ê½±àºÅ³õÊ¼»¯Í¼ĞÎÄ£Ê½

Óï·¨
-lang fb|fblite ·½ÑÔ£º-lang qb ·½ÑÔ£º
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]

Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]
²ÎÊı
mode 
ÊÇ QB ÑùÊ½Í¼ĞÎÆÁÄ»Ä£Ê½±àºÅ£¨¼ûÏÂÎÄ£©¡£Èç¹ûÎª £¬Ôò¹Ø±ÕÈÎºÎµ±Ç°ÉèÖÃµÄÍ¼ĞÎÄ£Ê½£¬²¢ÇÒËùÓĞº¯Êı¶¼½«»Ö¸´ÆäÕı³£µÄ¿ØÖÆÌ¨Ä£Ê½¹¦ÄÜ¡£ÓĞ¹Ø¿ÉÓÃÄ£Ê½£¬Çë²Î¼ûÏÂÎÄ¡£mode0
depth
ÊÇÑÕÉ«Éî¶È£¨ÒÔÃ¿ÏñËØÎ»ÊıÎªµ¥Î»£©¡£ÕâÖ»¶ÔÄ£Ê½ºÍ¸ü¸ß°æ±¾ÓĞÓ°Ïì¡£ºÍ µÄÖµÊÇÔÊĞíµÄ¡£ Ò²·Ö±ğÔÊĞí×÷Îª ºÍ µÄ±ğÃû¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÎª ¡£1481632152416328
num_pages
ÊÇÄúÏëÒªµÄÊÓÆµÒ³ÃæÊı£¬¼ûÏÂÎÄ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÎª ¡£1
flags
ÓÃÓÚÑ¡Ôñ¼¸¸ö¶«Î÷×÷ÎªÍ¼ĞÎÇı¶¯³ÌĞòÓÅÏÈ¼¶£¬È«ÆÁÄ£Ê½¡£ÎÄ¼şÖĞÔ¤¶¨ÒåÁËÒ»Ğ©³£Á¿£¬¿É¹©Ê¹ÓÃ¡£Çë²ÎÔÄÒ³Ãæ ScreenRes ÒÔ»ñÈ¡¿ÉÓÃ±êÖ¾¡£fbgfx.bi
refresh_rate
ÇëÇóË¢ĞÂÂÊ¡£Èç¹ûËüÔÚµ±Ç°¿¨ÖĞ²»¿ÉÓÃ»òÊ¡ÂÔÁË²ÎÊı£¬FreeBASIC »á×Ô¶¯Ñ¡ÔñËÙÂÊ¡£
active_page
ÓÃÓÚÉèÖÃ»î¶


-------------------------------------------------------- KeyPgScreeninfo ----

ScreenInfo   ÆÁÄ»ĞÅÏ¢
  
¼ìË÷ÓĞ¹Øµ±Ç°ÊÓÆµÄ£Ê½»ò×ÀÃæµÄĞÅÏ¢¡£

Óï·¨
Declare Sub ScreenInfo ( ByRef w As Long = 0, ByRef h As Long = 0, ByRef depth As Long = 0, ByRef bpp As Long = 0, ByRef pitch As Long = 0, ByRef rate As Long = 0, ByRef driver As String = "" )
Declare Sub ScreenInfo ( ByRef w As LongInt, ByRef h As LongInt, ByRef depth As LongInt = 0, ByRef bpp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef rate As LongInt = 0, ByRef driver As String = "" )

ÓÃ·¨
in the LONG (or INTEGER<32>) version of the sub:
ScreenInfo [ w ] [, [ h ] [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]]
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenInfo w , h [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]

²ÎÊı
w
¿í¶È¡£
h
¸ß¶È¡£
depth
ÑÕÉ«Éî¶È£¨ÒÔÎ»Îªµ¥Î»£©¡£
bpp
Ã¿ÏñËØ×Ö½ÚÊı¡£
pitch
Ã¿ÌõÉ¨ÃèĞĞµÄ×Ö½ÚÊı¡£
rate
Ë¢ĞÂÂÊ¡£
driver
Çı¶¯³ÌĞòÃû³Æ¡£

ÃèÊö
´Ë¹¦ÄÜ¿ÉÓÃÓÚ»ñÈ¡µ±Ç°Ä£Ê½ĞÅÏ¢£¬ÈçÍ¼ĞÎÇı¶¯³ÌĞòÃû³Æ¡¢ÑÕÉ«Éî¶È¡¢ÆÁÄ»´óĞ¡µÈ¡£
Èç¹ûÎ´ÉèÖÃÍ¼ĞÎÄ£Ê½Ê±µ÷ÓÃ if£¬Ëü½«·µ»ØÓĞ¹Ø×ÀÃæµ


-------------------------------------------------------- KeyPgScreenlist ----

ScreenList   ÆÁÄ»ÁĞ±í
  
²éÕÒ¿ÉÓÃµÄÈ«ÆÁÊÓÆµÄ£Ê½

Óï·¨
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

ÓÃ·¨
result = ScreenList( [ depth ] )

²ÎÊı
depth
ÇëÇóÄ£Ê½ÁĞ±íµÄÑÕÉ«Éî¶È£¨Ö§³ÖµÄÉî¶ÈÎª ¡¢ ¡¢ ºÍ815162432)

·µ»ØÖµ
·µ»Ø £¬µ±Ã»ÓĞ¸ü¶àÒª¶ÁÈ¡µÄ·Ö±æÂÊÊ±¡£0

ÃèÊö
ËüµÄ¹¤×÷·½Ê½Óëº¯ÊıÀàËÆ£º¶Ôº¯ÊıµÄµÚÒ»´Îµ÷ÓÃĞèÒªÖ¸¶¨²ÎÊı£¬Ëü·µ»ØËùÇëÇóÉî¶ÈµÄ×îµÍÖ§³Ö·Ö±æÂÊ¡£½øÒ»²½µ÷ÓÃÎŞ²ÎÊı½«·µ»ØÏÂÒ»¸ö½â¾ö·½°¸¡£µ±Ã


-------------------------------------------------------- KeyPgScreenlock ----

ScreenLock   ÆÁÄ»Ëø¶¨
  
Ëø¶¨¹¤×÷Ò³µÄÖ¡»º³åÇø

Óï·¨
Declare Sub ScreenLock ( )

ÓÃ·¨
ScreenLock

ÃèÊö
FreeBASIC µÄËùÓĞÍ¼ĞÎ¿âº¯Êı¶¼»æÖÆµ½Ö¡»º³åÇø£¬²¢ÇÒÃ¿´Î»æÖÆÊ±¶¼»á×Ô¶¯½«Ö¡»º³åÇø¸´ÖÆµ½Êµ¼ÊµÄÆÁÄ»ÄÚ´æÖĞ¡£Èç¹ûÓÃ»§³ÌĞòÖ´ĞĞ´óÁ¿»æÍ¼£¬Ôò×Ô¶¯Ë¢ĞÂ¿ÉÄÜĞèÒª»¨·Ñ´óÁ¿Ê±¼ä¡£
¸Ã¹¦ÄÜËø¶¨×Ô¶¯Ë


-------------------------------------------------------- KeyPgScreenptr ----

ScreenPtr   ÆÁÄ»Ö¸Õë
  
·µ»ØÖ¸Ïòµ±Ç°¹¤×÷Ò³µÄÖ¡»º³åÇøµÄÖ¸Õë

Óï·¨
Declare Function ScreenPtr ( ) As Any Ptr

ÓÃ·¨
result = ScreenPtr

·µ»ØÖµ
Ö¸Ïòµ±Ç°¹¤×÷Ò³Ö¡»º³åÄÚ´æµÄÖ¸Õë£¬Èç¹ûÎ´ÉèÖÃÍ¼ĞÎÄ£Ê½£¬ÔòÎª NULL £¨£©¡£0

ÃèÊö
ScreenPtrÌá¹©ÁËÒ»ÖÖÖ±½Ó¶Á/Ğ´¹¤×÷Ò³µÄÖ¡»º³åÇøµÄ·½·¨¡£ Ó¦ÔÚ³¢ÊÔÈÎºÎ¶ÁÈ¡»òĞ´ÈëÖ®Ç°Ê¹ÓÃ¡£·µ»ØµÄÖ¸ÕëÔÚ¶Ô »ò µÄÈÎºÎºóĞøµ÷ÓÃÖ®Ç°Ò»Ö±ÓĞĞ§£¬Õâ½


-------------------------------------------------------- KeyPgScreenres ----

ScreenRes   ÆÁÄ»³õ»¯
  
Í¨¹ıÖ¸¶¨Ë®Æ½ºÍ´¹Ö±·Ö±æÂÊÀ´³õÊ¼»¯Í¼ĞÎÄ£Ê½

Óï·¨
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long
ÓÃ·¨
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

²ÎÊı
width,height
·Ö±ğÏÔÊ¾¿í¶ÈºÍ¸ß¶È¡£¶ÔÓÚÈ«ÆÁÄ£Ê½£¬ÓÃ»§Ó¦Ê¹ÓÃ ¼ì²é·Ö±æÂÊµÄ¿ÉÓÃĞÔ¡£ScreenList
depth
ÑÕÉ«Éî¶È£¨ÒÔÃ¿ÏñËØÎ»ÊıÎªµ¥Î»£©¡£ÓĞĞ§µÄÑÕÉ«Éî¶ÈÎª£º¡¢¡¢¡¢¡¢ ºÍ ¡£ºÍ µÄÖµÒ²ÔÊĞí·Ö±ğ×÷Îª ºÍ µÄ±ğÃû¡£Èç¹ûÊ¡ÂÔ£¬ÔòÄ¬ÈÏÖµÎªÃ¿ÏñËØ 8 Î»¡£8 Î»¼°ÒÔÏÂ½«¸ø³öµ÷É«°åÍ¼Ïñ¡£È±Ê¡µ÷É«°å½«ÊÇ ÖĞÊ¹ÓÃµÄ 256 É«°åµÄµÚÒ»ÖÖÑÕÉ«¡£12481632152416322 ^ depthScreen 13
num_pages
Òª´´½¨µÄÊÓÆµÒ³Êı£¬È±Ê¡Çé¿öÏÂÎª ¡££¨Çë²ÎÔÄ1Screen)
flags
ÓÃÓÚÉèÖÃÆÁÄ»µÄ¸÷ÖÖÊôĞÔ£¬°üÀ¨È«ÆÁÄ£Ê½ºÍÍ¼ĞÎÇı¶¯³ÌĞòÓÅÏÈ¼¶¡££¨ÓĞ¹Ø¿ÉÓÃ±êÖ¾£¬Çë²ÎÔÄ±ê×¼±êÍ·¡°fbgfx.bi¡±£©
refresh_rate
ÆÁÄ»ËùĞèµÄË¢ĞÂÂÊ½ö¶ÔÈ«ÆÁÄ£Ê½ÓĞÓ°Ïì£¬²¢ÇÒ½ö¶ÔÄ³Ğ©ÏµÍ³ºÍÇı¶¯³ÌĞòÓĞÓ°Ïì¡£Ä¬ÈÏÎªÊÊµ±µÄÖµ£¬Î


-------------------------------------------------------- KeyPgScreenset ----

ScreenSet   ÆÁÄ»ÉèÖÃ
  
ÉèÖÃµ±Ç°¹¤×÷ºÍ¿É¼ûÒ³Ãæ

Óï·¨
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

ÓÃ·¨
ScreenSet [ work_page ] [, visible_page ]

²ÎÊı
work_page
¹¤×÷Ò³ÃæË÷Òı
visible_page
¿É¼ûÒ³ÃæµÄË÷Òı

ÃèÊö
ScreenSetÔÊĞíÉèÖÃµ±Ç°¹¤×÷Ò³ÃæºÍµ±Ç°¿É¼ûÒ³Ãæ¡£Ò³Âë·¶Î§´Ó µ½ £¬ÆäÖĞ ÊÇ Ê¹ÓÃ »ò ÉèÖÃÍ¼ĞÎÄ£Ê½Ê±Ö¸¶¨µÄÒ³Êı¡£Äú¿ÉÒÔÊ¹ÓÃ´Ë¹¦ÄÜÀ´ÊµÏÖ·­Ò³»òË«»º³å¡£
Èç¹ûÌá¹©µ«Ê¡ÂÔ £¬Ô


-------------------------------------------------------- KeyPgScreensync ----

ScreenSync   ÆÁÄ»Í¬²½
  
½«ÏÔÊ¾Æ÷¸üĞÂÓëÓ²¼şÍ¬²½

Óï·¨
Declare Function ScreenSync ( ) As Long

ÓÃ·¨
result = ScreenSync

·µ»ØÖµ
Èç¹û³É¹¦£¬ÔòÎªÁã;Èç¹ûÒÔÇ°Î´ÉèÖÃÍ¼ĞÎÄ£Ê½£¬ÔòÎª·ÇÁã¡£

ÃèÊö
´Ë GfxLib Óï¾äÍ£Ö¹³ÌĞòµÄÖ´ĞĞ£¬Ö±µ½Í¼ĞÎ¿¨·¢³öĞÅºÅ£¬ËüÒÑ½áÊø¸ú×ÙÖ¡²¢½«Æô¶¯ĞÂÖ¡¡£
Èç¹û³ÌĞòÊ¹ÓÃÖ¡Ö®¼äµÄÕâÒ»Ğ¡¶ÎÊ±¼ä¼ä¸ôÀ´ÖØ»æÍ¼Ïñ£¬ÔòÉÁË¸»á´ó´ó¼õÉÙ¡£


-------------------------------------------------------- KeyPgScreenunlock ----

ScreenUnlock   ÆÁÄ»½âËø
  
½âËø¹¤×÷Ò³ÃæµÄÖ¡»º³åÇø

Óï·¨
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

ÓÃ·¨
ScreenUnlock [ start_line ] [, end_line ]

²ÎÊı
startline
¿ÉÑ¡²ÎÊı£¬Ö¸¶¨Òª¸üĞÂµÄµÚÒ»¸öÆÁÄ»ĞĞ¡£Èç¹ûÊ¡ÂÔ£¬Ôò¼Ù¶¨¶¥²¿ÆÁÄ»ĞĞ¡£
endline
Ö¸¶¨Òª¸üĞÂµÄ×îºóÒ»¸öÆÁÄ»ĞĞµÄ¿ÉÑ¡²ÎÊı¡£Èç¹ûÊ¡ÂÔ£¬Ôò¼Ù¶¨µ×²¿ÆÁÄ»ĞĞ¡£

ÃèÊö
ScreenUnlock½âËøµ±Ç°¹¤×÷Ò³Ãæ£¨¼ÙÉèËüÒÔÇ°ÒÑÍ¨¹ıµ÷ÓÃËø¶¨£©£¬²¢ÔÊĞíÏµÍ³ÖØĞÂÆô¶¯¶¨ÆÚ¸üĞÂÆÁÄ»¡£µ±Ê¹ÓÃ ºÍ µ÷ÓÃÊ±£


-------------------------------------------------------- KeyPgSecond ----

Second   Ê±¼äÈ¡Ãë
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡ÃëÊı 

Óï·¨
Declare Function Second ( ByVal date_serial As Double ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Second( date_serial )

²ÎÊı
date_serial
ÈÕÆÚĞòÁĞ

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ·µ»ØÃ


-------------------------------------------------------- KeyPgSeekreturn ----

Seek (Function)   ÎÄ¼ş¶¨Î»
  
»ñÈ¡ÎÄ¼ş»òÉè±¸µÄÏÂÒ»¸ö¶Á/Ğ´²Ù×÷µÄÎ»ÖÃ

Óï·¨
Declare Function Seek ( ByVal filenum As Long ) As LongInt

²ÎÊı
filenum
´ò¿ªµÄÎÄ¼şµÄÎÄ¼ş±àºÅ

·µ»ØÖµ
ÏÂÒ»´Î¶ÁÈ¡»òĞ´Èë²Ù×÷½«·¢ÉúµÄÎÄ¼şÎ»ÖÃ¡£

ÃèÊö
Èç¹ûÎÄ¼şÊÇÔÚ·ÃÎÊÄ£Ê½ÏÂ´ò¿ªµÄ£¬Ôò¸ÃÎ»ÖÃÔÚ¼ÇÂ¼Ö


-------------------------------------------------------- KeyPgSeekset ----

Seek (Statement)   ÎÄ¼ş¶¨Î»
  
ÉèÖÃÎÄ¼şÉÏÏÂÒ»¸ö¶Á/Ğ´²Ù×÷µÄÎ»ÖÃ

Óï·¨
Seek [#]filenum, position

²ÎÊı
filenum
´ò¿ªµÄÎÄ¼şµÄÎÄ¼ş±àºÅ
position
i/o ²Ù×÷µÄĞÂÎ»ÖÃ

ÃèÊö
ÉèÖÃ¶ÔÎÄ¼şÖ´ĞĞÏÂÒ»´Î¶ÁÈ¡»òĞ´Èë²Ù×÷µÄÎ»ÖÃ¡£
Èç¹ûÎÄ¼şÊÇÔÚ·ÃÎÊÄ£Ê½ÏÂ´ò¿ªµÄ£¬Ôò¸ÃÎ»ÖÃÔÚ


-------------------------------------------------------- KeyPgSelectcase ----

Select Case   Ñ¡ÔñÅĞ¶Ï
  
Ìõ¼şÓï¾ä¿é

Óï·¨
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

ÃèÊö
Select Case¸ù¾İ±í´ïÊ½µÄÖµÖ´ĞĞÌØ¶¨´úÂë¡£¸Ã±í´ïÊ½¼ÆËãÒ»´Î£¬²¢°´Ë³ĞòÓëÃ¿¸ö±í´ïÊ½½øĞĞ±È½Ï£¬Ö±µ½ÕÒµ½Æ¥ÅäµÄ±í´ïÊ½¡£Ö´ĞĞÆ¥ÅäµÄ Case ·ÖÖ§ÖĞµÄ´úÂë£¬³ÌĞòÏòÏÂÌøµ½¿éµÄÄ©Î²¡£ Æ¥ÅäÈÎºÎÉĞÎ´Æ¥ÅäµÄÇé


-------------------------------------------------------- KeyPgSetdate ----

SetDate   ÉèÖÃÈÕÆÚ
  
ÉèÖÃµ±Ç°ÏµÍ³ÈÕÆÚ

Óï·¨
Declare Function SetDate ( ByRef newdate As Const String ) As Long

ÓÃ·¨
result = SetDate( newdate )

²ÎÊı
newdate
ÒªÉèÖÃµÄĞÂÈÕÆÚ

·µ»ØÖµ
ÔÚ³ı DOS Ö®ÍâµÄËùÓĞ¶Ë¿ÚÉÏ³É¹¦Ê±·µ»ØÁã£¬»òÔÚÊ§°ÜÊ±·µ»Ø·ÇÁã¡£

ÃèÊö
ÒªÉèÖÃÈÕÆÚ£¬Ö»Ğè°´ÕÕÒÔÏÂ¸ñÊ½Ö®Ò»ÉèÖÃ¸ñÊ½²¢·¢ËÍµ½£º¡¢¡¢¡¢»ò£¨ÊÇÔÂ·İ¡¢ÊÇÈÕ»òÄê£©¡£Á½Î»ÊıµÄÄê·İÊı×Ö»ùÓÚ 1900 Äê¡£
·µ»ØµÄ´íÎó´úÂë¿ÉÒÔÔÚÏÂÒ»


-------------------------------------------------------- KeyPgSetenviron ----

SetEnviron   ÉèÖÃ»·¾³
  
ÉèÖÃÏµÍ³»·¾³±äÁ¿

Óï·¨
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

ÓÃ·¨
result = SetEnviron( varexpression )

²ÎÊı
varexpression
»·¾³±äÁ¿µÄÃû³ÆºÍÉèÖÃ²ÉÓÃÒÔÏÂ£¨»òµÈĞ§£©ĞÎÊ½£ºvarname=varstring¡£
 £¨varname ÊÇ»·¾³±äÁ¿µÄÃû³Æ£¬varstring ÊÇÒªÉèÖÃµÄÎÄ±¾Öµ£©

·µ»ØÖµ
Èç¹û³É¹¦£¬Ôò·µ»ØÁã £¨0£©£¬·ñÔò·µ»Ø·ÇÁã¡£

ÃèÊö
ĞŞ


-------------------------------------------------------- KeyPgSetmouse ----

SetMouse   ÉèÖÃÊó±ê
  
ÉèÖÃÊó±ê¹â±êµÄÎ»ÖÃºÍ¿É¼ûĞÔ

Óï·¨
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

ÓÃ·¨
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

²ÎÊı
£¨¶ÔÓÚÃ¿¸ö²ÎÊı£¬ÊÇÒ»¸ö±íÊ¾¡°ÎŞ¸ü¸Ä¡±µÄÌØÊâÖµ¡£-1
x
¿ÉÑ¡ - ÉèÖÃ x ×ø±ê
y
¿ÉÑ¡ - ÉèÖÃ y ×ø±ê
visibility
¿ÉÑ¡ - ÉèÖÃ¿É¼ûĞÔ£º±íÊ¾¿É¼û£¬±íÊ¾Òş²Ø10
clip
¿ÉÑ¡ - ÉèÖÃ¼ôÇĞ£ºÖ¸Ê¾Êó±ê±»¼ô¼­µ½Í¼ĞÎ´°¿Ú£¬±íÊ¾Ã»ÓĞ¼ôÇĞ10

·µ»ØÖµ
³É¹¦Ê±ÎªÁã £¨£©£¬·ÇÁã±íÊ¾Ê§°Ü¡£0

ÃèÊö
SetMouse½«ÉèÖÃÊó±êÖ¸ÕëµÄ £¨£¬ £© ×ø±ê£¬ÒÔ¼°ÉèÖÃÆä¿É¼ûĞÔ¡£Êó±êÎ»ÖÃÊÇÊ¹ÓÃ an


-------------------------------------------------------- KeyPgSettime ----

SetTime   ÉèÖÃÊ±¼ä
  
ÉèÖÃµ±Ç°ÏµÍ³Ê±¼ä

Óï·¨
Declare Function SetTime ( ByRef newtime As Const String ) As Long

ÓÃ·¨
result = SetTime( newtime )

²ÎÊı
newtime
ÉèÖÃĞÂÊ±¼ä

·µ»ØÖµ
ÔÚ³ı DOS Ö®ÍâµÄËùÓĞ¶Ë¿ÚÉÏ³É¹¦Ê±·µ»ØÁã£¬»òÔÚÊ§°ÜÊ±·µ»Ø·ÇÁã¡£

ÃèÊö
ÒªÉèÖÃÊ±¼ä£¬Çë¸ñÊ½»¯ÈÕÆÚ²¢°´ÒÔÏÂ¸ñÊ½Ö®Ò»·¢ËÍµ½£º¡¢ ¡¢ »ò £¨ÊÇĞ¡Ê±¡¢·ÖÖÓºÍÃë£©¡£
·µ»ØµÄ


-------------------------------------------------------- KeyPgSgn ----

Sgn   ÊıÈ¡·ûºÅ
  
·µ»ØÊı×ÖµÄ·ûºÅ²¿·Ö

Óï·¨
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

ÓÃ·¨
result = Sgn( number )

²ÎÊı
number
Òª²éÕÒ±êÖ¾µÄºÅÂë

·µ»ØÖµ
·µ»Ø µÄ·ûºÅ²¿·Ö¡£number
Èç¹ûÊı×Ö´óÓÚÁã£¬Ôò·µ»Ø ¡£Sgn1
Èç¹ûÊı×ÖµÈÓÚÁã£¬Ôò·µ»Ø ¡£Sgn0
Èç¹ûÊı×ÖĞ¡ÓÚÁã£¬Ôò·µ»Ø ¡£Sgn-1

ÃèÊö
±ØĞèµÄ²ÎÊı¿ÉÒÔÊÇÈÎºÎÓĞ


-------------------------------------------------------- KeyPgShared ----

Shared   ¹²ÏíĞÍ
  
±äÁ¿ÉùÃ÷ĞŞÊÎ·û£¬ÓÃÓÚÖ¸¶¨Õû¸öÄ£¿éµÄ¿É¼ûĞÔ

Óï·¨
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
[Static] Var Shared ...

ÃèÊö
SharedÊ¹Ä£¿é¼¶±äÁ¿ÔÚ s ºÍ s ÄÚ¿É¼û¡£
Èç¹ûÎ´ÔÚÄ£¿é¼¶±äÁ¿µÄÉùÃ÷ÖĞÊ¹ÓÃ£¬Ôò¸Ã±äÁ¿½ö¶Ô¸ÃÎÄ¼şÖĞµÄÄ£¿é¼¶´úÂë¿É¼û£¨´ËÍâ£¬¶ÑÕ»ÉÏ½ö´æ´¢ÁËÒ»¸öÉùÃ÷ÁË²»´øĞŞÊÎ·ûµÄ±äÁ¿£¬¶ø²»ÊÇÔÚÃüÃû


-------------------------------------------------------- KeyPgShell ----

Shell   Íâ²¿³ÌĞò
  
ÏòÏµÍ³ÃüÁî½âÊÍÆ÷·¢ËÍÃüÁî

Óï·¨
Declare Function Shell ( ByRef command As Const String ) As Long

ÓÃ·¨
result = Shell( command )

²ÎÊı
command
Ö¸¶¨Òª·¢ËÍµ½ÃüÁî½âÊÍÆ÷µÄÃüÁîµÄ×Ö·û´®¡£

·µ»ØÖµ
Èç¹ûÎŞ·¨Ö´ĞĞ¸ÃÃüÁî£¬


-------------------------------------------------------- KeyPgShort ----

Short   ¶ÌÕûĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º16 Î»ÓĞ·ûºÅ

Óï·¨
Dim variable As Short

ÃèÊö
16 Î»ÓĞ·ûºÅÕûÊıÊı¾İÀàĞÍ


-------------------------------------------------------- KeyPgSin ----

Sin   ÕıÏÒ
  
·µ»Ø½Ç¶ÈµÄÕıÏÒ

Óï·¨
Declare Function Sin ( ByVal angle As Double ) As Double

ÓÃ·¨
result = Sin( angle )

²ÎÊı
angle
½Ç¶È£¨ÒÔ»¡¶ÈÎªµ¥Î»£©

·µ»ØÖµ
½«²ÎÊıµÄÕıÏÒÖµ×÷Îª ÔÚ µÄ·¶Î§ÄÚ·µ»Ø¡£angleDouble-1.01.0

ÃèÊö
²ÎÊıÒÔ»¡¶È£¨¶ø²»ÊÇ¶È£©Îªµ¥Î»½øĞĞ¶ÈÁ¿¡£
¶ÔÓÚ


-------------------------------------------------------- KeyPgSingle ----

Single   µ¥¾«¶È
  
±ê×¼Êı¾İÀàĞÍ£º32Î»¸¡µã

Óï·¨
Dim variable As Single

ÃèÊö
Single ÊÇÓÃÓÚ´æ´¢Ê®½øÖÆÊıµÄ 32 Î»¸¡µãÊı¾İÀàĞÍ¡£ËüÃÇ¿ÉÒÔÔÚ µ½ µÄ·¶Î§ÄÚ±£´æÕıÖµ£¬Ò²¿ÉÒÔÔÚ µ½ µÄ·¶Î§ÄÚ±£´æ¸ºÖµ£¬»òÕß±£´æÎª Áã £¨£©¡£ËüÃÇ×î¶à°üº¬ 24 Î»¾«¶È£¬»ò´óÔ¼


-------------------------------------------------------- KeyPgSizeof ----

SizeOf   È¡´óĞ¡
  
·µ»Ø±äÁ¿µÄ´óĞ¡»òÀàĞÍ£¨ÒÔ×Ö½ÚÎªµ¥Î»£©¡£

Óï·¨
SizeOf ( variable | DataType )

ÃèÊö
ÔËËã·û·µ»ØÒ»¸öÖµ£º»ò Õ¼ÓÃµÄ×Ö½ÚÊı£¨°üÀ¨ UDT µÄÊı¾İ×Ö¶Î£©¡£
Óë ²»Í¬£¬µ±Óë¹Ì¶¨³¤¶ÈµÄ×Ö·û´®£¨°üÀ¨¹Ì¶¨³¤¶ÈµÄ s ºÍ s£©Ò»ÆğÊ¹ÓÃÊ±£¬Ëü½«·µ»ØËüÃÇÊ¹ÓÃµÄ×Ö½ÚÊı£¬µ±Óë¿É±ä³¤¶È×Ö·û´


-------------------------------------------------------- KeyPgSleep ----

Sleep   ÑÓ³Ù
  
µÈ´ı£¬Ö±µ½Ö¸¶¨µÄÊ±¼ä¹ıÈ¥£¬»òÕß°´ÏÂÄ³¸ö¼ü¡£

Óï·¨
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

ÓÃ·¨
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

²ÎÊı
amount
¿ÉÑ¡µÄµÈ´ıºÁÃëÊı£¨Ä¬ÈÏÎªµÈ´ı°´¼ü£©¡£
keyflag
¿ÉÑ¡±êÖ¾;ÎªËüÖ¸¶¨Ò»¸öÖµ£¬±íÊ¾Õı³£Ë¯Ãß£¬»òÖ¸¶¨µÈ´ı²»ÄÜ±»°´¼ü´ò¶Ï¡£01

·µ»ØÖµ
Èç¹û²»ÊÇÓĞĞ§Öµ£¨¼´ or ÒÔÍâµÄÖµ£©ÒÔÖ¸Ê¾Ê§°Ü»òÆäËûÖµ£¬Ôò·µ»Ø¡£1keyflag010

ÃèÊö
Sleep½«µÈ´ı£¬Ö±µ½¾­¹ı£¨Èç¹û´«µİÁËÈÎºÎÖµ£©µÄºÁÃë£¨ÔÚ -lang qb ÖĞ¿ÉÒÔÊÇÃë£¬¼ûÏÂÎÄ£©»ò


-------------------------------------------------------- KeyPgSpace ----

Space   ×Ö·û´®¿Õ¸ñ
  
´´½¨Ò»¸ö¸ø¶¨³¤¶ÈµÄ×Ö·û´®£¬ÆäÖĞÌî³äÁË¿Õ¸ñ £¨" ")

Óï·¨
Declare Function Space( ByVal count As Integer ) As String

ÓÃ·¨
result = Space[$]( count )

²ÎÊı
count
Ò»ÖÖÕûÊıÀàĞÍ£¬Ö¸¶¨Òª´´½¨µÄ×Ö·û´®µÄ³¤¶È¡£

·µ»ØÖµ
´´½¨


-------------------------------------------------------- KeyPgSpc ----

Spc   ×Ö·û¿Õ¸ñ
  
Êä³ö¹¦ÄÜ£¬ÓÃÓÚÔÚĞ´ÈëÆÁÄ»»òÎÄ¼şÊ±Ìø¹ı¿Õ¸ñ

Óï·¨
Spc( columns )

ÓÃ·¨
Print Spc( spaces ) [(, | ;)] ...

²ÎÊı
spaces
ÒªÌø¹ıµÄ¿Õ¸ñÊı

ÃèÊö
SpcÌø¹ı¸ø


-------------------------------------------------------- KeyPgSqr ----

Sqr   Æ½·½¸ù
  
·µ»ØÊı×ÖµÄÆ½·½¸ù

Óï·¨
Declare Function Sqr ( ByVal number As Double ) As Double

ÓÃ·¨
result = Sqr( number )

²ÎÊı
number
Êı×Ö£¨´óÓÚ»òµÈÓÚÁã£©

·µ»ØÖµ
·µ»Ø²ÎÊı µÄÆ½·½¸ù¡£
Èç¹ûµÈÓÚÁã£¬Ôò·µ»ØÁã £¨£©¡£
Èç¹û Ğ¡ÓÚÁã£¬Ôò·µ»ØÒ»¸ö±íÊ¾¡°Î´¶¨Òå¡±µÄÌØÊâÖµ£¬´òÓ¡Èç ¡°¡± »ò £¬Ôò¾«È·ÎÄ±¾ÓëÆ½Ì¨Ïà¹Ø¡£numbernumberSqr0.0numberSqrNaN"IND"

ÃèÊö
ÕâÓë½«²ÎÊıÌá¸ßµ½Ò»°ëµÄÃİÏàÍ¬£º¡£ËùĞèµÄ²ÎÊı¿ÉÒÔÊÇÈÎºÎ´óÓÚ»òµÈÓÚÁãµÄÓĞĞ§ÊıÖµ±í´ïÊ½¡£
Èç¹û ½« or ´«µİ¸


-------------------------------------------------------- KeyPgStatic ----

Static   ¾²Ì¬
  
¶¨Òå¾ßÓĞ¾²Ì¬´æ´¢µÄ±äÁ¿¡¢¶ÔÏóºÍÊı×é

Óï·¨
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]
or
Static Var symbol1 = expression [, symbol2 = expression, ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

²ÎÊı
symbol
±äÁ¿»òÊı×é·ûºÅÃû³Æ¡£
array-dimensions
lower-bound To upper-bound [, ...]
»ò
 »ò¿Õ¡£Any [, Any...]
expression
³£Á¿±í´ïÊ½»ò³£Á¿±í´ïÊ½Êı×é

ÃèÊö
Ö¸¶¨±äÁ¿¡¢¶ÔÏóºÍÊı×éµÄ¾²Ì¬´æ´¢;ËüÃÇÔÚ³ÌĞòÆô¶¯Ê±·ÖÅä£¬²¢ÔÚÍË³öÊ±½â³ı·ÖÅä¡£¶ÔÏóÔÚ¶¨ÒåÊ±¹¹ÔìÒ»´Î£¬²¢ÔÚ³ÌĞòÍË³öÊ±Ïú»Ù¡£
ÉùÃ÷¾²Ì¬Êı×éÊ±£¬Ö»ÄÜ½«Êı×Ö


-------------------------------------------------------- KeyPgStaticMember ----

Static (Member)   ¾²Ì¬
  
ÉùÃ÷¾²Ì¬³ÉÔ±¹ı³Ì»ò±äÁ¿

Óï·¨
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type

Dim typename.variablename As DataType [= initializer] [, ...]

[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

ÃèÊö
¾²Ì¬³ÉÔ±¹ı³Ì
Static·½·¨Ã»ÓĞ´«µİ¸øËüÃÇµÄÒşÊ½ÊµÀı²ÎÊı¡£ÕâÔÊĞíËüÃÇÏñÆÕÍ¨µÄ·Ç³ÉÔ±¹ı³ÌÒ»ÑùÊ¹ÓÃ£¨ÀıÈç£¬Ê¹ÓÃ»Øµ÷¹ı³ÌÖ¸Õë£©¡£·½·¨µÄÒ»¸öÓÅµãÊÇËüÃÇ·â×°ÔÚÃüÃû¿Õ¼äÖĞ£¬Òò´ËÄÜ¹»·ÃÎÊ µÄÊµÀıµÄ 


-------------------------------------------------------- KeyPgStdcall ----

stdcall   ±ê×¼µ÷ÓÃ
  
ÔÚ¹ı³ÌÉùÃ÷ÖĞÖ¸¶¨ stdcall ÑùÊ½µÄµ÷ÓÃÔ¼¶¨

Óï·¨
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

ÃèÊö
ÔÚ¹ı³ÌÉùÃ÷ÖĞ£¬Ö¸¶¨¹ı³Ì½«Ê¹ÓÃµ÷ÓÃÔ¼¶¨¡£ÔÚµ÷ÓÃÔ¼¶¨ÖĞ£¬ÈÎºÎ²ÎÊı¶¼½«ÒÔÁĞ³öËüÃÇµÄÏà·´Ë³Ğò´«µİ£¨ÍÆËÍµ½¶ÑÕ»ÉÏ£©£¬¼´´ÓÓÒµ½×ó¡£¹ı³Ì²»ĞèÒª±£Áô »ò ¼Ä´æÆ÷£¬²¢ÇÒ±ØĞëÔÚ¶ÑÕ»·µ»ØÖ®Ç°ÇåÀí¶Ñ


-------------------------------------------------------- KeyPgStep ----

Step   ²½½ø
  
Óï¾äĞŞÊÎ·û¡£

Óï·¨
For iterator = initial_value To end_value Step increment

Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]

Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]

Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

ÃèÊö
ÔÚÓï¾äÖĞ£¬Ö¸¶¨Ñ­»·µü´úÆ÷ÓëÃ¿¸öÑ­»·µÄÔöÁ¿¡£
ÔÚ »ò Óï¾äÖĞ£¬Ö¸Ê¾ÒÔÏÂ


-------------------------------------------------------- KeyPgStick ----

Stick   ÓÎÏ·²Ù×İ¸Ë
  
´ÓÁ¬½ÓµÄÓÎÏ·Éè±¸¶ÁÈ¡ÖáÎ»ÖÃ

Óï·¨
Declare Function Stick ( ByVal axis As Long ) As Long

ÓÃ·¨
result = Stick( axis )

²ÎÊı
axis
Òª²éÑ¯Î»ÖÃµÄÖáÊı

·µ»ØÖµ
¶ÔÓÚÖ¸¶¨µÄ £¬·µ»ØÒ»¸ö½éÓÚ 1 ºÍ 200 Ö®¼äµÄÊı×Ö£¬Èç¹ûÎ´Á¬½ÓÉè±¸£¬Ôò·µ»ØÁã £¨0£©¡£axis

ÃèÊö
Stick½«¼ìË÷µÚÒ»¸öºÍµÚ¶ş¸öÓÎÏ·Éè±¸ÉÏµÚÒ»¸öºÍµÚ¶ş¸öÖáµÄÖáÎ»ÖÃ¡£ ±ØĞëÊÇ½éÓÚ 0 ºÍ 3 Ö®¼äµÄÊı×Ö£¬¾ßÓĞÒÔÏÂº¬Òå£ºaxis

Öá·µ»Ø0ÓÎÏ


-------------------------------------------------------- KeyPgStop ----

Stop
  
ÔİÍ£³ÌĞòÖ´ĞĞ£¬²¢ÔÚ½áÊø³ÌĞòÖ®Ç°µÈ´ı°´¼ü¡£

Óï·¨
Declare Sub Stop ( ByVal retval As Long = 0 )

ÓÃ·¨
Stop

²ÎÊı
retval
´íÎó´úÂë·µ»ØÏµÍ³¡£

ÃèÊö
Í£Ö¹³ÌĞòµÄÖ´ĞĞ²¢´ıÃü¡£ËüÊÇ×÷Îªµ÷ÊÔµÄ°ïÖúÌá¹©µÄ£¬ÒòÎªËü±£ÁôÁËÄÚ´æ²¢ÇÒ²»»á¹Ø±ÕÎÄ¼ş¡£¶ÔÓÚÕı³£µÄ³ÌĞ


-------------------------------------------------------- KeyPgStr ----

Str   Êı×ª×Ö·û
  
·µ»ØÊı×Ö¡¢²¼¶û»ò Unicode ×Ö·û´®µÄ×Ö·û´®±íÊ¾ĞÎÊ½

Óï·¨
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

ÓÃ·¨
result = Str[$]( number )
or
result = Str( string )

²ÎÊı
number
Òª×ª»»Îª×Ö·û´®µÄÊıÖµ±í´ïÊ½¡£
string
Òª×ª»»Îª×Ö·û´®µÄ×Ö·û´®±í´ïÊ½¡£

ÃèÊö
Str½«ÊıÖµ±äÁ¿×ª»»ÎªÆä×Ö·û´®±íÊ¾ĞÎÊ½¡£ÒÔÕâÖÖ·½Ê½Ê¹ÓÃÊ±£¬ËüµÈĞ§ÓÚÓ¦ÓÃÓÚÊıÖµ±äÁ¿£¬¶øÓëº¯ÊıÏà·´£¬º¯Êı½«×Ö·û´®×ª»»ÎªÊı×Ö¡£
½«²¼¶û±äÁ¿×


-------------------------------------------------------- KeyPgStrig ----

Strig   ÓÎÏ·°´Å¥
  
´ÓÁ¬½ÓµÄÓÎÏ·Éè±¸¶ÁÈ¡°´Å¥×´Ì¬

Óï·¨
Declare Function Strig ( ByVal button As Long ) As Long

ÓÃ·¨
result = Strig( button )

²ÎÊı
button
ÓÃÓÚ²éÑ¯×´Ì¬µÄ°´Å¥

·µ»ØÖµ
·µ»Ø -1£¨°´ÏÂ£©»ò 0£¨Î´°´ÏÂ£©ÒÔÖ¸Ê¾ËùÇëÇóµÄ×´Ì¬¡£button

ÃèÊö
Strig½«¼ìË÷µÚÒ»¸öºÍµÚ¶ş¸öÓÎÏ·Éè±¸ÉÏµÚÒ»¸öºÍµÚ¶ş¸ö°´Å¥µÄ°´Å¥×´Ì¬¡£ ±ØĞëÊÇ½éÓÚ 0 ºÍ 7 Ö®¼äµÄÊı×Ö£¬²¢¾ßÓĞÒÔÏÂº¬Òå£ºbutton

°´Å¥Òª·µ»ØµÄ×


-------------------------------------------------------- KeyPgString ----

String   Êı×ª×Ö·û´®
  
±ê×¼Êı¾İÀàĞÍ£º8 Î»×Ö·û´®

Óï·¨
Dim variable As String [ * size]

ÃèÊö
A ÊÇ×Ö·ûÊı×é¡£
²»´ø²ÎÊıµÄÉùÃ÷½«¸ù¾İ×Ö·û´®µÄ³¤¶È¶¯Ì¬µ÷Õû´óĞ¡¡£³¤¶È·¶Î§¿ÉÒÔ´Ó 0 ×Ö½Úµ½ 2 GB¡£ÃèÊö·û°üº¬Ö¸ÏòÊµ¼Ê×Ö·û´®¡¢×Ö·û´®³¤¶ÈÒÔ¼°ÎªÆä·ÖÅäµÄ¿Õ¼äÁ¿µÄÖ¸Õë¡£ ½«·µ»ØÖ¸ÏòÃèÊö·ûµÄ


-------------------------------------------------------- KeyPgStringFunction ----

String (Function)   Êı×ª×Ö·û´®
  
´´½¨ÌØ¶¨³¤¶ÈµÄ×Ö·û´®²¢ÓÃÌØ¶¨×Ö·ûÌî³ä

Óï·¨
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

ÓÃ·¨
result = String[$]( count, ch_code )
»ò
result = String[$]( count, ch )

²ÎÊı
count
Ò»¸öÕûÊı£¬Ö¸¶¨Òª´´½¨µÄ×Ö·û´®µÄ³¤¶È¡£
ch_code
Ö¸¶¨ÒªÓÃÓÚÌî³ä×Ö·û´®µÄ ASCII ×Ö·û´úÂëµÄ³¤×Ö·û´úÂë¡£
ch
Ò»¸ö×Ö·û´®£¬ÆäµÚÒ»¸ö×Ö·û½«ÓÃÓÚÌî³ä×Ö·û´®¡£

·µ»ØÖµ


-------------------------------------------------------- KeyPgSub ----

Sub   ¹ı³Ì
  
¶¨Òå¹ı³Ì

Óï·¨
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub

[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

²ÎÊı
identifier£º×ÓÀı³Ì
µÄÃû³Æ£ºÍâ²¿¿É¼ûµÄ£¨¶ÔÁ´½ÓÆ÷£©Ãû³ÆÀ¨ÔÚÒıºÅÖĞ
£º²ÎÊı[£¬²ÎÊı[£¬...]]
 £ºexternal_identifierparameter_listparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier£º×ÓÀı³ÌÖĞÒıÓÃµÄ±äÁ¿µÄÃû³Æ¡£Èç¹û²ÎÊıÊÇÊı×é£¬Ôò±êÊ¶·ûºó±ØĞë¸ú¿ÕÀ¨ºÅ¡£
 £º±äÁ¿
µÄÀàĞÍ £ºÈç¹ûµ÷ÓÃÖĞÎ´Ö¸¶¨ÈÎºÎ²ÎÊı£¬Ôò²ÎÊıµÄÖµtypedefault_value
statements£º×é³É×ÓÀı³ÌÖ÷ÌåµÄÒ»¸ö»ò¶à¸öÓï¾ä

ÃèÊö
×ÓÀı³ÌÊÇÒ»¸ö´úÂë¿é£¬¿ÉÒÔËæÊ±´Ó³ÌĞòµ÷ÓÃ¡£´Ë´úÂë¿ÉÄÜĞèÒª¶à´ÎÖ´ĞĞ£¬¶ø×ÓÀı³ÌÌá


-------------------------------------------------------- KeyPgSubPtr ----

Sub Pointer   ¹ı³Ì
  
´æ´¢Ö¸Ïò¹ı³ÌµÄÖ¸ÕëµÄÊı¾İÀàĞÍSub

Óï·¨
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

²ÎÊı
parameter_list£º ²ÎÊı[£¬ ²ÎÊı[£¬ ...]]
 £ºparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier£º×ÓÀı³Ì
ÖĞÒıÓÃµÄ±äÁ¿µÄÃû³Æ£º±äÁ¿
µÄÀàĞÍ£ºÈç¹ûµ÷ÓÃÖĞÎ´Ö¸¶¨ÈÎºÎ²ÎÊı£¬Ôò²ÎÊıµÄÖµtypedefault_value
intializer£ºÒªÉèÖÃÎª³õÊ¼ÖµµÄ×ÓÀı³ÌµÄµØÖ·

ÃèÊö
Ö¸ÕëÊÇ´æ´¢ÒÑ±àÒë´úÂëµÄÄÚ´æÎ»ÖÃµÄ¹ı³ÌÖ¸Õë¡£Èç¹ûÎ´¸ø³ö³õÊ¼Öµ£¬ÔòÄ¬ÈÏ³õÊ¼ÖµÎªÁã £¨0£©¡£
¹ı³ÌµÄÄÚ´æµØÖ·¿ÉÒÔÍ¨¹ı»ñÈ¡


-------------------------------------------------------- KeyPgSwap ----

Swap   ½»»»
  
½»»»Á½¸ö±äÁ¿µÄÖµ

Óï·¨
Declare Sub Swap  ( ByRef a As Any, ByRef b As Any )

²ÎÊı
a
Òª½»»»µÄ±äÁ¿¡£
b
Òª½»»»µÄ±äÁ¿¡£

ÃèÊö
½»»»Á½¸ö±äÁ¿µÄÖµ£¬°üÀ¨ UDT ÊµÀı£¨½»»»ËùÓĞÊı¾İ³ÉÔ±£©¡£
 ×¢£º µ±Êı¾İÓÉÖ¸Õëµ¥¶ÀÒıÓÃ»òÔÚÃèÊöĞÔ½á¹¹£¨ÀıÈç UDT£©ÖĞÒıÓÃÊ±£¬½ö½»»»Ö¸ÕëµÄÖµ»òÃèÊöĞÔ½á¹¹µÄÄÚÈİ£¬¶ø²»·ÃÎ


-------------------------------------------------------- KeyPgSystem ----

System   ÏµÍ³
  
¹Ø±ÕËùÓĞ´ò¿ªµÄÎÄ¼ş²¢½áÊø³ÌĞò

Óï·¨
Declare Sub System ( ByVal retval As Long = 0 )

ÓÃ·¨
System( [ retval ] )

²ÎÊı
retval
´íÎó´úÂë·µ»ØÏµÍ³¡£

ÃèÊö
¹Ø±ÕËùÓĞ´ò¿ªµÄÎÄ¼ş£¬ÍË³ö³ÌĞò£¬È»ºó·µ»Øµ½²Ù×÷ÏµÍ³¡£¿ÉÒÔÖ¸¶¨¿ÉÑ¡µÄ·µ»ØÖµ£¨ÕûÊı£©ÒÔÏòÏµÍ³·µ»Ø´íÎó´úÂë¡£Èç¹ûÎ´¸ø³ö·µ»ØÖµ£¬Ôò×Ô¶¯·µ»ØÖµ 0¡£ÕâÓë ºÍ ´Ë´¦ÏàÍ¬£¬ÓÃÓÚ½Ï¾ÉµÄ


-------------------------------------------------------- KeyPgTab ----

Tab
  
Ğ´ÈëÆÁÄ»»òÎÄ¼şÊ±ÉèÖÃÁĞ

Óï·¨
Tab( col_num )

ÓÃ·¨
Print Tab( column ) [(, | ;)] ...

²ÎÊı
column
1-ÒªÒÆ¶¯µ½µÄ»ùÓÚÁĞºÅ

ÃèÊö
TabÔÚ½«¹â±êÒÆ¶¯µ½ÆÁÄ»»òÎÄ¼şÊ±½«¹â±êÒÆ¶¯µ½¸ø¶¨Êı×Ö¡£ÔÚĞÂ¾É¹â±êÎ»ÖÃÖ®¼äÌø¹ıµÄ×Ö·ûµ¥Ôª¸ñ±£³Ö²»±ä¡£
Èç¹


-------------------------------------------------------- KeyPgTan ----

Tan   ÕıÇĞ
  
·µ»Ø½Ç¶ÈµÄÇĞÏß

Óï·¨
Declare Function Tan ( ByVal angle As Double ) As Double

ÓÃ·¨
result = Tan( angle )

²ÎÊı
angle
½Ç¶È£¨ÒÔ»¡¶ÈÎªµ¥Î»£©

·µ»ØÖµ
½«²ÎÊıµÄÇĞÏß×÷Îª -ÎŞÇî´óµ½ÎŞÇî´ó·¶Î§ÄÚµÄÒ»¸ö·µ»Ø¡£angleDouble

ÃèÊö
²ÎÊıÒÔ»¡¶È£¨¶ø²»ÊÇ¶È£©Îªµ¥Î»½øĞĞ¶ÈÁ¿¡


-------------------------------------------------------- KeyPgThen ----
Then   È»
Description



-------------------------------------------------------- KeyPgThis ----

This   ±¾¶ÔÏó
  
½«Òş²ØÊµÀı²ÎÊı´«µİ¸ø »ò ÖĞµÄ·Ç¾²Ì¬³ÉÔ±º¯ÊıTypeClass

Óï·¨
This.fieldname
or
With This
.fieldname
End With

ÃèÊö
ThisÊÇ¶Ô »òµÄÊµÀıµÄÒıÓÃ£¬¸ÃÊµÀı£¨Í¨¹ıÒş²Ø£©´«µİ¸ø¸ÃÀàĞÍ»òÀàµÄËùÓĞ·Ç¾²Ì¬³ÉÔ±º¯Êı¡£·Ç¾²Ì¬³ÉÔ±º¯ÊıÊÇÔÚ »ò µÄÖ÷ÌåÄÚÉùÃ÷µÄ¹ı³Ì£¬°üÀ¨ ¡¢¡¢¡¢¸³Öµ»ò ºÍ ¹ı³Ì¡£
¸½¼Ó²ÎÊıµÄÊı¾İÀà


-------------------------------------------------------- KeyPgThiscall ----

__Thiscall
  
ÔÚ³ÉÔ±¹ı³ÌÉùÃ÷ÖĞÖ¸¶¨ Thiscall µ÷ÓÃÔ¼¶¨

Óï·¨
Type typename
declare Sub name __Thiscall [Overload] [Alias "alias"] ( parameters )
declare Function name __Thiscall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type
End Type

ÃèÊö
ÔÚ³ÉÔ±¹ı³ÌÉùÃ÷ÖĞ£¬Ö¸¶¨¹ı³Ì½«Ê¹ÓÃµ÷ÓÃÔ¼¶¨¡£ÔÚ Thiscall µ÷ÓÃÔ¼¶¨ÖĞ£¬ÒşÊ½ºÍÒş²ØµÄ This ²ÎÊıÔÚ¼Ä´æÆ÷ÖĞ´«µİ¡£
µ÷ÓÃÔ¼¶¨½öÊÊÓÃÓÚ 32 Î» x86 Ä¿±ê£¬²¢ÇÒ½ö²¿·ÖÊµÏÖ¡£ËüÔÚÊ¹ÓÃ -gen gcc ºó¶Ë


-------------------------------------------------------- KeyPgThreadCall ----

ThreadCall   Ïß³Ìµ÷ÓÃ
  
ÔÚµ¥¶ÀµÄÖ´ĞĞÏß³Ì
ÖĞÆô¶¯Ò»¸ö´øÓĞ²ÎÊıµÄÓÃ»§¶¨Òå¹ı³Ì Threadcall ÔÚÄÚ²¿Ê¹ÓÃ LibFFI£ºÊ¹ÓÃ´Ë¹¦ÄÜ±àĞ´³ÌĞòµÄÈËÓ¦Ğ¡ĞÄ×ñÑ­ LibFFI µÄĞí¿ÉÖ¤£¬¸ÃĞí¿ÉÖ¤¿ÉÔÚ http://github.com/atgreen/libffi/blob/master/LICENSE ÖĞÕÒµ½¡£

Óï·¨
Function ThreadCall subname([paramlist]) As Any Ptr

ÓÃ·¨
threadid = ThreadCall subname([paramlist])

²ÎÊı
subname
×ÓÀı³ÌµÄÃû³Æ
paramlist
Òª´«µİ¸ø×ÓÀı³ÌµÄ²ÎÊıÁĞ±í£¬ÓëÆÕÍ¨µÄ×Óµ÷ÓÃÒ»Ñù¡£

·µ»ØÖµ
Threadcall ·µ»ØËù´´½¨Ïß³ÌµÄ¾ä±ú£¬»òÔÚÊ§°ÜÊ±·µ»Ø¿ÕÖ¸Õë £¨£©¡£Any Ptr0

ÃèÊö
ÀıÈç£¬Threadcall ´´½¨Ò»¸öÏß³Ì£¬¸ÃÏß³ÌÓëµ÷ÓÃËüµÄ´úÂëÍ¬Ê±ÔËĞĞ¡£Í¨¹ı½


-------------------------------------------------------- KeyPgThreadCreate ----

ThreadCreate   Ïß³Ì´´½¨
  
ÔÚµ¥¶ÀµÄÖ´ĞĞÏß³ÌÖĞÆô¶¯ÓÃ»§¶¨Òå¹ı³Ì

Óï·¨
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

ÓÃ·¨
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

²ÎÊı
procptr
Ö¸ÏòÖ¼ÔÚÓÃ×÷Ïß³ÌµÄÖ¸Õë£¨Çë²ÎÔÄ»ñÈ¡Ö¸Ïò sub µÄÖ¸Õë£©¡£sub ±ØĞë¾ßÓĞÒÔÏÂÇ©Ãû£¨ÏàÍ¬µÄ²ÎÊı¡¢ÏàÍ¬µÄµ÷ÓÃÔ¼¶¨£©²ÅÄÜÓë procptr ¼æÈİ£ºSubOperator Procptr (Procedure Pointer)
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
Ö¼ÔÚÓÃ×÷Ïß³ÌµÄ²ÎÊı¡£FreeBASIC ÆÚÍû´Ë²ÎÊı´æÔÚ£¬µ«²»µÃÊ¡ÂÔ£¡Any PtrSub
param
Any Ptr½«Í¨¹ıÆä userdata ²ÎÊı´«µİ¸øËùÖ¸ÏòµÄÏß³ÌµÄ²ÎÊı¡£ÀıÈç£¬Õâ¿ÉÒÔÊÇÖ¸Ïò½á¹¹µÄÖ¸Õë£¬Ò²¿ÉÒÔÊÇ°üº¬¸÷ÖÖĞÅÏ¢µÄÊı×é£¬¹©Ïß³Ì sub Ê¹ÓÃ¡£Èç¹ûÎ´¸ø³ö²ÎÊı£¬Ôò £¨Áã£© ½«¸ÄÎª´«µİ¸øÏß³Ì×ÓµÄ userdata ²ÎÊı¡£Subprocptr0
stack_size
ÒªÎª´ËÏß³ÌµÄ¶ÑÕ»±£ÁôµÄ¿ÉÑ¡×Ö½ÚÊı¡£

·µ»ØÖµ
ThreadCreate Ïò´´½¨µÄÏß³Ì·µ»Ø¾ä±ú£¬»òÔÚÊ§°ÜÊ±·


-------------------------------------------------------- KeyPgThreadDetach ----

ThreadDetach   Ïß³ÌÖÕÖ¹
  
ÊÍ·ÅÏß³Ì¾ä±ú¶ø²»µÈ´ıÏß³ÌÍê³É

Óï·¨
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

ÓÃ·¨
#include "fbthread.bi"
ThreadDetach( id )

²ÎÊı
id
Any PtrÓÉ »ò ´´½¨µÄÏß³ÌµÄ¾ä±úThreadCreateThreadCall

ÃèÊö
ThreadDetach ÊÍ·ÅÓë »ò ·µ»ØµÄÏß³Ì¾ä±ú¹ØÁªµÄ×ÊÔ´¡£Ïß³Ì¾ä±ú½«±» ThreadDetach Ïú»Ù£¬²¢ÇÒÎŞ·¨ÔÙÊ¹ÓÃ¡£
Óë ²»Í¬£¬ThreadDetach ²»»áµÈ´ıÏß³ÌÍê³É£¬Ïß³ÌÖ´ĞĞ»á¶ÀÁ¢¼ÌĞø¡£


-------------------------------------------------------- KeyPgThreadSelf ----

ThreadSelf
  
·µ»Øµ±Ç°Ïß³ÌµÄÏß³Ì¾ä±ú¡£

Óï·¨
Declare Function ThreadSelf ( ) As Any Ptr

ÓÃ·¨
#include "fbthread.bi"
result = ThreadSelf

·µ»ØÖµ
ThreadSelf ·µ»Øµ±Ç°Ïß³ÌµÄ¾ä±ú¡£Any Ptr

ÃèÊö
ThreadSelf ÓÃÓÚ»ñÈ¡µ±Ç°Ïß³ÌµÄ¾ä±ú¡£
´Ëº¯Êı¿ÉÒÔÎ¨Ò»±êÊ¶ÏÖÓĞÏß³Ì£º
-Èç¹ûÓĞ¶à¸öÏß³Ì£¬²¢ÇÒÒ»¸öÏß³ÌÒÑÍê³É£¬Ôò¿ÉÒÔÖØÓÃ¸Ã¾ä±ú¡£
 - Òò´Ë£¬¶ÔÓÚËùÓĞÈÔÔÚÔËĞĞµÄÎ¨Ò»Ïß³Ì£¬¾ä±


-------------------------------------------------------- KeyPgThreadWait ----

ThreadWait   Ïß³ÌµÈ´ı
  
µÈ´ıÏß³ÌÍê³ÉÖ´ĞĞ²¢ÊÍ·ÅÏß³Ì¾ä±ú

Óï·¨
Declare Sub ThreadWait ( ByVal id As Any Ptr )

ÓÃ·¨
ThreadWait( id )

²ÎÊı
id
Any PtrÓÉ »ò ´´½¨µÄÏß³ÌµÄ¾ä±úThreadCreateThreadCall

ÃèÊö
ThreadWait µÈ´ıÓÉÏß³Ì´´½¨»òÍê³ÉÖ´ĞĞ£¬È»ºóÊÍ·ÅÓëÏß³Ì¾ä±ú¹ØÁªµÄ×ÊÔ´¡£ÔÚ Ö¸¶¨µÄÏß³Ì½áÊøÖ®Ç°£¬ThreadWait ²»»á·µ»Ø¡£
ÔÚµÈ´ıÆÚ¼ä£¬µ÷ÓÃ·½²»»áÏûºÄ CPU Ê±¼ä¡£
ÎªÁËÊÍ


-------------------------------------------------------- KeyPgTime ----

Time   Ê±¼ä×Ö·û
  
ÒÔ×Ö·û´®ĞÎÊ½·µ»Øµ±Ç°ÏµÍ³Ê±¼ä

Óï·¨
Declare Function Time ( ) As String

ÓÃ·¨
result = Time[$]

·µ»ØÖµ
·µ»Øµ±Ç°ÏµÍ³Ê±¼ä


-------------------------------------------------------- KeyPgTimer ----

Timer   Ê±¼ä¼ÆÊ±Öµ
  
·µ»Ø×Ô¾²Ì¬²Î¿¼µãÒÔÀ´¾­¹ıµÄÊ±¼äÁ¿¡£

Óï·¨
Declare Function Timer ( ) As Double

ÓÃ·¨
result = Timer

·µ»ØÖµ
·µ»Ø×Ô¾²Ì¬²Î¿¼µãÒÔÀ´µÄÊ±¼ä£¨ÒÔÃëÎªµ¥Î»£©µÄ¾«¶È½á¹û¡£Double

ÃèÊö
¸Ãº¯Êı¶ÔÓÚÁË½âÒ»¶Î´úÂëµÄÔËĞĞÊ±¼ä»ò¿ØÖÆ´úÂëµÄ¼ÆÊ±·Ç³£ÓĞÓÃ¡£ÈôÒªÁË½â³ÌĞòÖĞÁ½µãÖ®¼ä¾­¹ıÁË¶àÉÙÊ±¼ä£¬¿ÉÒÔ¼ÇÂ¼ÆğµãºÍÖÕµã´¦µÄÖµ£¬È»ºó´Ó½áÊøÖµÖĞ¼õ


-------------------------------------------------------- KeyPgTimeserial ----

TimeSerial   Ê±¼äĞòÁĞÖµ
  
»ñÈ¡Ö¸¶¨Ğ¡Ê±¡¢·ÖÖÓºÍÃëµÄÈÕÆÚĞòÁĞ

Óï·¨
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

ÓÃ·¨
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

²ÎÊı
hour
Ğ¡Ê±Êı£¬ÔÚ 0-23 ·¶Î§ÄÚ
minute
·ÖÖÓÊı
second
ÃëÊı

·µ»ØÖµ
·µ»ØÒ»¸öÈÕÆÚĞòÁĞ£¬ÆäÖĞ°üº¬ÓÉ ºÍ ²ÎÊıÖĞµÄÖµĞÎ³ÉµÄÊ±¼ä¡£·µ»ØµÄÈÕÆÚĞòÁĞÃ»ÓĞÕûÊı²¿·Ö¡£hoursminut


-------------------------------------------------------- KeyPgTimeValue ----

TimeValue   Ê±¼äÊıÖµ
  
´ÓÊ±¼ä×Ö·û´®»ñÈ¡ÈÕÆÚĞòÁĞ

Óï·¨
Declare Function TimeValue ( ByRef timestring As String ) As Double

ÓÃ·¨
#include "vbcompat.bi"
result = TimeValue( timestring )

²ÎÊı
timestring
Òª×ª»»µÄ×Ö·û´®

·µ»ØÖµ
´ÓÊ±¼ä×Ö·û´®·µ»ØÈÕÆÚĞòÁĞ¡£

ÃèÊö
Ê±¼ä×Ö·û´®±ØĞë²ÉÓÃÒÔÏÂ¸ñÊ½£¬·ñÔò
±àÒëÆ÷


-------------------------------------------------------- KeyPgTo ----

To   µ½
  
ÓÃÓÚÖ¸¶¨·¶Î§µÄÓï¾äĞŞÊÎ·û¡£

Óï·¨
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

ÃèÊö
¹Ø¼ü×ÖÓÃÓÚ¶¨ÒåÌØ¶¨µÄÊıÖµ·¶Î§¡£½öµ±Óë ºÍ Óï¾äÒ»ÆğÊ¹ÓÃÊ±£¬´Ë¹Ø¼ü×Ö²ÅÓĞĞ§¡£
ÔÚµÚÒ»ÖÖÓï·¨ÖĞ£¬¹Ø¼ü×Ö¶¨ÒåÓï¾äÖĞµü´úÆ÷µÄ³õÊ¼ÖµºÍ½áÊøÖµ¡£
ÔÚµÚ¶şÖÖÓï·¨ÖĞ£¬¹Ø¼ü×Ö¶¨ÒåÁËÓÃÓÚ±È½ÏµÄÏÂÏŞºÍÉ


-------------------------------------------------------- KeyPgTransGfx ----

Trans   Í¸Ã÷
  
Í¼ĞÎÓï¾äµÄ²ÎÊı£¬¸ÃÓï¾äÑ¡ÔñÍ¸Ã÷±³¾°×÷Îª blitting ·½·¨Put

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

²ÎÊı
Trans
±ØÌî¡£

ÃèÊö
TransÑ¡ÔñÍ¸Ã÷±³¾°×÷ÎªÉ¾³ıÍ¼Ïñ»º³åÇøµÄ·½·¨¡£ÕâÓë·½·¨ÀàËÆ£¬µ«»áÌø¹ı°üº¬ÃÉ°æÑÕÉ«µÄÏñËØ¡£
¶ÔÓÚ 8 Î»²ÊÉ«Í¼Ïñ£¬ÃÉ°æÑÕÉ«Îªµ÷É«°åË÷Òı 0¡£¶ÔÓÚ 16/32 Î»²ÊÉ«Í¼Ïñ£¬ÃÉ°æÑÕÉ«Îª


-------------------------------------------------------- KeyPgTrim ----

Trim   ×Ö·û´®É¾Í·Î²
  
É¾³ı×Ö·û´®×ó²àºÍÓÒ²àµÄÖÜÎ§×Ó×Ö·û´®»ò×Ö·û

Óï·¨
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

ÓÃ·¨
result = Trim[$]( str [, [ Any ] trimset ] )

²ÎÊı
str
Ô´×Ö·û´®¡£
trimset
ÒªĞŞ¼ôµÄ×Ó×Ö·û´®¡£

·µ»ØÖµ
·µ»ØĞŞ¼ô¹ıµÄ×Ö·û´®¡£

ÃèÊö
´Ë¹ı³Ì´ÓÔ´×Ö·û´®µÄ×ó²à£¨¿ªÍ·£©ºÍÓÒ²à£¨½áÎ²£©ĞŞ¼ôÖÜÎ§µÄ×Ö·û¡£Èç¹ûÖ¸¶¨£


-------------------------------------------------------- KeyPgTrue ----

True   Õæ
  
±àÒëÆ÷ÉèÖÃµÄ¹ÌÓĞ³£Á¿

Óï·¨
Const True As Boolean

ÃèÊö
ÔÚÊ¹ÓÃÎ»ÖÃ


-------------------------------------------------------- KeyPgType ----

Type   ÀàĞÍ
  
ÉùÃ÷ÓÃ»§¶¨ÒåÀàĞÍ¡£

Óï·¨
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type

Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]

Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType

fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]

As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...

Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union

...
End Type

ÃèÊö
TypeÓÃÓÚÉùÃ÷°üº¬Ò»¸ö»ò¶à¸öÊı¾İ×Ö¶ÎµÄ×Ô¶¨ÒåÊı¾İÀàĞÍ£¬°üÀ¨ÕûÊıÀàĞÍ¡¢¸¡µãÀàĞÍ¡¢¹Ì¶¨´óĞ¡»ò¿É±ä³¤¶È£¨¶¯Ì¬£©Êı×é¡¢¹Ì¶¨´óĞ¡»ò¿É±ä³¤¶È×Ö·û´®¡¢Î»×Ö¶Î»òÆäËûÓÃ»§¶¨ÒåÀàĞÍ¡£
ÀàĞÍÖ§³ÖÓëÃæÏò¶ÔÏó


-------------------------------------------------------- KeyPgTypeAlias ----

Type (Alias)   ÀàĞÍ
  
ÉùÃ÷ÀàĞÍµÄ±¸ÓÃÃû³Æ

Óï·¨
Type typename As symbol

²ÎÊı
typename 
ĞÂµÄ±¸ÓÃÃû³Æ¡£
symbol 
ÒªÓë ¹ØÁªµÄ·ûºÅ»òÊı¾İÀàĞÍÉùÃ÷¡£typename

ÃèÊö
symbol¿ÉÒÔÖ¸ÈÎºÎÒÑÉùÃ÷µÄÊı¾İÀàĞÍ£¬°üÀ¨ÄÚÖÃÊı¾İÀàĞÍ»òÖ¸Õë¡¢ÉùÃ÷¡¢ÉùÃ÷»òÉùÃ÷¡£
ÀàĞÍ±ğÃû¿ÉÓÃÓÚÔÊĞíÔÚ¹ı³ÌÉùÃ÷ÖĞ¶Ô²ÎÊı½øĞĞÇ°ÏòÉùÃ÷£¬µ«Ö»ÄÜÓëÖ¸Õë£¨ÎŞÂÛÆä´«µİÄ£Ê½


-------------------------------------------------------- KeyPgTypeof ----

TypeOf   È¡ÀàĞÍ
  
·µ»Ø±äÁ¿µÄÀàĞÍ¡£

Óï·¨
TypeOf ( variable | datatype )

²ÎÊı
variable
ÈÎºÎÀàĞÍµÄ±äÁ¿¡£
datatype
Êı¾İÀàĞÍ¡£

ÃèÊö
TypeOfÊÇ±àÒëÆ÷ÄÚ²¿º¯Êı£¬Ëü½«×ÔÉíÌæ»»Îª´«µİ¸øËüµÄ±äÁ¿µÄÀàĞÍ¡£Ëü¿ÉÒÔÓÃÓÚ±äÁ¿ÉùÃ÷£¨Ê¾Àı1£©£¬Ò²¿ÉÒÔÓÃÓÚÔ¤´¦ÀíÆ÷ÖĞ½øĞĞ±È½Ï£¬´òÓ¡¡££¨Ê¾Àı 2£©
»¹Ö§³Ö´«µİÈÎºÎÄÚ²¿Êı¾İÀàĞÍ»ò


-------------------------------------------------------- KeyPgTypeTemp ----

Temporary Types
  
´´½¨ÓÃ»§¶¨ÒåÀàĞÍµÄÁÙÊ±¸±±¾

Óï·¨
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

²ÎÊı
initializers
ÀàĞÍµÄ³õÊ¼Öµ£¨»ò½öµÚÒ»¸ö£©
typename
»ò µÄÃû³ÆTypeUnion

·µ»ØÖµ
ÀàĞÍµÄÁÙÊ±¸±±¾¡£

ÃèÊö
ÓÃÓÚ´´½¨ÁÙÊ±ÀàĞÍ¡£Èç¹ûÎ´Ã÷È·¸ø³ö£¬Ôò½«¾¡¿ÉÄÜ´ÓÆäÓÃ·¨ÖĞÍÆ¶Ï³öÀ´¡£ÁÙÊ±¸±±¾µÄÓÃ·¨¿ÉÄÜ°üÀ¨½«Æä¸³¸ø±äÁ¿¡¢½«Æä×÷Îª²ÎÊı´«µİ¸ø¹ı³Ì»ò½«Æä×÷Îª¹ı³ÌµÄÖµ·µ»Ø¡£



-------------------------------------------------------- KeyPgUbound ----

UBound   Êı×éÈ¡ÉÏÏŞ
  
·µ»ØÊı×éÎ¬¶ÈµÄÉÏÏŞ

Óï·¨
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

ÓÃ·¨
result = UBound( array [, dimension ] )

²ÎÊı
array
ÈÎºÎÀàĞÍµÄÊı×é
dimension
Òª»ñÈ¡µÄÉÏÏŞµÄÎ¬¶È

·µ»ØÖµ
·µ»ØÊı×éÎ¬¶ÈµÄÉÏÏŞ¡£
ÃèÊö
UBound·µ»Ø¿ÉÓÃ×÷Êı×éÌØ¶¨Î¬¶ÈµÄË÷ÒıµÄ×î´óÖµ¡£
Êı×éÎ¬¶È´ÓÒ» £¨£© µ½ µÄ±àºÅ£¬ÆäÖĞÎ¬¶ÈµÄ×ÜÊı¡£Èç¹ûÎ´Ö¸¶¨£¬½«·µ»ØµÚÒ»¸öÎ¬¶ÈµÄÉÏÏŞ¡£
Èç¹ûÎªÁã £¨0£©£


-------------------------------------------------------- KeyPgUbyte ----

UByte   ÎŞ·ûºÅ×Ö½Ú
  
±ê×¼Êı¾İÀàĞÍ£º8 Î»ÎŞ·ûºÅ¡£
µÈĞ§ÓÚ ¡£Unsigned Byte

Óï·¨
Dim variable As UByte

ÃèÊö
8 Î»ÎŞ·ûºÅ


-------------------------------------------------------- KeyPgUcase ----

UCase   ×Ö·û´®´óĞ´
  
·µ»Ø×Ö·û´®µÄ´óĞ´¸±±¾

Óï·¨
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

ÓÃ·¨
result = UCase[$]( str [ , mode ] )

²ÎÊı
str
Òª×ª»»Îª´óĞ´µÄ×Ö·û´®¡£
mode
×ª»»Ä£Ê½£º0 = µ±Ç°ÇøÓòÉèÖÃ£¬1 = ½ö ASCII

·µ»ØÖµ
µÄ´óĞ´¸±±¾¡£str


-------------------------------------------------------- KeyPgUinteger ----

UInteger   ÎŞ·ûºÅÕûĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º32 Î»»ò 64 Î»ÎŞ·ûºÅ£¬´óĞ¡Óë ÏàÍ¬¡£
µÈĞ§ÓÚ ¡£SizeOf(Any Ptr)Unsigned Integer

Óï·¨
Dim variable As UInteger
Dim variable As UInteger<bits>

²ÎÊı
bits
Ò»¸öÊıÖµ³£Á¿±í´ïÊ½£¬Ö¸Ê¾ËùĞèÎŞ·ûºÅÕûÊıÎ»µÄ´óĞ¡¡£ÔÊĞíµÄÖµÎª ¡¢ »ò ¡£8163264

ÃèÊö
32 Î»»ò 64 Î»ÎŞ·ûºÅÕûÊıÊı¾İÀàĞÍ£¬¾ßÌåÈ¡¾öÓÚÆ½Ì¨¡£
Èç¹û¸ø¶¨ÁËÏÔÊ½Î»´óĞ¡£¬ÔòÌá¹©ÁËÒ»ÖÖÊı¾İÀàĞÍ£¬¸ÃÊı¾İÀàĞÍ×î¶à¿


-------------------------------------------------------- KeyPgUlong ----

ULong   ÎŞ·ûºÅ³¤ĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º32 Î»ÎŞ·ûºÅÕûÊı¡£
µÈĞ§ÓÚ ¡£Unsigned Long

Óï·¨
Dim variable As ULong

ÃèÊö
32 Î»ÎŞ·ûºÅÕûÊıÊı¾İÀàĞÍ¡£¿


-------------------------------------------------------- KeyPgUlongint ----

ULongInt   ÎŞ·ûºÅ³¤ÕûĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º64 Î»ÎŞ·ûºÅ¡£
µÈĞ§ÓÚ ¡£Unsigned LongInt

Óï·¨
Dim variable As ULongInt

ÃèÊö
64 Î»ÎŞ·ûºÅÕûÊıÊı¾İÀàĞÍ¡£¿ÉÒÔ±£´æ´Ó 0 µ½ 18 4


-------------------------------------------------------- KeyPgUnion ----

Union   ÁªºÏĞÍ
  
ÉùÃ÷ÁªºÏÓÃ»§¶¨ÒåÀàĞÍ¡£

Óï·¨
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

²ÎÊı
typename
µÄÃû³ÆUnion
fieldname
Êı¾İ×Ö¶Î³ÉÔ±µÄÃû³Æ
member function declaration
ÈÎºÎÊÜÖ§³ÖµÄ³ÉÔ±º¯Êı

ÃèÊö
Êı¾İÔªËØÕ¼ÓÃÄÚ´æÖĞµÄ¹«ÓÃ¿Õ¼ä£¨¶ÔÓÚ µÄËùÓĞÊı¾İÔªËØ£¬ÄÚ´æµØÖ·ÏàÍ¬£©¡£µÄÊı¾İÔªËØ¿ÉÒÔÊÇ¼òµ¥µÄÊı¾İ×Ö¶Î£¬Ò²¿ÉÒÔÊÇÎ´ÃüÃûµÄÊı¾İ×Ö¶Î¿é¡£
µÄ´óĞ¡ÊÇ×î´óÊı¾İÔªËØµÄ´ó


-------------------------------------------------------- KeyPgUnlock ----

Unlock   ½âËø
  
É¾³ıÎÄ¼şÉÏµÄÏÈÇ°·ÃÎÊÏŞÖÆ£¨Ëø¶¨£©

Óï·¨
Unlock #filenum, record
Unlock #filenum, start To end

²ÎÊı
filenum
ÓÃÓÚÎÄ¼şµÄÎÄ¼ş±àºÅ¡£Open
record
Òª½âËøµÄ¼ÇÂ¼£¨ÎÄ¼ş£©¡£Random
start
Òª½âËøµÄ·¶Î§ÖĞµÄµÚÒ»¸ö×Ö½ÚÎ»ÖÃ£¨ÎÄ¼ş£©¡£Binary
end
Òª½âËøµÄ·¶Î§ÖĞµÄ×îºóÒ»¸ö×Ö½ÚÎ»ÖÃ£¨ÎÄ¼ş£©¡£Binary

ÃèÊö
UnlockÉ¾³


-------------------------------------------------------- KeyPgUnsigned ----

Unsigned   ÎŞ·ûºÅÊı
  
ÕûÊıÊı¾İÀàĞÍĞŞÊÎ·û

Óï·¨
Dim variable As Unsigned {integer-based data type}

ÃèÊö
Ç¿ÖÆ»ùÓÚÕûÊıµÄÊı¾İ


-------------------------------------------------------- KeyPgUntil ----

Until   Ö±µ½
  
Óï¾äÖĞÊ¹ÓÃµÄÌõ¼ş×Ó¾ä¡£Do..Loop

Óï·¨
Do Until condition
or
Loop Until condition

ÃèÊö
UntilÓë½


-------------------------------------------------------- KeyPgUshort ----

UShort   ¶ÌÕûĞÍ
  
±ê×¼Êı¾İÀàĞÍ£º16 Î»ÎŞ·ûºÅ¡£
µÈĞ§ÓÚ ¡£Unsigned Short

Óï·¨
Dim variable As UShort

ÃèÊö
16 Î»ÎŞ·ûºÅÕû


-------------------------------------------------------- KeyPgUsing ----

Using (Namespaces)   ÒıÓÃ
  
½«ÃüÃû¿Õ¼ä·ûºÅÒıÈëµ±Ç°·¶Î§

Óï·¨
Using identifier [, identifier [, ...] ]

²ÎÊı
identifier£ºÒªÊ¹ÓÃµÄÃû³Æ¡£Namespace

ÃèÊö
¸ÃÃüÁîÔÊĞí·ÃÎÊ¸ø¶¨ÃüÃû¿Õ¼äÖĞµÄËùÓĞ·ûºÅ£¬¶øÎŞĞè¸ÃÃüÃû¿Õ¼äµÄÃû³ÆÇ°×º¡£Óë C++ ²»Í¬£¬µ«Óë C# ²»Í¬£¬ÔÚ Ö®ºó²»ĞèÒª¹Ø¼ü×Ö£¬ÒòÎª²»ÄÜ´ÓÃüÃû¿Õ¼ä¼Ì³Ğµ¥¸ö·ûºÅ¡£
Ö»ÔÊĞíÔÚÃ


-------------------------------------------------------- KeyPgVaArg ----

va_arg   ±ä²Î±í
  
´Ó±äÁ¿²ÎÊıÁĞ±íÖĞ·µ»Øµ±Ç°²ÎÊı¡£

Óï·¨
variable = va_arg ( argument_list, datatype )

ÃèÊö
¸ÃºêÔÊĞíÔÚº¯ÊıÖĞÊ¹ÓÃ¿É±äÊıÁ¿µÄ²ÎÊı£ºva_arg
 	va_arg·µ»ØÁĞ±íÖĞµÄµ±Ç°²ÎÊı£¬ÆäÔ¤ÆÚÊı¾İÀàĞÍÎª ¡£argument_listdatatype
ÔÚÊ×´ÎÊ¹ÓÃÖ®Ç°£¬±ØĞëÊ¹ÓÃÃüÁî½øĞĞ³õÊ¼»¯¡£va_argargument_li


-------------------------------------------------------- KeyPgVaFirst ----

va_first   ±ä²ÎÊ×¸ö
  
·µ»ØÖ¸Ïò±äÁ¿²ÎÊıÁĞ±íÖĞµÚÒ»¸ö²ÎÊıµÄÖ¸Õë

Óï·¨
pointer_variable = va_first()

ÃèÊö
¸Ãº¯ÊıÌá¹©Ò»¸ö·ÇÀàĞÍ»¯µÄÖ¸ÕëÖµ£¬¸ÃÖµÖ¸Ïò´«µİ¸øº¯ÊıµÄµÚÒ»¸ö±äÁ¿²Î


-------------------------------------------------------- KeyPgVal ----

Val   ÊıÈ¡Öµ
  
½«×Ö·û´®×ª»»Îª¸¡µãÊı

Óï·¨
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

ÓÃ·¨
result = Val( strnum )

²ÎÊı
strnum
°üº¬Òª×ª»»µÄÊı×ÖµÄ×Ö·û´®

·µ»ØÖµ
·µ»Ø×ª»»ºóµÄ¾«¶ÈÊı×Ö
 Èç¹û×Ö·û´®µÄµÚÒ»¸ö×Ö·ûÎŞĞ§£¬½«·µ»Ø ¡£DoubleVal0

ÃèÊö
Val("10")»á»ØÀ´£¬»¹»áÔÙÀ´¡£¸Ãº¯Êı´Ó×ó²à·ÖÎö×Ö·û´®£¬Ìø¹ıÈÎºÎ¿Õ¸ñ£¬²¢·µ»ØËü¿ÉÒÔ¶ÁÈ¡µÄ×î³¤Êı×Ö£¬²¢ÔÚÕÒµ½µÄµÚÒ»¸ö²»ºÏÊÊµÄ×Ö·û´¦Í£Ö¹¡£¿Æ


-------------------------------------------------------- KeyPgValint ----

ValInt   ÊıÈ¡ÕûÖµ
  
½«×Ö·û´®×ª»»Îª 32 Î»ÕûÊı

Óï·¨
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

ÓÃ·¨
result = ValInt ( strnum )

²ÎÊı
strnum
Òª×ª»»µÄ×Ö·û´®

·µ»ØÖµ
·µ»Ø×ª»»ºóµÄ×Ö·û´®µÄÖµ Èç¹û×Ö·û´®
µÄµÚÒ»¸ö×Ö·ûÎŞĞ§£¬½«·µ»Ø ¡£LongValInt0

ÃèÊö
ÀıÈç£¬½«·µ»Ø £¬²¢ÇÒÒ²½«·µ»Ø¡£¸Ãº¯Êı´Ó×ó²à·ÖÎö×Ö·û´®£¬Ìø¹ıÈÎºÎ¿Õ¸ñ£¬²¢·µ»ØËü¿ÉÒÔ¶ÁÈ¡µÄ×î³¤Êı×Ö£¬²¢ÔÚÕÒµ½µÄµÚÒ»¸ö²»ºÏÊÊµÄ×Ö·û´¦Í£Ö¹¡£ÈÎº


-------------------------------------------------------- KeyPgVallng ----

ValLng   ÊıÈ¡³¤Öµ
  
½«×Ö·û´®×ª»»Îª 64 Î»ÕûÊı

Óï·¨
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

ÓÃ·¨
result = ValLng ( strnum )

²ÎÊı
strnum
Òª×ª»»µÄ×Ö·û´®

·µ»ØÖµ
·µ»Ø×ª»»ºóµÄ×Ö·û´®µÄ a Èç¹û×Ö·û´®
µÄµÚÒ»¸ö×Ö·ûÎŞĞ§£¬½«·µ»Ø ¡£LongIntValLng0

ÃèÊö
ÀıÈç£¬½«·µ»Ø £¬²¢ÇÒÒ²½«·µ»Ø¡£¸Ãº¯Êı´Ó×ó²à·ÖÎö×Ö·û´®£¬Ìø¹ıÈÎºÎ¿Õ¸ñ£¬²¢·µ»ØËü¿ÉÒÔ¶ÁÈ¡µÄ×î³¤Êı×Ö£¬²¢ÔÚÕÒµ½µÄµÚÒ»¸ö²»ºÏÊÊµÄ×Ö·û´¦Í£Ö¹¡£ÈÎºÎ


-------------------------------------------------------- KeyPgValuint ----

ValUInt   ÊıÈ¡ÎŞ·ûÕûĞÍÖµ
  
½«×Ö·û´®×ª»»ÎªÎŞ·ûºÅµÄ 32 Î»ÕûÊı

Óï·¨
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

ÓÃ·¨
result = ValUInt ( strnum )

²ÎÊı
strnum
Òª×ª»»µÄ×Ö·û´®

·µ»ØÖµ
·µ»Ø×ª»»ºóµÄ×Ö·û´®µÄÖµ Èç¹û×Ö·û´®
µÄµÚÒ»¸ö×Ö·ûÎŞĞ§£¬½«·µ»Ø ¡£ULongValUInt0

ÃèÊö
ÀıÈç£¬½«·µ»Ø £¬²¢ÇÒÒ²½«·µ»Ø¡£¸Ãº¯Êı´Ó×ó²à·ÖÎö×Ö·û´®£¬Ìø¹ıÈÎºÎ¿Õ¸ñ£¬²¢·µ»ØËü¿ÉÒÔ¶ÁÈ¡µÄ×î³¤Êı×Ö£¬²¢ÔÚÕÒµ½µÄµÚÒ»¸ö²»ºÏÊÊµÄ×Ö·û´¦Í£


-------------------------------------------------------- KeyPgValulng ----

ValULng   ÊıÈ¡ÎŞ·û³¤ĞÍÖµ
  
½«×Ö·û´®×ª»»ÎªÎŞ·ûºÅµÄ 64 Î»ÕûÊı

Óï·¨
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

ÓÃ·¨
result = ValULng ( strnum )

²ÎÊı
strnum
Òª×ª»»µÄ×Ö·û´®

·µ»ØÖµ
·µ»Ø×ª»»ºóµÄ×Ö·û´®µÄ a Èç¹û×Ö·û´®
µÄµÚÒ»¸ö×Ö·ûÎŞĞ§£¬½«·µ»Ø ¡£ULongIntValULng0

ÃèÊö
ÀıÈç£¬½«·µ»Ø £¬²¢ÇÒÒ²½«·µ»Ø¡£¸Ãº¯Êı´Ó×ó²à·ÖÎö×Ö·û´®£¬Ìø¹ıÈÎºÎ¿Õ¸ñ£¬²¢·µ»ØËü¿ÉÒÔ¶ÁÈ¡µÄ×î³¤Êı×Ö£¬²¢ÔÚÕÒµ½µÄµÚÒ»¸ö²»ºÏÊÊµÄ×Ö·û´¦Í£Ö


-------------------------------------------------------- KeyPgVaNext ----

va_next   ±ä²Î´Î¸ö
  
·µ»ØÖ¸Ïò±äÁ¿²ÎÊıÁĞ±íÖĞÏÂÒ»¸ö²ÎÊıµÄÖ¸Õë

Óï·¨
Argument_Pointer = va_next ( Argument_List, datatype )

ÃèÊö
¸ÃºêÌá¹©ÁËÒ»¸öÖ¸ÕëÖµ£¬Ö¸ÏòÁĞ±íÖĞµÄÏÂÒ»¸ö²ÎÊı£¬¼´µ±Ç°²ÎÊıµÄÀàĞÍ¡£
Ê¹ÓÃ Ê±²»ÊÜÖ§³Ö¡£Ê¹ÓÃ¿É±


-------------------------------------------------------- KeyPgVar ----

Var   ±äÁ¿
  
ÉùÃ÷Ò»¸ö±äÁ¿£¬ÆäÀàĞÍÊÇ´Ó³õÊ¼ÖµÉè¶¨Ïî±í´ïÊ½ÖĞÒşº¬µÄ

Óï·¨
[Static] Var [Shared] symbolname = expression[, symbolname = expression]

ÃèÊö
VarÉùÃ÷Ò»¸ö±äÁ¿£¬ÆäÀàĞÍÊÇ´Ó³õÊ¼ÖµÉè¶¨Ïî±í´ïÊ½ÖĞÒşº¬µÄ¡£ÔÚÉùÃ÷ÖĞÖ¸¶¨ÏÔÊ½ÀàĞÍÊÇ·Ç·¨µÄ¡£³õÊ¼ÖµÉè¶¨Ïî±í´ïÊ½¿ÉÒÔÊÇ³£Á¿£¬Ò²¿ÉÒÔÊÇÈÎºÎÀàĞÍµÄÈÎºÎ±äÁ¿¡£
×¢Òâ£º²»Ö§³Ö £¬ÒòÎª


-------------------------------------------------------- KeyPgViewgraphics ----

View (Graphics)
  
ÎªÍ¼ĞÎ¹Ø¼ü×ÖÉèÖÃĞÂµÄÎïÀí×ø±êÓ³ÉäºÍĞŞ¼ôÇøÓò

Óï·¨
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

²ÎÊı
x1 As Integer,y1 As Integer
ÊÓ¿ÚµÄÒ»½ÇÏà¶ÔÓÚÆÁÄ»×óÉÏ½ÇµÄË®Æ½ºÍ´¹Ö±Æ«ÒÆÁ¿£¨ÒÔÏñËØÎªµ¥Î»£©¡£
x2 As Integer,y2 As Integer
ÊÓ¿ÚÁíÒ»½ÇÏà¶ÔÓÚÆÁÄ»×óÉÏ½ÇµÄË®Æ½ºÍ´¹Ö±Æ«ÒÆÁ¿£¨ÒÔÏñËØÎªµ¥Î»£©¡£
fill_color As ULong
ÓÃÓÚÌî³äĞÂÊÓ¿ÚµÄÑÕÉ«¡£
border_color As ULong
ÒªÔÚĞÂÊÓ¿ÚÖÜÎ§»æÖÆµÄ±ß¿òµÄÑÕÉ«¡£

ÃèÊö
ÊÓ¿Ú»ò¼ôÇĞÇøÓòÊÇÍ¼ĞÎÆÁÄ»µÄ¾ØĞÎÇøÓò£¬ÔÚ´ËÇøÓòÖ®Íâ²»»áÖ´ĞĞÍ¼ĞÎ»æÖÆ¡£Ò²¾ÍÊÇËµ£¬½«½


-------------------------------------------------------- KeyPgViewtext ----

View Print
  
ÉèÖÃÆÁÄ»µÄ¿É´òÓ¡ÎÄ±¾ÇøÓò

Óï·¨
View Print [ firstrow To lastrow ]

²ÎÊı
firstrow
µÚÒ»ĞĞ´òÓ¡ÇøÓò
lastrow
´òÓ¡ÇøÓòµÄ×îºóÒ»ĞĞ

ÃèÊö
½«ÆÁÄ»ÉÏµÄÎÄ±¾´òÓ¡ÇøÓò£¨ÔÚ¿ØÖÆÌ¨Ä£Ê½»òÍ¼ĞÎÄ£Ê½ÏÂ£©µÄ±ß½çÉèÖÃÎª´ÓµÚÒ»¸ö¿ªÊ¼µ½×îºóÒ»¸ö£¨°üÀ¨×îºó


-------------------------------------------------------- KeyPgVirtual ----

Virtual   ĞéÄâÊÂ¼ş
  
ÉùÃ÷ĞéÄâ·½·¨

Óï·¨
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

ÃèÊö
ĞéÄâ·½·¨ÊÇ¿ÉÒÔ±»´ÓÉùÃ÷ËüÃÇµÄÀàĞÍÅÉÉúµÄÊı¾İÀàĞÍ¸²¸ÇµÄ·½·¨£¬´Ó¶øÔÊĞí¶¯Ì¬¶àÌ¬ĞÔ¡£Óë·½·¨Ïà·´£¬ĞéÄâ·½·¨±ØĞë¾ßÓĞÊµÏÖ£¬¸ÃÊµÏÖÔÚÎ´¸²¸ÇĞéÄâ·½·¨Ê±Ê¹ÓÃ¡£
ÅÉÉúÀàĞÍ¿ÉÒÔÍ¨¹ıÉùÃ÷¾ßÓĞÏàÍ¬±êÊ¶·ûºÍÇ


-------------------------------------------------------- KeyPgVisPrivate ----

Private: (Access Control)
  
ÔÚ »ò ÖĞÖ¸¶¨Ë½ÓĞ³ÉÔ±·ÃÎÊ¿ØÖÆTypeClass

Óï·¨
Type typename
Private:
member declarations
End Type

²ÎÊı
typename
»ò µÄÃû³ÆTypeClass
member declarations
×Ö¶Î¡¢º¯Êı»òÃ¶¾ÙµÄÉùÃ÷

ÃèÊö
Private:±íÊ¾¹Ø×¢Ëü¾ßÓĞË½ÓĞ·ÃÎÊÈ¨ÏŞ¡£Ë½ÓĞ³ÉÔ±Ö»ÄÜ´Ó »ò µÄ³ÉÔ±º¯ÊıÄÚ²¿·ÃÎÊ£¨Òò´Ë£¬¶ÔÓÚ´Ó »ò ÅÉÉúµÄÀàĞÍ»òÀà£¬²»ÄÜ´Ó³ÉÔ±º¯ÊıÄÚ²¿·ÃÎÊ£©¡£
ÔÚ¸ø³ö²»Í¬µÄ·ÃÎÊ¿ØÖÆËµÃ÷·û£


-------------------------------------------------------- KeyPgVisProtected ----

Protected: (Access Control)
  
ÔÚ »ò ÖĞÖ¸¶¨ÊÜ±£»¤µÄ³ÉÔ±·ÃÎÊ¿ØÖÆTypeClass

Óï·¨
Type typename
Protected:
member declarations
End Type

²ÎÊı
typename
»ò µÄÃû³ÆTypeClass
member declarations
×Ö¶Î¡¢º¯Êı»òÃ¶¾ÙµÄÉùÃ÷

ÃèÊö
Protected:±íÊ¾¹Ø×¢Ëü¾ßÓĞÊÜ±£»¤µÄ·ÃÎÊÈ¨ÏŞ¡£ÊÜ±£»¤µÄ³ÉÔ±Ö»ÄÜ´Ó or µÄ³ÉÔ±º¯ÊıÄÚ²¿·ÃÎÊ£¬Ò²¿ÉÒÔ´Ó »ò ÅÉÉúµÄÀà½øĞĞ·ÃÎÊ¡£
ÒÔÏÂÄÚÈİÊÜµ½±£»¤£¬Ö±µ½¸ø³ö²»Í¬µÄ·ÃÎÊ¿ØÖÆËµÃ


-------------------------------------------------------- KeyPgVisPublic ----

Public: (Access Control)
  
ÔÚ »ò ÖĞÖ¸¶¨¹«¹²³ÉÔ±·ÃÎÊ¿ØÖÆTypeClass

Óï·¨
Type typename
Public:
member declarations
End Type

²ÎÊı
typename
»ò µÄÃû³ÆTypeClass
member declarations
×Ö¶Î¡¢º¯Êı»òÃ¶¾ÙµÄÉùÃ÷

ÃèÊö
Public:±íÊ¾¹Ø×¢Ëü¾ßÓĞ¹«¹²·ÃÎÊÈ¨ÏŞ¡£¹«¹²³ÉÔ±¿ÉÍ¨¹ıÊ¹ÓÃ »ò ·ÃÎÊ¡£
ÔÚ¸ø³ö²»Í¬µÄ·ÃÎÊ¿ØÖÆËµÃ÷·ûÖ®Ç°£¬ÒÔÏÂ¸÷ÏîÊÇ¹«¹²µÄ£¬Èç¹ûÎ´Ìá¹©
³ÉÔ±·ÃÎÊ¿ØÖÆËµÃ÷·û£¬Ôò
Ä¬È


-------------------------------------------------------- KeyPgWait ----

Wait   µÈ´ı
  
´Ó´øÓĞÑÚÂëµÄÓ²¼ş¶Ë¿Ú¶ÁÈ¡¡£

Óï·¨
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

ÓÃ·¨
Wait port, and_value [, xor_value]

²ÎÊı
port
Òª¶ÁÈ¡µÄ¶Ë¿Ú¡£
and_mask
ÑÚÂëÖµÎª ºÍ ¶Ë¿ÚÖµ Óë¡£
xor_mask
ÑÚÂëÖµÎª Xor ¶Ë¿ÚÖµ¡£

·µ»ØÖµ
³É¹¦Ê±Îª 0£¬Ê§°ÜÊ±Îª -1¡£

ÃèÊö



-------------------------------------------------------- KeyPgWbin ----

WBin   ¿í×Ö·û¶ş½øÖÆ
  
·µ»ØÊı×ÖµÄ¶ş½øÖÆ£¨Unicode£©±íÊ¾ĞÎÊ½WString

Óï·¨
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString

Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

ÓÃ·¨
result = WBin( number [, digits] )

²ÎÊı
number
¼ÆËãÎªÕûÊıµÄÕûÊı»ò±í´ïÊ½¡£
digits
Òª·µ»ØµÄ¿ÉÑ¡Î»Êı¡£

·µ»ØÖµ
·µ»Ø µÄ¶ş½øÖÆ±íÊ¾ĞÎÊ½ ±»½Ø¶Ï»òÌî³äÁã £¨£© ÒÔÊÊºÏÎ»Êı£¨Èç¹ûÒÑÖ¸¶¨£©¡£WStringnumber"0"

ÃèÊö
·µ»ØÒ»¸ö £¨Unicode£©£¬±íÊ¾ÕûÊı µÄ¶ş½øÖÆÖµ¡£¶ş½øÖÆÊı×ÖµÄ·¶Î§´Ó µ½ ¡£
Èç¹ûÖ¸¶¨ > £¬Ôò½á¹û w


-------------------------------------------------------- KeyPgWchr ----

WChr   È¡¿í×Ö·û
  
·µ»Ø°üº¬Ò»¸ö»ò¶à¸ö Unicode ×Ö·ûµÄ¿í×Ö·û×Ö·û´®

Óï·¨
Declare Function Wchr ( ByVal ch As Integer [, ... ] ) As WString

ÓÃ·¨
result = WChr( ch0 [, ch1 ... chN ] )

²ÎÊı
ch
×Ö·ûµÄ Unicode ÕûÊıÖµ¡£

·µ»ØÖµ
·µ»Ø¿í×Ö·û×Ö·û´®¡£

ÃèÊö
WChr·µ»ØÒ»¸ö¿í×Ö·û×Ö·û´®£¬ÆäÖĞ°üº¬ÓÉ´«µİ¸øËüµÄ Unicode ÖµËù±íÊ¾µÄ×Ö·û¡£
µ±ÓëÊıÖµ³£Á¿»òÎÄ±¾Ò»ÆğÊ¹ÓÃÊ±£¬½«ÔÚ±àÒëÊ±¼ÆËã½á¹û£¬Òò´Ë¿ÉÒÔÔÚ±äÁ¿


-------------------------------------------------------- KeyPgWeekday ----

Weekday   ¹¤×÷ÈÕ
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡Ò»ÖÜÖĞµÄÌìÊı

Óï·¨
Declare Function Weekday ( ByVal serial As Double , ByVal firstdayofweek As Long = fbusesystem ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Weekday( date_serial [, firstdayofweek ] )

²ÎÊı
date_serial
ÈÕÆÚ
firstdayofweek
Ò»ÖÜµÄµÚÒ»Ìì

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ·µ»ØĞÇÆÚÈÕ±àºÅ¡£

ÃèÊö
¹¤×÷ÈÕÖµ±ØĞëÔÚ 1-7 ·¶Î§ÄÚ£¬Æäº¬ÒåÈ¡¾öÓÚ²ÎÊı
ÊÇ¿ÉÑ¡µÄ¡£firstdayofweekfirstdayofweek

¼ÛÖµÒ»ÖÜµÄµÚÒ»Ìì²»¶ÏÊ¡ÂÔĞÇÆÚÈÕ 0±¾µØÉèÖÃfb


-------------------------------------------------------- KeyPgWeekdayname ----

WeekdayName   ¹¤×÷ÈÕÃû
  
´ÓÆäÕûÊı±íÊ¾ĞÎÊ½ÖĞ»ñÈ¡¹¤×÷ÈÕµÄÃû³Æ

Óï·¨
Declare Function WeekdayName ( ByVal weekday As , ByVal abbreviate As Long = 0, ByVal firstdayofweek As Long = fbUseSystem ) As String

ÓÃ·¨
#include "vbcompat.bi"
result = WeekdayName( weekday [, abbreviate [, firstdayofweek ] ] )

²ÎÊı
weekday
ĞÇÆÚ¼¸
abbreviate
±êÖ¾£¬Ö¸Ê¾Ãû³ÆÓ¦ËõĞ´
firstdayofweek
Ò»ÖÜµÄµÚÒ»Ìì

·µ»ØÖµ
´ÓÖµ 1 µ½ 7 ·µ»Ø±¾µØ²Ù×÷ÏµÍ³ÓïÑÔĞÇÆÚ¼¸Ãû³Æ¡£weekday

ÃèÊö
ÈçºÎ½âÊÍÈ¡¾öÓÚ²ÎÊı¡£
Èç¹ûÎª true£¬Ôò·µ»Ø 3 ¸ö×ÖÄ¸µÄËõĞ´£¬Èç¹ûÎª false »òÊ¡ÂÔ£¬Ôò·µ»ØÕû¸öÃû³Æ¡£
ÊÇÖ¸¶¨ÈçÏÂµÄ¿ÉÑ¡²ÎÊı£ºweekda


-------------------------------------------------------- KeyPgWend ----

Wend   ¼ÌĞø
  
¿ØÖÆÁ÷Óï¾ä¡£

Óï·¨
While [condition]
[statement block]
Wend

ÃèÊö
WendÖ¸¶¨Ñ­»·¿éµÄ


-------------------------------------------------------- KeyPgWhex ----

WHex   ¿í×Ö·û16½øÖÆ
  
·µ»ØÊı×ÖµÄÊ®Áù½øÖÆ£¨Unicode£©±íÊ¾ĞÎÊ½WString

Óï·¨
Declare Function WHex ( ByVal number As UByte ) As WString
Declare Function WHex ( ByVal number As UShort ) As WString
Declare Function WHex ( ByVal number As ULong ) As WString
Declare Function WHex ( ByVal number As ULongInt ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr ) As WString

Declare Function WHex ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

ÓÃ·¨
result = WHex( number [, digits ] )

²ÎÊı
number
¼ÆËãÎªÕûÊıµÄÕûÊı»ò±í´ïÊ½¡£
digits
Òª·µ»ØµÄ¿ÉÑ¡Î»Êı¡£

·µ»ØÖµ
·µ»Ø µÄÊ®Áù½øÖÆ±íÊ¾ĞÎÊ½ ±»½Ø¶Ï»òÌî³äÁã £¨£© ÒÔÊÊºÏÎ»Êı£¨Èç¹ûÒÑÖ¸¶¨£©¡£WStringnumber"0"

ÃèÊö
Ê®Áù½øÖÆÊı×ÖµÄ·¶Î§Îª -»ò -¡£
Èç¹ûÖ¸¶¨ > £¬ÔòµÃµ½µÄ½«Ç¡º


-------------------------------------------------------- KeyPgWhile ----

While   µ±Ìõ¼ş
  
¿ØÖÆÁ÷Óï¾ä¡£

Óï·¨
Do While condition
[statement block]
Loop
or
Do
[statement block]
Loop While condition
or
While [condition]
[statement block]
Wend

ÃèÊö
WhileÖ¸¶¨Ñ­»·¿éÔÚÒÔÏÂ¼ÆËã½á¹ûÎª true Ê±½«¼ÌĞø¡£ÔÚÃ¿´ÎÑ


-------------------------------------------------------- KeyPgWhilewend ----

While...Wend
  
ÓÃÓÚÑ­»·µÄ¿ØÖÆÁ÷Óï¾ä

Óï·¨
While [condition]
[statement block]
Wend

ÃèÊö
Èç¹û±í´ïÊ½Ìõ¼şµÄ¼ÆËã½á¹ûÎª true£¬Ôò¸ÃÓï¾ä½«µ¼ÖÂ ÖĞµÄÒÔÏÂÒ»×éÓï¾äÖØ¸´Ö´ĞĞ¡£
Èç¹ûÔÚÊ×´ÎÖ´ĞĞÓï¾äÊ±¼ÆËã½á¹ûÎª false£¬ÔòÌø¹ı £¬²¢ÔÚ°üº¬Óï¾äºóÁ¢¼´»Ö¸´Ö´ĞĞ¡£
Èç¹ûÔÚÓï¾ä¿éÄÚÓöµ½Óï¾ä£¬ÔòÑ­


-------------------------------------------------------- KeyPgWidth ----

Width
  
ÉèÖÃ»ò»ñÈ¡ÏÔÊ¾µÄĞĞÊıºÍÁĞÊı

Óï·¨
Width [columns] [, rows]
Width LPrint columns
Width { #filenum | devicename }, columns
result = Width( )

²ÎÊı
columns
ÓÃÓÚÊä³öµÄÁĞ£¨ÒÔ×Ö·ûÎªµ¥Î»£©
rows
ÓÃÓÚÊä³öµÄĞĞ£¨ÒÔ×Ö·ûÎªµ¥Î»£©
filenum
ÒªÉêÇëµÄÎÄ¼ş±àºÅ
devicename
ÒªÓ¦ÓÃµÄÉè±¸Ãû³Æ

·µ»ØÖµ
·µ»ØÒ»¸ö 32 Î»£¬ÆäÖĞ¸ß×ÖÊÇĞĞÊı£¬µÍ×ÖÊÇµ±Ç°ÉèÖÃµÄÁĞÊı¡£Long

ÃèÊö
ÉèÖÃÊä³öÉè±¸£¨¿ØÖÆÌ¨¡¢´òÓ¡»ú»òÎÄ±¾ÎÄ¼ş£©µÄ×î´ó×Ö·ûÁĞÊı¡£Èç¹û·¢ËÍµ½Éè±¸µÄÎÄ±¾´ïµ½¿í¶È£¬Ôò»áÉú³É×Ô¶¯»Ø³µ·û


-------------------------------------------------------- KeyPgWindow ----

Window   ´°¿Ú
  
Îªµ±Ç°ÊÓ¿ÚÉèÖÃĞÂµÄÊÓÍ¼×ø±êÓ³Éä

Óï·¨
Window [ [Screen] ( x1, y1 )-( x2, y2 ) ]

²ÎÊı
Screen
Ö¸¶¨ y ×ø±êµÄ¿ÉÑ¡²ÎÊı´ÓÉÏµ½ÏÂµİÔö¡£
( x1, y1 )-( x2, y2 )
Óëµ±Ç°ÊÓ¿ÚµÄÏà¶Ô½Ç¶ÔÓ¦µÄĞÂ¸¡µãÖµ¡£Èç¹ûÊ¡ÂÔ£¬ÔòÉ¾³ı×ø±êÓ³Éä¡£Window

ÃèÊö
WindowÓÃÓÚ¶¨ÒåĞÂµÄ×ø±êÏµ¡£ ²¢ÇÒÊÇÒªÓ³Éäµ½µ±Ç°ÊÓ¿ÚÏà¶Ô½ÇÂäµÄĞÂ×ø±ê;´«µİ¸øÍ¼ĞÎ»ùÔªÓï¾äµÄËùÓĞÎ´À´×ø±ê¶¼½«ÊÜµ½´ËĞÂÓ³ÉäµÄÓ°Ïì¡£Èç¹û


-------------------------------------------------------- KeyPgWindowtitle ----

WindowTitle   ´°¿Ú±êÌâ
  
ÉèÖÃ³ÌĞò´°¿Ú±êÌâ

Óï·¨
Declare Sub WindowTitle ( ByRef title As Const String )

ÓÃ·¨
WindowTitle title

²ÎÊı
title
ÒªÖ¸¶¨ÎªĞÂ´°¿Ú±êÌâµÄ×Ö·û´®¡£

ÃèÊö
´ËÓï¾ä¶ÔÓÚ¸ü¸Ä³ÌĞò´°¿Ú±êÌâºÜÓĞÓÃ¡£Èç¹û³ÌĞòÒÑÔÚ´°¿ÚÄ£Ê½ÏÂÔËĞĞ£¬ÔòĞÂ±êÌâ¼¯½«Á¢¼´±äÎª»î¶¯×´Ì¬£¬·ñÔò½«³ÉÎªÓÉ¶Ô or Óï¾äµÄºóĞøµ÷ÓÃ²úÉúµÄÈÎºÎ´°¿ÚµÄĞÂ±êÌâ¡£Èç¹ûÔÚÉèÖÃĞÂµ


-------------------------------------------------------- KeyPgWinput ----

Winput()
  
´Ó¿ØÖÆÌ¨»òÎÄ¼şÖĞ¶ÁÈ¡´óÁ¿¿í×Ö·û

Óï·¨
Declare Function WInput( ByVal num As Integer ) As WString
Declare Function WInput( ByVal num As Integer, ByVal filenum As Long = 0 ) As WString

ÓÃ·¨
result = WInput( num [, [#]filenum } )

²ÎÊı
num
Òª¶ÁÈ¡µÄ×Ö·ûÊı¡£
filenum
°ó¶¨ÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡£

·µ»ØÖµ
·µ»Ø¶ÁÈ¡µÄ×Ö·ûµÄ WString¡£

ÃèÊö
´Ó¿ØÖÆÌ¨»ò Ö¸¶¨µÄ°ó¶¨ÎÄ¼ş/Éè±¸¶ÁÈ¡Ğí¶à¿í×Ö·û¡£
µÚÒ»¸ö°æ±¾µÈ´ı²¢´Ó¼üÅÌ»º³åÇø¶ÁÈ¡¿í


-------------------------------------------------------- KeyPgWith ----

With   ¹ØÁª 
  
Óï¾ä¿é£¬ÒÔÔÊĞíÒşÊ½·ÃÎÊÓÃ»§¶¨ÒåÀàĞÍ±äÁ¿ÖĞµÄ×Ö¶Î

Óï·¨
With user_defined_var
statements
End With

ÃèÊö
¸Ã¿éÔÊĞíÔÚÒıÓÃÓÃ»§¶¨ÒåµÄ±äÁ¿µÄ×Ö¶ÎÊ±Ê¡ÂÔÆäÃû³Æ¡£È»ºó£¬¿ÉÒÔÔÚ×Ö¶ÎÖ®Ç°½öÊ¹ÓÃÒ»¸ö¾äµã£¨£©·ÃÎÊ×Ö¶Î£¬ÀıÈç£¬Èç¹û°üº¬³ÆÎª¡°element¡±µÄ×Ö¶ÎÔªËØ£¬Ôò¿ÉÒÔÔÚ¿éÖĞÒÔ¡°¡±µÄĞÎÊ½·ÃÎÊË


-------------------------------------------------------- KeyPgWoct ----

WOct   ¿í×Ö·û8½øÖÆ
  
½«Êı×Ö×ª»»Îª Unicode °Ë½øÖÆ±íÊ¾ĞÎÊ½

Óï·¨
Declare Function WOct ( ByVal number As UByte ) As WString
Declare Function WOct ( ByVal number As UShort ) As WString
Declare Function WOct ( ByVal number As ULong ) As WString
Declare Function WOct ( ByVal number As ULongInt ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr ) As WString

Declare Function WOct ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

ÓÃ·¨
result = WOct( number [, digits ] )

²ÎÊı
number
Òª×ª»»Îª°Ë½øÖÆ±íÊ¾µÄÊı×Ö¡£
digits
·µ»ØµÄ×Ö·û´®ÖĞËùĞèµÄÎ»Êı¡£

·µ»ØÖµ
Êı×ÖµÄ Unicode °Ë½øÖÆ±íÊ¾ĞÎÊ½£¬½Ø¶Ï»òÓÃÁã £¨£© Ìî³äÒÔÊÊºÏÎ»Êı£¨Èç¹ûÖ¸¶¨£©¡£"0"

ÃèÊö
·µ»Ø µÄ°Ë½øÖÆ£¨Unicode£©±íÊ¾ĞÎÊ½¡£°ËÎ»Êı×ÖµÄ·¶Î§´Ó µ½ ¡£
Èç¹ûÖ¸¶¨ > £¬Ôò½á¹û×Ö·û´®½«Ç¡ºÃÊÇ


-------------------------------------------------------- KeyPgWrite ----

Write   Ğ´Èë
  
½«¶ººÅ·Ö¸ôµÄÖµÁĞ±íÊä³öµ½ÆÁÄ»

Óï·¨
Write [ expressionlist ]

²ÎÊı
expressionlist
Òª´òÓ¡µÄÒÔ¶ººÅ·Ö¸ôµÄÏîÄ¿ÁĞ±í

ÃèÊö
½«ÖµÊä³öµ½ÆÁÄ»¡£ÕâĞ©ÖµÓÃ¶ººÅ·Ö¸ô£¬×Ö·û´®À¨ÔÚË«ÒıºÅÖĞ¡£Èç¹û¾ø¶ÔÖµĞ¡ÓÚ 1 µÄÊıÖµ£¬ÔòÒÔÁã £¨£© ÎªÇ°×º£¨ÀıÈç£¬£©¡£¾ø¶ÔÖµ´óÓÚ»òµÈÓÚ µÄ¸¡µãÊı£¬»ò¾


-------------------------------------------------------- KeyPgWriteFile ----

Write (File Access)   Ğ´Èë
  
ÎÄ¼ş·ÃÎÊËµÃ÷·û

Óï·¨
Open filename As String For Binary Access Write As #filenum As Integer

ÃèÊö
Óï¾äÖĞ×Ó¾äµÄËµÃ÷·û¡£ Ö¸¶¨Î


-------------------------------------------------------- KeyPgWritePp ----

Write #   Ğ´Èë
  
½«¶ººÅ·Ö¸ôµÄÖµÁĞ±íÊä³öµ½ÎÄ±¾ÎÄ¼ş»òÉè±¸

Óï·¨
Write # filenum , [ expressionlist ]

²ÎÊı
filenum
Îª »ò ´ò¿ªµÄ´ò¿ªµÄÎÄ¼ş»òÉè±¸µÄÎÄ¼ş±àºÅ¡£OutputAppend
expressionlist
Òª´òÓ¡µÄÒÔ¶ººÅ·Ö¸ôµÄÏîÄ¿ÁĞ±í

ÃèÊö
½«ÖĞµÄÖµÊä³öµ½°ó¶¨µ½ µÄÎÄ±¾ÎÄ¼ş»òÉè±¸ÖĞ¡£ÕâĞ©ÖµÓÃ¶ººÅ·Ö¸ô£¬×Ö·û´®À¨ÔÚË«ÒıºÅÖĞ¡£Èç¹ûÎ´¸ø³öÈÎºÎÖµ£¨ÀıÈç£¬µÄÖµ½«Êä³öÎª£©£¬Ôò´óÓÚÁã£¨£©ºÍĞ¡


-------------------------------------------------------- KeyPgWspace ----

WSpace   ¿í×Ö·û¿Õ¸ñ
  
´´½¨Ò»¸ö¸ø¶¨³¤¶ÈµÄ £¬ÆäÖĞÌî³äÁË¿Õ¸ñ £¨WString" ")

Óï·¨
Declare Function WSpace( ByVal count As Integer ) As WString

ÓÃ·¨
result = WSpace( count )

²ÎÊı
count
Ò»ÖÖÕûÊıÀàĞÍ£¬Ö¸¶¨Òª´´½¨µÄ×Ö·û´®µÄ³¤¶È¡£

·µ»ØÖµ
´´½¨µÄ .Èç¹û .WStringcount <


-------------------------------------------------------- KeyPgWstr ----

WStr   ¿í×Ö·û×ª»»
  
·µ»ØÊı×Ö»ò ASCII ×Ö·û´®µÄ¿í×Ö·û×Ö·û´®±íÊ¾ĞÎÊ½

Óï·¨
Declare Function WStr ( ByVal n As Byte ) As WString
Declare Function WStr ( ByVal n As UByte ) As WString
Declare Function WStr ( ByVal n As Short ) As WString
Declare Function WStr ( ByVal n As UShort ) As WString
Declare Function WStr ( ByVal n As Long ) As WString
Declare Function WStr ( ByVal n As ULong ) As WString
Declare Function WStr ( ByVal n As LongInt ) As WString
Declare Function WStr ( ByVal n As ULongInt ) As WString
Declare Function WStr ( ByVal n As Single ) As WString
Declare Function WStr ( ByVal n As Double ) As WString
Declare Function WStr ( ByRef str As Const String ) As WString
Declare Function WStr ( ByVal str As Const WString Ptr ) As WString

ÓÃ·¨
result = WStr( number )
or
result = WStr( string )

²ÎÊı
number
Òª×ª»»Îª¿í×Ö·û×Ö·û´®µÄÊıÖµ±í´ïÊ½¡£
string
Òª×ª»»Îª¿í×Ö·û×Ö·û´®µÄ×Ö·û´®±í´ïÊ½¡£

·µ»ØÖµ
·µ»ØÊıÖµ»ò×Ö·û´®±í´ïÊ½µÄ¿í×Ö·û±íÊ¾ĞÎÊ½¡£

ÃèÊö
WStr½«ÊıÖµ±


-------------------------------------------------------- KeyPgWstring ----
WStr   ¿í×Ö·
Description



-------------------------------------------------------- KeyPgWstringFunction ----

Wstring (Function)   ¿í×Ö·û´®
  
ÓÃÌØ¶¨¿í¶ÈµÄÄ³¸ö¿í×Ö·ûµÄÒ»¶¨³¤¶ÈÌî³ä aWString

Óï·¨
Declare Function WString ( ByVal count As Integer, ByVal ch_code As Long ) As WString
Declare Function WString ( ByVal count As Integer, ByRef ch As Const WString ) As WString

ÓÃ·¨
result = WString( count, ch_code )
or
result = WString( count, ch )

²ÎÊı
count
Ö¸¶¨Òª´´½¨µÄ×Ö·û´®µÄ³¤¶È¡£Integer
ch_code
Ö¸¶¨ÒªÓÃÓÚÌî³ä×Ö·û´®µÄ Unicode ×Ö·û¡£Long
ch
µÚÒ»¸ö×Ö·û½«ÓÃÓÚÌî³ä×Ö·û´®µÄ A¡£WString

·µ»ØÖµ
´´½¨µÄ .Èç¹ûÊÇ¿Õ×Ö·û´®»ò £¬ Ôò½«·µ»Ø¿Õ×Ö·û´®¡£WStrin


-------------------------------------------------------- KeyPgXorGfx ----

Xor   Òì»ò
  
Í¼ĞÎÓï¾äµÄ²ÎÊı£¬¸ÃÓï¾äÊ¹ÓÃ°´Î»×÷Îª blitting ·½·¨PutXor

Óï·¨
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Xor

²ÎÊı
Xor
±ØÌî¡£

ÃèÊö
¸Ã·½·¨Ê¹ÓÃ°´Î»º¯Êı½«Ã¿¸öÔ´ÏñËØÓëÏàÓ¦µÄÄ¿±êÏñËØ×éºÏÔÚÒ»Æğ¡£ÕâÑù×öµÄ½á¹ûÊÇÊä³öÎªÄ¿±êÏñËØ¡£
´Ë·½·¨ÊÊÓÃÓÚËùÓĞÍ¼ĞÎÄ£Ê½¡£Ã»ÓĞÃÉ°æÑÕÉ«£¬¾¡¹ÜÑÕÉ«Öµ£¨ÔÚÈ«²ÊÉ«Ä£Ê½ÏÂ£©²»»á²úÉ


-------------------------------------------------------- KeyPgYear ----

Year   ÈÕÆÚÈ¡Äê·İ
  
´ÓÈÕÆÚĞòÁĞÖĞ»ñÈ¡Äê·İ

Óï·¨
Declare Function Year ( ByVal date_serial As Double ) As Long

ÓÃ·¨
#include "vbcompat.bi"
result = Year( date_serial )

²ÎÊı
date_serial
ÈÕÆÚ

·µ»ØÖµ
´Ó°üº¬ÈÕÆÚĞòÁĞ¸ñÊ½µÄÈÕÆÚµÄ±äÁ¿ÖĞ·µ»ØÄê·İ¡


-------------------------------------------------------- KeyPgZstring ----

ZString   Z×Ö·û´®
  
±ê×¼Êı¾İÀàĞÍ£º8 Î»×Ö·û´®

Óï·¨
Dim variable As ZString * size
Dim variable As ZString Ptr

ÃèÊö
A ÊÇ C ÑùÊ½µÄ¹Ì¶¨´óĞ¡µÄ×Ö·ûÊı×é¡£ËüÃ»ÓĞÃèÊö·û£¬Òò´Ë¿ÉÒÔ¸ü¿ìµØ¼ÆËãÆä³¤¶È£¬ÒÔ½«Æä×÷Îª²ÎÊı´«µİ¸øº¯Êı¡£µ±±äÁ¿¾ßÓĞ¹Ì¶¨µÄ£¨ÊıÖµ³£Á¿»ò¿ÉÔÚ±àÒëÊ±¼ÆËãµÄ±í´ïÊ½£©Ê±£¬FreeBASIC Í¨¹ı½«ÄÚÈİ½Ø


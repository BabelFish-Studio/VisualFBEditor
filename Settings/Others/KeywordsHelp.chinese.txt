
-------------------------------------------------------- KeyPgAbs ----
Abs   绝对值
 计算数字的绝对值

语法
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

用法
result = Abs( number )

参数
number
查找绝对值的值。

返回值
的绝对值number。

描述
数字的绝对值是其正数值。如果数字为负数，则其值将取反，并返回


-------------------------------------------------------- KeyPgAbstract ----
Abstract   抽象方法
 声明抽象方法

语法
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

描述
Abstract是的一种特殊形式Virtual。区别在于抽象方法没有主体，而只有声明。从本质上讲


-------------------------------------------------------- KeyPgAccess ----
Access   访问权
 Open声明 子句以指定请求的特权

语法
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

用法
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

参数
Read
仅具有读取权限打开文件。
Write
仅具有写权限打开文件。
Read Write
使用读写权限打开文件。

描述
Access与该O


-------------------------------------------------------- KeyPgAcos ----
Acos   反余弦
 查找角度的反余弦

语法
Declare Function Acos ( ByVal number As Double ) As Double

用法
result = Acos( number )

参数
number
余弦值，范围为[-1..1]。

返回值
的number反余弦，以弧度表示，范围为[0..Pi]。

描述
Acos返回参数的反余弦number为Double0?


-------------------------------------------------------- KeyPgAddGfx ----
Add   添加
 Put图形语句的 参数，该参数选择加法作为标点方法

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

参数
Add
需要。
multiplier
在0到255之间的可选值。源像素在添加之前预先乘以。如果省略，则此值默认为255。(multiplier / 256)

描述
Add选择加法作为加倍图像缓冲区


-------------------------------------------------------- KeyPgAlias ----
Alias (Name)   别名
 提供备用内部名称 的Suband Function语句子句。

语法
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

用法
declare sub usablename Alias "alternatename" ( ... )
要么
declare function usablename Alias "alternatename" ( ... )
要么
sub usablename Alias "alternatename" ( ... )
...
end sub
要么
function usablename Alias "alternatename" ( ... )
...
end function
要么
type typename Alias "alternatename" ( ... )
...
end type

描述
Alias为过程指定一个别名。该替代名称不能在程序内使用以调用过程，但


-------------------------------------------------------- KeyPgAliasModifier ----
Alias (Modifier)   别名
 修改公共符号的数据类型名称修饰（修饰）

语法
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

用法
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

参数
datatype
标准数据类型或用户定义的数据类型进行修改
modifier
如以下“说明”部分中所述的受支持的修饰符之一
描述
Alias "modifier"在数据类


-------------------------------------------------------- KeyPgAllocate ----
Allocate   分配内存
 从免费存储区中分配一块内存

语法
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

用法
result = Allocate( count )

参数
count
要分配的内存块的大小（以字节为单位）。

返回值
如果成功，则返回分配的内存的起始地址。否则，如果无法分配所请求的块大小，或者如果count < 0，则0返回空指针（）。

描述


-------------------------------------------------------- KeyPgAlphaGfx ----
Alpha   a通道
 Put图形语句的 参数，该参数选择alpha混合作为方法

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

参数
Alpha
需要。
alphaval
[0..255]范围内的可选alpha参数。覆盖单个像素中的alpha值。

描述
Alpha选择Alpha混合作为调整Put图像的方法。如果a


-------------------------------------------------------- KeyPgAndGfx ----
And   和
 Put图形语句的 参数，使用按位And作为blitting方法

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

参数
And
需要。

描述
该And方法使用逐位And函数将每个源像素与相应的目标像素合并。其结果作为?


-------------------------------------------------------- KeyPgAny ----
Any   任意
 所述Any关键字被用作用于以不同的方式的类型或值的占位符。

语法
Dim identifier As Any Pointer|Ptr
或或或或或或或
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )
Dim identifier(Any [, Any...]) As DataType
[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType )
Dim identifier As DataType = Any
New DataType ( Any )
New(Address) DataType [count] { Any }
InStr|InStrRev ( string, Any substring )

描述

指标：
称为（或“ ”）的特殊指针类型允许指向任何变量?


-------------------------------------------------------- KeyPgAppend ----
Append   追加
 指定要为追加模式打开的文本文件

语法
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要追加的文件名
encoding_type
指示文件的编码类型
lock_type
文件打开时使用的锁定
filenum
与打开的文件关联的未使用的文件号

描述
用于Open打开文本文件进行写入的


-------------------------------------------------------- KeyPgAs ----
As   为
 指定数据类型的声明的一部分，或指定文件句柄的Open语句的一部分。

语法
symbolname As datatype
Open ... As #filenumber
Type ... As datatype

描述
As用于声明变量，字段或参数的类型，还用于Ope


-------------------------------------------------------- KeyPgAsc ----
Asc   字符取码值
 返回字符的相应ASCII或Unicode整数表示形式

语法
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

用法
result = Asc( str [, position ] )

参数
str
源字符串。
position
字符在字符串中的位置。

返回值
存储在position中的原始字符值str。
如果两个str并position可以在编译时进行评估（如Asc("a")或Asc(chr(97))或Asc("abc", 2)......），该值则返回一个UInteger结果，否则在一个ULong结果。

描述



-------------------------------------------------------- KeyPgAsin ----
Asin   反正弦
 查找数字的反正弦

语法
Declare Function Asin ( ByVal number As Double ) As Double

用法
result = Asin( number )

参数
number
正弦值在[-1..1]范围内。

返回值
的反正弦number，以弧度为单位，在[-Pi / 2..Pi / 2]范围内。

描述
Asin返回自变量的反正弦number作为Dou


-------------------------------------------------------- KeyPgAsm ----
Asm   汇编
 允许使用特定于体系结构的指令的代码块。

语法
Asm
architecture-dependent instructions
End Asm

要么

Asm architecture-dependent instructions

描述
该Asm块用于在程序中插入特定的机器代码指令，以执行使用该语言的功能无?


-------------------------------------------------------- KeyPgAssert ----
Assert   中断执行
 如果表达式的计算结果为0（false），则调试宏将停止程序执行。

语法
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
Assert( expression )

参数
expression
任何有效的条件/数值表达式。如果expression评估为0（即“ false”），则执行停止。

描述
的Assert宏旨在用于在调试和?


-------------------------------------------------------- KeyPgAssertwarn ----
AssertWarn   调试警告
 如果表达式的计算结果为0，则调试宏将输出警告。

语法
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
AssertWarn( expression )

参数
expression
任何有效的表达式。如果结果expression为0，则将警告消息打印到stderr（控制台）。

描述
该AssertWarn宏旨在用于调试，并?


-------------------------------------------------------- KeyPgAtan2 ----
Atan2   反正切2
 返回比率的反正切

语法
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

用法
result = ATan2( y, x )

参数
y
垂直分量的比例。
x
比例的水平分量。

返回值
切线以弧度为单位在[-Pi..Pi]范围内的角度。y/x

描述
ATa


-------------------------------------------------------- KeyPgAtn ----
Atn   反正切
 返回数字的反正切

语法
Declare Function Atn ( ByVal number As Double ) As Double

用法
result = Atn( number )

参数
number
一个号码。

返回值
number在[-Pi / 2..Pi / 2]范围内 的切线为度的弧度角。

描述
Atn返回自变量的反正切number的Double范


-------------------------------------------------------- KeyPgBase ----
Base (Member Access)   基类
 提供显式访问基本类型成员的非静态方法 Type

语法
Base.member
Base [ .Base ... ] .member

描述
Base在使用定义自另一种类型的用户定义类型的非静态方法的上下文中，提供了?


-------------------------------------------------------- KeyPgBaseInit ----
Base (Initializer)   基类
 为派生的Udt构造函数中的基本UDT指定一个初始化程序

语法
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

描述
该Base初始化可以在衍生的UDT的构造的顶部使用。它允许指定用于初始化基?


-------------------------------------------------------- KeyPgBeep ----
Beep   响铃
 发出蜂鸣声。

语法
Declare Sub Beep ( )

用法
Beep

描述
Beep告诉系统发出哔声。请注意，这可能不适用于某些平台。由于此命令不可靠，并且无法?


-------------------------------------------------------- KeyPgBin ----
Bin   二进制
 返回整数的二进制（以2为底）字符串表示形式

语法
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String
Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Bin[$]( number [, digits ] )

参数
number
数字或计算为数字的表达式。浮点数将转换为LongInt。
digits
返回的字符串中所需的位数。

返回值
包含的无符号二进制表示形式的字符串number。

描述
返回表示?


-------------------------------------------------------- KeyPgBinary ----
Binary   二进制流
 指定要以二进制模式打开的文件或设备

语法
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开的文件名
access_type
指示文件是可以读取，写入还是同时读取和写入
lock_type
文件打开时使用的锁定
filenum
与打开的文件关联的未使用的文件号

描述
打开文件或设备


-------------------------------------------------------- KeyPgBit ----
Bit   位
 获取整数值中单个位的状态。

语法
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

用法
result = Bit( value, bit_number )

参数
value
整数值。
bit_number
位的索引。

返回值
返回Integer的值，-1如果该位被设置，或者0如果该位被清除。

描述
该宏扩展为一个整数值，指示是否bit_numb


-------------------------------------------------------- KeyPgBitreset ----
BitReset   位重置
 获取清除指定位的整数值。

语法
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitReset( value, bit_number )

参数
value
整数值。
bit_number
要清除的位的索引。

返回值
返回清除指定位的整数值。

描述
此宏扩展为整数的副本，其中value指定的整数已b


-------------------------------------------------------- KeyPgBitset ----
BitSet   位整数值
 获取设置了指定位的整数的值。

语法
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitSet( value, bit_number )

参数
value
整数值。
bit_number
要设置的位的索引。

返回值
返回设置了指定位的整数值。

描述
此宏扩展为value具有指定bit_number集合（t


-------------------------------------------------------- KeyPgBload ----
BLoad   位图加载
 从使用BSave或兼容的BMP映像文件创建的文件中加载任意数据。

语法
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

用法
result = BLoad( filename [, [ dest ] [, pal ] ] )

参数
filename
从中加载图像的文件的名称；可以包含文件路径
dest
要加载图像的内存位置，或者为null（0）将图像复制到当前图形屏幕工作页
pal
要将调色板加载到的内存位置0，如果使用一个，则为null（）更改当前图形屏幕调色板

返回值
0如果成功，则 返?


-------------------------------------------------------- KeyPgBoolean ----
Boolean   逻辑型
 标准数据类型

语法
Dim variable As Boolean

描述
布尔数据类型。可以保留值True或False
初始化时的默认值是False
关于布尔数据类型的定


-------------------------------------------------------- KeyPgBsave ----
BSave   位图保存
 将任意数据和调色板信息数组保存到磁盘上的文件

语法
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

用法
result = BSave( filename, source [,[ size ][,[ pal ][, bitsperpixel ]]] )

参数
filename
要创建的用于存储像素和调色板数据的文??件的名称。
source
要存储的数据的地址，或者为null（0）以存储当前屏幕工作页面中的像素数据。
size
可选，要存储的数据的字节总数。除非输出是BMP文件，否则需要此值。
pal
可选，保存256 Palette种颜色的缓冲区的地址，或0当前屏幕调色板的null（）。
bitsperpixel
可选，输出BMP图像的请?


-------------------------------------------------------- KeyPgByref ----
Byref (Parameters)   传址
 声明说明符，通过引用显式传递参数

语法
ByRef param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype )

描述
通过引用将变量（即其地址）传递给子例程或函数。通过引用传递变量时，可以?


-------------------------------------------------------- KeyPgByrefFunction ----
Byref (Function Results)   传址
 指定通过引用返回函数结果

语法
Function name ( parameter-list ) ByRef As datatype

描述
使函数结果按引用而不是按值返回。函数返回ByRef将返回变量的地址，而不是像按值返


-------------------------------------------------------- KeyPgByrefVariables ----
Byref (Variables)   传址
 声明参考

语法

(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
要么
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
要么
Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

参数
name
参考名称
variable
引用的变量名

描述
声明对变量的引用（按名称）。
引用是一种实体，它是访问内存中数据的一?


-------------------------------------------------------- KeyPgByte ----
Byte   字节
 标准数据类型：8位带符号

语法
Dim variable As Byte

描述
8位带符号整数数


-------------------------------------------------------- KeyPgByval ----
ByVal   传值
 声明说明符，以按值显式传递参数

语法
ByVal param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype )

描述
ByVal在声明语句的参数列表中，变量的副本将按其值传递给过程（例如，子或函?


-------------------------------------------------------- KeyPgCall ----
Call   调用
 调用子程序的语句

语法
Call procname ([parameter list])

描述
呼叫Sub或Function。
此关键字是从BASIC的早期方言保留下来的，现在不建议使用。
在-


-------------------------------------------------------- KeyPgCallocate ----
CAllocate   内存分配初始化
 从免费存储区中为一定数量的元素分配内存并清除内容

语法
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

用法
result = CAllocate( num_elements [, size ] )

参数
num_elements
要为其分配内存的元素数。
size
每个元素的大小（以字节为单位）。

返回值
如果成功，则返回分配的内存的起始地址。否则，0返回空指针（）。

?


-------------------------------------------------------- KeyPgCase ----
Case   条
描述
没


-------------------------------------------------------- KeyPgCast ----
Cast   转换
 将表达式转换为指定的数据类型

语法
Cast( datatype, expression )

参数
datatype 
内置数据类型（标准类型）
expression 
另一个内置数据类型的变量

描述
转换expression为另一个datatype。在datatype未知的?


-------------------------------------------------------- KeyPgCbool ----
CBool   
 将数字或字符串表达式转换为布尔值（Boolean）

语法
Declare Function CBool ( ByVal expression As datatype ) As Boolean
Type typename
Declare Operator Cast ( ) As Boolean
End Type

用法
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

参数
expression
数字，字符串或用户定义的类型以强制转换为Boolean值
datatype
任何数字，字符串或用户定义的类型
typename
用户定义的类型

返回值
一个Boolean值。

描述
该CBool函数将零值?


-------------------------------------------------------- KeyPgCbyte ----
CByte   转字节
 将数字或字符串表达式转换为Byte。

语法
Declare Function CByte ( ByVal expression As datatype ) As Byte
Type typename
Declare Operator Cast ( ) As Byte
End Type

用法
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为Byte值。
datatype
任何数字，字符串或指针数据类型。
typename
用户定义的类型。

返回值
一个Byte值。

描述
该CByte函数将小数部


-------------------------------------------------------- KeyPgCdbl ----
CDbl   转双精型
 将数字或字符串表达式转换为Double精度浮点

语法
Declare Function CDbl ( ByVal expression As datatype ) As Double
Type typename
Declare Operator Cast ( ) As Double
End Type

用法
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为Double值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个Double精确值。

描述
该CDbl函数返回一


-------------------------------------------------------- KeyPgCdecl ----
cdecl   cdecl
 在过程声明中 指定cdecl样式的调用约定

语法
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，cdecl指定过程将使用cdecl调用约定。在cdecl调用约定中，所有参数?


-------------------------------------------------------- KeyPgChain ----
Chain   链接
 暂时将控制权转移到外部程序

语法
Declare Function Chain ( ByRef program As Const String ) As Long

用法
result = Chain( program )

参数
program
要将控制转移到的程序（可执行文件）的文件名（包括文件路径）。

返回值

如果成功执行，则返回?


-------------------------------------------------------- KeyPgChdir ----
ChDir   改路径
 更改当前驱动器和目录

语法
Declare Function ChDir ( ByRef path As Const String ) As Long

用法
result = ChDir( path )

参数
path
一个String参数，指定要更改的路径。

返回值
成功返回零（0），


-------------------------------------------------------- KeyPgChr ----
Chr   数转字符
 从一个或多个ASCII整数值返回字符串

语法
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

用法
result = Chr[$]( ch0 [, ch1 ... chN ] )

参数
ch
该ASCII字符的整数值。

返回值
返回包含字符的字符串。

描述
Chr返回一个字符串，其中包含由传递给它的ASCII值?


-------------------------------------------------------- KeyPgCint ----
CInt   转整型
 将数字或字符串表达式转换为Integer或Integer<bits>

语法
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>
Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

用法
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

参数
bits
一个数字常数表达式，用于指示所需整数位的大小。所允许的值8，16，32或64。
expression
数字，字符串或指针表达式以强制转换为Integer值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个Integer或含有转换后的值。Intege


-------------------------------------------------------- KeyPgCircle ----
Circle   画圆
 绘制椭圆或圆形的图形语句

语法
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

参数
target
可选的; 指定要绘制的图像缓冲区
STEP
表示坐标是相对的
(x, y)
椭圆中心的坐标
radius
圆的半径-或对于椭圆，是半长轴（即最长的半径）
color
颜色属性
start
起始角度
end
终止角
aspect
椭圆的长宽比，高宽比
F
填充模式指示器

描


-------------------------------------------------------- KeyPgClass ----
Class   类对象
 声明一个类对象

语法
Class typename ...

参数
typename
的名字 Class

描述
我们会在这里（诚实地）添加一些有用的东西，只是该功能尚未在编译器中?


-------------------------------------------------------- KeyPgClear ----
Clear   清除
 清除或初始化一些内存

语法
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

用法
Clear( dst, [value], bytes )

参数
dst
一些内存的起始地址
value
设置所有字节等于的值
bytes
要清除的字节数

描述
Clear将内存中的一个或多个字节设置为某个值（0如果?


-------------------------------------------------------- KeyPgClng ----
CLng   转长型
 将数字或字符串表达式转换为 Long

语法
Declare Function CLng ( ByVal expression As datatype ) As Long
Type typename
Declare Operator Cast ( ) As Long
End Type

用法
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为Long值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个Long值。

描述
该CLng函数将小数部分四?


-------------------------------------------------------- KeyPgClngint ----
CLngInt   转长整型
 将数字或字符串表达式转换为64位整数（LongInt）

语法
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt
Type typename
Declare Operator Cast ( ) As LongInt
End Type

用法
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为LongInt值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个LongInt值。

描述
该CLngInt函数将小


-------------------------------------------------------- KeyPgClose ----
Close   关闭
 流I / O功能可终止对设备的访问

语法
Close [[#]filenum ] [, [#]filenum ...]
or 
result = Close( [#filenum] )

参数
filenum
要关闭的文件编号列表。

返回值
Close返回32位Long：0成功则返回零（），否则返回非零错误代码。

描述
关闭文件号作为参数传递的文件。如果传?


-------------------------------------------------------- KeyPgCls ----
Cls   清屏
 在文本模式和图形模式下清除屏幕

语法
Declare Sub Cls ( ByVal mode As Long = 1 )

用法
Cls mode

参数
mode
可选数字变量，其值从0至2。如果省略，则默认为1。

描述
mode可以给出 一个可选参数，

如果省略，则Cls清


-------------------------------------------------------- KeyPgColor ----
Color   颜色
 设置与文本的控制台输出和图形输出一起使用的显示前景色/背景色

语法
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

用法
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

参数
foreground
要设置的前景色
background
设置的背景色

返回值
返回一个32位值，该值包含中的当前前景色Low Word和中的当前背景色High Word。
在高/真彩色模式下，仅返回前景色，占用整个32位。而是，请参阅ScreenControl以返回当前的图形模式颜色（前景和背景


-------------------------------------------------------- KeyPgCommand ----
Command   命令行
 返回用于调用程序的命令行参数

语法
Declare Function Command ( ByVal index As Long = -1 ) As String

用法
result = Command[$]( [ index ] )

参数
index
特定命令行参数的从零开始的索引。

返回值
返回命令行参数。

描述
Command执行时返回传递给程序的命令行参数。



-------------------------------------------------------- KeyPgCommon ----
Common   全局变量
 变量声明和作用域修饰符

语法
Common [Shared] symbolname[()] [AS DataType] [, ...]

描述
声明一个在代码模块之间共享的变量，包括那些编译成静态库的代码模块，而不是编译


-------------------------------------------------------- KeyPgCondBroadcast ----
CondBroadcast   条件变量广播
 重新启动CondWait该句柄的所有线程

语法
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

用法
CondBroadcast ( handle )

参数
handle
条件变量的句柄。

描述
一旦有条件CondCreate的线程启动，就可以将其中一个或多个线程（?


-------------------------------------------------------- KeyPgCondCreate ----
CondCreate   条件变量创建
 创建一个条件变量以用于同步线程

语法
Declare Function CondCreate ( ) As Any Ptr

用法
result = CondCreate

返回值
新创建的条件变量的句柄，或者失败时为空指针（0）。

描述
一旦条件是Condcreate d并且启动了线程，就?


-------------------------------------------------------- KeyPgCondDestroy ----
CondDestroy   条件变量销毁
 销毁不再需要的多线程条件变量

语法
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

用法
CondDestroy ( handle )

参数
handle
要破坏的条件变量的句柄。

描述
一旦条件CondCreated并启动了线程，就可以将其中一个或多个


-------------------------------------------------------- KeyPgCondSignal ----
CondSignal   条件变量信号
 重新启动被调用暂停的线程 CondWait

语法
Declare Sub CondSignal ( ByVal handle As Any Ptr )

用法
CondSignal ( handle )

参数
handle
条件变量的句柄。

描述
一旦使用条件创建了条件CondCreate并启动了线程，就可以将其中一?


-------------------------------------------------------- KeyPgCondWait ----
CondWait   条件变量等待
 停止执行当前线程，直到满足某些条件为止

语法
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

用法
CondWait ( handle, mutex )

参数
handle
条件变量的句柄。
mutex
与该条件变量关联的互斥锁，在测试条件并调用时必须将其锁定CondWait。

描述
该函数可在调用其他线程Con


-------------------------------------------------------- KeyPgConst ----
Const   常量
 不可修改的变量声明。

语法
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

描述
声明不可修改的常量数据，该数据可以是整数或十进制（浮点数）数字或字符串。如果Dat


-------------------------------------------------------- KeyPgConstMember ----
Const (Member)   常量
 指定成员过程是只读的。

语法
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type
Const Sub|Function|... typename ...
...
End Sub|Function|...

描述
指定方法不更改调用它的对象。hidden This参数将被视为只读参数。该声明可以理解为?


-------------------------------------------------------- KeyPgConstQualifier ----
Const (Qualifier)   常量
 指定数据类型或指针数据类型为只读。

语法
... As [Const] datatype [ [Const] Ptr ... ]

参数
datatype
标准或用户定义的数据类型的名称。

描述
指定将限定符右边的datatype或视为只读。只读（）声明是类


-------------------------------------------------------- KeyPgConstructor ----
Constructor   构造函数
 创建类或用户定义的类型时自动调用

语法
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type
Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

参数
typename 
Type或的名称Class

描述
Constructor创建用户定义Type或Class变量时调用方法。
typename是为?


-------------------------------------------------------- KeyPgContinue ----
Continue   继续本次
 控制流语句以继续循环的下一个迭代

语法
Continue {Do | For | While}

描述
跳过所有代码，直到一个环结构的端部子句，即Do...Loop，For...Next或While.


-------------------------------------------------------- KeyPgCos ----
Cos   余弦
 返回角度的余弦

语法
Declare Function Cos ( ByVal angle As Double ) As Double

用法
result = Cos( angle )

参数
angle
角度（弧度）

返回值
返回参数的余弦angle的Double范围内-1.0来1.0。

描述
参数number以弧度（不是度）为单位。
对于angle绝?


-------------------------------------------------------- KeyPgCptr ----
CPtr   转为PTR
 将指针表达式转换为指定的数据类型指针

语法
CPtr( PointerDataType, expression )

描述
转换expression为PointerDataType。
PointerDataType必须是Pointer类型（例


-------------------------------------------------------- KeyPgCshort ----
CShort   转短整型
 将数字或字符串表达式转换为整数（Short）

语法
Declare Function CShort ( ByVal expression As datatype ) As Short
Type typename
Declare Operator Cast ( ) As Short
End Type

用法
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为Short值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个Short值。

描述
该CShort函数将小数


-------------------------------------------------------- KeyPgCsign ----
CSign   转符号
 将表达式转换为带符号

语法
CSign ( expression )

用法
variable = CSign ( expression )

描述
将无符号的转换为有符号的expression，可用于强制除


-------------------------------------------------------- KeyPgCsng ----
CSng   转单精型
 将数字或字符串表达式转换为Single精度浮点

语法
Declare Function CSng ( ByVal expression As datatype ) As Single
Type typename
Declare Operator Cast ( ) As Single
End Type

用法
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为Single值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个Single精确值。

描述
该CSng函数返回一


-------------------------------------------------------- KeyPgCsrlin ----
CsrLin   光标行
 返回光标的行位置

语法
Declare Function CsrLin ( ) As Integer

用法
result = CsrLin

返回值
一个Integer指定光标的当前行。

描述
返回当前行光标位


-------------------------------------------------------- KeyPgCubyte ----
CUByte   转U字节型
 将数字或字符串表达式转换为无符号字节（UByte）

语法
Declare Function CUByte ( ByVal expression As datatype ) As UByte
Type typename
Declare Operator Cast ( ) As UByte
End Type

用法
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为UByte值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个UByte值。

描述
该CUByte函数将?


-------------------------------------------------------- KeyPgCuint ----
CUInt   转U整型
 将数字或字符串表达式转换为UInteger或UInteger<bits>

语法
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>
Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

用法
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

参数
bits
一个数字常量表达式，以位数表示所需的无符号整数的大小。所允许的值8，16，32或64。
expression
数字，字符串或指针表达式以强制转换为UInteger或值UInteger<bits>
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
甲UInteger或者含有转换后的值。UI


-------------------------------------------------------- KeyPgCulng ----
CULng   转U长型
 将数字或字符串表达式转换为 ULong

语法
Declare Function CULng ( ByVal expression As datatype ) As ULong
Type typename
Declare Operator Cast ( ) As ULong
End Type

用法
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为ULong值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个ULong值。

描述
该CULng函数将小数部分四


-------------------------------------------------------- KeyPgCulngint ----
CULngInt   转U长整型
 将数字或字符串表达式转换为64位无符号整数（ULongInt）

语法
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt
Type typename
Declare Operator Cast ( ) As ULongInt
End Type

用法
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为ULongInt值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个ULongInt值。

描述
该CULngInt函数


-------------------------------------------------------- KeyPgCunsg ----
CUnsg   转无
描述
没


-------------------------------------------------------- KeyPgCurdir ----
CurDir   目录取当前
 返回当前目录/文件夹

语法
Declare Function CurDir ( ) As String

用法
result = CurDir

返回值
一个String被设置为当前目录/文件夹的名称。

描述
返回当前目?


-------------------------------------------------------- KeyPgCushort ----
CUShort   转U短整型
 将数字或字符串表达式转换为无符号整数（UShort）

语法
Declare Function CUShort ( ByVal expression As datatype ) As UShort
Type typename
Declare Operator Cast ( ) As UShort
End Type

用法
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

参数
expression
数字，字符串或指针表达式以强制转换为UShort值
datatype
任何数字，字符串或指针数据类型
typename
用户定义的类型

返回值
一个UShort值。

描述
该CUShort函数将


-------------------------------------------------------- KeyPgCustomgfx ----
Custom   自定义
 Put选择自定义方法 的图形语句的参数

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

参数
Custom
需要。
custom_function_ptr
定制用户定义函数的名称。
parameter
可选Pointer，传递给自定义函数；如果省略，则默认值为零（0）。

描述
Custom选择一个自定义的用户定义


-------------------------------------------------------- KeyPgCvaArg ----
Cva_Arg   
 从可变参数列表对象获取下一个参数的宏。

语法
variable = Cva_Arg ( argument_list, datatype )

参数
argument_list
Cva_List 数据类型变量以访问下一个值
datatype
变量参数列表中下一个值的数据类型argument_list

描述
的Cva_Arg宏允许使用的函数内的参数可变数目


-------------------------------------------------------- KeyPgCvaCopy ----
Cva_Copy   
 从已初始化的可变参数列表对象变量初始化可变参数列表对象变量的宏

语法
Cva_Copy( dst_list, src_list )

参数
dst_list
Cva_List要初始化的目标变量
src_list
Cva_List要复制的源变量

描述
将一个Cva_List类型变量复制到另一个Cva_List


-------------------------------------------------------- KeyPgCvaEnd ----
Cva_End   
 宏来清理可变参数列表对象变量

语法
Cva_End( argument_list )

参数
argument_list
Cva_List 变量进行清理

描述
清除Cva_List先前使用Cva_Start或初始化的类型变量Cva_Copy，例如析构函数


-------------------------------------------------------- KeyPgCvaList ----
Cva_List   
 可变参数列表对象类型

语法
Dim variable As Cva_List

描述
Cva_List是内置数据类型，用于在可变参数过程中使用可变长度参数列表。
使用Cva_Start


-------------------------------------------------------- KeyPgCvaStart ----
Cva_Start   
 宏来初始化可变参数列表对象变量

语法
Cva_Start( argument_list, last_param )

参数
argument_list
Cva_List 数据类型变量进行初始化
last_param
过程参数列表中省略号之前的最后一个参数 ...

描述
在可变过程定义中，argument_list是具有Cva_Lis


-------------------------------------------------------- KeyPgCvd ----
CVD   转整双精型
 将64位整数或8字节字符串转换为双精度值

语法
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

用法
result = CVD( l )
result = CVD( str )

参数
l
64位LongInt，其中存储了双精度变量的二进制副本。
str
甲String至少8个字节长度和存储在它一个双精度可变的二进制副本。

返回值

返回一个Double保存输入值二进制副本的值。

描述



-------------------------------------------------------- KeyPgCvi ----
CVI   转整单精型
 使用二进制副本将浮点数或字符串转换为整数变量

语法
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer
Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

用法
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

参数
f
一个浮点数，其中存储有整数变量的二进制副本。其精度（Single或Double）取决于Integer当前平台的大小
str
阿String与存储在它的一个整数变量的二进制副本。
bits
指定要返回的整数类型的大小。expr接受的类型和大小取决于所调用的相应函数。
expr
将被复制到的表达式。Integer<bits>

返回值
一?


-------------------------------------------------------- KeyPgCvl ----
CVL   转整单精整型
 将单精度浮点数或四字节字符串转换为整数（Long）变量

语法
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

用法
result = CVL( sng )
result = CVL( str )

参数
sng
一个Single浮点数，其中存储有整数变量的二进制副本。
str
甲String至少四个字节长度和存储在它的一个整数变量的二进制副本。

返回值

Long用于将整数的二进制副本复制到的变?


-------------------------------------------------------- KeyPgCvlongint ----
CVLongInt   转双精长整型
 将双精度浮点数或八字节字符串转换为LongInt变量

语法
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

用法
result = CVLongInt( dbl )
result = CVLongInt( str )

参数
dbl
一个Double浮点数，其中LongInt存储了变量的二进制副本。
str
甲String至少八个字节的长度用的二进制副本LongInt存储在其可变。

返回值

甲LongInt变量保持输入可变的二进制副本。

描述



-------------------------------------------------------- KeyPgCvs ----
CVS   转单精整型
 将32位整数或4字节字符串转换为单精度变量

语法
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

用法
result = CVS( i )
result = CVS( str )

参数
i
一个32位Integer，其中存储了单精度变量的二进制副本。
str
甲String至少4个字节的长度与存储在其中的单精度可变的二进制副本。

返回值

返回一个Single保存输入值二进制副本的值。

?


-------------------------------------------------------- KeyPgCvshort ----
CVShort   转字短整型
 将两个字节的字符串转换为Short整数变量

语法
Declare Function CVShort ( ByRef str As Const String ) As Short

用法
result = CVShort( str )

参数
str
甲String至少两个字节的长度用的二进制副本Short存储在其整数变量。

返回值
Short包含Keypgshort。的二进制副本的变量。

描述
Short使用String长度至少?


-------------------------------------------------------- KeyPgData ----
Data   数据
 用于在编译时存储数据的语句。

语法
Data constant_expression1 [,constant_expression2]...

描述
Data存储一系列常量数字或字母表达式，这些表达式在编译时进行评估（使用-lang q


-------------------------------------------------------- KeyPgDate ----
Date   日期
 以字符串形式返回当前系统日期

语法
Declare Function Date ( ) As String

用法
result = Date

返回值
以格式返回当前系统日期 mm-dd-yyyy

描述
没有

例

Print Da


-------------------------------------------------------- KeyPgDateAdd ----
DateAdd   日期相加
 以指定的时间间隔偏移日期

语法
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

用法
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

参数
interval
指示哪个时间段对应于一个单位的字符串 number
number
要添加到基准日期的时间间隔数。该数字将四舍五入到最接近的整数。
date_serial
基本日期

返回值
返回日期序列对应于接收date_serial加上number的intervals。

描述



-------------------------------------------------------- KeyPgDateDiff ----
DateDiff   日期差值
 获取按指定间隔测量的两个日期的差

语法
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

参数
interval
测量差异的时间单位（间隔）
date_serial1
开始日期序列
date_serial2
结束日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，该整数对应于interval两个Date Serials之间找到的s 的数量。
如果date_serial1> date_serial2，则结果为负。




-------------------------------------------------------- KeyPgDatePart ----
DatePart   日期部分
 从日期获取间隔

语法
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

参数
interval
字符串，指示日期的哪一部分是必需的
date_serial
要解码的日期序列 
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个表示Date Serialinterval中的的整数。

描述

interval 指示需要日期?


-------------------------------------------------------- KeyPgDateSerial ----
DateSerial   日期序列
 创建日期序列

语法
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

用法
#include "vbcompat.bi"
result = DateSerial( year, month, day )

参数
year
那一年
month
一年中的月份
day
一个月中的某天

返回值
返回一个日期序列含有由在该值形成的日期year，month以及day返回参量。日


-------------------------------------------------------- KeyPgDateValue ----
DateValue   日期数值
 从字符串 返回日期序列

语法
Declare Function DateValue ( ByRef date_string As String ) As Double

用法
#include "vbcompat.bi"
result = DateValue( date_string )

参数
date_string
转换为日期序列的字符串

返回值
从日期字符串 返回日期序列。

描述
日期字符串必须采用操作系统区域设置中设置的格式


-------------------------------------------------------- KeyPgDay ----
Day   日期取天
 从日期序列中获取每月的日期

语法
Declare Function Day ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Day( date_serial )

参数
date_serial
日期

返回值
从包含日期序列 格式的日期的变量返回月份中的?


-------------------------------------------------------- KeyPgDddate ----
__DATE__   _编译__日期__
 编译器设置的固有定义（宏值）

语法
__DATE__

描述
在使用时，将编译?


-------------------------------------------------------- KeyPgDddateiso ----
__DATE_ISO__   _编译_日期_ISO
 编译器设置的固有定义（宏值）

语法
__DATE_ISO__

描述
在使用时，将编译器日期替换为文字字符串（"


-------------------------------------------------------- KeyPgDdfb64bit ----
__FB_64BIT__   _编译_64位
 编译器的固有定义集

语法
__FB_64BIT__

描述
如果编译目标是


-------------------------------------------------------- KeyPgDdfbargc ----
__FB_ARGC__   _编译传名称
 编译器设置的固有定义（宏值）

语法
__FB_ARGC__

描述
用在命令行中传递的参数数量代替。
__FB_ARGC__是传?


-------------------------------------------------------- KeyPgDdfbargv ----
__FB_ARGV__   _编译传入值
 编译器设置的固有定义（宏值）

语法
__FB_ARGV__

描述
用指向指向在命令行中传递的零终止命令行参数的指针列表的指针代替。



-------------------------------------------------------- KeyPgDdfbarm ----
__FB_ARM__   _编译_ARM_
 编译器的固有定义集

语法
__FB_ARM__

描述
如果编译目标使用ARM CPU体


-------------------------------------------------------- KeyPgDdfbasm ----
__FB_ASM _    _编译_汇编
	编译器的固有定义集
描述
没


-------------------------------------------------------- KeyPgDdFBBackend ----
__FB_BACKEND__   _编译_后端
 编译器的固有定义集

语法
__FB_BACKEND__

描述
定义为"gas"or "gcc"


-------------------------------------------------------- KeyPgDdFBBigEndian ----
__FB_BIGENDIAN__   _编译_大端存储
 编译器的固有定义集

语法
__FB_BIGENDIAN__

描述
如果针对大字节序目标进行编译，则定义时不创建在编译?


-------------------------------------------------------- KeyPgDdFBBuildDate ----
__FB_BUILD_DATE__   _编译_日期_
 编译器设置的固有定义（宏字符串）

语法
__FB_BUILD_DATE__

描述
用带引号的字符串?


-------------------------------------------------------- KeyPgDdfbbuilddateiso ----
__FB_BUILD_DATE_ISO__   
 编译器设置的固有定义（宏字符串）

语法
__FB_BUILD_DATE_ISO__

描述
用包含日期（YYYY-MM-DD）的


-------------------------------------------------------- KeyPgDdfbbuildsha1 ----
__FB_BUILD_SHA1__   
 编译器设置的固有定义（宏字符串）

语法
__FB_BUILD_SHA1__

描述
替换为编译器的源SHA-1版本的字符串。使用用于构建编译器二进制文件的源代码?


-------------------------------------------------------- KeyPgDdfbcygwin ----
__FB_CYGWIN__   _编译_CYGWIN
 编译器的固有定义集

语法
__FB_CYGWIN__

描述
定义时不使用编译器的Cygwin版本或使用-target cygwin命令行选项时在编译


-------------------------------------------------------- KeyPgDdfbdarwin ----
__FB_DARWIN__   _编译_DARWIN
 编译器的固有定义集

语法
__FB_DARWIN__

描述
在编译时在编译器的Darwin版本中，或者使用-target darwin命令行选项时，定


-------------------------------------------------------- KeyPgDdfbdebug ----
__FB_DEBUG__   _编译_调试
 编译器设置的固有定义（宏值）

语法
__FB_DEBUG__

描述
__FB_DEBUG__指示在编译时是在命令行上指定了生成调试信息选项-g还是启用内部?


-------------------------------------------------------- KeyPgDdfbdos ----
__FB_DOS__   _编译_DOS
 编译器的固有定义集

语法
__FB_DOS__

描述
如果为DOS目标进行编译，则定义时不创建在编译时创建的值。在DOS托管版本中为默认值，


-------------------------------------------------------- KeyPgDdfberr ----
__FB_ERR__   _编译_错误
 编译器设置的固有定义（宏值）

语法
__FB_ERR__

描述
__FB_ERR__指示在编译模块时是否在编译器命令行上指定了-e，-ex或-exx。
__FB


-------------------------------------------------------- KeyPgDdfbfpmode ----
__FB_FPMODE__   _编译_快速_
 编译器的固有定义集

语法
__FB_FPMODE__

描述
定义为"fast"启用S??


-------------------------------------------------------- KeyPgDdfbfpu ----
__FB_FPU__   _编译_浮点
 编译器的固有定义集

语法
__FB_FPU__

描述
定义为"sse"启?


-------------------------------------------------------- KeyPgDdfbfreebsd ----
__FB_FREEBSD__   _编译_FREEBSD
 编译器的固有定义集

语法
__FB_FREEBSD__

描述
在编译时在FreeBSD版本中，或者使用-target freebsd命令行选项时，定义?


-------------------------------------------------------- KeyPgDdfbgcc ----
__FB_GCC__   _编译_GCC
 编译器的固有定义集

语法
__FB_GCC__

描述
-1如果使用-gen gcc，则 定义为


-------------------------------------------------------- KeyPgDdfbgui ----
__FB_GUI__   
 编译器设置的固有定义（宏值）

语法
__FB_GUI__

描述
__FB_GUI__指示在编译时是否在命令行上指定了可执行子系统选项“ -s gui”。
如果


-------------------------------------------------------- KeyPgDdfblang ----
__FB_LANG__   _编译_语言
 编译器设置的固有定义（宏值）

语法
__FB_LANG__

描述
__FB_LANG__指示在编译模块时设置了哪种语言兼容性选项。默认情况下__FB_LANG_


-------------------------------------------------------- KeyPgDdfblinux ----
__FB_LINUX__   _编译_LINUX
 编译器的固有定义集

语法
__FB_LINUX__

描述
在编译到Linux目标时，在编译时没有创建值的情况下进行定义。在Linux托管版本的编译器


-------------------------------------------------------- KeyPgDdFBMain ----
__FB_MAIN__   _编译_主模_
 编译器的固有定义集

语法
__FB_MAIN__

描述
__FB_MAIN__在主模块中定义，而在其他模块中未定义。
主模块由?


-------------------------------------------------------- KeyPgDdFBMinVersion ----
__FB_MIN_VERSION__   _编译_最小编译版本
 宏功能可测试最低编译器版本

语法
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

用法
__FB_MIN_VERSION__( major, minor, patch)

参数
major
测试的最低主要版本
minor
最低次要版本
patch
要测试的最低补丁版本

返回值
如果编译器版本小于指定的版本，则返回?


-------------------------------------------------------- KeyPgDdfbmt ----
__FB_MT__   _编译多线程
 编译器设置的固有定义（宏值）

语法
__FB_MT__

描述
__FB_MT__指示在编译时是否在命令行上指定了多


-------------------------------------------------------- KeyPgDdfbnetbsd ----
__FB_NETBSD__   _编译_NETBSD
 编译器的固有定义集

语法
__FB_NETBSD__

描述
在编译时在NetBSD版本的编译器中，或者使用-target netbsd命令行选项时，定


-------------------------------------------------------- KeyPgDdfbopenbsd ----
__FB_OPENBSD__   _编译_OPENBSD
 编译器的固有定义集

语法
__FB_OPENBSD__

描述
在编译时在编译器的OpenBSD版本中，或者使用-target openbsd命令行选项时，定?


-------------------------------------------------------- KeyPgDdfboptionbyval ----
__FB_OPTION_BYVAL__   _编译选项支持值传递
 编译器设置的固有定义（宏值）

语法
__FB_OPTION_BYVAL__

描述
指示在未明确指定按值/按引用说明符的情况下，是否通过引用将a Function?


-------------------------------------------------------- KeyPgDdfboptiondynamic ----
__FB_OPTION_DYNAMIC__   _编译选项数组变长
 编译器设置的固有定义（宏值）

语法
__FB_OPTION_DYNAMIC__

描述
__FB_OPTION_DYNAMIC__如果发布了最近的Option Dynamic语句或'$Dynamic?


-------------------------------------------------------- KeyPgDdfboptionescape ----
__FB_OPTION_ESCAPE__   _编译选项_支持转义
 编译器设置的固有定义（宏值）

语法
__FB_OPTION_ESCAPE__

描述
指示默认情况下，如果未为非转义的字符串或$显式地为$运算符添加前缀，则?


-------------------------------------------------------- KeyPgDdfboptionexplicit ----
__FB_OPTION_EXPLICIT__   _编译选项_支持EXPLICIT
 编译器设置的固有定义（宏值）

语法
__FB_OPTION_EXPLICIT__

描述
__FB_OPTION_EXPLICIT__指示Option Explicit以前是否在源中使用过。 



-------------------------------------------------------- KeyPgDdfboptiongosub ----
__FB_OPTION_GOSUB__   _编译选项_支持GOSUB
 编译器设置的固有定义（宏值）

语法
__FB_OPTION_GOSUB__

描述
指示在编译时如何处理GoSub和Return将如何处理。如果选项设置为（-1），则Go


-------------------------------------------------------- KeyPgDdfboptionprivate ----
__FB_OPTION_PRIVATE__   _编译选项_支持PRIVATE
 编译器设置的固有定义（宏值）

语法
__FB_OPTION_PRIVATE__

描述
指示在未使用或明确指定时，默认情况下Function的和Sub是模块范围还是全局范


-------------------------------------------------------- KeyPgDdfboutdll ----
__FB_OUT_DLL__   _编译_输出DLL
 编译器设置的固有定义（宏值）

语法
__FB_OUT_DLL__

描述
__FB_OUT_DLL__指示在编译时在编译器命令行上指定的输出文件类型是共享库。
?


-------------------------------------------------------- KeyPgDdfboutexe ----
__FB_OUT_EXE__   _编译_输出EXE
 编译器设置的固有定义（宏值）

语法
__FB_OUT_EXE__

描述
__FB_OUT_EXE__指示在编译时在编译器命令行上指定的输出文件类型是可执行文件?


-------------------------------------------------------- KeyPgDdfboutlib ----
__FB_OUT_LIB__   _编译_输出LIB
 编译器设置的固有定义（宏值）

语法
__FB_OUT_LIB__

描述
__FB_OUT_LIB__指示在编译时在编译器命令行上指定的输出文件类型是静态库。
?


-------------------------------------------------------- KeyPgDdfboutobj ----
__FB_OUT_OBJ__   _编译_输出OBJ
 编译器设置的固有定义（宏值）

语法
__FB_OUT_OBJ__

描述
__FB_OUT_OBJ__指示在编译时在编译器命令行上指定的输出文件类型是对象模块。



-------------------------------------------------------- KeyPgDdfbpcos ----
__FB_PCOS__   _编译常规PC
 编译器的固有定义集

语法
__FB_PCOS__

描述
如果操作系统具有像普通PC操作系统一样的文件系统行为，例如DOS，Windows，OS / 2，


-------------------------------------------------------- KeyPgDdfbsignature ----
__FB_SIGNATURE__   _编译_编译签名
 编译器设置的固有定义（宏字符串）

语法
__FB_SIGNATURE__



-------------------------------------------------------- KeyPgDdfbsse ----
__FB_SSE__   _编译_SSE
 编译器的固有定义集

语法
__FB_SSE__

描述
如果启用了SSE浮点


-------------------------------------------------------- KeyPgDdfbunix ----
__FB_UNIX__   _编译_UNIX
 编译器的固有定义集

语法
__FB_UNIX__

描述
如果操作系统足够像UNIX（您可以将其称?


-------------------------------------------------------- KeyPgDdfbvectorize ----
__FB_VECTORIZE__   _编译_编号级别
 编译器的固有定义集

语法
__FB_VECTORIZE__

描述
定义为-


-------------------------------------------------------- KeyPgDdFBVerMajor ----
__FB_VER_MAJOR__   _编译_主版本号
 编译器设置的固有定义（宏值）

语法
__FB_VER_MAJOR__

描述
__FB_VER_MAJOR__将返回当前正在使用的FreeBASIC的主要版本。例如，对于Free


-------------------------------------------------------- KeyPgDdFBVerMinor ----
__FB_VER_MINOR__   _编译_次版本号
 编译器设置的固有定义（宏值）

语法
__FB_VER_MINOR__

描述
__FB_VER_MINOR__将返回当前使用的FreeBASIC的次要版?


-------------------------------------------------------- KeyPgDdFBVerPatch ----
__FB_VER_PATCH__   _编译_版本修订
 编译器设置的固有定义（宏值）

语法
__FB_VER_PATCH__

描述
__FB_VER_PATCH__将返回当前使用的FreeBASIC版本的补丁/颠覆/修订号。例如，


-------------------------------------------------------- KeyPgDdfbversion ----
__FB_VERSION__   _编译_版本号
 编译器设置的固有定义（宏字符串）

语法
__FB_VERSION__

?


-------------------------------------------------------- KeyPgDdfbwin32 ----
__FB_WIN32__   _编译_Win32
 编译器的固有定义集

语法
__FB_WIN32__

描述
如果编译到Win（32位或64位）目标，则在编译时不创建值的情况下进行定义。Win托管版本


-------------------------------------------------------- KeyPgDdfbxbox ----
__FB_XBOX__   _编译_XBOX
 编译器的固有定义集

语法
__FB_XBOX__

描述
使用-target xbox命令行选项时，定义时不创建在编译时创


-------------------------------------------------------- KeyPgDdfile ----
__FILE__   __文件__
 编译器设置的固有定义（宏字符串）

语法
__FILE__

描述
使用引用的源文件


-------------------------------------------------------- KeyPgDdfilenq ----
__FILE_NQ__   __文件_未用
 编译器设置的固有定义（宏字符串）

语法
__FILE_NQ__

?


-------------------------------------------------------- KeyPgDdfunction ----
__FUNCTION__   __函数__
 编译器设置的固有定义（宏字符串）

语法
__FUNCTION__

描述
在使用时用当前功能块的引用名称替换。
它的正常用法是在调试中报告错误的值?


-------------------------------------------------------- KeyPgDdfunctionnq ----
__FUNCTION_NQ__   __函数_未引用__
 编译器设置的固有定义（宏字符串）

语法
__FUNCTION_NQ__

描述
在使用时用当前功能块的未引用名称替换。
如果__FUNCTION_NQ__在模块级别?


-------------------------------------------------------- KeyPgDdline ----
__LINE__   __行__
 编译器设置的固有定义（宏值）

语法
__LINE__

描述
使用源文件的当前?


-------------------------------------------------------- KeyPgDdpath ----
__PATH__   __路径__
 编译器设置的固有定义（宏字符串）

语法
__PATH__

描述



-------------------------------------------------------- KeyPgDdtime ----
__TIME__   __时间__
 编译器设置的固有定义（宏值）

语法
__TIME__

描述
在使用时，将编译器时间


-------------------------------------------------------- KeyPgDeallocate ----
Deallocate   内存分配清除
 释放先前分配的内存

语法
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

用法
Deallocate( pointer )

参数
pointer
先前分配的缓冲区的地址。

描述
此过程将释放先前用分配的内存Allocate。pointer必须是有效的指?


-------------------------------------------------------- KeyPgDeclare ----
Declare   声明
 声明模块级别或成员过程

语法
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]
Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

参数
param_list
带括号的逗号分隔参数列表。
return_type
返回类型的Function，Operator或Property程序。
name
过程的名称或符号。
op_symbol
运算符的名称或符号。
T
新的用户定义类型的名称。

描述
该Declare语句声明一Sub


-------------------------------------------------------- KeyPgDefbyte ----
DefByte   默认字节
 指定一系列变量名称的默认数据类型

语法
DefByte start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefByte指定如果变量和数组Byte的名称的第?


-------------------------------------------------------- KeyPgDefdbl ----
DefDbl   默认双精型
 指定一系列变量名称的默认数据类型

语法
DefDbl start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefDbl指定如果变量和数组Double的名称的第


-------------------------------------------------------- KeyPgDefined ----
defined   预定义
 预处理程序功能，以测试是否已定义符号

语法
defined (symbol_name)

参数
symbol_name
要测试的符号名称

返回值
返回非零（-1）如果所述符号已经定义，否则返回零（0）。

描述
给定符号名称，defined()如果已定?


-------------------------------------------------------- KeyPgDefint ----
DefInt   默认整型
 指定一系列变量名称的默认数据类型

语法
DefInt start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefInt指定如果变量和数组Integer的名称的第?


-------------------------------------------------------- KeyPgDeflng ----
DefLng   默认长型
 指定一系列变量名称的默认数据类型

语法
DefLng start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefLng指定如果变量和数组Long的名称的第?


-------------------------------------------------------- KeyPgDeflongint ----
DefLongInt   默认长整型
 指定一系列变量名称的默认数据类型

语法
DefLongInt start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefLongInt指定如果变量和数组LongInt的名称的第


-------------------------------------------------------- KeyPgDefshort ----
DefShort   默认短整型
 指定一系列变量名称的默认数据类型

语法
DefShort start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefShort指定如果变量和数组Short的名称的第


-------------------------------------------------------- KeyPgDefsng ----
DefSng   默认单精型
 指定一系列变量名称的默认数据类型

语法
DefSng start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefSng指定如果变量和数组Single的名称的第


-------------------------------------------------------- KeyPgDefstr ----
DefStr   默认字符
 指定一系列变量名称的默认数据类型

语法
DefStr start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefStr指定如果变量和数组String的名称的第?


-------------------------------------------------------- KeyPgDefubyte ----
DefUByte   默认U字节
 指定一系列变量名称的默认数据类型

语法
DefUByte start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefUByte指定如果变量和数组UByte的名称的第?


-------------------------------------------------------- KeyPgDefuint ----
DefUInt   默认U整型
 指定一系列变量名称的默认数据类型

语法
DefUInt start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefUInt指定如果变量和数组UInteger的名称的第?


-------------------------------------------------------- KeyPgDefulongint ----
Defulongint   默认U长整型
 指定一系列变量名称的默认数据类型

语法
Defulongint start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
Defulongint指定如果变量和数组ULongInt的名称的第


-------------------------------------------------------- KeyPgDefushort ----
DefUShort   默认U短整型
 指定一系列变量名称的默认数据类型

语法
DefUShort start_letter[-end_letter ][, ...]

参数
start_letter
范围内的第一个字母
end_letter
范围中的最后一个字母

描述
DefUShort指定如果变量和数组UShort的名称的第


-------------------------------------------------------- KeyPgDestructor ----
Destructor   析构函数
 当类或用户定义的类型超出范围或被销毁时自动调用

语法
Type typename
field declarations
Declare Destructor ( )
End Type
Destructor typename ( ) [ Export ]
statements
End Destructor

参数
typename 
的名字Type的Class

描述
当用户定义的变量Type或Class变量超出范围或被Delete Statemen


-------------------------------------------------------- KeyPgDim ----
Dim   定义
 声明一个变量

语法

Dim [Shared] name1 As DataType [, name2 As DataType, ...]
要么
Dim [Shared] As DataType name1 [, name2, ...]
数组：
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
初始化程序：
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

描述
通过名称声明变量并保留内存以容纳该变量。
必须先声明变量，然后才能在-lan


-------------------------------------------------------- KeyPgDir ----
Dir   目录取名称
 搜索并返回有关文件系统中项目的信息；执行目录搜索

语法
# Include "dir.bi"
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

用法
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

参数
item_spec
用于匹配商品名称的模式。
attrib_mask
用于匹配项属性的位掩码。
out_attrib
引用分配给找到的项目的每个属性（如果有）的位掩码。
p_out_attrib
指向分配给找到的项目的每个属性（如果有）的位掩码的指针。

返回值
如果未找到与名称item_spec或属性掩码匹配的项attrib_mask，则将out_attrib（或）分配为零，并返回空字符串。否则，（或）被分配?


-------------------------------------------------------- KeyPgDo ----
Do   重复
描述
没


-------------------------------------------------------- KeyPgDoloop ----
Do...Loop   
 循环控制流语句

语法
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

描述
该Do语句在以下执行语句，statement block直到/同时condition（如果有）评估为true。
如?


-------------------------------------------------------- KeyPgDots ----
... (Ellipsis)   
 用于代替过程参数以传递可变数量的参数，或用作数组声明的上限，以表示元素数量将由初始化程序确定。

语法
Declare { Sub | Function } proc_name cdecl ( param_list, ... ) { | [ ByRef ] As return_type }
#define identifier( [ parameters, ] variadic_parameter... ) body
Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

描述
可变参数的程序
省略号（三个点，...）在程序?


-------------------------------------------------------- KeyPgDouble ----
Double   双精度
 标准数据类型：64位浮点

语法
Dim variable As Double

描述
Double是一种64位浮点数据类型，用于存储更精确的十进制数字。他们可以容纳的范围正


-------------------------------------------------------- KeyPgDraw ----
Draw   绘图
 顺序像素绘图的声明

语法
Draw [target,] cmd

参数
target
要使用的缓冲区
cmd
包含命令序列的字符串

描述
绘图将通过/ 缓冲区（如果指定）在当前工作页面ScreenSet上进行。


-------------------------------------------------------- KeyPgDrawString ----
Draw String   绘图
 图形语句，用于将文本呈现到图像或屏幕。

语法
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

用法
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

参数
buffer
绘制字符串的精灵。如果未提供，它将被绘制到屏幕上。
STEP
使用相对坐标。如果STEP添加，则相对于最后绘制的点平移x和y坐标。
x， y
相对于屏幕左上角绘制的水平/垂直位置（除非STEP使用-参见上文）。文本的左上角将在此位置绘制。
text
包含要绘制的文本的字符串
color
如果未提供字体，则可以选择文本的颜色。如果省略，Color则使用默认前景。
如果提供了字体，则将其color忽略，并且字体本身指定每个像素的颜色。
font
包含自定义字体的图像缓冲区。如果没有提供字体，则使用当前文本分辨率的标准字体，并且忽略以下参数。
method | Custom
指定如何在目标表面的顶部绘制字体字符。Put允许使用与为该语句找到的方法相同的方法，唯一的区别是Trans此函数的


-------------------------------------------------------- KeyPgDylibfree ----
DyLibFree   动态库卸载
 从内存中卸载动态链接库

语法
Declare Sub DyLibFree ( ByVal library As Any Pointer )

用法
DyLibFree( library )

参数
library
库要卸载的句柄。

描述
DyLibFree用于在运行时释放以前通


-------------------------------------------------------- KeyPgDylibload ----
DyLibLoad   动态库加载
 在运行时将动态链接库（DLL）加载到内存中

语法
Declare Function DyLibLoad ( ByRef filename As String ) As Any Pointer

用法
result = DyLibLoad ( filename )

参数
filename
甲String含有库负荷的文件名。

返回值
已Pointer加载库的句柄。零错误

描述
DyLibLoad用于在运行时库链接到您的程序。


-------------------------------------------------------- KeyPgDylibsymbol ----
DyLibSymbol   动态库地址
 返回dll中函数或变量的地址

语法
Declare Function DyLibSymbol ( ByVal library As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal library As Any Ptr, ByVal symbol As Short ) As Any Ptr

用法
result = DyLibSymbol ( library, symbol )

参数
library
DLL返回的DLL 的Any Ptr句柄DyLibLoad
symbol
一个字符串，其中包含函数名称或库中要返回其地址的变量。仅在Windows中，也可以是Short包含函数/变量的序数。

返回值
Pointer库中函数或变量的 A。
如果函数失败，则返回值为0。

?


-------------------------------------------------------- KeyPgElse ----
Else   否
描述
没


-------------------------------------------------------- KeyPgElseif ----
ElseIf   又
描述
没


-------------------------------------------------------- KeyPgEncoding ----
Encoding   编码类型
 指定文本文件的字符格式

语法
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

参数
filename 用于{Input | Output | Append}
文件名来打开Input，Output或Append
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
指示文件的编码类型
filenum
与打开的文件关联的未使用的文件号

描述
Encoding指定Unicode文本文件的格式，因此


-------------------------------------------------------- KeyPgEnd ----
End (Statement)   结束
 控制流语句以结束程序。

语法
Declare Sub End ( ByVal retval As Long = 0 )

用法
End [ retval ]

参数
retval
错误代码返回到系统。

描述
用于退出程序，并返回操作系统。可以指定一个可选的整数返回值，以指


-------------------------------------------------------- KeyPgEndblock ----
End (Block)   结束
 指示复合语句块的结尾。

语法
End { Sub | Function | If | Select | Type | Enum | Scope | With | Namespace | Extern | Constructor | Destructor | Operator | Property }

描述
用于指示最新代码块的结尾。
类型块的必须包含在该命令：之一Sub，Function，If，S


-------------------------------------------------------- KeyPgEndif ----
End If   结
描述
没


-------------------------------------------------------- KeyPgEnum ----
Enum   枚举
 声明一个枚举类型。

语法
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

参数
typename
的名字 Enum
symbolname
常数名称
expression
一个常数表达式
Explicit
要求符号必须由 typename.symbolname

描述
Enum，是枚举的缩写，它声明一个与离散值相对应的符号名称列?


-------------------------------------------------------- KeyPgEnviron ----
Environ   环境变量
 返回系统环境变量的值

语法
Declare Function Environ ( ByRef varname As Const String ) As String

用法
result = Environ( varname )

参数
varname
环境变量的名称。

返回值
返回环境变量的文本值；""如果该变?


-------------------------------------------------------- KeyPgEof ----
EOF   文件到尾
 检查是否已到达打开文件的末尾

语法
Declare Function EOF ( ByVal filenum As Long ) As Long

用法
result = EOF( filenum )

参数
filenum
打开文件的文件号。

返回值
如果已到达文件末尾，则返回true（-1），否则返回零（0）。

描述
从为打开的文件中进行读取Input (Fi


-------------------------------------------------------- KeyPgErase ----
Erase   擦除
 删除数组的语句

语法
Declare Sub Erase ( array As Any [, ... ] )

用法
Erase( array0 [, array1 ... arrayN ] )

参数
array
要擦除的数组。

描述
使用Erase固定长度的阵列上复位而不释放所分配的存储器中的所有元素。
如果


-------------------------------------------------------- KeyPgErfn ----
Erfn   错误函数
 错误报告功能

语法
Declare Function Erfn ( ) As ZString Ptr

用法
result = Erfn ( ) 

返回值
返回指向字符串的指针，该字符串标识发生错误的函数。
如果未使用-exx?


-------------------------------------------------------- KeyPgErl ----
Erl   错误行
 错误处理功能可返回发生错误的行

语法
Declare Function Erl ( ) As Integer

用法
result = Erl

返回值
一个整数返回值，其中包含最后一个错误发生的行号。

描述
Erl将返回最后一个错误发生的行号。如果未发生


-------------------------------------------------------- KeyPgErmn ----
Ermn   错误模块
 错误报告功能

语法
Declare Function Ermn ( ) As ZString Ptr

用法
result = Ermn ( ) 

返回值
返回指向该字符串的指针，该字符串标识发生错误的模块。
如果未使用-exx


-------------------------------------------------------- KeyPgErr ----
Err   错误
 获取或设置运行时错误号

用法
result = Err( )
or
Err = number

描述
该Err()函数返回FreeBASIC运行时错误号（32位Long），该错误号可以由内置语句和函数


-------------------------------------------------------- KeyPgError ----
Error   错误号
 错误处理语句强制生成错误

语法
Declare Sub Error ( errno As Integer )

用法
Error number

参数
number
产生的错误号

描述
Error调用使用On Error指定的错误处理程序，或者，如果未设置，则中止?


-------------------------------------------------------- KeyPgEvent ----
Event (Message Data From Screenevent)   事件
 ScreenEvent使用fbgfx.bi中的预定义结构（UDT）返回事件数据

语法
#include once "fbgfx.bi"
using fb
Dim variable As Event

描述
EVENT为了清楚起见， 这里我们报告该结构： 该字段将包含事件类型ID，而其余?


-------------------------------------------------------- KeyPgExec ----
Exec   外部调用
 暂时将执行转移到外部程序

语法
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

用法
result = Exec( program, arguments )

参数
program
要将控制转移到的程序（可执行文件）的文件名（包括文件路径）。
arguments
传递给程序的命令行参数。

返回值



-------------------------------------------------------- KeyPgExepath ----
ExePath   程序路径
 返回正在运行的程序的路径

语法
Declare Function ExePath ( ) As String

用法
result = ExePath

返回值
甲String变量设置为正在运行的程序的路径?


-------------------------------------------------------- KeyPgExit ----
Exit   退出
 控制流语句以退出复合语句块

语法
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }
Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


描述
叶子的码块，如Sub，Function，Operator，Constructor，Destructor，Property，Do


-------------------------------------------------------- KeyPgExp ----
Exp   指数
 收益e提高到给定数字的幂

语法
Declare Function Exp cdecl ( ByVal number As Double ) As Double

用法
result = Exp( number )

参数
number
在Double number那个e被提升到的功率。

返回值
返回提高到的幂的Double值。enumber

描述
数学常数e，也叫欧拉常数，是的基础Exp和Log，是一种?


-------------------------------------------------------- KeyPgExport ----
Export   导出
 定义说明符，指示DLL中的过程应从其他程序可见

语法
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

描述
如果在DLL中用此子句定义了函数，则会将其添加到公共导出表中，因此外部程


-------------------------------------------------------- KeyPgExtends ----
Extends   派生类型
 指定从中派生新类型的基本类型

语法
Type|Union typename Extends base_typename
...
End Type|Union

描述
Extends声明typename从派生base_typename。派生的用户定义类型typename继承bas


-------------------------------------------------------- KeyPgExtendsWstring ----
Extends Wstring   派生类型
 指定继承Wstring行为的类型

语法
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

描述
Extends Wstring声明typename要继承的属性和行为WString。目的是允许用户创建自定义


-------------------------------------------------------- KeyPgExtendsZstring ----
Extends Zstring   派生类型
 指定继承Zstring行为的类型

语法
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

描述
Extends Zstring声明typename要继承的属性和行为ZString。目的是允许用户创建自定义


-------------------------------------------------------- KeyPgExtern ----
Extern   外部扩展
 声明具有外部链接的变量，数组或对象

语法
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

参数
symbolname
变量，数组或对象的名称。
aliasname
变量，数组或对象的备用外部名称。

描述
声明symbolname为外部名称，这意味着它是外


-------------------------------------------------------- KeyPgExternBlock ----
Extern...End Extern   
 语句块，允许调用为特定语言或平台编译的函数。

语法
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

描述
Extern块为过程提供默认的调用约定，并强制进行某种名称修饰。
Extern "C


-------------------------------------------------------- KeyPgFalse ----
False   假
 编译器设置的固有常数

语法
Const False As Boolean

描述
Boolean在?


-------------------------------------------------------- KeyPgFBArray ----
Fbarray (Array Descriptor Structure And Access)   
 fbc-int/array.bi包含文件中的 预定义结构（UDT）和过程声明，可用于访问数组描述符数据字段。

语法
来自./inc/fbc-int/array.bi (for fbc versions >= 1.08)：
# If __FB_LANG__ = "fb"
Namespace FBC
# endif
Const FB_MAXDIMENSIONS As Integer = 8
Type FBARRAYDIM
    Dim As UInteger elements     '' number of elements
    Dim As Integer LBound        '' dimension lower bound
    Dim As Integer UBound        '' dimension upper bound
End Type
Const FBARRAY_FLAGS_DIMENSIONS = &h0000000f    '' number of entries allocated in dimTb()
Const FBARRAY_FLAGS_FIXED_DIM  = &h00000010    '' array has fixed number of dimensions
Const FBARRAY_FLAGS_FIXED_LEN  = &h00000020    '' array points to fixed-length memory
Const FBARRAY_FLAGS_RESERVED   = &hffffffc0    '' reserved, do not use
Type FBARRAY
    Dim As Any Ptr index_ptr     '' @array(0, 0, 0, ... )
    Dim As Any Ptr base_ptr      '' start of memory at array lowest bounds
    Dim As UInteger size         '' byte size of allocated contents
    Dim As UInteger element_len  '' byte size of single element
    Dim As UInteger dimensions   '' number of dimensions
    Dim As UInteger flags        '' FBARRAY_FLAGS_*
    '' take care with number of dimensions; fbc may allocate
    '' a smaller descriptor with fewer than FB_MAXDIMENSIONS
    '' in dimTb() if it is known at compile time that they
    '' are never needed.  Always respect number of 
    '' dimensions when accessing dimTb()
    Dim As FBARRAYDIM dimTb(0 To FB_MAXDIMENSIONS-1)
End Type
Extern "rtlib"
    Declare Function ArrayDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Any ) As FBC.FBARRAY Ptr
    Declare Function ArrayConstDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Const Any ) As Const FBC.FBARRAY Ptr
End Extern
# If __FB_LANG__ = "fb"
End Namespace
# endif
        

用法
#include once "fbc-int/array.bi"
using FBC
' then:
Dim pd As FBARRAY Ptr
...
pd = ArrayDescriptorPtr ( array() )

' or safer:
Dim pd As Const FBARRAY Ptr
...
pd = ArrayConstDescriptorPtr ( array() )

参数
pd 
指向数组描述符的指针的名称
array 
要访问其描述符的数组的名称

描述
在编译时，fbc分配一个数?


-------------------------------------------------------- KeyPgFBMemcopy ----
Fb_Memcopy   
 将一块内存从一个位置复制到另一个位置

语法
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memcopy( dst, src, bytes )

参数
dst
目标存储器的起始地址
src
源存储器的起始地址
bytes
要复制的字节数

返回值
返回目标存储器的起始地址。

描述
fb_memcopy将给定数量的字节?


-------------------------------------------------------- KeyPgFBMEMMOVE ----
Fb_Memmove   
 将一块内存从一个位置复制到另一个位置

语法
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memmove( dst, src, bytes )

参数
dst
目标存储器的起始地址
src
源存储器的起始地址
bytes
要复制的字节数

返回值
返回目标存储器的起始地址。

描述
fb_memmove将给定数量的字节?


-------------------------------------------------------- KeyPgField ----
Field   字段
 指定字段对齐。

语法
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

描述
Field可以用于打包Types或者Unions比默认布局更紧密。最


-------------------------------------------------------- KeyPgFileattr ----
FileAttr   文件属性
 返回有关打开文件编号的信息

语法
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

用法
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )
要么
#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

参数
filenum
使用以下命令打开的文件或设备的文件号 Open
returntype
一个整数值，指示要返回的信息的类型。

返回值
与返回类型关联的值，否则返回0。

描述
根据提供的文件


-------------------------------------------------------- KeyPgFilecopy ----
FileCopy   文件复制
 复制文件

语法
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

用法
#include "file.bi"
FileCopy source, destination
要么
#include "file.bi"
result = FileCopy( source, destination )

参数
source
一个String参数，指定要从中复制文件的文件名。该文件必须存在。
destination
一个String参数，指定要复制到的文件的文件名。如果存在，此文件将被覆盖。当前，任何打开的文件句柄都不应引用此文件。

返回值
如果0成功或1发生错误?


-------------------------------------------------------- KeyPgFiledatetime ----
FileDateTime   文件日期时间
 返回文件的最后修改日期和时间作为“ 日期序列” 

语法
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

用法
#include "file.bi"
result = FileDateTime( filename )
要么
#include "vbcompat.bi"
result = FileDateTime( filename )

参数
filename
要检索日期和时间的文件名。

返?


-------------------------------------------------------- KeyPgFileexists ----
FileExists   文件存在
 测试文件是否存在

语法
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

用法
#include "file.bi"
result = FileExists( filename )
要么
#include "vbcompat.bi"
result = FileExists( filename )

参数
filename
要测试是否存在的文件名。

返回值
返回非零（-1）如果文件存在，否则返回零（0）。

描述
FileExists测试文件是否存在。
在内部?


-------------------------------------------------------- KeyPgFileflush ----
FileFlush   
 将应用程序流缓冲区刷新到系统，或将系统缓冲区刷新到文件

语法
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

用法
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

参数
filenum
绑定文件或设备的文件号。如果未给出或为-1，则刷新所有打开的文件。
systembuffers
如果非零，则将系统缓冲区刷新到物理设备。默认值为零（0）。

返回值
如果成功则返回零（0），如果无法刷新文件?


-------------------------------------------------------- KeyPgFilelen ----
FileLen   文件大小
 根据文件名查找文件的长度

语法
Declare Function FileLen ( filename As String ) As LongInt

用法
#include "file.bi"
result = FileLen(filename)
要么
#include "vbcompat.bi"
result = FileLen(filename)

参数
filename
一个String参数，指定要返回其长度的文件的?


-------------------------------------------------------- KeyPgFileseteof ----
FileSetEof   
 设置绑定到文件编号的打开文件的长度

语法
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

用法
#include "file.bi"
result = FileSetEof(fnum)

参数
filenum
绑定文件或设备的文件号。

返回值
如果成功则返回零（0），如果无法设置文件结尾（文件大小），则返回错误代码。

描述
FileSetEof根据当前?


-------------------------------------------------------- KeyPgFix ----
Fix   截断
 返回数字的整数部分，四舍五入为零

语法
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

用法
result = Fix( number )

参数
number
要截断的浮点数

返回值
返回的整数部分number，四舍五入为零。

描述
等效于：。例如，将返回，并将返回。对于整数类


-------------------------------------------------------- KeyPgFlip ----
Flip   翻页
 更改当前视频显示页面

语法
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

用法
Flip [ frompage ] [, topage ]

参数
frompage
上一页
topage
要显示的新页面

返回值
0如果成功，则 返回零（），否则返回非零错误代码以指示失败。

描述
在正常的图形模式，Flip是对一个别名


-------------------------------------------------------- KeyPgFor ----
For   循
描述
没


-------------------------------------------------------- KeyPgFormat ----
For   循
描述
没


-------------------------------------------------------- KeyPgFornext ----
For...Next   
 循环控制流语句

语法
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

参数
iterator
变量标识符，用于从初始值迭代到结束值
datatype
如果指定，变量iterator将自动使用类型声明datatype
startvalue
表示迭代器起始值的表达式
endvalue
用于与迭代器的值进行比较的表达式
stepvalue
每次迭代后添加到迭代器的表达式

描述
一个F


-------------------------------------------------------- KeyPgFrac ----
Frac   小数
 返回数字的小数部分

语法
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

用法
result = Frac( number )

参数
number
获得小数部分的数字或表达式。

返回值
返回数字或表达式的小数部分。

描述
等效于：。 例如，将返回，并将返回。对于整数类


-------------------------------------------------------- KeyPgFre ----
Fre   内存可用值
 返回可用的可用内存量

语法
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

用法
result = Fre( [ value ] )

参数
value
保留未使用的伪参数以实现向后兼容；可以忽略。

返回值
返


-------------------------------------------------------- KeyPgFreefile ----
Open   文件打开
 打开磁盘文件以使用文件操作进行读取或写入

语法
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber
Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

用法
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
要么
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
要么
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len = record_length] )
要么
Open filename For {Input|Output|Append} As filenumber
要么
Open filename For Binary Access {Read|Write} As filenumber
要么
Open filename For Random Access {Read|Write} As filenumber [Len = record_length]

参数
filename
要打开的磁盘文件名称的字符串值。相对文件路径是相对于当前目录的（请参阅参考资料CurDir）。
encoding_type
读取或写入文本时使用的编码可以是以下之一：
Encoding "ascii" （默认使用ASCII编码）
Encoding "utf8" （使用8位Unicode编码）
Encoding "utf16" （使用16位Unicode编码）
Encoding "utf32" （使用32位Unicode编码）
access_type
调用进程请求的访问类型。
Access[ Read] [ Write] （可以使用读写访问权限，这是默认设置）
lock_type
对来自其他进程（线程或程序）的磁盘文件访问施加限制，可以是：
Shared （该文件可以由其他进程自由访问）
Lock[ Read] [ Write] （可以拒绝其他进程进行读写访问）
filenumber
可用文件号绑?


-------------------------------------------------------- KeyPgFunction ----
Function   函数
 定义一个返回值的过程

语法
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] [As return_type] [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

参数
identifier：函数名
external_identifier：外部可见的（给链接器）包含在引号名
parameter_list：：parameter[, parameter[, ...]]
parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数中引用的变量的名称。如果参数是数组，则标识符后必须带有一个空括号。
type：变量的类型
default_value：参数的值（如果调用中未指定）
return_type：函数返回的变量类型
statements：组成函数主体的一个或多个语句：


-------------------------------------------------------- KeyPgFunctionPtr ----
Function Pointer   函数
 存储指向Function返回值的过程的指针的数据类型

语法
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

参数
parameter_list：parameter [，parameter [，...]] 
parameter：[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程中引用的变量的名称：变量
type的类型
default_value：如果调用中未指定参数的值
return_value：从函数返回的值
intializer：要设置为初始值的子例程的地址

描述
甲Function


-------------------------------------------------------- KeyPgGetfileio ----
Get (File I/O)   获取
 从文件读取数据到缓冲区

语法
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

用法
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

参数
filenum
Open打开文件时传递给的值。
position
读取必须开始的位置。如果文件已打开For Random，则该位置已记录；否则，以字节为单位。如果省略，则从当前文件指针位置开始读取。该位置基于1：即文件的第一个记录或字节位于position 1。
如果position省略或为零（0），将从当前文件位置开始读取文件。
data
写入数据的缓冲区。它可以是数字变量，字符串，数组，用户定义的类型或取消引用的指针。除非EOF达到，否则读操作将尝试完全填充变量。
获取数组时，data应在后面加上一个空括号：“ ()”。 Get将读取数组中所有值的数据。 amount不被允许。
当获得Strings时，读取的字节数与字符串数据中的字节数相同。amount不被允许。
注意：如果要将值读入缓冲区，则不应将指针传递给缓冲区；相反，您应该在缓冲区中传递第一个变量。（这可以通过以下方式取消引用指针：Operator * (Value Of)。）如果直接传递指针，Get则将覆盖指针变量，而不是其指向的内存。


-------------------------------------------------------- KeyPgGetgraphics ----
Get (Graphics)   获取
 获取当前工作页面的一部分或图像缓冲区的副本

语法
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

参数
source
图像缓冲区的地址。如果省略，则复制当前工作页面。
STEP
表示以下坐标不是绝对坐标。
[STEP](x1, y1)
要复制的子图像左上角的坐标。 STEP表示偏移量是相对于当前图形光标位置的。(x1, y1)
[STEP](x2, y2)
要复制的子图像右下角的坐标。 STEP分别表示x2和y2是相对于x1和的y1。
dest
?


-------------------------------------------------------- KeyPgGetjoystick ----
Get (Graphics)   获
描述
没


-------------------------------------------------------- KeyPgGetkey ----
GetKey   键取值
 返回键盘缓冲区中第一个键的ASCII码

语法
Declare Function GetKey ( ) As Long

用法
result = GetKey

返回值
返回的ASCII码值。

描述
它返回键盘缓冲区中第一个键的ASCII码。密钥将从缓冲区中删除。如果


-------------------------------------------------------- KeyPgGetmouse ----
GetMouse   鼠标获取
 检索鼠标指针设备的状态

语法
Declare Function GetMouse ( ByRef x As Integer, ByRef y As Integer, ByRef wheel As Integer = 0, ByRef buttons As Integer = 0, ByRef clip As Integer = 0 ) As Long

用法
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

参数
x
x坐标值
y
y坐标值
wheel
滚轮值
buttons
按钮状态
clip
剪辑状态

返回值
0成功，1错误（例如，因为鼠标在图形窗口之外）或失败。（设置运行时错误）

描述
GetMouse检索鼠标位


-------------------------------------------------------- KeyPgGosub ----
GoSub   跳转
 控制流语句使用一段代码并返回。

语法
GoSub label

描述
执行跳转到由行标签标记的子例程。总是使用Return退出GoSub，执行将在之后的下?


-------------------------------------------------------- KeyPgGoto ----
Goto   转到
 控制流语句跳转到程序的另一部分

语法
Goto label

描述
将代码执行跳转到行标签。
当使用到退出的范围，在范围被破坏定义的任何局部变


-------------------------------------------------------- KeyPgHex ----
Hex   十六进制
 返回给定数字的十六进制

语法
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String
Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Hex[$]( number [, digits ] )

参数
number
数字或计算为数字的表达式。浮点数将转换为LongInt。
digits
返回的可选数字位数。

返回值
一个字符串，其中包含的无符号十六进制表示形式number。

描述
返回整数的无符?


-------------------------------------------------------- KeyPgHibyte ----
HiByte   单字节高位
 获取操作数的第二个字节。

语法
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

用法
result = HiByte( expr )

参数
expr
数值表达式，转换为UInteger值。

返回值
返回expr的低16位字的高字节值。

描述
此宏将数值表达式转换expr为一个U


-------------------------------------------------------- KeyPgHiword ----
HiWord   双字节高位
 获取操作数的第二个16位字。

语法
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

用法
result = HiWord( expr )

参数
expr
数值表达式，转换为UInteger值。

返回值
返回expr的低32位dword的高16位字的值。

描述
此宏将数值表达式转换expr为一个UInteger值


-------------------------------------------------------- KeyPgHour ----
Hour   时间取小时
 从日期序列中获取一天中的小时 

语法
Declare Function Hour ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Hour( dateserial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量返


-------------------------------------------------------- KeyPgIfthen ----
If...Then   
 条件分支的控制流语句

语法
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

备注：EndIf也支持QB（无空格），以实现向后兼容。

描述
If...Then是一种决策的方式。
这是一种仅在条件为真时才执行代码


-------------------------------------------------------- KeyPgIif ----
IIf   如果是
 返回两个值之一的条件函数。

语法
IIf ( condition, expr_if_true, expr_if_false )

参数
condition
要测试的条件。
非零值的评估结果为true，而零值的评估结果为false。
expr_if_true
要计算并返回conditiontrue 的表达式。
它必须返回：
数值，可以是整数，浮点数或指针，包括布尔值，
或字符串值，
或UDT值。
expr_if_false
要计算并返回conditionfalse 的表达式。
它的类型必须与expr_if_true（数字，字符串或UDT）相同。

返回值
如果condition非零，?


-------------------------------------------------------- KeyPgImageConvertRow ----
ImageConvertRow   图像转换行
 将一行图像数据转换为另一种颜色深度

语法
Declare Sub ImageConvertRow ( ByVal src As Any Ptr, ByVal src_bpp As Long, ByVal dst As Any Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

用法
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

参数
src
源行开始的地址。源可以是每个像素的位深度为24或32位的全色图像，也可以是每个像素的位深度为1-8位的调色板图像。仅当您在屏幕模式下进行转换时使用正确的调色板时，才能转换调色板图像。
src_bpp
源行中每个像素的位数。1-8、24和32。
dst
目标行的开始地址。该图像可以是每个像素16或32位的全彩色图像。如果源是调色板图像，则目标也可以是每像素1到8位?


-------------------------------------------------------- KeyPgImagecreate ----
ImageCreate   图像创建
 分配并初始化图像的存储

语法
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

用法
result = ImageCreate( width, height [, [ color ][, depth ]] )

参数
width
所需的宽度（以像素数为单位）。
height
所需的高度，以像素数为单位。
color
填充图像区域的像素值。
depth
所需的颜色深度，以每个像素为单位。

返回值
如果无法创建图像，0则返回NULL（），否则返回图像的地址。ImageCreate必须在图形模式初始化后调用，否则返回0。
因此，在Shared变量声明的情况下ImageCreate，即使在Udt（在成员字段或构造函数中）内部也不能用作集成的初始化程序，


-------------------------------------------------------- KeyPgImageDestroy ----
ImageDestroy   图像销毁
 销毁和分配图像的存储

语法
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

用法
ImageDestroy( image )

参数
image
要销毁图像的地址。

描述
销毁所指向的图片image，该图片必须是从调?


-------------------------------------------------------- KeyPgImageInfo ----
ImageInfo   图像信息
 检索有关图像的信息

语法
Declare Function ImageInfo ( ByVal image As Any Ptr, ByRef width As Integer = 0, ByRef height As Integer = 0, ByRef bypp As Integer = 0, ByRef pitch As Integer = 0, ByRef pixdata As Any Ptr = 0, ByRef size As Integer = 0 ) 
Usage
result = ImageInfo( image [, [width] [, [height] [, [bypp] [, [pitch] [, [pixdata] [, size]]]]]] )

Parameters
image
The address of the image.
width
Stores the width of the image, in pixels.
height
Stores the height of the image, in pixels.
bypp
Stores the bytes per pixel of the image - i.e. the size of a single pixel, in bytes.
pitch
Stores the pitch of the image - i.e. the size of each scanline (row), in bytes. Note that this may be more than just width * bypp, because the scanlines may be padded to allow them to be aligned better in memory.
pixdata
Stores the address of the start of the first scanline of the image.
size
Stores the size of the image in memory, in bytes.

Return Value
If image doesn't point to a valid image, one (1) is returned. Otherwise, width, height, bypp, pitch, pixdata and size are assigned appropriate values, and zero (0) is returned.

Description
ImageInfo provides various information about an image, such as its dime


-------------------------------------------------------- KeyPgImplements ----
Implements   继承接口
 指定由用户定义的类型
注意：存根页。即使此关键字已保留，但接口尚未实现。

Syntax
Type typename Implements interface
...
End Type

描述

例

方言差异

除非使用别名引用，否则


-------------------------------------------------------- KeyPgImport ----
Import   导入
 DLL的公共数据的外部链接属性

语法
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

描述
仅在带有Extern关键字的Win32平台上使用，并且访问DLL中?


-------------------------------------------------------- KeyPgInclib ----
#inclib   #包含库
 预处理程序指令

语法
#inclib "libname"

描述
就像-l libname在命令行上?


-------------------------------------------------------- KeyPgInclude ----
#include   #包含
 预处理程序语句以包含另一个源文件的内容

语法
#include [once] "file"

描述
#include在#include指令出现的位置从另一个文件插入源代码。这具有编译包含


-------------------------------------------------------- KeyPgInkey ----
Inkey   键输入
 返回一个字符串，表示在键盘缓冲区中等待的第一个键

语法
Declare Function Inkey ( ) As String

用法
result = Inkey[$]

返回值
在键盘缓冲区中找到的第一个字符，""如果找不到则为空字符串（）。

描述
窥探键盘缓冲区，并返回String?


-------------------------------------------------------- KeyPgInp ----
Inp   端口
 返回硬件端口的值。

语法
Declare Function Inp ( ByVal port As UShort ) As Integer

用法
value = Inp(port)

参数
port
要读取的端口号。

返回值
指定端口?


-------------------------------------------------------- KeyPgInput ----
Input   输入
 从键盘读取值列表

语法
Input [;] ["prompt" ,|; ] variable_list

参数
prompt
作为提示写入屏幕的可选字符串文字。如果后跟分号（;），"? "则会在提示后附加问号（）。如果其后跟逗号，则不会附加任何内容。
variable_list
用逗号分隔的变量列表，用于保存从用户读取的值。

描述



-------------------------------------------------------- KeyPgInputfilemode ----
Input (File Mode)   输入
 指定要为输入模式打开的文本文件

语法
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要输入的文件名
encoding_type
指示文件的编码类型
lock_type
文件打开时使用的锁定
filenum
与打开的文件关联的未使用的文件号

描述
用于Open打开文本文件以供阅读的


-------------------------------------------------------- KeyPgInputnum ----
Input()   
 从控制台或文件中读取许多字符

语法
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

用法
result = Input[$]( n [, [#]filenum ] )

参数
n
读取的字节数。
filenum
绑定文件或设备的文件号。

返回值
返回String读取的字符中的一个。

描述
从控制台或由指定的绑定文件/设备中读取许


-------------------------------------------------------- KeyPgInputPp ----
Input #   输入
 从文本文件中读取值列表

语法
Input # filenum, variable_list

参数
filenum
打开的文件或设备的文件号 Input
variable_list
变量列表，用于保存读取的值

描述
通过绑定文件编号从文本文件中读取由定界符分隔的一组?


-------------------------------------------------------- KeyPgInstr ----
InStr   字符串搜索
 在字符串中找到子字符串或字符的第一次出现

语法
Declare Function InStr ( ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

用法
first = InStr( [ start, ] str, [ Any ] substring )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
在该位置str处的搜索将开始。第一个字符从位置1开始。

返回值
的第一次出现的位置substring在str。

描述
在字符串


-------------------------------------------------------- KeyPgInstrrev ----
InStrRev   字符串搜索反向
 在字符串中找到子字符串或字符的最后一次出现

语法
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

用法
last = InStrRev( str, [ Any ] substring [, start ] )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
在该位置str处的搜索将开始。第一个字符从位置1开始。

返回值
最后出现的位置substring在str。

描述
在字符?


-------------------------------------------------------- KeyPgInt ----
Int   数取整
 返回数字的底数

语法
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

用法
result = Int( number )

参数
number
要舍入的浮点数

返回值
返回的下限number，即小于或等于它的最大整数。

描述
Int返回的下限number。例如，Int(4.9)将返回4.0，In


-------------------------------------------------------- KeyPgInteger ----
Integer   整数型
 标准数据类型：32位或64位带符号，大小与 SizeOf(Any Ptr)

语法
Dim variable As Integer
Dim variable As Integer<bits>

参数
bits
一个数字常数表达式，用于指示所需整数位的大小。所允许的值8，16，32或64。

描述
整数是FreeBASIC用于整数数学和按位运算


-------------------------------------------------------- KeyPgIs ----
Is   是类
 Select Case语句块中的 子句。

语法
Case Is expression

描述
Is指定将基于包括大于（>）或小于（<）运算符


-------------------------------------------------------- KeyPgIsDate ----
IsDate   是日期
 测试字符串是否可以转换为日期序列

语法
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

用法
#include "vbcompat.bi"
result = IsDate( stringdate )

参数
stringdate
要测试的字符串

返回值
如果日期字符串可以转换为Date Serial，则返回非零（-1），否则返回零（0）。

描述
日期字符串必须采用在操作系统?


-------------------------------------------------------- KeyPgIsredirected ----
IsRedirected   是重定向
 检查是否将stdin或stdout重定向到文件

语法
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

用法
#include "fbio.bi"
result = IsRedirected( is_input )

参数
is_input
甲Long指示的信息，以返回类型。

返回值
返回非零（-1）如果标准输入或标准输出被重定向，否则返回零（0）。

描述
IsRedirected检查是否将std


-------------------------------------------------------- KeyPgKill ----
Kill   删文件
 从磁盘/存储介质中删除文件。

语法
Declare Function Kill ( ByRef filename As Const String ) As Long

用法
result = Kill( filename )

参数
filename
该文件名是磁盘要删除的文件的名称。如果文件不在当前目录中，则路径也必须指定为path/file。

返回值
0成功 返回零（），错误返回非零。




-------------------------------------------------------- KeyPgLbound ----
LBound   数组取下限
 返回数组维度的下限

语法
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = LBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
获得下界的尺寸

返回值
返回数组维的下限。

描述
LBound返回可用作数组特定维的索引的最小值。
数?


-------------------------------------------------------- KeyPgLcase ----
LCase   字符串小写
 返回字符串的小写副本

语法
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = LCase[$]( str [ , mode ] )

参数
str
转换为小写的字符串。
mode
转换模式：0 =当前语言环境，1 =仅ASCII

返回值
的小写副本str。




-------------------------------------------------------- KeyPgLeft ----
Left   字符串取左
 返回字符串的最左子字符串

语法
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Left[$]( str, n )

参数
str
源字符串。
n
从源字符串返回的字符数。

返回值
从返回最左边的子字符串str。

描述
返回n从的左侧（开头）开始的最左侧的字?


-------------------------------------------------------- KeyPgLen ----
Len   字符串总长
 返回表达式或数据类型的长度

语法
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer
Declare Operator Len ( ByRef expression As datatype ) As datatype
Declare Function Len ( datatype ) As Integer 

用法
result = Len( expression )
要么
result = Len( DataType )

参数
expression
任何类型的表达式。
datatype
一个DataType。

返回值
以字节为单位 返回表达式或数据类型（以及fbc版本> = 1.08的UDT的数据字段）的大小。

描述
Len返回表达式的长度?


-------------------------------------------------------- KeyPgLet ----
Let   赋值
 指示赋值运算符。

语法
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

描述
该命令旨在帮助程序员将赋值语句（例如Let a = 1）与相等性测试（例如If a = 1 then ..


-------------------------------------------------------- KeyPgLib ----
Lib   库
 指定可以在声明中找到子或函数的库

语法
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type
Extern "mangling" lib "libname"
declarative statements
end Extern
Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type

描述
在Sub或Function声明中，以及在类方法声明（包括构造函数和析构函数）中，Lib指


-------------------------------------------------------- KeyPgLinegraphics ----
Line (Graphics)   画线
 画一条线

语法
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

参数
target
指定要绘制的缓冲区
STEP
表示起始坐标是相对的
(x1, y1)
线的起始坐标
STEP
表示结束坐标是相对的
(x2, y2)
行的结束坐标
color
颜色属性。
B|BF
指定盒子或盒子填充模式
style
线型

描述
在两点之间绘制直线或框的


-------------------------------------------------------- KeyPgLineinput ----
Line Input   画线
 从键盘读取一行输入

语法
Line Input [;] [promptstring {;|,} ] stringvariable

参数
promptstring
在等待输入之前提示显示
stringvariable
变量以接收文本?


-------------------------------------------------------- KeyPgLineinputPp ----
Line Input #   画线
 从文件中读取一行文本

语法
Line Input #file number, string_variable

参数
file number
已打开的文件的文件号 Input
string_variable
变量以接收文本行

描述
从打开的文本文件（Input通过绑定的文件编号打开）中读取一行，


-------------------------------------------------------- KeyPgLoByte ----
LoByte   单字节低位
 获取操作数的最低字节。

语法
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

用法
result = LoByte( expr )

参数
expr
数值表达式，转换为UInteger值。

返回值
返回expr低字节的值。

描述
此宏将数字表


-------------------------------------------------------- KeyPgLoc ----
LOC   文件位置
 返回执行上一次文件读写的文件位置

语法
Declare Function LOC ( ByVal filenum As Long ) As LongInt

用法
result = LOC( filenum )

参数
filenum
打开文件的文件号。

返回值
最后执行读/写操作的文件位置。

描述
返回执行上一次文件读/写的位置。
该位置在


-------------------------------------------------------- KeyPgLocal ----
Local   本地
 设置当前错误处理程序的错误处理语句

语法
On Local Error Goto label

描述
所述Local在一个条款On Error结构允许在同一个定义一个错误处理程序Sub或Func


-------------------------------------------------------- KeyPgLocate ----
Locate   光标定位
 设置当前光标位置

语法
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

用法
Locate [row], [column], [state]
result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

参数
row
控制台中基于1的垂直字符位置。
column
控制台中基于1的水平字符位置。
state
仅在控制台模式下光标的状态：0关闭，1打开；文本光标在图形模式下永远不可见。
start
忽略了。仅允许与-lang qb方言兼容。
stop
忽略了。仅允许与-lang qb方言兼容。

返回值
返回一个Long包含当前光标位置和状态的32位。低位字的低字节包含该列，低位字的高字节包含该行， 如果只是通过调用来设置row，column或state参数中的任何一个Locate，则返回值将反映这些新值，而不是先前的值。如果在对


-------------------------------------------------------- KeyPgLock ----
Lock   锁定
 限制对文件或文件部分的读/写访问

语法
Lock #filenum, record
Lock #filenum, start To end

参数
filenum
用于Open文件的文件号。
record
记录（Random文件）要锁定。
start
Binary要锁定的第一个字节位置（文件）。
end
Binary要锁定的最后一个字节位置（文件）。

描述
Lock暂时限制其他线程


-------------------------------------------------------- KeyPgLof ----
LOF   文件长度
 返回打开的磁盘文件的长度

语法
Declare Function LOF ( ByVal filenum As Long ) As LongInt

用法
result = LOF( filenum )

参数
filenum
打开的磁盘文件的文件号。

返回值
打开的磁盘文件的字节长度。

描述
返回Open使用给定先?


-------------------------------------------------------- KeyPgLog ----
Log   对数
 返回给定数字的自然对数

语法
Declare Function Log cdecl ( ByVal number As Double ) As Double

用法
result = Log( number )

参数
number
计算自然对数的数字。

返回值
返回以e为底的对数（也称为自然对数）number。

描述
鉴于在数学中自然对数函数通常表示为LN，而底?


-------------------------------------------------------- KeyPgLong ----
Long   长型
 标准数据类型：32位有符号整数

语法
Dim variable As Long

描述
32位带符号整数数据类型。可以保存从-21474


-------------------------------------------------------- KeyPgLongint ----
LongInt   长整型
 标准数据类型：64位带符号

语法
Dim variable As LongInt

描述
64位带符号整数数据类型。可以保存从-9 223 372 036 854 775 808到9 223 372


-------------------------------------------------------- KeyPgLoop ----
Loop   重复
描述
没


-------------------------------------------------------- KeyPgLoWord ----
LoWord   双字节低位
 获取操作数的最低16位字。

语法
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

用法
result = LoWord( expr )

参数
expr
数值表达式，转换为UInteger值。

返回值
返回expr低位字的值。

描述
该宏将数字表达


-------------------------------------------------------- KeyPgLpos ----
LPos   打印位置
 返回最后一条LPrint语句中发送到打印机端口的字符数。

语法
Declare Function LPos ( ByVal printer As Long ) As Long

用法
result = LPOS(printer)

参数
printer
0、1、2或3。代表打印机端口（LPT＃）

返回值
返


-------------------------------------------------------- KeyPgLprint ----
LPrint   打印机打印
 将文本写入默认打印机。

语法
LPrint [ Using formatstring,] [expressionlist] [(, | ;)] ...

参数
formatstring
指定输出格式的字符串。
expressionlist
根据指定格式输出的变量列表。

描述
打印expressionlist到连接到并行端口LPT1的打印机，


-------------------------------------------------------- KeyPgLset ----
LSet   字符串左齐
 左对齐字符串

语法
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
LSet dst, src
LSet dst_udt, src_udt

参数
dst
String接收数据的字符串。
src
源String获取数据。
dst_udt
用户定义Type为接收数据。 
src_udt
用户定义Type要从中复制数据。

描述
LSetleft将文本对齐到字符串缓冲区中dst，


-------------------------------------------------------- KeyPgLtrim ----
LTrim   字符串删空格左边
 删除字符串左侧的周围子字符串或字符

语法
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = LTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪后的字符串。

描述
此过程从源字符串的左边（开始）修剪?


-------------------------------------------------------- KeyPgMemberFunction ----
Function (Member)   函数
 声明或定义返回值的成员过程。

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }
Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

参数
typename 
的名称Type，Class或Union
fieldname 
程序名称
external_name
外部链接时显示的字段名称
parameters 
要传递给过程的参数
calling convention specifier 
可以是以下之一：cdecl，stdcall或pascal

描述
Function使用Operator . (Member Ac


-------------------------------------------------------- KeyPgMemberSub ----
Sub (Member)   过程
 声明或定义成员过程。

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }
Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

参数
typename 
的名称Type，Class或Union
fieldname 
程序名称
external_name
外部链接时显示的字段名称
parameters 
要传递给过程的参数
calling convention specifier 
可以是以下之一：cdecl，stdcall或pascal

描述
Sub使用Operator . (Member Access)或Op


-------------------------------------------------------- KeyPgMetaDynamic ----
$Dynamic   $动态数组
 元命令更改数组的分配方式

语法
'$Dynamic
or
Rem $Dynamic

描述
'$ Dynamic是一个元命令，它指定以下任何数组声明都是可变长度的，无论它们是否?


-------------------------------------------------------- KeyPgMetaInclude ----
$Include   $包含文件
 元命令语句包含另一个源文件的内容

语法
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

描述
$Include在$Includemetacommand出现的位置从另一个文件插入源代码。这具有编


-------------------------------------------------------- KeyPgMetaLang ----
$Lang   $语言
 设置编译器方言的元命令语句。

语法
'$lang: "lang"
or
Rem $lang: "lang"

参数
"lang"
该方言集，双引号括起来，而且必须是一"fb"，"fblite"，"qb"，或"deprecated"。

描述
如果在命令行上未提供-forcelang选项，$Lang则可以使?


-------------------------------------------------------- KeyPgMetaStatic ----
$Static   $静态数组
 元命令更改数组的分配方式

语法
'$Static
or
Rem $Static

描述
'$Static是一个元命令，它会覆盖的行为$Dynamic，也就是说，用恒定下标范围声明?


-------------------------------------------------------- KeyPgMidfunction ----
Mid (Function)   字符串取子串
 返回字符串的子字符串

语法
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

用法
result = Mid[$]( str, start [, n ] )

参数
str
源字符串。
start
str子字符串的起始位置。第一个字符从位置1开始。
n
子字符串的长度，以字符为单位。

描述
返回从startin 开始的子字符串st


-------------------------------------------------------- KeyPgMidstatement ----
Mid (Statement)   字符串取子串
 用另一个覆盖字符串的子字符串

语法
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

用法
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

参数
text
要使用的字符串。
start
text要覆盖的子字符串的起始位置。第一个字符从位置1开始。
length
要覆盖的字符数。

描述
副本最多length的人物expres


-------------------------------------------------------- KeyPgMinute ----
Minute   时间取分
 从日期序列中获取小时中的分钟 

语法
Declare Function Minute ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Minute( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列 格式的日期的变量返回分


-------------------------------------------------------- KeyPgMkd ----
MKD   数转字符双精型
 将Double变量从二进制复制到String，将其长度设置为8个字节

语法
Declare Function MKD ( ByVal number As Double ) As String

用法
result = MKD[$]( number )

参数
number
一个Double变量二进制文件复制到一个String。

返回值
返回String带有的二进制副本的Double。

描述
将Double变量从二进制复制到S


-------------------------------------------------------- KeyPgMkdir ----
MkDir   目录新建
 在本地文件系统上创建一个文件夹/目录

语法
Declare Function MkDir ( ByRef folder As Const String ) As Long

用法
result = MkDir( folder )

参数
folder
要创建的文件夹/目录。

返回值
成功返?


-------------------------------------------------------- KeyPgMki ----
MKI   数转字符整型
 将二进制变量从整数变量复制到String与输入变量大小相同的长度

语法
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

用法
result = MKI[$]( number )
result = MKI[$]<bits>( number )

参数
number
甲Integer或变量的二进制复制到一个。Integer<bits>String

返回值
返回String包含的二进制副本的number。

描述
将二进制副本从Integer或变?


-------------------------------------------------------- KeyPgMkl ----
MKL   数转字符长型
 将Long变量从二进制复制到String，将其长度设置为4个字节

语法
Declare Function MKL ( ByVal number As Long ) As String

用法
result = MKL( number )

参数
number
一个Long变量二进制文件复制到一个String。

返回值
返回String带有的二进制副本的Long。

描述
将Long变量从二进制复制到


-------------------------------------------------------- KeyPgMklongint ----
MKLongInt   数转字符长整型
 将LongInt变量从二进制复制到String，将其长度设置为8个字节

语法
Declare Function MKLongInt ( ByVal number As LongInt ) As String

用法
result = MKLongInt[$]( number )

参数
number
一个LongInt变量二进制文件复制到一个String。

返回值
返回String带有的二进制副本的LongInt。

描述
将LongInt变量从二进制变量复制


-------------------------------------------------------- KeyPgMks ----
MKS   数转字符单精型
 将Single变量从二进制复制到String，将其长度设置为4个字节

语法
Declare Function MKS ( ByVal number As Single ) As String

用法
result = MKS[$]( number )

参数
number
一个Single变量二进制文件复制到一个String。

返回值
返回String带有的二进制副本的Single。

描述
将Single变量从二进制复制到S


-------------------------------------------------------- KeyPgMkshort ----
MKShort   数转字符短型
 将Short变量从二进制复制到String，将其长度设置为2个字节

语法
Declare Function MKShort ( ByVal number As Short ) As String

用法
result = MKShort[$](number)

参数
number
一个Short变量二进制文件复制到一个String。

返回值
返回String带有的二进制副本的Short。

描述
将SHORT变量的二进制副本复制为?


-------------------------------------------------------- KeyPgModuleConstructor ----
Constructor (Module)   构造函数
 在模块级代码之前指定过程的执行

语法
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

描述
所述Constructor关键字被用于Sub定义（在说明行电平禁止），以在这之前的模块


-------------------------------------------------------- KeyPgModuleDestructor ----
Destructor (Module)   析构函数
 指定程序终止时执行过程

语法
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

描述
定义要从已编译程序的结束代码自动调用的过程。结束代码由编译器生成，并在程序正


-------------------------------------------------------- KeyPgMonth ----
Month   日期取月份
 从日期序列中获取一年中的月份

语法
Declare Function Month ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Month( date_serial )

参数
date_serial
日期

返回值
从包含日期序列 格式的日期的变量中返回月份号 。
月值的范围是1-12，?


-------------------------------------------------------- KeyPgMonthname ----
MonthName   日期月名称
 从其整数表示中获取月份的名称

语法
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

用法
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

参数
month
一年中的月份数-1：1月至12：12月
abbreviate
标志，以指示名称应缩写

返回值
返回month值从1到12 的本地操作系统语言月份名称。

描述
如果abbreviate为true?


-------------------------------------------------------- KeyPgMultikey ----
MultiKey   扫描键码
 通过键盘扫描码检测键的状态。

语法
Declare Function MultiKey ( ByVal scancode As Long ) As Long

用法
result = MultiKey(scancode)

参数
scancode
要检查的密钥的扫描代码。

返回值
返回-1是否按下指定扫描代码的键，否则返回0。

描述
MultiKey是一项功能，可随时检测由扫


-------------------------------------------------------- KeyPgMutexCreate ----
MutexCreate   互斥锁创建
 创建一个用于同步线程执行的互斥锁

语法
Declare Function MutexCreate ( ) As Any Ptr

用法
result = MutexCreate

返回值
创建的互斥锁 的句柄，或者失败时返回空指针（0）。Any Ptr

描述
互斥体是“互斥”的缩写，是一种在线程内同步


-------------------------------------------------------- KeyPgMutexDestroy ----
MutexDestroy   互斥锁销毁
 销毁一个互斥体

语法
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

用法
MutexDestroy( id )

参数
id
互斥锁的句柄将被破坏。Any Ptr

描述
Mutexdestroy丢弃由创建的互斥量MutexCreate。在不再使用任何使用


-------------------------------------------------------- KeyPgMutexLock ----
MutexLock   互斥锁锁住
 获取互斥锁

语法
Declare Sub MutexLock ( ByVal id As Any Ptr )

用法
MutexLock( id )

参数
id
要锁定的互斥锁的句柄。Any Ptr

描述
Mutexlock使用生成的互斥锁“ handle”暂停其他任何线程MutexCreate，?


-------------------------------------------------------- KeyPgMutexUnlock ----
MutexUnlock   互斥锁解锁
 释放互斥锁

语法
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

用法
MutexUnlock( id )

参数
id
互斥锁的手柄将被解锁。Any Ptr

描述
Mutexunlock释放由创建MutexCreate并用锁定的互斥锁“句柄” MutexLock


-------------------------------------------------------- KeyPgNaked ----
Naked   裸代码
 编写没有序言/结尾代码的函数

语法
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

参数
identifier-过程名称。
calling_convention-调用该过程的公约-可以是cdecl，pascal，或stdcall
asm_statements-在过程体的代码。处理参数和返回值的代码必须全部手动完成。请注意，根据调用约定，执行这些操作的方法可以更改。
param_list-要传递给过程


-------------------------------------------------------- KeyPgName ----
Name   
 重命名磁盘上的文件

语法
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

用法
result = Name( oldname, newname )

参数
oldname
现有文件的名称。
newname
文件的新名称。

返回值
0成功 返回零（），失败返回非零。

描述
重命名文件或文件夹原名oldname到newname。
如?


-------------------------------------------------------- KeyPgNamespace ----
Namespace   命名空间
 声明一个名称空间块

语法
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

参数
identifier
命名空间的名称（包括嵌套名称说明符）。
aliasname
命名空间的备用外部名称。

描述
命名空间允许在名称下对诸如对象（预定义的数据?


-------------------------------------------------------- KeyPgNext ----
Next   下步
 控制流语句以标记For...Next循环结束。

语法
Next [ identifier_list ]

描述
指示与匹配For语句关联的语句块的结尾。
如果Next不带identifier_list单独使用时


-------------------------------------------------------- KeyPgNow ----
Now   现在
 获取当前系统时间作为日期序列号 

语法
Declare Function Now ( ) As Double

用法
#include "vbcompat.bi"
result = Now

返回值
返回一个日期序列，其中包含执行时系统的日期和时间。

描述
由于时间是日期序列的小数部分，因此如?


-------------------------------------------------------- KeyPgObject ----
Object   对象
 内置类型提供运行时类型信息

语法
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

用法
Type typename Extends Object
End Type
Dim variable As Object

描述
Object是一种内置类型，它使用为其从其派生的所有类型提供运行时类型信息（RTTI


-------------------------------------------------------- KeyPgOct ----
Oct   八进制
 将数字转换为八进制表示

语法
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String
Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Oct[$]( number [, digits ] )

参数
number
数字或计算为数字的表达式。浮点数将转换为LongInt。
digits
返回的字符串中所需的位数。

返回值
包含的无符号八进制表示形式的字符串number。

描述
返回的无符号八进制


-------------------------------------------------------- KeyPgOffsetof ----
OffsetOf   取偏移值
 返回类型内字段的偏移量。

语法
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname ) 

用法
result = OffsetOf( typename, fieldname )

参数
typename
使用Type...End Type语句定义的类型名称。
fieldname
在类型（或派生类型的基本类型）中定义的字段名称。

描述
对于非派生类型，OffsetOf将以fieldna


-------------------------------------------------------- KeyPgOnerror ----
On Error   在
 设置当前错误处理程序的错误处理语句

语法
On [Local] Error Goto label

参数
label
发生错误时跳转到的标签

描述
发生错误时，打开错误会触发跳转到错误处理程序。此类错误可由诸


-------------------------------------------------------- KeyPgOngosub ----
On...Gosub   
 根据表达式调用标签

语法
On expression GoSub label1[, ...]

描述
根据expression的值分支到不同的标签。表达式值1将分支到第一个标签，值2将分支到第二个


-------------------------------------------------------- KeyPgOngoto ----
On...Goto   
 跳转到基于表达式的标签。

语法
On expression Goto label1[, ...]

描述
根据expression的值分支到不同的标签。表达式值1将分支到第一个标签，值2将分支到第?


-------------------------------------------------------- KeyPgOpAdd ----
Operator + (Addition)   运算符
 对两个表达式求和

语法
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double
Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer
Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs + rhs

参数
lhs
求和的左侧表达式。
rhs
求和的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的和。

描述
当左侧和右侧表达式为数字值时，Operator


-------------------------------------------------------- KeyPgOpAnd ----
Operator And (Conjunction)   运算符
 返回两个数字值的按位与（与）运算

语法
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs And rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的按位与（和）。

描述
此


-------------------------------------------------------- KeyPgOpAndAlso ----
Operator Andalso (Short Circuit Conjunction)   运算符
 返回两个数字的短路和（连接）

语法
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs AndAlso rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的短路和（连接）。

描述
该?


-------------------------------------------------------- KeyPgOpArrayIndex ----
Operator () (Array Index)   运算符
 返回对数组中元素的引用

语法
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

用法
result = lhs ( rhs [, ...] )

参数
lhs
数组。
rhs
数组中元素的索引。
T
任何数据类型。

描述
该运算符返回对数组中元素的引用。对于多维数组，必须指定


-------------------------------------------------------- KeyPgOpAssignment ----
Operator =[>] (Assign)   运算符
 给变量赋值

语法
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs = rhs
要么
lhs => rhs

或者，在 QB 方言中，

[ Let ] lhs = rhs
要么
[ Let ] lhs => rhs

参数
lhs
要分配给的变量。
T1
任何数字，布尔值，字符串或指针类型。
rhs
分配给的值lhs。
T2
任何可转换为的类型T2。

描述
该运算符将其右侧操作数（r


-------------------------------------------------------- KeyPgOpAt ----
Operator @ (Address Of)   运算符
 返回字符串文字，变量，对象或过程的地址

语法
Declare Operator @ ( ByRef rhs As T ) As T Pointer

用法
result = @ rhs

参数
rhs
要检索其地址的字符串文字，变量，对象或过程。
T
任何标准，用户定义或过程类型。

返回值
返回右侧（rhs）操作数的地址。

描述
Operator @（


-------------------------------------------------------- KeyPgOpCast ----
Operator Cast   运算符
 将UDT（用户定义类型）变量转换为指定数据类型的运算符

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }
Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

用法
Cast( datatype, expression )

参数
typename 
的名称Type，Class或Union
datatype 
要转换成的类型的名称，内置数据类型（标准数据类型）或不同于以下内容的UDT typename
expression 
要转换的表达式，是 typename

描述
将一个expres


-------------------------------------------------------- KeyPgOpCombineAdd ----
Operator += (Add And Assign)   运算符
 向变量添加值并为其赋值

语法
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )
Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

用法
lhs += rhs

参数
lhs
要分配给的变量。
T1
任何数字类型。
rhs
要添加到的值lhs。
T2
任何数字类型。
T
任何数据类型。

描述
此运算符将变量添加并分配一个值。它在?


-------------------------------------------------------- KeyPgOpCombineAnd ----
Operator And= (Conjunction And Assign)   运算符
 执行按位与（与）运算并将结果分配给变量

语法
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs And= rhs

参数
lhs
要分配给的变量。
T1
任何数字或布尔类型。
rhs
与进行按位与（和）运算的值lhs。
T2
任何数字或布尔类型。

描述
该运算符执行按位运算，?


-------------------------------------------------------- KeyPgOpCombineConcat ----
Operator &= (Concatenate And Assign)   运算符
 附加一个字符串并将其分配给另一个字符串

语法
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

用法
lhs &= rhs

参数
lhs
要分配给的字符串。
rhs
附加到的值lhs。
T2
可以转换为字符串的任何数字，字符串或用户定义的类型。

描述
此运算符将一个字符串附加


-------------------------------------------------------- KeyPgOpCombineDivide ----
Operator /= (Divide And Assign)   运算符
 相除并给变量赋值

语法
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs /= rhs

参数
lhs
要分配给的变量。
T1
任何数字类型。
rhs
要除以的值lhs。
T2
任何数字类型。

描述
该运算符对变量进行除法并将其分配给变量。它在功能


-------------------------------------------------------- KeyPgOpCombineEqv ----
Operator Eqv= (Equivalence And Assign)   运算符
 执行按位等效（等效）并将结果分配给变量

语法
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Eqv= rhs

参数
lhs
要分配给的变量。
T1
任何数字或布尔类型。
rhs
用进行按位等效的值lhs。
T2
任何数字或布尔类型。

描述
该运算符执行按位等效运算，?


-------------------------------------------------------- KeyPgOpCombineExponentiate ----
Operator ^= (Exponentiate And Assign)   运算符
 对变量求幂并为其赋值

语法
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

用法
lhs ^= rhs

参数
lhs
要分配给的变量。
rhs
要lhs乘以的值。

描述
该运算符对变量取幂并为其赋值。它在功能上等同于：
lhs = lhs 


-------------------------------------------------------- KeyPgOpCombineImp ----
Operator Imp= (Implication And Assign)   运算符
 执行逐位隐式（蕴含）并将结果分配给变量

语法
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Imp= rhs

参数
lhs
要分配给的变量。
T1
任何数字或布尔类型。
rhs
用进行按位隐含（蕴含）的值lhs。
T2
任何数字或布尔类型。

描述
该运算符执行逐位imp运算


-------------------------------------------------------- KeyPgOpCombineIntegerDivide ----
Operator \= (Integer Divide And Assign)   运算符
 整数除法并将值分配给变量

语法
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs \= rhs

参数
lhs
要分配给的变量。
T1
任何数字类型。
rhs
要除以的值lhs。
T2
任何数字类型。

描述
该运算符乘以一个变量并为其分配一个值。它在功


-------------------------------------------------------- KeyPgOpCombineModulus ----
Operator Mod= (Modulus And Assign)   运算符
 除以一个值，并将余数分配给一个变量

语法
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

用法
lhs Mod= rhs

参数
lhs
要分配给的变量。
rhs
要除以的值lhs。

描述
该运算符将两个Integer类型的值相除，并将余数赋给其左侧


-------------------------------------------------------- KeyPgOpCombineMultiply ----
Operator *= (Multiply And Assign)   运算符
 相乘并为变量赋值

语法
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs *= rhs

参数
lhs
要分配给的变量。
T1
任何数字类型。
rhs
要乘以的值lhs。
T2
任何数字类型。

描述
该运算符乘以一个变量并为其分配一个值。它在功能上


-------------------------------------------------------- KeyPgOpCombineOr ----
Operator Or= (Inclusive Disjunction And Assign)   运算符
 执行按位或（包括）运算，并将结果分配给变量

语法
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Or= rhs

参数
lhs
要分配给的变量。
T1
任何数字或布尔类型。
rhs
用进行按位或（包括相加）的值lhs。
T2
任何数字或布尔类型。

描述
该运算符执行按位或运


-------------------------------------------------------- KeyPgOpCombineShiftLeft ----
Operator Shl= (Shift Left And Assign)   运算符
向左移动并为变量分配值

语法
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shl= rhs

参数
lhs
要分配给的变量。
rhs
lhs向左移动的值。

描述
该运算符将其左侧（lhs）参数中的位移位由其右侧（）参数指定?


-------------------------------------------------------- KeyPgOpCombineShiftRight ----
Operator Shr= (Shift Right And Assign)   运算符
 向右移动并为变量分配值

语法
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shr= rhs

参数
lhs
要分配给的变量。
rhs
lhs向右移动的值。

描述
该运算符将其左侧（lhs）参数中的位移位由其右侧（）参数指定?


-------------------------------------------------------- KeyPgOpCombineSub ----
Operator -= (Subtract And Assign)   运算符
 减去并为变量赋值

语法
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

用法
lhs -= rhs

参数
lhs
要分配给的变量。
T1
任何数字类型。
rhs
要从中减去的值lhs。
T2
任何数字类型。
T
任何数据类型。

描述
该运算符减去并为变量分配一个值。它在功?


-------------------------------------------------------- KeyPgOpCombineXor ----
Operator Xor= (Exclusive Disjunction And Assign)   运算符
 执行按位异或（异或）并将结果分配给变量

语法
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Xor= rhs

参数
lhs
要分配给的变量。
T1
任何数字或布尔类型。
rhs
用进行按位异或（异或）的值lhs。
T2
任何数字或布尔类型。

描述
该运算符执行按位或运算?


-------------------------------------------------------- KeyPgOpConcat ----
Operator + (String Concatenation)   运算符
 连接两个字符串

语法
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

用法
result = lhs + rhs

参数
lhs
要连接的左侧字符串。
rhs
要连接的右侧字符串。

描述
该运算符连接两个字符串。与运算符＆（带有转换的字符串连接?


-------------------------------------------------------- KeyPgOpConcatConvert ----
Operator & (String Concatenation With Conversion)   运算符
 连接两个字符串，根据需要将非字符串转换为字符串

语法
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

用法
result = lhs & rhs

参数
lhs
要连接的左侧表达式。
T
可以转换为标准数据类型的任何标准数据类型或用户定义类型。
rhs
要连接的右侧表达式。
U
可以转换为标准数据类型的任何标准数据类型或用户定义类型。
V
结果字符串类


-------------------------------------------------------- KeyPgOpDelete ----
Operator Delete Statement   运算符
 运算符销毁与 Operator New Expression

用法
Delete buf
or
Delete[] buf

参数
buf 
指向由New Expression操作员或New[] Expression操作员分配的内存的指针，即操作员的数组版本New Expression（必须根据要删除的数据类型提供类型化的指针）。

描述
的Delete Statement操作者用来?


-------------------------------------------------------- KeyPgOpDeleteOverload ----
Operator Delete Overload   运算符
 Operator Delete Statement当应用于UDT（用户定义类型）时， 成员运算符将使提供的内存重分配过程部分过载。

语法
Declare Operator Delete ( buf As Any Ptr )
Declare Operator delete[] ( buf As Any Ptr )

参数
buf 
指向由一个New Overload或多个New[] Overload运算符分配的内存的指针，即运算符的数组版本New Overload。

描述
当应用于UDT（用户定?


-------------------------------------------------------- KeyPgOpDivide ----
Operator / (Divide)   运算符
 除以两个数值表达式

语法
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs / rhs

参数
lhs
左侧的分红表达式。
rhs
右边的除数表达式。

返回值
返回除数和除数的商。

描述
Operator /（除法）返回除数和除数的商。
这两


-------------------------------------------------------- KeyPgOpen ----
Open   文件打开
 打开磁盘文件以使用文件操作进行读取或写入

语法
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber
Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

用法
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
要么
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
要么
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len = record_length] )
要么
Open filename For {Input|Output|Append} As filenumber
要么
Open filename For Binary Access {Read|Write} As filenumber
要么
Open filename For Random Access {Read|Write} As filenumber [Len = record_length]

参数
filename
要打开的磁盘文件名称的字符串值。相对文件路径是相对于当前目录的（请参阅参考资料CurDir）。
encoding_type
读取或写入文本时使用的编码可以是以下之一：
Encoding "ascii" （默认使用ASCII编码）
Encoding "utf8" （使用8位Unicode编码）
Encoding "utf16" （使用16位Unicode编码）
Encoding "utf32" （使用32位Unicode编码）
access_type
调用进程请求的访问类型。
Access[ Read] [ Write] （可以使用读写访问权限，这是默认设置）
lock_type
对来自其他进程（线程或程序）的磁盘文件访问施加限制，可以是：
Shared （该文件可以由其他进程自由访问）
Lock[ Read] [ Write] （可以拒绝其他进程进行读写访问）
filenumber
可用文件号绑?


-------------------------------------------------------- KeyPgOpenCom ----
Open Com   文件打开
 打开用于输入和输出的串行端口

语法
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

用法
result = Open Com( options[,] As[#] filenumber )

参数
options
一个字符串，其中包含用于控制端口的选项。
filenumber
绑定到端口的文件号。

返回值
Open Com()返回32位Long：0成功则返回零（），否则返回非零错误代码。

描述
这个命令打开


-------------------------------------------------------- KeyPgOpenCons ----
Open Cons   文件打开
 打开控制台的标准输入（stdin）或输出（stdout）流，以用于文件操作。

语法
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

用法
result = Open Cons( [For {Input|Output}[,]] As filenumber )
（或使用类似QB的语法，）
Open Cons [For {Input|Output}] As filenumber

参数
filenumber
可用文件编号绑定到stdin或stdout流，可通过找到FreeFile。

返回值
在第一种用法中，Open Cons()返回32位Long：成功时返回零（0），否则返回非零错误代码。



-------------------------------------------------------- KeyPgOpenErr ----
Open Err   文件打开
 同时打开标准输入（stdin）和标准错误（stderr）流以进行文件操作。

语法
Open Err [for mode] As [#]filenumber As Long

用法
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

参数
mode
忽略了。
filenumber
未使用的文件号。

返回值
32位Long：如果Open Err()成功完成，则返回零，否则返回非零值以指示失败。

描述
该命令打开stdin


-------------------------------------------------------- KeyPgOpenLpt ----
Open Lpt   文件打开
 打开打印机设备

语法
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

用法
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

参数
x
指定端口号。如果省略，输出将发送到系统后台打印程序。
Printer_Name
要打开的打印机的名称。在DOS上将忽略此参数。
TITLE=Doc_Title
后台打印程序看到的打印作业的标题。在DOS上将忽略此参数。
EMU=TTY
使用驱动程序文本映像在Windows GDI打印机上模拟TTY输出。在DOS和Linux上，将忽略此参数。
For Input|Output
子句允许兼容，但将被忽略。
filenumber
分配给设备的未使用的文件号。

返回?


-------------------------------------------------------- KeyPgOpenPipe ----
Open Pipe   文件打开
 打开外部进程的标准输入（stdin）或输出（stdout）流以进行文件操作。

语法
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

用法
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
要么，
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
（或使用类似QB的语法）
Open Pipe filename For {Input|Output} As filenumber
（要么，）
Open Pipe filename For Binary access_type As filenumber

参数
shell_command
在操作系统命令外壳中执行的外部进程。相对文件路径是相对于当前目录的（请参阅参考资料CurDir）。为需要在其可执行路径或其参数中使用双引号的进程打开管道时，应将整个管道字符串嵌套在双引号内。
access_type
调用进程请求的读取或写入访问的类型。
Access{ Read| Write} （可以打开外部进程的 stdin 或 stdout 流）
filenumber
绑定到外部进程?


-------------------------------------------------------- KeyPgOpenScrn ----
Open Scrn   文件打开
 直接打开控制台以输入和输出为文件

语法
Open Scrn [for mode] As [#]filenumber As Long

用法
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

参数
mode
无论是Input或Output。如果省略，Output则假定为。
filenumber
未使用的文件号。

返回值
32位Long：0如果Open Scrn()成功完成，则返回零（），否则返回非零值以指示失败。

描述
该命令将打开


-------------------------------------------------------- KeyPgOpEqual ----
Operator = (Equal)   运算符
 比较两个表达式是否相等

语法
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer
Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer
Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer
Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs = rhs

参数
lhs
要比较的左侧表达式。
rhs
要比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式相等，则返回负一（-1）；如果不相等，则返回零（0）。

描述
Operator =（Eq


-------------------------------------------------------- KeyPgOpEqv ----
Operator Eqv (Equivalence)   运算符
 返回两个数值的按位与（对等）

语法
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Eqv rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的按位等效性。

描述
该运?


-------------------------------------------------------- KeyPgOperator ----
Operator   运算符
 声明或定义重载运算符。

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf As Any Ptr )
Declare Operator Delete[] ( buf As Any Ptr )
End { Type | Class | Union }
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }
Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype
Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator [] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf As Any Ptr ) [ Export ]

参数
typename 
的名称Type，Class，Union，或Enum。
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

描述
在表达式中使用 内置的运算符=（+，，和）时cast具有预定义的行为。这些


-------------------------------------------------------- KeyPgOpExponentiate ----
Operator ^ (Exponentiate)   运算符
 将数字表达式提高到一定的幂

语法
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs ^ rhs

参数
lhs
左侧基本表达式。
rhs
右侧指数表达式。

返回值
返回基本表达式的指数乘幂。

描述
Operator ^（Exponentiate）将基础表达式?


-------------------------------------------------------- KeyPgOpFor ----
Operator For (Iteration)   运算符
 使用For...Next用户定义的类型变量声明或定义循环使用的运算符

语法
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
typename
的名称Type，Class或Union
stp， step_value
typename用作增量值的对象
iterator
typename用作迭代器的对象
end_value
typename用作循环终止值的对象
start_value
typename最初用于复制构造或分配给迭代器的对象

描述
Operator F


-------------------------------------------------------- KeyPgOpGreaterThan ----
Operator > (Greater Than)   运算符
 比较一个大于另一个表达式的表达式

语法
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer
Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer
Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer
Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs > rhs

参数
lhs
要比较的左侧表达式。
rhs
要比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于右侧表达式，则返回负一（-1）；如果小于或等于，则返回零（0）。

描述



-------------------------------------------------------- KeyPgOpGreaterThanOrEqual ----
Operator >= (Greater Than Or Equal)   运算符
 比较一个大于或等于另一个表达式的表达式

语法
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer
Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer
Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer
Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs >= rhs

参数
lhs
要比较的左侧表达式。
rhs
要比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于或等于右侧表达式，则返回负一（-1）；如果小于或等于零，则返回负（0）。




-------------------------------------------------------- KeyPgOpImp ----
Operator Imp (Implication)   运算符
 返回两个数值的按位和（含）

语法
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Imp rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的按位求和。

描述
该运算?


-------------------------------------------------------- KeyPgOpIntegerDivide ----
Operator \ (Integer Divide)   运算符
 分为两个Integer表达式

语法
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs \ rhs

参数
lhs
左侧的分红表达式。
rhs
右边的除数表达式。

返回值
返回Integer除数和除数的商。

描述
Operator \（整数除法）将两个Integer表达式相除?


-------------------------------------------------------- KeyPgOpIs ----
Operator Is (Run-Time Type Information)   运算符
 检查对象是否与从其编译时类型派生的类型兼容
（在继承的上下文中）

语法
result = expression Is typename

参数
expression
要检查的表达式，一种类型的对象，该类型直接或间接地从Objectusing 派生Extends。
typename
要检查的孩子类型。此类型必须直接或间接从表达式的类型（对象的编译时类型）派生。

返回值
-1如果表达式是实型对象typename或其派生自表达式类型的基本类型之一?


-------------------------------------------------------- KeyPgOpLessThan ----
Operator < (Less Than)   运算符
 比较一个表达式小于另一个表达式

语法
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer
Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer
Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer
Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs < rhs

参数
lhs
要比较的左侧表达式。
rhs
要比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于右侧表达式，则返回负一（-1）；如果大于或等于，则返回零（0）。

描述
O


-------------------------------------------------------- KeyPgOpLessThanOrEqual ----
Operator <= (Less Than Or Equal)   运算符
 比较一个小于或等于另一个表达式的表达式

语法
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer
Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer
Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer
Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs <= rhs

参数
lhs
要比较的左侧表达式。
rhs
要比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于或等于右侧表达式，则返回负一（-1）；如果大于或等于零，则返回负（0）。




-------------------------------------------------------- KeyPgOpLet ----
Operator Let (Assign)   运算符
 在重载运算符=（Assignment）时指示赋值运算符

语法
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

用法
lhs = rhs
要么
lhs => rhs

参数
typename 
名Type，Class或Union。
lhs
要分配给的变量。
rhs
要分配的值。

描述
Let用于重载Operator =[>] (Assignment)运算符并将?


-------------------------------------------------------- KeyPgOpLetlist ----
Operator Let() (Assignment)   运算符
 将用户定义类型的字段分配给变量列表

语法
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
要么
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

参数
variable1 [, variable2 [, ... ]]
以逗号分隔的变量列表，以接收UDT变量字段的值。
UDT_var
用户定义的类型变量。

描述
将UDT_var变量字段中的值分配给变量列?


-------------------------------------------------------- KeyPgOpMemberAccess ----
Operator . (Member Access)   运算符
 从对对象的引用中返回对成员的引用

语法
Declare Operator . ( ByRef lhs As T ) ByRef As U

用法
result = lhs . rhs

参数
lhs
一个东西。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
rhs引用的类型。

返回值
返回对所指定成员的引用rhs。

描述
Operator .（成员访?


-------------------------------------------------------- KeyPgOpModulus ----
Operator Mod (Modulus)   运算符
 从除法运算中找到余数

语法
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

用法
result = lhs Mod rhs

参数
lhs
左侧的分红表达式。
rhs
右边的除数表达式。

返回值
返回除法运算的其余部分。

描述
Operator Mod（模数）将两个Integer表达式相


-------------------------------------------------------- KeyPgOpMultiply ----
Operator * (Multiply)   运算符
 将两个数值表达式相乘

语法
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs * rhs

参数
lhs
左侧被乘数表达式。
rhs
右边的被乘数表达式。

返回值
返回两个被乘数的乘积。

描述
Operator *（?


-------------------------------------------------------- KeyPgOpNegate ----
Operator - (Negate)   运算符
 更改数字表达式的符号

语法
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

用法
result = - rhs

参数
rhs
求反的右侧数字表达式。

返回值
返回表达式的负数。

描述
Operator -（取反）?


-------------------------------------------------------- KeyPgOpNew ----
Operator New Expression   运算符
 运算符动态分配内存并构造指定类型的数据。

用法
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

参数
datatype
要创建的数据类型的名称。
initializers
变量的初始值。
count
要分配的元素的确切数量。

返回值
指向新分配的数据的datatype类型的指针；如果内存分配失败，则为null指针。

描述
的N


-------------------------------------------------------- KeyPgOpNewOverload ----
Operator New Overload   运算符
 成员运算符将重载Operator New Expression应用于UDT（用户定义类型）时提供的动态内存分配过程部分。

语法
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

参数
size 
要分配的字节数。
返回值
指向新分配的内存的开头的Any Ptr类型的指针。

描述
当应用于UDT（用户定义类


-------------------------------------------------------- KeyPgOpNext ----
Operator Next (Iteration)   运算符
 确定是否For...Next应终止循环

语法
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
typename
的名称Type，Class或Union
cond， end_value
typename用作循环终止值的对象
stp， step_value
typename用作增量值的对象
iterator
typename用作迭代器的对象
start_value
typename最初用于复制构造或分配给迭代器的对象

描述
Operator For，Operator N


-------------------------------------------------------- KeyPgOpNot ----
Operator Not (Complement)   运算符
 返回数值的按位非（补）

语法
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer
Declare Operator Not ( ByRef rhs As T ) As T

用法
result = Not rhs

参数
rhs
右侧表达。
T
任何数字或布尔类型。

返回值
返回其操作数的按位补码。

描述
该运算符返回其操作数的按位补码，这是一种逻?


-------------------------------------------------------- KeyPgOpNotEqual ----
Operator <> (Not Equal)   运算符
 比较两个表达式的不等式

语法
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer
Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer
Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer
Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs <> rhs

参数
lhs
要比较的左侧表达式。
rhs
要比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式不相等，则返回负一（-1）；如果相等，则返回零（0）。

描述
Operator <>（?


-------------------------------------------------------- KeyPgOpOr ----
Operator Or (Inclusive Disjunction)   运算符
 返回两个数字值的按位或（含和）

语法
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Or rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的按位和。

描述
该运算


-------------------------------------------------------- KeyPgOpOrElse ----
Operator Orelse (Short Circuit Inclusive Disjunction)   运算符
 返回两个数字的短路或（包含异或）

语法
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs OrElse rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的短路或（含或）。

描述
?


-------------------------------------------------------- KeyPgOpPlacementNew ----
Operator Placement New   运算符
 运算符，用于在指定的内存地址处构造对象。

语法
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

参数
address 
内存中要构造的位置。括号不是可选的。
initializers
变量的初始值。
datatype
要构造的数据类型的名称。
count
要构造的元素数。

返回值
指向datatype新构造数据的类型的指针。

描述
的Pl


-------------------------------------------------------- KeyPgOpPpConcat ----
Operator ## (Preprocessor Concatenate)   运算符
 预处理程序运算符以连接字符串

语法
text##text

描述
该运算符通过将文本的两侧串联在一起来创建新的令牌。该文本可以被其他宏


-------------------------------------------------------- KeyPgOpPpEscape ----
Operator ! (Escaped String Literal)   运算符
 明确指示应为转义序列处理字符串文字。

语法
!"text"

参数
!
预处理程序转义的字符串运算符
"text" 
包含转义字符的字符串文字

描述
该运算符明确指示应处理转义序列后的字符串文


-------------------------------------------------------- KeyPgOpPpNoescape ----
Operator $ (Non-Escaped String Literal)   运算符
 明确指示不应为转义序列处理字符串文字。

语法
$"text"

参数
$
预处理程序非转义运算符
"text" 
字符串文字

描述
该运算符明确指示不应对转义序列后面的字符串文字（用?


-------------------------------------------------------- KeyPgOpPpStringize ----
Operator # (Preprocessor Stringize)   运算符
 预处理运算符，用于将宏参数转换为字符串

语法
#macro_argument

描述
该运算符将转换macro_argument为一个字符串，其值是参数的名称。这种替换?


-------------------------------------------------------- KeyPgOpProcptr ----
Operator Procptr (Procedure Pointer)   运算符
 返回过程的地址

语法
Declare Operator ProcPtr ( ByRef lhs As T ) As T Ptr

用法
result = ProcPtr ( lhs )

参数
lhs
一个过程。
T
程序类型。

返回值
返回过程的地址。

描述
该运算符返回a Sub或Function过程?


-------------------------------------------------------- KeyPgOpPtrIndex ----
Operator [] (Pointer Index)   运算符
 返回对地址的内存偏移量的引用

语法
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T

用法
result = lhs [ rhs ]

参数
lhs
基址。
rhs
与的有符号偏移量lhs。
T
任何数据类型。

描述
该运算符返回对一个值的引用，该值在内存中距基址有一?


-------------------------------------------------------- KeyPgOpPtrMemberAccess ----
Operator -> (Pointer To Member Access)   运算符
 从指向对象的指针返回对成员的引用

语法
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

用法
result = lhs -> rhs

参数
lhs
对象的地址。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
rhs引用的类型。

返回值
返回对所指定成员的引用rhs。

描述
Operator ->（指向成员访


-------------------------------------------------------- KeyPgOpShiftLeft ----
Operator Shl (Shift Left)   运算符
 将数字表达式的位向左移动

语法
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs Shl rhs

参数
lhs
左侧表达式。
rhs
右侧移位表达式。

返回值
返回lhs左移rhs次数的结果。

描述
Operator Shl（向左移动）将左侧表达式（lhs）中


-------------------------------------------------------- KeyPgOpShiftRight ----
Operator Shr (Shift Right)   运算符
 将数字表达式的位向右移动

语法
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs Shr rhs

参数
lhs
左侧表达式。
rhs
右侧移位表达式。

返回值
返回lhs右移rhs次数的结果。

描述
Operator Shr（向右移动）将左侧表达式（lhs）中


-------------------------------------------------------- KeyPgOpStep ----
Operator Step (Iteration)   运算符
 增加For...Next循环的迭代器

语法
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
typename
的名称Type，Class或Union
stp， step_value
typename用作增量值的对象
iterator
typename用作迭代器的对象
end_value
typename用作循环终止值的对象
start_value
typename最初用于复制构造或分配给迭代器的对象

描述
Operator For，Operator Nex


-------------------------------------------------------- KeyPgOpStringIndex ----
Operator [] (String Index)   运算符
 返回对字符串中字符的引用

语法
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

用法
result = lhs [ rhs ]

参数
lhs
字符串（字符串引用，不是作为本地副本返回的字符串）。
rhs
从第一个字符开始的从零开始的偏移量。
T
宽字符类型（因平台而异）。

描述
此运算符返回对?


-------------------------------------------------------- KeyPgOpStrptr ----
Operator Strptr (String Pointer)   运算符
 返回字符串的字符数据的地址。

语法
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

用法
result = StrPtr ( lhs )

参数
lhs
一个字符串。

返回值
返回字符串/ wstring的字符数据的a（如果为空，则返回null值）。ZString/WString Ptr

描述
该运算符返回一个指向字符串/ wstring字?


-------------------------------------------------------- KeyPgOpSubtract ----
Operator - (Subtract)   运算符
 减去两个表达式

语法
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs -- rhs

参数
lhs
要减去的左侧表达式。
rhs
右边的表达式减去。
T
任何指针类型。

返回值
返回两个表达式的减法。

描述
当左侧和右侧表达式是数字值时，Operato


-------------------------------------------------------- KeyPgOption ----
Option()   
 指定符号的其他属性和/或特征。

语法
Option( "literal-text" )

参数
literal-text
指定选项的文字文本。参见说明。

描述
Option()允许程序员指定其他属性或特征。语法中要求将字符串括在


-------------------------------------------------------- KeyPgOptionbase ----
Option Base   选项
 指定数组声明的默认下限

语法
Option Base base_subscript

参数
base_subscript
数字文字值

描述
Option Base是为以下任何数组声明设置默认下限的语句。该默认值对于使用该模


-------------------------------------------------------- KeyPgOptionbyval ----
Option ByVal   选项
 指定默认情况下在过程声明中按值传递参数

语法
Option ByVal

描述
Option ByVal是一条语句，用于将过程参数的默认传递约定设置为按值，就像用


-------------------------------------------------------- KeyPgOptiondynamic ----
Option Dynamic   选项
 指定可变长度数组声明

语法
Option Dynamic

描述
Option Dynamic是一条语句，用于指定以下任何数组声明都是可变长度的，无论它们是否?


-------------------------------------------------------- KeyPgOptionescape ----
Option Escape   选项
 指定默认情况下应为类似C的转义序列处理字符串文字

语法
Option Escape

描述
Option Escape是一条语句，默认情况下，该语句使字符串文字针对类C的转


-------------------------------------------------------- KeyPgOptionexplicit ----
Option Explicit   选项
 强制在使用变量，对象和数组之前对其进行声明

语法
Option Explicit

描述
Option Explicit是一条语句，它强制所有随后的变量，对象或数组用法前面?


-------------------------------------------------------- KeyPgOptiongosub ----
Option Gosub   选项
 启用对GoSub和的支持On Gosub。

语法
Option Gosub

描述
Option Gosub启用对GoSub和的支持Return（来自gosub）。
因为这Return可能意味着要退?


-------------------------------------------------------- KeyPgOptionnogosub ----
Option Nogosub   选项
 禁用对GoSub和的支持On Gosub。

语法
Option Nogosub

描述
Option Nogosub禁用对GoSuband的支持Return（来自gosub）。
因为这Return可能意味着要


-------------------------------------------------------- KeyPgOptionnokeyword ----
Option NoKeyword   选项
 “取消定义”保留关键字

语法
Option NoKeyword keyword

参数
keyword
要取消定义的关键字

描述
Option NoKeyword是一个未定义FreeBASIC保留关键字的语句，这意味着它可


-------------------------------------------------------- KeyPgOptionprivate ----
Option Private   选项
 默认情况下为过程声明指定内部链接

语法
Option Private

描述
Option Private是一条语句，默认情况下会给以下任何过程声明内部链接，就像用?


-------------------------------------------------------- KeyPgOptionstatic ----
Option Static   选项
 恢复为默认的数组声明行为

语法
Option Static

描述
Option Static是一条覆盖行为的语句Option Dynamic，也就是说，用恒定下标范围声明


-------------------------------------------------------- KeyPgOpValueOf ----
Operator * (Value Of)   运算符
 解引用指针

语法
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T

用法
result = * rhs

参数
rhs
要取消引用的地址。
T
任何标准，用户定义或过程类型。

返回值
返回对该地址存储的值的引用rhs。

描述
Operator *（值of）返回对存储在地址中的


-------------------------------------------------------- KeyPgOpVarptr ----
Operator Varptr (Variable Pointer)   运算符
 返回变量或对象的地址

语法
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

语法
result = VarPtr ( lhs )

参数
lhs
变量或对象。
T
任何数据类型。

返回值
返回变量或对象的地址。

描述
该运算符返回其操作数的地址。
当操作数的类型为?


-------------------------------------------------------- KeyPgOpXor ----
Operator Xor (Exclusive Disjunction)   运算符
 返回两个数值的按位异或（异或）

语法
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Xor rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达。
T2
任何数字或布尔类型。
Ret
一个数字或布尔类型（具有变化T1和T2）。

返回值
返回两个操作数的按位异或。

描述
该运?


-------------------------------------------------------- KeyPgOrGfx ----
Or   或
 Put图形语句的 参数，使用按位Or作为blitting方法

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

参数
Or
需要。

描述
该Or方法使用逐位Or函数将每个源像素与相应的目标像素合并。其结果作为目?


-------------------------------------------------------- KeyPgOut ----
Out   端口输出
 将值输出到硬件端口。

语法
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

用法
Out port,value

参数
port
要写入的硬件端口。
data
要写入的数?


-------------------------------------------------------- KeyPgOutput ----
Output   输出
 指定要为输出模式打开的文本文件

语法
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
打开输出的文件名
encoding_type
指示文件的编码类型
lock_type
文件打开时使用的锁定
filenum
与打开的文件关联的未使用的文件号

描述
用于Open打开文本文件进行写入?


-------------------------------------------------------- KeyPgOverload ----
Overload   对象重载
 指定过程名称可以重载

语法
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub
[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
..procedure body..
End Function

描述
在过程声明中，Overload允许过程名称被重载，也就是说，如果其他过程（无论是子程?


-------------------------------------------------------- KeyPgOverride ----
Override   对象覆盖
 方法属性；指定方法必须重写虚拟方法

语法
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

描述
在方法声明中，Override可用于指示该方法应从基类覆盖Virtual或Abstract方?


-------------------------------------------------------- KeyPgPaint ----
Paint   填充
 填充由指定颜色的边框界定的区域

语法
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

参数
target
指定要绘制的缓冲区。 
STEP
表示坐标是相对的
(x, y)
要在其上开始填充的像素的坐标（绘制）
paint
color属性或填充图案
，数值表示颜色，而字符串表示填充图案
border_color
填充的边界颜色

描述
图形


-------------------------------------------------------- KeyPgPalette ----
Palette   调色模式
 在具有调色板颜色的模式下自定义颜色

语法
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

参数
Get
表示获取调色板信息，而不是设置调色板信息
index
调色板索引
color
颜色属性
r
红色分量
g
绿色成分
b
蓝色分量
Using
表示使用颜色值数组
arrayname(idx)
数组和索引以获取/设置颜色属性

描述
该Pa


-------------------------------------------------------- KeyPgPascal ----
pascal   pascal
 在过程声明中 指定Pascal样式的调用约定

语法
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，pascal指定过程将使用pascal调用约定。在Pascal调用约定中，所有参


-------------------------------------------------------- KeyPgPcopy ----
PCopy   复制P模式
 将一个图形或文本页面复制到另一个

语法
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

用法
PCopy [ source ] [, destination ]

参数
source
要复制的页面
destination
复制到的页面

返回值
0如果成功，则 返回零（），否则返回非零错误代码以指示失败。

描述
将一个图形或文本视频页面


-------------------------------------------------------- KeyPgPeek ----
Peek   内存取地址
 获取内存中某个地址的任意类型的值

语法
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

用法
Peek( [ datatype, ] address )

参数
address
从中获取值的内存中的地址。
datatype
要获取的值的类型。如果省略，UByte则假定为。

描述
此过程返回对由内存地址给定的内存中


-------------------------------------------------------- KeyPgPmap ----
PMap   映射P模式
 在视图和物理映射之间映射坐标。

语法
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

用法
result = PMap( coord, func )

参数
coord
表示要映射的坐标的表达式。
func
要应用于给定坐标的映射函数编号。

返回值
映射的坐标值。

描述
此函数在视图（由Window语句定?


-------------------------------------------------------- KeyPgPoint ----
Point   点
 返回指定像素坐标的颜色属性

语法
result = Point( coord_x, coord_y [,buffer] )
or 
result = Point( function_index )

用法
coord_x
像素的x坐标
coord_y
像素的y坐标
buffer
要读取的图像缓冲区
function_index
屏幕类型坐标返回：值之一0，1，2，3

返回值
返回数据类型始终为Integer。
如果提供了像素坐标，则将指定坐标处的color属性作为8 bpp索引模式下的8位调色板索引返回16 bpp模式下的24位RGB值（未使用的整数的高8位， R，G，B的精度）和32位bpp模式下的32位RGB或RGBA值（高8位未使用或保留Alpha）。请注意，它不会返回16位值（5位R + 6位G + 5位B）。 如果参数是函数索引，则返回最后一个图形命令设置的图形光标坐标之一。x, yPoint
Point

争论返回值 
0当前的物理x坐标。



-------------------------------------------------------- KeyPgPointCoord ----
PointCoord   点坐标
 Draw图形模式下 查询笔的位置

语法
Declare Function PointCoord( ByVal func As Long ) As Single

用法
result = PointCoord( func )

描述
该PointCoord功能可用于Draw在图形模式下查询笔的x和y位置。该结果值取决于通过F


-------------------------------------------------------- KeyPgPoke ----
Poke   内存读址
 为内存中的位置分配一个值。

语法
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

用法
Poke [ datatype, ] address, value

参数
datatype
指定地址上的数据类型。如果省略，UByte则假定为。
address
分配给内存中的位置。
value
要分配的值。

描述
Poke为内存中的位置分配一个值。相?


-------------------------------------------------------- KeyPgPos ----
Pos   位置
 返回文本光标的水平位置（从左到右）

语法
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

用法
result = Pos[ ( dummy ) ]

参数
dummy
保留了未使用的参数，以便与QBASIC向后兼容。

返回值
返回文本光


-------------------------------------------------------- KeyPgPpassert ----
#assert   #编译中断
 预处理器条件指令

语法
#assert condition

参数
condition
假定为真的条件表达式

描述
在编译时声明条件表达式的真相。如果condition为false，编译将因错误而?


-------------------------------------------------------- KeyPgPpdefine ----
#define   #预定义
 用于定义宏的预处理指令

语法
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

描述
#define允许声明基于文本的预处理器宏。一旦编译器已经出现了#define，它会开始替?


-------------------------------------------------------- KeyPgPpelse ----
#else   #否则
 预处理器条件指令

语法
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

描述
可以将#else添加到，或块中#if，以为?


-------------------------------------------------------- KeyPgPpelseif ----
#elseif   #又如
 预处理器条件指令

语法
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

描述
可以将#elseif添


-------------------------------------------------------- KeyPgPpendif ----
#endif   #结束如果
 预处理器条件指令

语法
#endif

描述
端部的一组条件指令的
查看#


-------------------------------------------------------- KeyPgPperror ----
#error   #错误
 预处理程序诊断指令

语法
#error error_text

参数
error_text
显示信息

描述
#error中断编译以error_text在编译器找到它时显示，然后继续解析。
此关键字必


-------------------------------------------------------- KeyPgPpif ----
#if   #如果
 预处理器条件指令

语法
#if (expression)
' Conditionally included statements
#endif

描述
在编译时有条件地包含语句。如果计算为True（非零），则包含/ 块中包含的
语句；如果?


-------------------------------------------------------- KeyPgPpifdef ----
#ifdef   #如果定义
 预处理器条件指令

语法
#ifdef symbol
' Conditionally included statements
#endif

描述
在编译时有条件地包含语句。如果已定义，则包含块中的
语句；如果未定义，则排除（?


-------------------------------------------------------- KeyPgPpifndef ----
#ifndef   #如果未定义
 预处理器条件指令

语法
#ifndef symbol
' Conditionally included statements
#endif

描述
在编译时有条件地包含语句。如果未定义，则包含块中的
语句；如果定义了符号，则排


-------------------------------------------------------- KeyPgPplang ----
#lang   #语言
 用于设置编译器方言的预处理器语句。

语法
#lang "lang"

参数
"lang"
该方言集，双引号括起来，而且必须是一"fb"，"fblite"，"qb"，或"deprecated"。

描述
如果在命令行上未提供-forcelang选项，#lang则可以


-------------------------------------------------------- KeyPgPplibpath ----
#libpath   #库路径
 预处理程序语句以添加库的搜索路径

语法
#libpath "path"

描述
将库搜索路径添加到链接器的搜索路径列表中，就好像在命令行中使用“ -p”选?


-------------------------------------------------------- KeyPgPpline ----
#line   #行号
 预处理器指令设置当前行号和文件名

语法
#line number [ "name" ]

参数
number 
新行号
"name"
新文件名（可选）

描述
通知编译器行号和文件名的更改，并相应地更新__FILE__和__LINE__


-------------------------------------------------------- KeyPgPpmacro ----
#Macro...#Endmacro   
 用于定义多行宏的预处理指令

语法
#macro identifier( [ parameters ] )
body
#endmacro
#macro identifier( [ parameters, ] Variadic_Parameter... )
body
#endmacro

描述
#macro


-------------------------------------------------------- KeyPgPpprint ----
#print   #输出
 预处理程序诊断指令

语法
#print text

描述
使编译?


-------------------------------------------------------- KeyPgPpundef ----
#undef   #取消定义
 预处理器指令取消定义宏

语法
#undef symbol

描述
未定义先前用定义的符号#define。
可以用来确保宏或符号的寿命有限，并且不会与?


-------------------------------------------------------- KeyPgPragma ----
#pragma   #兼容设定
 预处理程序指令

语法
#pragma option [ = value ]
或或
#pragma push ( option [, value ] )
#pragma pop ( option )

参数
option和相关values的 可能值：

选项值描述
msbitfields0使用与gcc兼容的位域（默认）
 -1（或任何其他非零值）使用与Microsoft C编译器中使用的位域兼容的位域
Once不适用导致杂物在其中看起来像#include一次包含在内的源文件一样运行...
constness0导致在其中出现编译指示的源文件禁用“ CONST限定符已丢弃”警告
 -1（或任何其他非零值）导致其中出现杂物的源文件启


-------------------------------------------------------- KeyPgPreserve ----
Preserve   数组保留
 用于ReDim保留内容将调整数组大小

语法
ReDim Preserve array(...) [As datatype]

描述
与配合使用，ReDim以便在调整数组大小时不重置数据，而是保留数据。这意味着当?


-------------------------------------------------------- KeyPgPreset ----
PReset   绘制像素
 绘制单个像素

语法
PReset [target ,] [STEP] (x, y) [,color]

参数
target
指定要绘制的缓冲区。 
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要绘制的缓冲区。 target可能是使用ImageCr


-------------------------------------------------------- KeyPgPrint ----
(Print | ?)   
 将文字写到屏幕上

语法
(Print | ?) [ expressionlist ] [ , | ; ]

参数
expressionlist
要打印的项目清单

描述
Print将值列表输出到屏幕。数字值将转换为其字符串表示形式，并在符号的左侧填


-------------------------------------------------------- KeyPgPrintPp ----
(Print | ?) #   
 将值列表写入文件或设备

语法
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

参数
filenum
为Output或打开的文件或设备的文件号Append。
expressionlist
要写入的值列表。

描述
Print #将值列表输出到文本文件或设备。数字值将转换为其字


-------------------------------------------------------- KeyPgPrintusing ----
(Print | ?) Using   
 将格式化的文本输出到屏幕或输出设备

语法
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

参数
filenum
为Output或打开的文件或设备的文件号Append。（LPrint也可以在适当的地方使用代替Print #）
printexpressionlist
要打印的可选项目的前面列表，以逗号（,）或分号（;）分隔（Print有关详细信息，请参阅）。
formatstring
格式化要使用的字符串。
expressionlist
要格式化的项目列表，?


-------------------------------------------------------- KeyPgPrivate ----
Private   私有
 指定具有内部链接的过程

语法
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub
Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
..procedure body..
End Function

描述
在过程定义中（在声明行级别禁止），Private指定过程具有内部链接，这意味着其名称?


-------------------------------------------------------- KeyPgProperty ----
Property   类属性
 声明或定义类型或类中的属性

语法
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }
Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property
Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property
Property typename.fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property
Property typename.fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

参数
typename 
Type或的名称Class
fieldname 
物业名称
new_value 
传递给要分配的属性的值
index 
属性索引值

描述
Property字段用于获取和设置Type或的值的Class方式与


-------------------------------------------------------- KeyPgPset ----
PSet   绘点
 绘制单个像素

语法
PSet [target ,] [STEP] (x, y) [,color]

参数
target
指定要绘制的缓冲区。 
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要绘制的缓冲区。 target可能是使用ImageCrea


-------------------------------------------------------- KeyPgPsetGfx ----
PSet   绘点
 Put图形语句的 参数，该参数选择PSet为上墨方法

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

参数
PSet
需要。

描述
该PSet方法将源像素值复制到目标像素上。
这是最简单的Put方法。目标?


-------------------------------------------------------- KeyPgPtr ----
(Pointer | Ptr)   
 变量声明类型修饰符

语法
Dim symbolname As DataType {Pointer | Ptr}

描述
声明一个指针变量。
Operator @ (Address Of)运算符或VarPtr用来获取变量的地址。的Ope


-------------------------------------------------------- KeyPgPublic ----
Public   公共
 指定具有外部链接的过程。

语法
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub
Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
..procedure body..
End Function

描述
在过程定义中（在声明行级别禁止），Public指定过程具有外部链接，这意味着?


-------------------------------------------------------- KeyPgPutfileio ----
Put (File I/O)   写入字节
 将数据从缓冲区写入文件

语法
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

用法
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

参数
filenum
Open打开文件时传递给的值。
position
是Put文件中必须开始的位置。如果文件已打开For Random，则位置在记录中，否则以字节为单位。如果省略，则从当前文件指针位置开始写入。该位置基于1：即文件的第一个记录或字节位于position 1。
如果position省略或为零（0），则将从当前文件位置开始写入文件。
data
是写入数据的缓冲区。它可以是数字变量，字符串，数组或用户定义的类型。除非amount给出操作，否则该操作将尝试将完整变量传输到磁盘。
放置数组时，data应在后面加上一个空括号：“ ()”。 Put将所有数据写入数组。 amount不被允许。
放置Strings时，写入的字节数与字符串数据中的字节数相同。 amount不被允许。
注意：如果要从缓冲区写入值，则不应将指针传递给缓冲区；相反，您应该在缓冲区中传递第一个变量。（这可以通过使用取消引用指针来完成Operator * (Value Of)。）如果直接传


-------------------------------------------------------- KeyPgPutgraphics ----
Put (Graphics)   写入字节
 将图像复制到另一个图像或屏幕上

语法
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

参数
target
是要绘制图像的缓冲区的地址。如果省略，图像将变白显示在屏幕上。见下文。
[STEP](x, y)
指定从目标缓冲区或屏幕的左上角开始绘制图像的偏移量。 STEP表示偏移量是相对于当前图形光标位置的。(x, y)
source
是要绘制图像的缓冲区的地址。见下文。
(x1, y1)-[STEP](x2, y2)
在源缓冲区中指定要绘制的矩形区域。如果省略，则绘制整个缓冲区。STEP分别表示x2和y2是相对于x1和的y1。
method
指定用于将图像绘制到目标缓冲区的方法，并且可以是以下任意一种（默认方法是XOR）：与
背景无关的方法
PSet：复制源像素值而无需修改。
PRESET：复制之前，源像素值是1的补码。
Trans：复制源像素值而无需修改。不绘制遮罩颜色的源像素。见下文。
背景相关方法
And：目标像素And与源像素按位进行编辑。见下文。
Or：目标像素Or与源像素按位进行编辑。见下文。
Xor：目标像素Xor与源像素按位进行编辑。见下


-------------------------------------------------------- KeyPgRandom ----
Random   随机访问
 指定要为随机访问模式打开的文件或设备

语法
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

参数
filename
要打开的文件名
access_type
指示文件是可以读取，写入还是同时读取和写入
lock_type
文件打开时使用的锁定
filenum
与打开的文件关联的未使用的文件号
record_length
文件使用的记录大小

描述
打开


-------------------------------------------------------- KeyPgRandomize ----
Randomize   随机初始化
 播种随机数生成器

语法
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

用法
Randomize [ seed ][, algorithm ]

参数
seed
甲Double用于随机数生成的种子值。如果省略，Timer则将使用基于的值。
algorithm
一个整数值，用于选择算法。如果省略，则使用当前语言方言的默认算法。

描述
设置有助于Rnd?


-------------------------------------------------------- KeyPgRead ----
Read   读取
 读取与Data语句一起存储的值。

语法
Read variable_list

描述
使用Data命令读取存储在应用程序中的数据。
的元素variable_list必须是基本类型，


-------------------------------------------------------- KeyPgReadFile ----
Read (File Access)   读取
 文件访问说明符

语法
Open filename As String For Binary Access Read As #filenum As Integer

描述
符为Access在该条款Open声明。


-------------------------------------------------------- KeyPgReadWriteFile ----
Read Write (File Access)   读取
 文件访问说明符

语法
Open filename As String For Binary Access Read Write As #filenum As Integer

描述
符为Access在该条款Open声明。 Read 


-------------------------------------------------------- KeyPgReallocate ----
Reallocate   重分配内存
 为现有的保留内存块重新分配存储

语法
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

用法

result = Reallocate( pointer, count )

参数
pointer
要重新分配的已分配内存的地址。
count
要重新分配的字节总数。

返回值
重新分配的内存地址。0如果重新分配失败，则返回null（）指针，并且指向的原始内存pointer保持不变。

描?


-------------------------------------------------------- KeyPgRedim ----
ReDim   重定义
 定义或调整可变长度数组的大小

语法
声明动态数组：
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
调整动态数组的大小：
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]

参数
Shared
指定整个模块对阵列的共享（文件作用域）访问。
Preserve
与现有数组一起使用时，数组的内容将在调整大小期间保留。请注意，在某些情况下，Preserve数据将不会保留其原始索引，请参见下文。
symbolname
新的或现有的阵列ID。
subscript：[ lowerbound To]upperbound
数组维的上下限范围。下限默认为零（0）Base，


-------------------------------------------------------- KeyPgRem ----
Rem   注释
 表示源代码中的注释。

语法
Rem comment
' Comment
/' Multi-line
comment '/

描述
以开头的源代码行Rem表示该行是注释，不会被编译。 
单引号字符（'）也可以用来表示


-------------------------------------------------------- KeyPgReset ----
Reset   重置
 关闭所有打开的文件，或重置标准I / O句柄。

语法
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

用法
Reset
or
Reset( streamno )

参数
streamno
要重置的流号，0用于stdin或1stdout。

描述
Reset，不带任何参数调用时，将关闭所有磁盘文件。
Reset，


-------------------------------------------------------- KeyPgRestore ----
Restore   恢复数据
 更改该Data语句存储的值的下一个读取位置。

语法
Restore [label]

描述
将下一个要读取的数据指针设置Data为标签之后的第一个语句的第一个元素。?


-------------------------------------------------------- KeyPgResume ----
Resume   恢复行
 错误处理语句，可在跳转到错误处理程序后恢复执行

语法
Resume

描述
Resume在错误处理程序（称为On Error）中的传统QB错误处理机制中使用?


-------------------------------------------------------- KeyPgResumenext ----
Resume Next   恢复行
 错误处理语句，可在跳转到错误处理程序后恢复执行

语法
Resume Next

描述
Resume Next在错误处理程序（称为On Error）中的传统QB错误处理机制中


-------------------------------------------------------- KeyPgReturn ----
Return   返回
 控制流语句从过程或返回GoSub。

语法
Return expression
or
Return [ label ]

描述
Return用于从过程返回或从gosub返回GoSub。
因为这Return可能意味着要退货或程序?


-------------------------------------------------------- KeyPgRgb ----
RGB   RGB
 计算高/真彩色模式的有效颜色值

语法
#define RGB(r,g,b) ((CULng(r) Shl 16) Or (CULng(g) Shl 8) Or CULng(b) Or &hFF000000)

用法
result = RGB(red, green, blue)

参数
red
红色分量值
green
绿色成分值
blue
蓝色分量值

返回值
组合的颜色。

描述
red，green和blue是组件测距0- 255。
该RGB函数可用


-------------------------------------------------------- KeyPgRgba ----
RGBA   RGBA
 计算高/真彩色模式的有效颜色值，包括alpha（透明度）

语法
#define RGBA(r,g,b,a) ((CULng(r) Shl 16) Or (CULng(g) Shl 8) Or CULng(b) Or (CULng(a) Shl 24))

用法
result = RGBA(red, green, blue, alpha)

参数
red
红色分量值
green
绿色成分值
blue
蓝色分量值
alpha
alpha分量值

返回值
组合色

描述
red，green，blue和alpha被部件测距0- 255。


-------------------------------------------------------- KeyPgRight ----
Right   字符串取右边
 返回字符串的最右边的子字符串

语法
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Right[$]( str, n )

参数
str
源字符串。
n
子字符串的长度，以字符为单位。

返回值
从返回最右边的子字符串str。

描述
返回n从的右（尾）开始的最右?


-------------------------------------------------------- KeyPgRmdir ----
RmDir   删目录
 从文件系统中删除文件夹/目录

语法
Declare Function RmDir ( ByRef folder As Const String ) As Long

用法
result = RmDir( folder )

参数
folder
要删除的文件夹/目录。

返回值
成功返回零（0），失败返回


-------------------------------------------------------- KeyPgRnd ----
Rnd   随机值
 返回范围内的随机双精度数字[0, 1)

语法
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

用法
result = Rnd( seed )

参数
seed
可选Single参数。如果seed值为零（0.0），则重复生成的最后一个随机数。对于任何其他数字，将返回一个新的随机数。使用与QB兼容的算法，负数将完全重新生成生成器。无参数的默认值是返回新的随机数。

返回值
返


-------------------------------------------------------- KeyPgRset ----
RSet   字符串对齐向右
 右对齐字符串缓冲区中的字符串

语法
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
RSet dst, src

参数
dst
一个String或WString缓冲区的文本复制。
src
出处String或WString正当理由。

描述
RSetright将文本对齐到字符串缓冲区中dst，在字


-------------------------------------------------------- KeyPgRtrim ----
RTrim   字符串删空格右边
 删除字符串右侧的周围子字符串或字符

语法
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = RTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪后的字符串。

描述
此过程从源字符串的右边（末尾）修剪?


-------------------------------------------------------- KeyPgRun ----
Run   运行
 将执行转移到外部程序

语法
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

用法
result = Run( program [, arguments ] )

参数
program
要将控制转移到的程序（可执行文件）的文件名（包括文件路径）。
arguments
传递给程序的命令行参数。

返?


-------------------------------------------------------- KeyPgSadd ----
SAdd   取地址
 返回指向字符串变量数据的指针

语法
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

用法
result = SAdd( str )

参数
str
用于获取地址的字符串表达式或变量

返回值
指向


-------------------------------------------------------- KeyPgScope ----
Scope...End Scope   
 声明以开始新的作用域块

语法
Scope
[statements]
End Scope

描述
Scope块允许在程序中本地定义（重新）变量并使用它们。
当Dim在范围结构内（重新）定


-------------------------------------------------------- KeyPgScreenCons ----
Screen (Console)   屏幕
 获取给定位置的character或color属性

语法
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

用法
result = Screen( row, column [, colorflag ] )

参数
row
从控制台左上角开始的1个偏移量。
column
从控制台左上角开始的1个偏移量。
colorflag
如果等于0，则返回ASCII码，否则返回color属性。如果省略，则默认为0。

返回值
该ASCII字符或颜色属性。

描述
Screen


-------------------------------------------------------- KeyPgScreencontrol ----
ScreenControl   屏幕控制
 设置或获取内部图形库设置

语法
Declare Sub ScreenControl ( ByVal what As Long, ByRef param1 As Integer = 0, ByRef param2 As Integer = 0, ByRef param3 As Integer = 0, ByRef param4 As Integer = 0 )
Declare Sub ScreenControl ( ByVal what As Long, ByRef param As String = “ ” )

用法
ScreenControl( what [, [ param1 ][, [ param2 ][, [ param3 ][, [ param4 ]]]]] )
要么，
ScreenControl( what [, param ] )

参数
what
指定要执行的功能
param1
可选的第一个整数参数，包含要在进入时设置的值或在退出时得到的值
param2
可选的第二个整数参数，包含要在进入时设置的值或在退出时得到的值
param3
可选的第三个整数参数，包含要在进入时设置的值或在退出时得到的值
param4
可选的第四个整数参数，包含要在进入时设置的值或


-------------------------------------------------------- KeyPgScreencopy ----
ScreenCopy   屏幕复制
 将图形页面的内容复制到另一个图形页面

语法
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

用法
ScreenCopy [ from_page ] [, to_page ]

参数
from_page
要复制的页面
to_page
复制到的页面

返回值
0如果成功，则 返回零（），否则返回非零错误代码以指示失败。

描述
from_page是要复制的页?


-------------------------------------------------------- KeyPgScreenevent ----
ScreenEvent   屏幕事件
 查询和检索系统事件。

语法
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

用法
result = ScreenEvent( [ event ] )

参数
event
指定函数应在其中存储事件数据的缓冲区。

返回值
返回-1是否有未决事件要检索，0否则返回。

描述
此函数从内部GfxLib事件队列返回最?


-------------------------------------------------------- KeyPgScreenglproc ----
ScreenGLProc   屏幕GL地址
 获取OpenGL过程的地址

语法
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

参数
procname
检索地址的过程名称

描述
此函数可用于获取任何OpenGL过程的地址，用于检索指向与OpenGL扩展相关的


-------------------------------------------------------- KeyPgScreengraphics ----
Screen (Graphics)   屏幕
 使用类似QB的模式编号初始化图形模式

语法
-lang fb | fblite方言： -lang qb方言：
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]

Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]

参数
mode 
是QB样式的图形屏幕模式编号（请参见下文）。如果mode为0，则关闭任何当前设置的图形模式，并且所有功能恢复其正常的控制台模式功能。有关可用模式，请参见下文。
depth
是颜色深度（以每像素位数为单位）。这仅对模式14和更高级别有效。值8，16并且32是允许的。 15和24也分别用作16和的别名32。如果省略，则默认为8。
num_pages
是您想要的视频页面数，请参见下文。如果省略，则默认为1。
flags
用于选择几项作为图形驱动程序优先级，全屏模式。fbgfx.bi文件中已预定义了常量，可以随时使用。有关可用标志，请参见ScreenRes页面。
refresh_ra


-------------------------------------------------------- KeyPgScreeninfo ----
ScreenInfo   屏幕信息
 检索有关当前视频模式或桌面的信息。

语法
Declare Sub ScreenInfo ( ByRef w As Integer = 0, ByRef h As Integer = 0, ByRef depth As Integer = 0, ByRef bpp As Integer = 0, ByRef pitch As Integer = 0, ByRef rate As Integer = 0, ByRef driver As String = "" )

用法
ScreenInfo [ w ] [, [ h ] [, [ depth ] [ , [ bpp ] [ , [ pitch ] [ , [ rate ] [, driver ]]]]]

参数
w
宽度。
h
高度。
depth
颜色深度（以位为单位）。
bpp
每个像素字节。
pitch
每条扫描线的字节数。
rate
刷新率。
driver
驱动程序名称。

描述
此功能对于获取当前模


-------------------------------------------------------- KeyPgScreenlist ----
ScreenList   屏幕列表
 查找可用的全屏视频模式

语法
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

用法
result = ScreenList( [ depth ] )

参数
depth
被请求模式的列表的颜色深度（支持的深度是8，15，16，24和32）

返回值
0当没有其他分辨率要读取时， 返回。

描述
它的作用类似于该Dir函数：对?


-------------------------------------------------------- KeyPgScreenlock ----
ScreenLock   屏幕锁定
 锁定工作页面的帧缓冲区

语法
Declare Sub ScreenLock ( )

用法
ScreenLock

描述
FreeBASIC的所有图形库函数都绘制到帧缓冲区，并且自动例程在每次绘制时将帧缓?


-------------------------------------------------------- KeyPgScreenptr ----
ScreenPtr   屏幕指针
 返回指向当前工作页面的帧缓冲区的指针

语法
Declare Function ScreenPtr ( ) As Any Ptr

用法
result = ScreenPtr

返回值
当前工作页帧缓冲存储器的指针，0如果未设置图形模式，则为NULL（）。

描述
ScreenPtr提供了一种直接读取/写入工


-------------------------------------------------------- KeyPgScreenres ----
ScreenRes   屏幕初化
 通过指定水平和垂直分辨率来初始化图形模式

语法
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long

用法
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

参数
width， height
分别显示宽度和高度。对于全屏模式，用户应使用来检查分辨率的可用性ScreenList。
depth
颜色深度（以每像素位数为单位）。有效的颜色深度是：1，2，4，8，16和32。价值观15和24 
要创建的视频页面数，默认为1。（请参阅Screen）
flags
用于设置屏幕的各种属性，包括全屏模式和图形驱动程序优先级。（有关可用标志，请参见下文或标准标题“ fbgfx.bi”）
refresh_rate
屏幕所需的刷新率仅对全屏模式有效，并且仅?


-------------------------------------------------------- KeyPgScreenset ----
ScreenSet   屏幕设置
 设置当前工作和可见页面

语法
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

用法
ScreenSet [ work_page ] [, visible_page ]

参数
work_page
索引到工作页
visible_page
索引到可见页面

描述
ScreenSet允许设置当前工作页面和当前可见页面。页码的范围是从


-------------------------------------------------------- KeyPgScreensync ----
ScreenSync   屏幕同步
 将显示更新与硬件同步

语法
Declare Function ScreenSync ( ) As Long

用法
result = ScreenSync

返回值
如果成功，则为零；如果先前未设置图形模式，则为非零。

描述
此GfxLib语句停止程序的执行，直到图形卡发出已结


-------------------------------------------------------- KeyPgScreenunlock ----
ScreenUnlock   屏幕解锁
 解锁工作页面的帧缓冲区

语法
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

用法
ScreenUnlock [ start_line ] [, end_line ]

参数
startline
可选参数，指定要更新的第一条屏幕行。如果省略，则假定为顶屏行。
endline
可选参数，指定要更新的最后一个屏幕行。如果省略，则假定为底屏线。

描述
ScreenUnl


-------------------------------------------------------- KeyPgSecond ----
Second   时间取秒
 从日期序列中获取秒 

语法
Declare Function Second ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Second( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列 格式的日期的变量返回秒 。



-------------------------------------------------------- KeyPgSeekreturn ----
Seek (Function)   文件定位
 获取文件或设备的下一个读/写操作的位置

语法
Declare Function Seek ( ByVal filenum As Long ) As LongInt

参数
filenum
打开文件的文件号

返回值
下一个读取或写入操作将发生的文件位置。

描述
如果在Random访问模式下打开文件，则在?


-------------------------------------------------------- KeyPgSeekset ----
Seek (Statement)   文件定位
 设置文件下一次读/写操作的位置

语法
Seek [#]filenum, position

参数
filenum
已打开文件的文件号
position
I / O操作的新位置

描述
设置对文件进行下一次读或写操作的位置。
如果在Random访问


-------------------------------------------------------- KeyPgSelectcase ----
Select Case   选择判断
 条件语句块

语法
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

描述
Select Case根据表达式的值执行特定的代码。对该表达式进行一次求值，然后Case按顺序与?


-------------------------------------------------------- KeyPgSetdate ----
SetDate   设置日期
 设置当前系统日期

语法
Declare Function SetDate ( ByRef newdate As Const String ) As Long

用法
result = SetDate( newdate )

参数
newdate
设定的新日期

返回值
在除DOS之外的所有端口上，成功返回零，失败返回非零。

描述
的日期，你只是格式设置newdate，发送给SetDa


-------------------------------------------------------- KeyPgSetenviron ----
SetEnviron   设置环境
 设置系统环境变量

语法
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

用法
result = SetEnviron( varexpression )

参数
varexpression
以下形式（或等效形式）的环境变量的名称和设置：varname = varstring。
（varname是环境变量的名称，而varstring是要设置的文本值）

返回值
如果成功，则返回零（0），否则返回非零。




-------------------------------------------------------- KeyPgSetmouse ----
SetMouse   设置鼠标
 设置鼠标光标的位置和可见性

语法
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

用法
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

参数
（对于每个参数，它-1是一个特殊值，表示“无变化”。）
x
可选-设置x坐标
y
可选-设置y坐标
visibility
可选-设置可见性：1表示可见，0表示隐藏
clip
可选-设置裁剪：1表示鼠标已裁剪到图形窗口，0表示无裁剪

返回值
0成功时 为零（）?


-------------------------------------------------------- KeyPgSettime ----
SetTime   设置时间
 设置当前系统时间

语法
Declare Function SetTime ( ByRef newtime As Const String ) As Long

用法
result = SetTime( newtime )

参数
newtime
新的设定时间

返回值
在除DOS之外的所有端口上，成功返回零，失败返回非零。

描述
为了设定时间，格式的日期和发送到Settime以?


-------------------------------------------------------- KeyPgSgn ----
Sgn   数取符号
 返回数字的符号部分

语法
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

用法
result = Sgn( number )

参数
number
查找号的数字

返回值
返回的符号部分number。
如果number大于零，则Sgn返回1。
如果number等于零，则Sgn返回0。
如果number小于零，则Sgn返回-1。

描述
必需的number参数可以是任何?


-------------------------------------------------------- KeyPgShared ----
Shared   共享型
 变量声明修饰符，指定整个模块的可见性

语法
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
Var Shared ...

描述
Shared使模块级变量在Subs和Functions 内部可见。
如果Shared未在模块级变


-------------------------------------------------------- KeyPgShell ----
Shell   外部程序
 将命令发送到系统命令解释器

语法
Declare Function Shell ( ByRef command As Const String ) As Long

用法
result = Shell( command )

参数
command
一个字符串，指定要发送到命令解释器的命令。

返回值
如果命令无法执行


-------------------------------------------------------- KeyPgShort ----
Short   短整型
 标准数据类型：16位带符号

语法
Dim variable As Short

描述
16位带符号整数数据?


-------------------------------------------------------- KeyPgSin ----
Sin   正弦
 返回角度的正弦

语法
Declare Function Sin ( ByVal angle As Double ) As Double

用法
result = Sin( angle )

参数
angle
角度（弧度）

返回值
返回参数的正弦angle的Double范围内-1.0来1.0。

描述
参数angle以弧度（不是度）为单位。
对于angle绝?


-------------------------------------------------------- KeyPgSingle ----
Single   单精度
 标准数据类型：32位浮点

语法
Dim variable As Single

描述
Single是用于存储十进制数字的32位浮点数据类型。他们可以容纳的范围正值1.401298e-


-------------------------------------------------------- KeyPgSizeof ----
SizeOf   取大小
 返回以字节为单位的变量或类型的大小。

语法
SizeOf ( variable | DataType )

描述
所述SizeOf操作者返回一个Integer值：由吸收的字节数variable或DataType（?


-------------------------------------------------------- KeyPgSleep ----
Sleep   延迟
 等待直到经过指定的时间，或按下一个键。

语法
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

用法
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

参数
amount
等待的可选毫秒数（默认为等待按键）。
keyflag
可选标志；将其设置0为正常睡眠的值，或1指定按键不能中断等待。

返回值
返回1是否keyflag不是表示失败的有效值（例如0或以外的其他值1）0。


-------------------------------------------------------- KeyPgSpace ----
Space   字符串空格
 创建给定长度的字符串，并用空格（" "）填充

语法
Declare Function Space( ByVal count As Integer ) As String

用法
result = Space[$]( count )

参数
count
一个整数类型，指定要创建的字符串的长度。

返回值
创建的字?


-------------------------------------------------------- KeyPgSpc ----
Spc   字符空格
 输出功能可在写入屏幕或文件时跳过空格

语法
Spc( columns )

用法
Print Spc( spaces ) [(, | ;)] ...

参数
spaces
要跳过的空格数

描述
Spc跳过


-------------------------------------------------------- KeyPgSqr ----
Sqr   平方根
 返回数字的平方根

语法
Declare Function Sqr ( ByVal number As Double ) As Double

用法
result = Sqr( number )

参数
number
数字（大于或等于零）

返回值
返回参数的平方根number。
如果number等于零，则Sqr返回零（0.0）。
如果number小于零，则Sqr返回一个特殊的值，表示“未定义”，如“ NaN”或“ ” 打印"IND"，确切的文本取决于平台。

描?


-------------------------------------------------------- KeyPgStatic ----
Static   静态
 定义具有静态存储的变量，对象和数组

语法
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

参数
symbol
变量或数组符号名称。
array-dimensions
lower-bound To upper-bound [, ...]
或或为空。
Any [, Any...]

expression
一个常数表达式或常数表达式数组

描述
指定变量，对象和数组的静态存储；它们在程


-------------------------------------------------------- KeyPgStaticMember ----
Static (Member)   静态
 声明一个静态成员过程或变量

语法
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type
Dim typename.variablename As DataType [= initializer] [, ...]
[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

描述

静态成员程序
Static方法没有This传递给它们的隐式实例参数。这使它们可以像普


-------------------------------------------------------- KeyPgStdcall ----
stdcall   标准调用
 在过程声明中 指定stdcall样式的调用约定

语法
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，stdcall指定过程将使用stdcall调用约定。在stdcall调用约定中?


-------------------------------------------------------- KeyPgStep ----
Step   步进
 语句修饰符。

语法
For iterator = initial_value To end_value Step increment
Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]
Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]
Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

描述
在一条For语句中，Step指定每个循环的循环迭代器增量。
在一个Line，C


-------------------------------------------------------- KeyPgStick ----
Stick   游戏操纵杆
 从连接的游戏设备读取轴位置

语法
Declare Function Stick ( ByVal axis As Long ) As Long

用法
result = Stick( axis )

参数
axis
查询位置的轴号

返回值
对于指定的axis，返回1到200之间的数字，如果未连接设备，则返回零（0）。

描述
Stick将检索第一和第二游戏设备


-------------------------------------------------------- KeyPgStop ----
Stop   
 停止程序执行，并等待按键结束程序。

语法
Declare Sub Stop ( ByVal retval As Long = 0 )

用法
Stop

参数
retval
错误代码返回到系统。

描述
暂停程序的执行并等待。它提供了调试帮助，因为它可以保留内存并


-------------------------------------------------------- KeyPgStr ----
Str   数转字符
 返回数字，布尔值或Unicode字符串的字符串表示形式

语法
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

用法
result = Str[$]( number )
or
result = Str( string )

参数
number
数值表达式转换为字符串。
string
字符串表达式转换为字符串。

描述
Str将数字变量转换为其字符串表示形式。?


-------------------------------------------------------- KeyPgStrig ----
Strig   游戏按钮
 从连接的游戏设备读取按钮状态

语法
Declare Function Strig ( ByVal button As Long ) As Long

用法
result = Strig( button )

参数
button
查询状态的按钮

返回值
返回-1（按下）或0（未按下）以指示button请求的状态。

描述
Strig将检索第一和第二游戏设备上的第一?


-------------------------------------------------------- KeyPgString ----
String   数转字符串
 标准数据类型：8位字符串

语法
Dim variable As String [ * size]

描述
A String是一个字符数组。不带参数
的String声明会size根据字符串的长度动态调?


-------------------------------------------------------- KeyPgStringFunction ----
String (Function)   数转字符串
 创建并用特定字符填充特定长度的字符串

语法
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

用法
result = String[$]( count, ch_code )
要么
result = String[$]( count, ch )

参数
count
一个整数，指定要创建的字符串的长度。
ch_code
一个长整数，指定用于填充字符串的ASCII字符代码。
ch
一个字符串，其第一个字符将用于填充字符串。

返回值


-------------------------------------------------------- KeyPgSub ----
Sub   过程
 定义程序

语法
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub
[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

参数

identifier：子例程的名称
external_identifier：外部可见的（对链接程序而言）用引号引起来的名称
parameter_list：parameter [，parameter [，...]] 
parameter：[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程中引用的变量的名称：变量
type的类型
default_value：如果调用中未指定参数的值
statements：组成子例程主体的一个或多个语句

描述



-------------------------------------------------------- KeyPgSubPtr ----
Sub Pointer   过程
 存储指向Sub过程的指针的数据类型

语法
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

参数

parameter_list：parameter [，parameter [，...]] 
parameter：[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程中引用的变量的名称：变量
type的类型
default_value：如果调用中未指定参数的值
intializer：设置为初始值的子例程的地址

描述
甲Sub指针是一个过程指针


-------------------------------------------------------- KeyPgSwap ----
Swap   交换
 交换两个变量的值

语法
Declare Sub Swap ( ByRef a As Any, ByRef b As Any )

参数
a
要交换的变量。
b
要交换的变量。

描述
交换两个变量的值，包括UDT实例（交换所有数据成员）。
注意：当指针


-------------------------------------------------------- KeyPgSystem ----
System   系统
 关闭所有打开的文件并结束程序

语法
Declare Sub System ( ByVal retval As Long = 0 )

用法
System( [ retval ] )

参数
retval
错误代码返回到系统。

描述
关闭所有打开的文件，退出程序，然后返回操作系统。可以指定一个?


-------------------------------------------------------- KeyPgTab ----
Tab   
 在写入屏幕或文件时设置列

语法
Tab( col_num )

用法
Print Tab( column ) [(, | ;)] ...

参数
column
1基于的列号移动到

描述
Tab进入屏幕或文件column时将光标移动到给定的数字Print。在新旧光标位?


-------------------------------------------------------- KeyPgTan ----
Tan   正切
 返回角度的切线

语法
Declare Function Tan ( ByVal angle As Double ) As Double

用法
result = Tan( angle )

参数
angle
角度（弧度）

返回值
返回参数的正切angle为Double负无穷大到无穷远的范围内。

描述
参数angle以弧度（不是度）为单位。
对于


-------------------------------------------------------- KeyPgThen ----
Then   然
描述
没


-------------------------------------------------------- KeyPgThis ----
This   本对象
 隐藏实例参数传递给非静态成员函数在一个Type或Class

语法
This.fieldname
or
With This
.fieldname
End With

描述
This是对Type或实例的引用，该实例或实例Class（通过hidden Byref Parame


-------------------------------------------------------- KeyPgThreadCall ----
ThreadCall   线程调用
 在启动一个单独的执行线程与参数的用户定义的过程
Threadcall使用LibFFI内部：谁写的使用这个功能应该谨慎计划的人跟随LibFFI执照，可在http://github.com/atgreen/libffi/找到Blob /主控/许可。

语法
Function ThreadCall subname([paramlist]) As Any Ptr

用法
threadid = ThreadCall subname([paramlist])

参数
subname
子程序的名称
paramlist
与常规子调用一样，传递给子例程的参数列表。 

返回值
线程调用返回创建线程的句柄，或者在失败时


-------------------------------------------------------- KeyPgThreadCreate ----
ThreadCreate   线程创建
 在单独的执行线程中启动用户定义的过程

语法
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

用法
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

参数
procptr
指向要Sub用作线程的指针。子程序必须具有以下签名（相同的参数，相同的调用约定）才能与procptr兼容：
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
拟用作线程的Any Ptr参数Sub。FreeBASIC期望这个参数存在，不能省略！
param
Any Ptr参数，该参数将传递给通过其userdata参数Sub指向的线程。例如，这可以是指向结构或数组的指针，该结构或数组包含与线程子一起使用的各种信息。如果未提供参数，则将（零）传递给线程子程序的userdata参数。procptrstack


-------------------------------------------------------- KeyPgThreadDetach ----
ThreadDetach   线程终止
 释放线程句柄而无需等待线程完成

语法
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

用法
#include "fbthread.bi"
ThreadDetach( id )

参数
id
Any Ptr由ThreadCreate或创建的线程的句柄ThreadCall

描述
ThreadDetach释放与ThreadCreate或返回的线程句柄关联的资源Th


-------------------------------------------------------- KeyPgThreadWait ----
ThreadWait   线程等待
 等待线程完成执行并释放线程句柄

语法
Declare Sub ThreadWait ( ByVal id As Any Ptr )

用法
ThreadWait( id )

参数
id
Any Ptr由ThreadCreate或创建的线程的句柄ThreadCall

描述
ThreadWait等待由ThreadCreate或创建的线程ThreadCall完成执行


-------------------------------------------------------- KeyPgTime ----
Time   时间字符
 以字符串形式返回当前系统时间

语法
Declare Function Time ( ) As String

用法
result = Time

返回值
返回当前系统?


-------------------------------------------------------- KeyPgTimer ----
Timer   时间计时值
 返回自静态参考点以来经过的时间。

语法
Declare Function Timer ( ) As Double

用法
result = Timer

返回值
返回Double自静态参考点以来的时间（以秒为单位）的精度结果。

描述
该Timer函数对于找出一段代码要花多长时间


-------------------------------------------------------- KeyPgTimeserial ----
TimeSerial   时间序列值
 获取指定小时，分钟和秒的日期序列

语法
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

用法
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

参数
hour
小时数，范围为0-23
minute
分钟数
second
秒数

返回值
返回一个日期序列包含由在值形成的时间hours，minutes并seconds返回参量。日期序列不具有整数


-------------------------------------------------------- KeyPgTimeValue ----
TimeValue   时间数值
 从时间字符串 获取日期序列

语法
Declare Function TimeValue ( ByRef timestring As String ) As Double

用法
#include "vbcompat.bi"
result = TimeValue( timestring )

参数
timestring
要转换的字符串

返回值
从时间字符串 返回日期序列。

描述
时间字符串必须采用以下格式"23:59:59"， 


-------------------------------------------------------- KeyPgTo ----
To   到
 语句修饰符以指定范围。

语法
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

描述
所述To关键字被用于定义在一定数值范围。仅当与和语句一起使用时For ... Next，此关?


-------------------------------------------------------- KeyPgTransGfx ----
Trans   透明
 Put图形语句的 参数，该参数选择透明背景作为上光方法

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

参数
Trans
需要。

描述
Trans选择透明背景作为渗色图像缓冲区的方法。这与PSET方法类似，


-------------------------------------------------------- KeyPgTrim ----
Trim   字符串删头尾
 删除字符串左右两侧的周围子字符串或字符

语法
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = Trim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪后的字符串。

描述
此过程从源字符串的左边（开始）和右?


-------------------------------------------------------- KeyPgTrue ----
True   真
 编译器设置的固有常数

语法
Const True As Boolean

描述
Boolean在


-------------------------------------------------------- KeyPgType ----
Type   类型
 声明用户定义的类型。

语法
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type
Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]
Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType
fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]
As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...
Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union
...
End Type

描述
Type用于声明包含一个或多个数据字段的自定义数据类型，包括整数类型，浮点类型，固?


-------------------------------------------------------- KeyPgTypeAlias ----
Type (Alias)   类型
 声明类型的替代名称

语法
Type typename As symbol

参数
typename 
新的替代名称。
symbol 
与关联的符号或数据类型声明typename。

描述
symbol可以引用任何声明的数据类型，包括内置数据类型Sub或Fu


-------------------------------------------------------- KeyPgTypeof ----
TypeOf   取类型
 返回变量的类型。

语法
TypeOf ( variable | datatype )

参数
variable
任何类型的变量。
datatype
一个DataType。

描述
TypeOf是一个编译器内部函数，它将自身替换为传递给它的变量的类型。它?


-------------------------------------------------------- KeyPgTypeTemp ----
Temporary Types   
 创建用户定义类型的临时副本

语法
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

参数
initializers
类型的初始值（或仅第一个）
typename
Type或的名称Union

返回值
类型的临时副本。

描述
用于创建临时类型。如果typename未明确给出，则将根


-------------------------------------------------------- KeyPgUbound ----
UBound   数组取上限
 返回数组维度的上限

语法
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = UBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
达到上限的尺寸

返回值
返回数组维的上限。

描述
UBound返回可以用作数组特定维度索引的最大值。
?


-------------------------------------------------------- KeyPgUbyte ----
UByte   无符号字节
 标准数据类型：8位无符号。
等同于。Unsigned Byte

语法
Dim variable As UByte

描述
8位?


-------------------------------------------------------- KeyPgUcase ----
UCase   字符串大写
 返回字符串的大写副本

语法
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = UCase[$]( str [ , mode ] )

参数
str
转换为大写的字符串。
mode
转换模式：0 =当前语言环境，1 =仅ASCII

返回值
的大写副本str。



-------------------------------------------------------- KeyPgUinteger ----
UInteger   无符号整型
 标准数据类型：32位或64位无符号，大小与相同。 等同于。SizeOf(Any Ptr)
Unsigned Integer

语法
Dim variable As UInteger
Dim variable As UInteger<bits>

参数
bits
一个数字常量表达式，以位数表示所需的无符号整数的大小。所允许的值8，16，32或64。

描述
32位或64位无符号整数数据


-------------------------------------------------------- KeyPgUlong ----
ULong   无符号长型
 标准数据类型：32位无符号整数。
等同于。Unsigned Long

语法
Dim variable As ULong

描述
32位无符号整数数据类型


-------------------------------------------------------- KeyPgUlongint ----
ULongInt   无符号长整型
 标准数据类型：64位无符号。
等同于。Unsigned LongInt

语法
Dim variable As ULongInt

描述
64位无符号整数数据类型。可以容纳0到18


-------------------------------------------------------- KeyPgUnion ----
Union   联合型
 声明联合用户定义的类型。

语法
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

参数
typename
的名字 Union
fieldname
数据字段成员的名称
member function declaration
任何受支持的成员函数

描述
的数据元素Union在内存中占据一个公共空间（的所有数据?


-------------------------------------------------------- KeyPgUnlock ----
Unlock   解锁
 删除文件上的先前访问限制（锁定）

语法
Unlock #filenum, record
Unlock #filenum, start To end

参数
filenum
用于Open文件的文件号。
record
Random要解锁的记录（文件）。
start
Binary要解锁的范围中的第一个字节位置（文件）。
end
Binary解锁范围中的最后一个字节位置（文件）。

描述
Unlock删?


-------------------------------------------------------- KeyPgUnsigned ----
Unsigned   无符号数
 整数数据类型修饰符

语法
Dim variable As Unsigned {integer-based data type}

描述
强制基于整数的数据


-------------------------------------------------------- KeyPgUntil ----
Until   直到
 语句中使用的条件子句Do..Loop。

语法
Do Until condition
or
Loop Until condition

描述
Until与该


-------------------------------------------------------- KeyPgUshort ----
UShort   短整型
 标准数据类型：16位无符号。
等同于。Unsigned Short

语法
Dim variable As UShort

描述
16位无符?


-------------------------------------------------------- KeyPgUsing ----
Using (Namespaces)   引用
 将名称空间符号带入当前范围

语法
Using identifier [, identifier [, ...] ]

参数
identifier：Namespace您要使用的名称。

描述
该Using命令允许访问给定名称空间中的所有符号，而无需使用名称空间的


-------------------------------------------------------- KeyPgVaArg ----
va_arg   变参表
 从变量参数列表返回当前参数。

语法
variable = va_arg ( argument_list, datatype )

描述
的va_arg宏允许使用的函数内的参数可变数目的：
va_arg返回列表中的当前参数，


-------------------------------------------------------- KeyPgVaFirst ----
va_first   变参首个
 返回指向可变参数列表中第一个参数的指针

语法
pointer_variable = va_first()

描述
该va_first函数提供了一个无类型的指针值，该值指向传递给函数的第?


-------------------------------------------------------- KeyPgVal ----
Val   数取值
 将字符串转换为浮点数

语法
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

用法
result = Val( strnum )

参数
strnum
包含要转换的数字的字符串

返回值
返回转换后的Double精度数字。
如果字符串的第一个字符无效，Val将返回0。

描述
Val("10")将返回10.0，并Val("10


-------------------------------------------------------- KeyPgValint ----
ValInt 将字符串转换为32位整数

语法
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

用法
result = ValInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回Long转换后的字符串的值。
如果字符串的第一个字符无效，ValInt将返回0。

描述
例如，ValInt("10")will return 10，也V


-------------------------------------------------------- KeyPgVallng ----
ValLng   数取长值
 将字符串转换为64位整数

语法
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

用法
result = ValLng ( strnum )

参数
strnum
要转换的字符串

返回值
返回LongInt转换后的字符串的a 
如果字符串的第一个字符无效，ValLng则将返回0。

描述
例如，ValLng("10")will return 10，


-------------------------------------------------------- KeyPgValuint ----
ValUInt   数取无符整型值
 将字符串转换为无符号的32位整数

语法
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

用法
result = ValUInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回ULong转换后的字符串的值。
如果字符串的第一个字符无效，ValUInt将返回0。

描述
例如，ValUInt("10")will re


-------------------------------------------------------- KeyPgValulng ----
ValULng   数取无符长型值
 将字符串转换为无符号的64位整数

语法
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

用法
result = ValULng ( strnum )

参数
strnum
要转换的字符串

返回值
返回ULongInt转换后的字符串的a 
如果字符串的第一个字符无效，ValULng则将返回0。

描述
例如，ValULng("10")will ret


-------------------------------------------------------- KeyPgVaNext ----
va_next   变参次个
 返回指向变量参数列表中下一个参数的指针

语法
Argument_Pointer = va_next ( Argument_List, datatype )

描述
的va_next宏提供一个datatype指针值指向列表中的下一个参数Argument_List


-------------------------------------------------------- KeyPgVar ----
Var   变量
 声明一个变量，该变量的类型由初始值设定项表达式隐含

语法
Var [Shared] symbolname = expression[, symbolname = expression]

描述
Var声明一个变量，其类型从初始值设定项表达式中隐含。在Var声明中指


-------------------------------------------------------- KeyPgViewgraphics ----
View (Graphics)   
 为图形关键字设置新的物理坐标映射和剪切区域

语法
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

参数
x1 As Integer， y1 As Integer
视口的一个角相对于屏幕的左上角的水平和垂直偏移（以像素为单位）。
x2 As Integer， y2 As Integer
视口相对角相对于屏幕左上角的水平和垂直偏移（以像素为单位）。
fill_color As UInteger
填充新视口的颜色。
border_color As UInteger
在新视口周围绘制边?


-------------------------------------------------------- KeyPgViewtext ----
View Print   
 设置屏幕的可打印文本区域

语法
View Print [ firstrow To lastrow ]

参数
firstrow
打印区第一行
lastrow
打印区域的最后一行

描述
将屏幕上的文本打印区域的边界（在控制台模式或图形模式下）设置为


-------------------------------------------------------- KeyPgVirtual ----
Virtual   虚拟事件
 声明虚拟方法

语法
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

描述
虚方法是可以被从其声明类型中派生的数据类型覆盖的方法，从而允许动态多态。与Abstrac


-------------------------------------------------------- KeyPgVisPrivate ----
Private: (Access Control)   
 在Type或中指定私有成员访问控制Class

语法
Type typename
Private:
member declarations
End Type

参数
typename
Type或的名称Class
member declarations
字段，函数或枚举的声明

描述
Private:表示member declarations其后具有私人访问权限。私有成员


-------------------------------------------------------- KeyPgVisProtected ----
Protected: (Access Control)   
 在Type或中指定受保护的成员访问控制Class

语法
Type typename
Protected:
member declarations
End Type

参数
typename
Type或的名称Class
member declarations
字段，函数或枚举的声明

描述
Protected:表示member declarations其后具有受保护的访问权限。


-------------------------------------------------------- KeyPgVisPublic ----
Public: (Access Control)   
 在Type或中指定公共成员访问控制Class

语法
Type typename
Public:
member declarations
End Type

参数
typename
Type或的名称Class
member declarations
字段，函数或枚举的声明

描述
Public:表示member declarations其后具有公共访问权限。使用Type?


-------------------------------------------------------- KeyPgWait ----
Wait   等待
 从带有掩码的硬件端口读取。

语法
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

用法
Wait port, and_value [, xor_value]

参数
port
读取端口。
and_mask
将掩码值与端口值一起使用。
xor_mask
将值屏蔽为Xor或端口值。

返回值
如果成功则为0，失败则为-1。

?


-------------------------------------------------------- KeyPgWbin ----
WBin   宽字符二进制
 返回数字的二进制WString（Unicode）表示形式

语法
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString
Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal d
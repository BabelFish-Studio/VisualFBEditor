
-------------------------------------------------------- KeyPgAbs ----

Abs   绝对值
  
计算数字的绝对值

语法
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

用法
result = Abs( number )

参数
number
值要找到绝对值。

返回值
的绝对值。number

描述
数字的绝对值是其正量级。如果某个数字为负数，则其值将被否定，并返回正结果。例如，两者都返回 。必需的参数可以是任何有效的数值表达式。
无符号数字将被视为有符号，?


-------------------------------------------------------- KeyPgAbstract ----

Abstract   抽象方法
  
声明抽象方法

语法
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

描述
Abstract是 的一种特殊形式。不同之处在于抽象方法没有主体，而只有声明。从本质上讲，这允许声明一个接口，该接口可以由各种派生类型实现。
为了调用抽象方法，它必须已被派生数据类型重写和实


-------------------------------------------------------- KeyPgAccess ----

Access   访问权
  
用于指定所请求特权的语句子句Open

语法
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

用法
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

参数
Read
仅以读取权限打开文件。
Write
仅以写入权限打开文件。
Read Write
使用读取和写入权限打开文件。

描述
Acces


-------------------------------------------------------- KeyPgAcos ----

Acos   反余弦
  
查找角度的反余弦

语法
Declare Function Acos ( ByVal number As Double ) As Double

用法
result = Acos( number )

参数
number
范围为 [-1..1] 的余弦值。

返回值
的反余弦，以弧度为单位，在 [0..Pi] 范围内。number

描述
Acos将参数的反余弦作为 0 范围内的 a 返回到 Pi。反余弦是函数


-------------------------------------------------------- KeyPgAddGfx ----

Add   添加
  
图形语句的参数，该语句选择加法作为 blliting 方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

参数
Add
必填。
multiplier
介于 0 和 255 之间的可选值。源像素在添加之前会被预乘。如果省略，此值默认为 255。(multiplier / 256)

描述
Add选择加法作为删除图像缓冲区的方法。对于每个源像素和目标像素，将每个相应分量的值相加以生成结果。
加法是饱和的 - 即如果两个值的?


-------------------------------------------------------- KeyPgAlias ----

Alias (Name)   别名
  
提供备用内部名称的 and 语句的子句。SubFunction

语法
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

用法
declare sub usablename Alias "alternatename" ( ... )
或
declare function usablename Alias "alternatename" ( ... )
或
sub usablename Alias "alternatename" ( ... )
...
end sub
或
function usablename Alias "alternatename" ( ... )
...
end function
或
type typename Alias "alternatename" ( ... )
...
end type

描述
Alias为过程提供备用名称。此备用名称不能在程序中用于调用该过程，但在使用其他语言编写的代码进行链接时，链接器可以看到此备用名称（如果函数不是私有的）。
通常用于用其他语?


-------------------------------------------------------- KeyPgAliasModifier ----

Alias (Modifier)   别名
  
修改公共符号的数据类型名称修饰（修饰）

语法
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

用法
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

参数
datatype
要修改的标准数据类型或用户定义的数据类型
modifier
支持的修饰符之一，如下面的“说明”部分所述
描述
Alias "modifier"，当在数据类型之后指定时，会为数据类型提供另一种含义，这对于与 FreeBASIC 以外的语言进行链接时可能需要。
公共


-------------------------------------------------------- KeyPgAllocate ----

Allocate   分配内存
  
从免费存储区分配内存块

语法
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

用法
result = Allocate( count )

参数
count
要分配的内存块的大小（以字节为单位）。

返回值
如果成功，则返回已分配内存的起始地址。否则，如果无法分配请求的块大小，或者如果 ，则返回空指针 （）。count < 00

描述
尝试从免费存储（堆）中分配或保留字节数。新分配的内存未初始化。
由于新分配的内存的初始值未指定，因此?


-------------------------------------------------------- KeyPgAlphaGfx ----

Alpha   a通道
  
图形语句的参数，该语句选择 alpha 混合作为方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

参数
Alpha
必填。
alphaval
范围 [0..255] 中的可选 alpha 参数。覆盖单个像素中的 Alpha 值。

描述
Alpha选择 Alpha 混合作为调色图像的方法。如果指定了该参数，它将覆盖每个像素的 alpha 值，并且蒙版颜色（洋红色）将被视为透明。这适用于 15、16、24 或 


-------------------------------------------------------- KeyPgAndGfx ----

And   和
  
图形语句的参数，该语句使用按位作为 blitting 方法PutAnd

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

参数
And
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有遮罩颜色，尽管设置了所有位的颜色值（对于 8 位?


-------------------------------------------------------- KeyPgAny ----

Any   任意
  
该关键字以各种方式用作类型或值的占位符。Any

语法
Dim identifier As Any Pointer|Ptr
orororororor
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )

Dim identifier(Any [, Any...]) As DataType

[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType  )

Dim identifier As DataType = Any

New DataType ( Any )

New(Address) DataType [count] { Any }

InStr|InStrRev ( string, Any substring )

描述
指针：
称为 （或 “”） 的特殊指针类型允许指向任何变量类型。如果将其转换为 ，则可以对其进行索引或取消引用，以访问作为 的实例访问内存。允许在 上使用指针算术，并将其视为 


-------------------------------------------------------- KeyPgAppend ----

Append   追加
  
指定要为追加模式打开的文本文件

语法
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行追加的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行写入的文件模式。
此模式用于向现有文件添加文本，或将逗号分隔的值与 。
文本文件不能在FreeBASIC中同时读


-------------------------------------------------------- KeyPgArrayLen ----

Arraylen
  
提供给定数组名称的数组的长度。

语法
Declare Function ArrayLen ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArrayLen(arrayname())

参数
arrayname
返回其长度的数组的名称。

描述
返回 由


-------------------------------------------------------- KeyPgArraySize ----

Arraysize
  
提供给定数组名称的数组的大小。

语法
Declare Function ArraySize ( arrayname() As Const Any ) As UInteger

用法
#include once "fbc-int/array.bi"
using FB
...
result = ArraySize(arrayname())

参数
arrayname
返回其大小的数组的名称。

描述
返回由 （数组元素的?


-------------------------------------------------------- KeyPgAs ----

As   为
  
指定数据类型的声明的一部分，或指定文件句柄的 Open 语句的一部分。

语法
symbolname As datatype

Open ... As #filenumber
Type ... As datatype

描述
As用于声明变量、字段或参数的类型，也用于在语句中


-------------------------------------------------------- KeyPgAsc ----

Asc   字符取码值
  
返回字符的相应 ASCII 或 Unicode 整数表示形式。

语法
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

用法
result = Asc( str [, position ] )

参数
str
源字符串。
position
字符字符串中的位置。

返回值
存储在 中的原始字符值。
如果两者都可以在编译时计算（如 或 或 ...），则在结果中返回值，否则在结果中返回。positionstrstrpositionAsc("a")Asc(chr(97))Asc("abc", 2)UIntegerULong

描述
如果 是 a 或 a ，则返回该处的值。这将是一个 7 位 ASCII 代码，甚至是某些代码页中的 8 位字符值，具体取?


-------------------------------------------------------- KeyPgAsin ----

Asin   反正弦
  
查找数字的反正弦

语法
Declare Function Asin ( ByVal number As Double ) As Double

用法
result = Asin( number )

参数
number
范围为 [-1..1] 的正弦值。

返回值
的弧正弦（以弧度为单位），范围为 [-Pi/2..Pi/2]。number

描述
Asin将参数的反正弦值作为 -Pi/2 到 Pi/2 范围内的 a 返回。反正弦是函?


-------------------------------------------------------- KeyPgAsm ----

Asm   汇编
  
允许使用特定于体系结构的指令的代码块。

语法
Asm
architecture-dependent instructions
End Asm

或

Asm architecture-dependent instructions

描述
该块用于在程序中插入特定的机器代码指令，以便执行无法使用语言功能执行的操作，或手动优化性能敏感的代码部分。
当前的 FreeBASIC 编译器目前只为基于英特尔 80x86 的机器生成代?


-------------------------------------------------------- KeyPgAssert ----

Assert   中断执行
  
调试在表达式计算为 （false） 时停止程序执行的宏。0

语法
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
Assert( expression )

参数
expression
任何有效的条件/数值表达式。如果计算结果为（即“false”），则停止执行。expression0

描述
该宏旨在用于调试，并且仅当 或 -eassertfbcexpression0-g 未传递给 fbc、该宏不生成任何代码且不起作用时才有效。
注意：如果在程序位于?


-------------------------------------------------------- KeyPgAssertwarn ----

AssertWarn   调试警告
  
调试在表达式的计算结果为 0 时打印警告的宏。

语法
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

用法
AssertWarn( expression )

参数
expression
任何有效的表达式。如果计算结果为 ，则会向 stderr （控制台） 打印一条警告消息。expression0

描述
该宏旨在用于调试，并且仅当在 FBC 命令行中选择了该选项时才有效。在这种情况下，如果计算结果为


-------------------------------------------------------- KeyPgAtan2 ----

Atan2   反正切2
  
返回比率的反正切值

语法
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

用法
result = ATan2( y, x )

参数
y
垂直分量的比率。
x
比率的水平分量。

返回值
切线为的角度，以弧度为单位，在 [-Pi..圆周率]。y/x

描述
ATan2返回比率的反正切值，作为 -Pi 到 Pi 范围内的?


-------------------------------------------------------- KeyPgAtn ----

Atn   反正切
  
返回数字的反正切值

语法
Declare Function Atn ( ByVal number As Double ) As Double

用法
result = Atn( number )

参数
number
数字。

返回值
角度（以弧度为单位，其切线为 ）范围为 [-Pi/2..Pi/2]。number

描述
Atn将参数的反正切值作为 -Pi/2 到 Pi/2 范围内的 a 返回。反正切是函数


-------------------------------------------------------- KeyPgBase ----

Base (Member Access)   基类
  
提供对 非静态方法中的基类型成员的显式访问Type

语法
Base.member
Base [ .Base ... ] .member

描述
Base提供了一种在用户定义类型的非静态方法的上下文中显式访问特定基类型的成员的方法，这些方法使用 派生自另一种类型。
通过重复使用，如 在 中，可以访问任何所需的基类型，以防


-------------------------------------------------------- KeyPgBaseInit ----

Base (Initializer)   基类
  
为派生的 Udt 构造函数中的基本 UDT 指定初始值设定项

语法
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

描述
初始值设定项可用于派生 UDT 的构造函数的顶部。它允许指定显式构造函数调用或用于初始化基对象的 UDT 初始值设定项。它将替换隐式默认初始化，并且必须出现在使用它的构造函数中的?


-------------------------------------------------------- KeyPgBeep ----

Beep   响铃
  
发出蜂鸣音。

语法
Declare Sub Beep ( )

用法
Beep

描述
Beep告诉系统发出蜂鸣声。请注意，这可能在某些平台上不起作用。由于此命令不可靠，并且无法指定频率和持续时间，因此您可能希望避免使用它，以支?


-------------------------------------------------------- KeyPgBin ----

Bin   二进制
  
返回整数的二进制（基数为 2）字符串表示形式

语法
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String

Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Bin[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
返回的字符串中所需的位数。

返回值
包含 的无符号二进制表示形式的字符串。number

描述
返回一个字符串，该字符串表示整数的无符号二进制值。二进制数字的范围从 0 到 1。
如果指定 > 0，则结果字符串将恰?


-------------------------------------------------------- KeyPgBinary ----

Binary   二进制流
  
指定要为二进制模式打开的文件或设备

语法
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开的文件名
access_type
指示文件是可以从中读取、写入文件还是同时读取到两者
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
打开文件或设备，用于以自由格式读取和/或写入文件中的二进制数据。
如果该文件不存在，则将创建一个新文件。文件


-------------------------------------------------------- KeyPgBit ----

Bit   位
  
获取整数值中单个位的状态。

语法
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

用法
result = Bit( value, bit_number )

参数
value
整数值。
bit_number
位的索引。

返回值
返回一个值 if 如果设置了该位，或者如果该位已清除。Integer-10

描述
此宏扩展为一个整数值，该值指示 指定的位是否在整数 中设置。行为为“”。
的有效值范围取决于 '' 的大小（以位为单位），即 ''（从最低位开始）?


-------------------------------------------------------- KeyPgBitreset ----

BitReset   位重置
  
从复制的整数中获取清除指定位的值。

语法
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitReset( value, bit_number )

参数
value
整数值。
bit_number
要清除的位的索引。

返回值
返回已清除指定位的整数值。

描述
此宏扩展为已清除指定的整数（to off 或 ''）的副本。行为为“”。
要清除变量中的指定位，可以使用以下赋值： 
的有效值范围取决于 '' 的大小（?


-------------------------------------------------------- KeyPgBitset ----

BitSet   位整数值
  
从复制的整数中获取具有指定位集的值。

语法
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

用法
result = BitSet( value, bit_number )

参数
value
整数值。
bit_number
要设置的位的索引。

返回值
返回设置了指定位的整数值。

描述
此宏扩展为具有指定集（to on 或 ''）的整数的副本。行为为“”。
要在变量中设置指定的位，可以使用以下赋值： 
的值的有效范围取决于 '' 的大


-------------------------------------------------------- KeyPgBload ----

BLoad   位图加载
  
从使用 创建的文件或兼容的 BMP 映像文件中加载任意数据。BSave

语法
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

用法
result = BLoad( filename [, [ dest ] [, pal ] ] )

参数
filename
要从中加载图像的文件的名称;可以包含文件路径
dest
要将图像加载到的内存位置，或 null （） 将图像复制到当前图形屏幕工作页面0
pal
要将调色板加载到的内存位置，或 null （） 更改当前图形屏幕调色板（如果它使用0

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。（引发运行时错误）0

描述
BLoad可用于从使用 创建的文件中加?


-------------------------------------------------------- KeyPgBoolean ----

Boolean   逻辑型
  
标准数据类型

语法
Dim variable As Boolean

描述
布尔数据类型。可以保存的值或
初始化时的默认值是
 关于定义布尔数据类型的注释：TrueFalseFalse
- 理想情况下，布尔数据类型的定义是它包含 True 或 False 的值，仅此而已。然而，要使这个概


-------------------------------------------------------- KeyPgBsave ----

BSave   位图保存
  
将任意数据和调色板信息的数组保存到磁盘上的文件中

语法
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

用法
result = BSave( filename, source [,[ size ][,{ pal | pal, bitsperpixel }]] )

参数
filename
要创建的用于存储像素和调色板数据的文件的名称。
source
要存储的数据的地址，或 null （） 用于存储当前屏幕工作页面中的像素数据。0
size
可选，要存储的数据的总字节数。除非输出是 BMP 文件，否则需要此值。
pal
可选，包含 256 种颜色的缓冲区的地址，或当前屏幕调色板的空 （）。Palette0
bitsperpixel
可选，输出 BMP 图像请求的位深度。如果指定，则还必须指定（至少为 null （） 值），否则将获得错误。bitsperpixelpal0

返回值
如果成功，则返回零 （），或返回非零错误代码以指?


-------------------------------------------------------- KeyPgByref ----

Byref (Parameters)   传址
  
通过引用显式传递参数的声明说明符

语法
ByRef param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype  )

描述
通过引用（即变量的地址）将变量传递给子例程或函数。当变量通过引用传递时，目标子例程或函数可以更改变量的内容。
在 -lang qb 和 -lang fblite 方言中，是默认参数传递约定，除非?


-------------------------------------------------------- KeyPgByrefFunction ----

Byref (Function Results)   传址
  
指定通过引用返回函数结果

语法
Function name ( parameter-list ) ByRef As datatype

描述
使函数结果按引用而不是按值返回。返回的函数将返回变量的地址，而不是像按值返回时那样进行复制。这允许函数的调用方修改函数结果指向的变量。
如果未指定，则默认按值返回函数结果。
具?


-------------------------------------------------------- KeyPgByrefVariables ----

Byref (Variables)   传址
  
声明引用

语法
(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
或
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
或
[Static] Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

参数
name
引用名称
variable
要引用的变量名称

描述
声明对变量的引用（按名称）。
引用是一种实体，用于访问位于内存中的数据。引用不是数据本身，而只是有关其位置的信息。可以将引用视为隐式取消引用的指针。在许多情况下，它可以?


-------------------------------------------------------- KeyPgByte ----

Byte   字节
  
标准数据类型：8 位签名

语法
Dim variable As Byte

描述
8 位有符号整数数据类型


-------------------------------------------------------- KeyPgByval ----

ByVal   传值
  
声明说明符，用于按值显式传递参数

语法
ByVal param As datatype

用法
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype  )

描述
ByVal在声明语句的参数列表中，导致变量的副本通过其值传递给过程（例如，sub 或函数）。
这意味着，如果传递了变量 x 的值，则原始变量 x 将不会以任何方式进行修改;但是，如果传递?


-------------------------------------------------------- KeyPgCall ----

Call   调用
  
调用子例程的语句

语法
Call procname ([parameter list])

描述
调用 或 。
此关键字是 BASIC 早期方言的保留，主要已弃用。
在 -lang qb 中，它可用于在声明之前在代码中调用 s。该函数将隐式为 'd，并传递任何参数。
注意?


-------------------------------------------------------- KeyPgCallocate ----

CAllocate   内存分配初始化
  
为自由存储中一定数量的元素分配内存并清除内容

语法
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

用法
result = CAllocate( num_elements [, size ] )

参数
num_elements
要为其分配内存的元素数。
size
每个元素的大小（以字节为单位）。

返回值
如果成功，则返回已分配内存的起始地址。否则，将返回空指针 （）。0

描述
CAllocate用零初始化分配的内存。
因此，也可以直接


-------------------------------------------------------- KeyPgCase ----
Case   条
Description



-------------------------------------------------------- KeyPgCast ----

Cast   转换
  
将表达式转换为指定的数据类型

语法
Cast( datatype, expression )

参数
datatype 
内置数据类型（标准类型）
expression 
另一个内置数据类型的变量

描述
转换为其他 .当未知时以及在转换为类型别名时，在宏中使用非常有用。
这是转换运算符的一种通用形式，例如 或 。
用途更广，因为它可以用于具有内置的内置类?


-------------------------------------------------------- KeyPgCbool ----

CBool
  
将数字或字符串表达式转换为布尔值 （Boolean)

语法
Declare Function CBool ( ByVal expression As datatype ) As Boolean

Type typename
Declare Operator Cast ( ) As Boolean
End Type

用法
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

参数
expression
要转换为值的数字、字符串或用户定义类型Boolean
datatype
任何数字、字符串或用户定义的类型
typename
用户定义的类型

返回值
值。Boolean

描述
该函数将零值转换为 ，并将非零值转换为 。
该名称?


-------------------------------------------------------- KeyPgCbyte ----

CByte   转字节
  
将数字或字符串表达式转换为 。Byte

语法
Declare Function CByte ( ByVal expression As datatype ) As Byte

Type typename
Declare Operator Cast ( ) As Byte
End Type

用法
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式。Byte
datatype
任何数值、字符串或指针数据类型。
typename
用户定义的类型。

返回值
值。Byte

描述
该函数舍入小数部分并返回 8 位值。该函数不?


-------------------------------------------------------- KeyPgCdbl ----

CDbl   转双精型
  
将数字或字符串表达式转换为精确浮点Double

语法
Declare Function CDbl ( ByVal expression As datatype ) As Double

Type typename
Declare Operator Cast ( ) As Double
End Type

用法
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Double
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
精度值。Double

描述
该函数返回一个 64 位值。该函数不检查溢出，因此请?


-------------------------------------------------------- KeyPgCdecl ----

cdecl   cdecl
  
在过程声明中指定 cdecl 样式的调用约定

语法
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在调用约定中，任何参数都将以列出它们的相反顺序传递（推送到堆栈上），即从右到左。过程不需要保留 或 寄存器，并且不得在堆栈返回之前清理堆栈（


-------------------------------------------------------- KeyPgChain ----

Chain   链接
  
暂时将控制权移交给外部程序

语法
Declare Function Chain ( ByRef program As Const String ) As Long

用法
result = Chain( program )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。

返回值
如果成功执行，则返回外部


-------------------------------------------------------- KeyPgChdir ----

ChDir   改路径
  
更改当前驱动器和目录

语法
Declare Function ChDir ( ByRef path As Const String ) As Long

用法
result = ChDir( path )

参数
path
指定要更改为的路径的参数。String

返回值
成功时返回零 （0），失?


-------------------------------------------------------- KeyPgChr ----

Chr   数转字符
  
从一个或多个 ASCII 整数值返回一串字符

语法
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

用法
result = Chr[$]( ch0 [, ch1 ... chN ] )

参数
ch
字符的 ASCII 整数值。

返回值
返回包含字符的字符串。

描述
Chr返回一个字符串，其中包含由传递给它的 ASCII 值所表示的字符。
当与数值?


-------------------------------------------------------- KeyPgCint ----

CInt   转整型
  
将数字或字符串表达式转换为IntegerInteger<bits>

语法
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>

Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

用法
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

参数
bits
一个数字常量表达式，指示所需大小的整数位。允许的值为 、 或 。8163264
expression
要转换为值的数字、字符串或指针表达式Integer
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
包含转换后的值的 或。IntegerInteger<bits>

描述
如果传递给一个数字，它使用舍入到偶数的方法对其进行舍入 - 即它舍入到最接近的整数值，如果数


-------------------------------------------------------- KeyPgCircle ----

Circle   画圆
  
用于绘制椭圆或圆的图形语句

语法
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

参数
target
可选;指定要在其上绘制的图像缓冲区
STEP
表示坐标是相对的
(x, y)
椭圆中心的坐标
radius
圆的半径 - 对于椭圆，为半长轴（即最长半径）
color
颜色属性
start
起始角度
end
结束角度
aspect
椭圆的纵横比，高度与宽度的比率
F
填充模式指示器

描述
Circle将根据给定的参数绘制一个圆、椭圆或圆弧。
指定要在其上绘制的缓冲区。 可能是使用 或 


-------------------------------------------------------- KeyPgClass ----

Class   类对象
  
声明类对象

语法
Class typename ...

参数
typename
的名称Class

描述
我们会在这里放一些有用的东西（诚实），除了这个功能还没有在编译器中实现。但是


-------------------------------------------------------- KeyPgClear ----

Clear   清除
  
清除或初始化某些内存

语法
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

用法
Clear( dst, [value], bytes )

参数
dst
某些内存的起始地址
value
要将所有字节设置为等于的值
bytes
要清除的字节数

描述
Clear将内存中的一个或多个字节设置为特定值（如果未指定，则默认值为零 （）。起始地址取自对变量或数组元素


-------------------------------------------------------- KeyPgClng ----

CLng   转长型
  
将数值或字符串表达式转换为Long

语法
Declare Function CLng ( ByVal expression As datatype ) As Long

Type typename
Declare Operator Cast ( ) As Long
End Type

用法
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Long
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。Long

描述
该函数舍入小数部分并返回 32 位值。该函数不检查溢出，并且对于小


-------------------------------------------------------- KeyPgClngint ----

CLngInt   转长整型
  
将数字或字符串表达式转换为 64 位整数 （LongInt)

语法
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt

Type typename
Declare Operator Cast ( ) As LongInt
End Type

用法
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式LongInt
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。LongInt

描述
该函数舍入小数部分并返回 64 位值。该函数不检查溢出，并且对于小于或大于 的值，未定义结果?


-------------------------------------------------------- KeyPgClose ----

Close   关闭
  
流 I/O 功能，用于终止对设备的访问

语法
Close [[#]filenum ] [, [#]filenum ...]
 or 
result = Close( [#filenum] )

参数
filenum
要关闭的文件编号列表。

返回值
Close成功时返回 32 位 ：零 （），否则返回非零错误代码。Long0

描述
关闭其文件编号作为参数传递的文件。如果传递了未使用的文件编号，则返回错误。
没有参数将关闭当前


-------------------------------------------------------- KeyPgCls ----

Cls   清屏
  
在文本模式和图形模式下清除屏幕

语法
Declare Sub Cls ( ByVal mode As Long = 1 )

用法
Cls mode

参数
mode
一个可选的数值变量，其值为 从 到 。如果省略，则默认为 。021

描述
可以给出一个可选参数，mode

如果省略，则清除文本或图形视口。如果已使用该语句定义了图形视口，则将清除图形视口。否则，将清除由 定义的文本视?


-------------------------------------------------------- KeyPgColor ----

Color   颜色
  
设置与文本的控制台输出和图形输出一起使用的显示前景/背景色

语法
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

用法
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

参数
foreground
要设置的前景色
background
要设置的背景颜色

返回值
返回一个 32 位值，其中包含 中的当前前景色和 中的当前背景色。
在高/真彩色模式下，仅返回前景色，占用整个 32 位。相反，请参阅以返回当前图形模式颜色（前景和背景）。
可以在设置新颜色值的同时检索旧颜色值。Low WordHigh WordScreenControl

描述
该语句设置当前的前景色和/或背景色。、、、、、?


-------------------------------------------------------- KeyPgCommand ----

Command   命令行
  
返回用于调用程序的命令行参数

语法
Declare Function Command ( ByVal index As Long = -1 ) As String

用法
result = Command[$]( [ index ] )

参数
index
特定命令行参数的从零开始的索引。

返回值
返回命令行参数。

描述
Command返回在执行时传递给程序的命令行参数。
如果 小于零 （），则返回所有命令行参数的空格分隔列表，否则，返回单个参数。值为零 （） 返回可执行文


-------------------------------------------------------- KeyPgCommon ----

Common   全局变量
  
变量声明和作用域修饰符

语法
Common [Shared] symbolname[()] [AS DataType] [, ...]

描述
声明在代码模块（包括要编译为静态和动态库 （DLL） 的代码模块）之间共享的变量。
匹配语句必须出现在使用该变量的所有其他代码模块中。
无法初始化变量。
数组始终是可变长度的，并且?


-------------------------------------------------------- KeyPgCondBroadcast ----

CondBroadcast   条件变量广播
  
重新启动句柄的所有线程CondWait

语法
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

用法
CondBroadcast ( handle )

参数
handle
条件变量的句柄。

描述
一旦条件为并且线程启动，其中一个（包括执行主程序的隐式主线程）可以设置为条件，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重新启动等待条件的所有线程?


-------------------------------------------------------- KeyPgCondCreate ----

CondCreate   条件变量创建
  
创建要用于同步线程的条件变量

语法
Declare Function CondCreate ( ) As Any Ptr

用法
result = CondCreate

返回值
新创建的条件变量的句柄，或失败时的空指针 （0）。

描述
一旦条件为Condcreated并且线程启动，其中一个或多个线程（包括执行主程序的隐式主线程）可以设置为条件，它们将被停止，直?


-------------------------------------------------------- KeyPgCondDestroy ----

CondDestroy   条件变量销毁
  
在不再需要多线程条件变量时销毁该变量

语法
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

用法
CondDestroy ( handle )

参数
handle
要销毁的条件变量的句柄。

描述
一旦条件为 d 并且线程启动，其中一个（包括执行主程序的隐式主线程）可以设置为条件线程，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重新启动?


-------------------------------------------------------- KeyPgCondSignal ----

CondSignal   条件变量信号
  
重新启动由调用暂停的线程CondWait

语法
Declare Sub CondSignal ( ByVal handle As Any Ptr )

用法
CondSignal ( handle )

参数
handle
条件变量的句柄。

描述
一旦创建了条件线程并启动了线程，就可以为条件线程设置其中的多个线程（包括执行主程序的隐式主线程）之一，它们将被停止，直到等待线程可以重新启动的其他线程。 可用于重


-------------------------------------------------------- KeyPgCondWait ----

CondWait   条件变量等待
  
停止执行当前线程，直到某些条件变为 true

语法
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

用法
CondWait ( handle, mutex )

参数
handle
条件变量的句柄。
mutex
与此条件变量关联的互斥体，在测试条件和调用 时必须锁定该变量。CondWait

描述
停止调用它的线程的函数，直到其他线程 s 或 s 成为句柄。
一旦创建了条件变量并启动了线程，就可以为条件变量设置其中的多个变量之一


-------------------------------------------------------- KeyPgConst ----

Const   常量
  
不可修改的变量声明。

语法
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

描述
声明不可修改的常量数据，这些数据可以是整数或十进制（浮点数）数字或字符串。如果未显式给出，则将推断常量类型。
不允许指定 或 as。
允许指定 as，但不起作用，因为生成的类型始终为 .



-------------------------------------------------------- KeyPgConstMember ----

Const (Member)   常量
  
指定成员过程为只读。

语法
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type

[Const] Sub|Function|... typename ...
...
End Sub|Function|...

描述
指定方法不更改调用它的对象。隐藏的参数将被视为只读。该声明可以读作“调用 const 方法承诺不更改对象”，如果成员过程尝试更改任何数据字段或调用非 const 成员过程，编译器将出错。
只读?


-------------------------------------------------------- KeyPgConstQualifier ----

Const (Qualifier)   常量
  
指定数据类型或指针数据类型为只读。

语法
... As [Const] datatype [ [Const] Ptr ... ]

参数
datatype
标准或用户定义的数据类型的名称。

描述
指定将限定符右侧的 or 视为只读。只读（）声明是类型安全的度量，可以理解为“承诺不更改”。编译器使用 const 声明来检查对变量和参数的操作，并在编译时生成错误?


-------------------------------------------------------- KeyPgConstructor ----

Constructor   构造函数
  
在创建类或用户定义类型时自动调用

语法
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type

Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

参数
typename 
或 的名称TypeClass

描述
Constructor在创建用户定义或变量时调用方法。
是为其声明和定义方法的类型的名称。的名称解析遵循与 在 中使用的过程相同的规则。
一个类型或类可能存在多个构造函数。调用的


-------------------------------------------------------- KeyPgContinue ----

Continue   继续本次
  
控制流语句以继续循环的下一次迭代

语法
Continue {Do | For | While}

描述
跳过所有代码，直到循环结构的结束子句（即 、或块），然后执行限制条件检查。在 a 的情况下，变量根据指定的递增。
如果有多个 / / 块嵌套，它将继续在该类型的最内层块上，即输入的


-------------------------------------------------------- KeyPgCos ----

Cos   余弦
  
返回角度的余弦

语法
Declare Function Cos ( ByVal angle As Double ) As Double

用法
result = Cos( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的余弦作为 to 的范围内返回。angleDouble-1.01.0

描述
参数以弧度（而不是度）为单位进行度量。
对于绝?


-------------------------------------------------------- KeyPgCptr ----

CPtr   转为PTR
  
将指针表达式转换为指定的数据类型指针

语法
CPtr( PointerDataType, expression )

描述
转换为 .
必须是一种类型（例如数据类型或 ），或者是一对一。
可能具有不同的指针类型，也可能是 .
 注意：目前，FB实际上并没有强制要求必须是指针。不过，这在将来的版本中可能?


-------------------------------------------------------- KeyPgCshort ----

CShort   转短整型
  
将数字或字符串表达式转换为整数 （Short)

语法
Declare Function CShort ( ByVal expression As datatype ) As Short

Type typename
Declare Operator Cast ( ) As Short
End Type

用法
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Short
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。Short

描述
该函数舍入小数部分并返回一个 16 位值。该函数不检查?


-------------------------------------------------------- KeyPgCsign ----

CSign   转符号
  
将表达式转换为有符号

语法
CSign ( expression )

用法
variable = CSign ( expression )

描述
将无符号转换为有符号，这对于强制除法或乘法的有符号行为（


-------------------------------------------------------- KeyPgCsng ----

CSng   转单精型
  
将数字或字符串表达式转换为精确浮点Single

语法
Declare Function CSng ( ByVal expression As datatype ) As Single

Type typename
Declare Operator Cast ( ) As Single
End Type

用法
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式Single
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
精度值。Single

描述
该函数返回一个 32 位值。该函数不检查溢出，因此请


-------------------------------------------------------- KeyPgCsrlin ----

CsrLin   光标行
  
返回游标的行位置

语法
Declare Function CsrLin ( ) As Integer

用法
result = CsrLin

返回值
指定游标的当前行。Integer

描述
返回游标所在的?


-------------------------------------------------------- KeyPgCubyte ----

CUByte   转U字节型
  
将数字或字符串表达式转换为无符号字节 （UByte)

语法
Declare Function CUByte ( ByVal expression As datatype ) As UByte

Type typename
Declare Operator Cast ( ) As UByte
End Type

用法
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式UByte
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。UByte

描述
该函数舍入小数部分并返回 8 位值。该函数不?


-------------------------------------------------------- KeyPgCuint ----

CUInt   转U整型
  
将数字或字符串表达式转换为或UIntegerUInteger<bits>

语法
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>

Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

用法
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

参数
bits
一个数值常量表达式，指示所需无符号整数位的大小。允许的值为 、 或 。8163264
expression
要转换为 或 值的数字、字符串或指针表达式UIntegerUInteger<bits>
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
A 或 包含转换后的值。UIntegerUInteger<bits>

描述
该函数舍入小数部分并返回一个值，或者如果提供了值，则返回给定大小的无符号整数类型。
?


-------------------------------------------------------- KeyPgCulng ----

CULng   转U长型
  
将数值或字符串表达式转换为ULong

语法
Declare Function CULng ( ByVal expression As datatype ) As ULong

Type typename
Declare Operator Cast ( ) As ULong
End Type

用法
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式ULong
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。ULong

描述
该函数舍入小数部分并返回 32 位值。该函


-------------------------------------------------------- KeyPgCulngint ----

CULngInt   转U长整型
  
将数字或字符串表达式转换为 64 位无符号整数 （ULongInt)

语法
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt

Type typename
Declare Operator Cast ( ) As ULongInt
End Type

用法
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式ULongInt
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。ULongInt

描述
该函数舍入小数部分并返回 64 位值。该函数不检查溢出，并且对于小于或大于 的值，未定义结果。此外，浮点表达式的强制转换当?


-------------------------------------------------------- KeyPgCunsg ----
CUnsg   转无
Description



-------------------------------------------------------- KeyPgCurdir ----

CurDir   目录取当前
  
返回当前目录/文件夹

语法
Declare Function CurDir ( ) As String

用法
result = CurDir

返回值
设置为当前目录/文件夹的名称。String

描述
返回当前目录/文件夹。

例

Print CurDir

输出会有所不同。

方言差异
在 -lang qb 方言中不可用，除非使用别名 引用。__Curdir




-------------------------------------------------------- KeyPgCushort ----

CUShort   转U短整型
  
将数字或字符串表达式转换为无符号整数 （UShort)

语法
Declare Function CUShort ( ByVal expression As datatype ) As UShort

Type typename
Declare Operator Cast ( ) As UShort
End Type

用法
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

参数
expression
要转换为值的数字、字符串或指针表达式UShort
datatype
任何数值、字符串或指针数据类型
typename
用户定义的类型

返回值
值。UShort

描述
该函数舍入小数部分并返回一个 16 位值。该函数不检?


-------------------------------------------------------- KeyPgCustomgfx ----

Custom   自定义
  
选择自定义方法的图形语句的参数Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

参数
Custom
必填。
custom_function_ptr
自定义用户定义函数的名称。
parameter
可选传递给自定义函数;如果省略，则默认值为零 （）。Pointer0

描述
Custom选择自定义用户定义函数作为删除图像缓冲区的方法。
该方法使用用户定义的函数来计算要绘制到目标缓冲区的最终像素值。对于源图像的?


-------------------------------------------------------- KeyPgCvaArg ----

Cva_Arg
  
宏，用于从可变参数列表对象获取下一个参数。

语法
variable = Cva_Arg ( argument_list, datatype )

参数
argument_list
Cva_List要访问下一个值的数据类型变量
datatype
变量参数列表中下一个值的数据类型argument_list

描述
该宏允许在函数中使用可变数量的参数：Cva_Arg
 	Cva_Arg返回列表中的当前参数，其预期数据类型为 。argument_listdatatype
在首次使用之前，?


-------------------------------------------------------- KeyPgCvaCopy ----

Cva_Copy
  
用于从已初始化的可变参数列表对象变量初始化可变参数列表对象变量的宏

语法
Cva_Copy( dst_list, src_list )

参数
dst_list
要初始化的目标变量Cva_List
src_list
要从中复制的源变量Cva_List

描述
将一个类型变量复制到另一个类型变量。 使用当前状态进行初始化，
必须已使用上一个或语句初始化。
就像可变参数列表对象的副本构造函数，并且最?


-------------------------------------------------------- KeyPgCvaEnd ----

Cva_End
  
用于清理可变参数列表对象变量的宏

语法
Cva_End( argument_list )

参数
argument_list
Cva_List要清理的变量

描述
清理以前使用 或 初始化的类型变量，如析构函数。
必须已使用与（为了跨平台兼容性）相同的过程中的上一?


-------------------------------------------------------- KeyPgCvaList ----

Cva_List
  
可变参数列表对象类型

语法
Dim variable As Cva_List

描述
Cva_List是一种内置数据类型，用于在可变参数过程中使用可变长度参数列表。
用于初始化变量（构造函数）。
用于复制变量（复制构造函数）。
用于获取下一个参数的值。
使用完变量（析构函数?


-------------------------------------------------------- KeyPgCvaStart ----

Cva_Start
  
用于初始化可变参数列表对象变量的宏

语法
Cva_Start( argument_list, last_param )

参数
argument_list
Cva_List要初始化的数据类型变量
last_param
过程参数列表中省略号之前的最后一个参数 ...

描述
在可变参数过程定义中，是具有该类型的变量，必须使用该类型进行初始化才能使用传递给过程的变量长度参数列表。
是可变参数过程定义中省略号之前的最后


-------------------------------------------------------- KeyPgCvd ----

CVD   转整双精型
  
将 64 位整数或 8 字节字符串转换为双精度值

语法
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

用法
result = CVD( l )
result = CVD( str )

参数
l
一个 64 位，其中存储了双精度变量的二进制副本。LongInt
str
长度至少为 8 个字节，其中存储了双精度变量的二进制副本。String

返回值
返回一个值，该值保存输入值的二进制副本。Double

描述
从 64 位或 8 字节到变量的二进制副本。如果字符串的长度小于 8 ?


-------------------------------------------------------- KeyPgCvi ----

CVI   转整单精型
  
使用二进制副本将浮点数或字符串转换为整数变量

语法
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer

Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

用法
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

参数
f
一个浮点数，其中存储了一个整数变量的二进制副本。其精度（或）取决于当前平台上的大小SingleDoubleInteger
str
包含存储在其中的整数变量的二进制副本。String
bits
指定要返回的整数类型大小。接受的类型和大小将取决于调用的相应函数。expr
expr
将复制到 .Integer<bits>

返回值
包含输入表达式的二进制副本的 or 变量。IntegerInteger<bits>

描述
使用浮点值中包含的二进制数据或 .如果字符串?


-------------------------------------------------------- KeyPgCvl ----

CVL   转整单精整型
  
将单精度浮点数或四字节字符串转换为整数 （） 变量Long

语法
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

用法
result = CVL( sng )
result = CVL( str )

参数
sng
一个浮点数，其中存储了一个整数变量的二进制副本。Single
str
长度至少为四个字节，其中存储了整数变量的二进制副本。String

返回值
要将整数的二进制副本复制到的变量。Long

描述
使用 a 中包含的二进制数据返回一个 32 位整数值，或长度至少为 4 个字节的 a。如果字符串


-------------------------------------------------------- KeyPgCvlongint ----

CVLongInt   转双精长整型
  
将双精度浮点数或八字节字符串转换为变量LongInt

语法
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

用法
result = CVLongInt( dbl )
result = CVLongInt( str )

参数
dbl
一个浮点数，其中存储了变量的二进制副本。DoubleLongInt
str
长度至少为八个字节，其中存储了变量的二进制副本。StringLongInt

返回值
保存输入变量的二进制副本的变量。LongInt

描述
使用长度至少为 8 个字节的 a 或 a 中包含的二进制数据返回一个 64 位值。如果字符串的长度小于八个字节，


-------------------------------------------------------- KeyPgCvs ----

CVS   转单精整型
  
将 32 位整数或 4 字节字符串转换为单精度变量

语法
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

用法
result = CVS( i )
result = CVS( str )

参数
i
一个 32 位，其中存储了单精度变量的二进制副本。Integer
str
长度至少为 4 个字节，其中存储了单精度变量的二进制副本。String

返回值
返回一个值，该值保存输入值的二进制副本。Single

描述
从 32 位或 4 字节到变量的二进制副本。如果字符串的长度?


-------------------------------------------------------- KeyPgCvshort ----

CVShort   转字短整型
  
将双字节字符串转换为整数变量Short

语法
Declare Function CVShort ( ByRef str As Const String ) As Short

用法
result = CVShort( str )

参数
str
长度至少为两个字节，其中存储了整数变量的二进制副本。StringShort

返回值
 Short保存 的二进制副本的变量。Keypgshort

描述
使用长度至少为两个字节的 a 中包含的二进制数据返回一个 16 位整数值。如果字符串的长度小于两个字节，则返回值为零 （）。
用于转


-------------------------------------------------------- KeyPgData ----

Data   数据
  
用于在编译时存储数据的语句。

语法
Data constant_expression1 [,constant_expression2]...

描述
Data存储常量数值或字母表达式的列表，这些表达式在编译时计算（使用 -lang qb 除外），并存储为常量，可以使用 读取到变量中。
程序中的所有语句都表现为单个链式列表;读取一个语句的最?


-------------------------------------------------------- KeyPgDate ----

Date   日期
  
以字符串形式返回当前系统日期

语法
Declare Function Date ( ) As String

用法
result = Date[$]

返回值
返回当前系统日期，格式为mm-dd-yyyy

描述
没有

例

Print Date ' 打印当前日期



与QB的区别
QB DATE 语句（用于设置系统日期）现在称为 。SetDate
字符串类型后缀“$”在 -lang qb 方言中是必需的。


-------------------------------------------------------- KeyPgDateAdd ----

DateAdd   日期相加
  
以指定的间隔偏移日期

语法
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

用法
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

参数
interval
指示哪个时间段对应于一个单位的字符串number
number
要添加到基准日期的间隔数。该数字将四舍五入为最接近的整数。
date_serial
基准日期

返回值
返回与收到的 加上 的 相对应的 日期序列。date_serialnumberintervals

描述
间隔指


-------------------------------------------------------- KeyPgDateDiff ----

DateDiff   日期差值
  
获取按指定间隔测量的两个日期的差异

语法
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

参数
interval
用于测量差值的时间单位（间隔）
date_serial1
开始日期序列
date_serial2
结束日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，该整数对应于在两个日期序列之间找到的 s 数。
如果>，则结果为负数。intervaldate_serial1date_serial2

描述
interval指定如下：

价值间隔yyyy年q季度（三个月）m月份w七天期间断续器日历周d，y日h小?


-------------------------------------------------------- KeyPgDatePart ----

DatePart   日期部分
  
从日期获取间隔

语法
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

用法
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

参数
interval
指示日期的哪一部分需要的字符串
date_serial
要解码的日期序列
firstdayofweek
一周的第一天
firstdayofyear
一年的第一天

返回值
返回一个整数，表示 日期序列中的 。interval

描述

interval指示需要日期的哪一部分的字符串指定如下：

价值间隔yyyy年q季度（三个月）m月份w工作日断续器一年中的一周y一年中的


-------------------------------------------------------- KeyPgDateSerial ----

DateSerial   日期序列
  
创建日期序列

语法
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

用法
#include "vbcompat.bi"
result = DateSerial( year, month, day )

参数
year
年份
month
一年中的月份
day
月份中的某一天

返回值
返回一个日期序列，其中包含由 和 参数中的值形成的日期。返回的日期序列没有


-------------------------------------------------------- KeyPgDateValue ----

DateValue   日期数值
  
从字符串返回日期序列

语法
Declare Function DateValue ( ByRef date_string As String ) As Double

用法
#include "vbcompat.bi"
result = DateValue( date_string )

参数
date_string
要转换为日期序列的字符串

返回值
从日期字符串返回日期序列。

描述
日期字符串必须采用在操作系统的区域设置中设置的格式。
仅当区域设置指定了与使用的相同的短日期格式 QB （） 时，才能正常工作。请考虑?


-------------------------------------------------------- KeyPgDay ----

Day   日期取天
  
从日期序列中获取月份中的某一天

语法
Declare Function Day ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Day( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回月份中


-------------------------------------------------------- KeyPgDddate ----

__DATE__   _编译__日期__
  
编译器设置的内部定义（宏值）

语法
__DATE__

描述
将文本字符串（格式）


-------------------------------------------------------- KeyPgDddateiso ----

__DATE_ISO__   _编译_日期_ISO
  
编译器设置的内部定义（宏值）

语法
__DATE_ISO__

描述
将文本字符串（格式）中的编译器日期替换为已使用的


-------------------------------------------------------- KeyPgDdfb64bit ----

__FB_64BIT__   _编译_64位
  
编译器设置的内部定义

语法
__FB_64BIT__

描述
定义编译时?


-------------------------------------------------------- KeyPgDdfbargc ----

__FB_ARGC__   _编译传名称
  
编译器设置的内部定义（宏值）

语法
__FB_ARGC__

描述
替换为命令行上传入的参数数。
 __FB_ARGC__是传递给程序


-------------------------------------------------------- KeyPgDdfbargcount ----

__FB_ARG_COUNT__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_COUNT__( args... )

参数
args...
参数列表

描述
计算参数列表 （） 中的参数数并返回相应的值。
始终返回一个值，其中 0 对应于空参


-------------------------------------------------------- KeyPgDdfbargextract ----

__FB_ARG_EXTRACT__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_EXTRACT__( index, args... )

参数
index
从第一个参数开始的从零开始的偏移量（零或正整数值）
args...
参数列表

描述
从与索引值 （） 对应的参数列表 （）


-------------------------------------------------------- KeyPgDdfbargleftof ----

__FB_ARG_LEFTOF__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_LEFTOF__( arg, sep [, ret] )

参数
arg
论点
sep
分隔符，明显不同于逗号 （，）
ret
如果未找到分隔符，则默认返回

描述
基于分隔符 （） 返回参数 （） 的左标记。
 （在参数的表达式中，标记和分隔符必须间隔）
默认情况下，如果未给出默认返回 


-------------------------------------------------------- KeyPgDdfbargrightof ----

__FB_ARG_RIGHTOF__
  
编译器执行的内部定义（宏）。

语法
__FB_ARG_RIGHTOF__( arg, sep [, ret] )

参数
arg
论点
sep
分隔符，明显不同于逗号 （，）
ret
如果未找到分隔符，则默认返回

描述
基于分隔符 （） 返回参数 （） 的正确标记。
 （在参数的表达式中，标记和分隔符必须间隔）
默认情况下，如果未给出默认返回


-------------------------------------------------------- KeyPgDdfbargv ----

__FB_ARGV__   _编译传入值
  
编译器设置的内部定义（宏值）

语法
__FB_ARGV__

描述
替换为指向指向命令行上传入的零个终止的命令行参数的指针列表的指针。
 __FB


-------------------------------------------------------- KeyPgDdfbarm ----

__FB_ARM__   _编译_ARM_
  
编译器设置的内部定义

语法
__FB_ARM__

描述
如果编译目标使用 ARM CPU 


-------------------------------------------------------- KeyPgDdfbasm ----

__FB_ASM__   _编译_汇编
  
编译器设置的内部定义

语法
__FB_ASM__

描述
__FB_ASM__返回一个字符串，该字符串等于或取决于内联装?


-------------------------------------------------------- KeyPgDdFBBackend ----

__FB_BACKEND__   _编译_后端
  
编译器设置的内部定义

语法
__FB_BACKEND__

描述
定义为 或 ，具体取决?


-------------------------------------------------------- KeyPgDdFBBigEndian ----

__FB_BIGENDIAN__   _编译_大端存储
  
编译器设置的内部定义

语法
__FB_BIGENDIAN__

描述
如果为大端目标进行编译，则在编译?


-------------------------------------------------------- KeyPgDdFBBuildDate ----

__FB_BUILD_DATE__   _编译_日期_
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_DATE__

描述
替换为包含编译


-------------------------------------------------------- KeyPgDdfbbuilddateiso ----

__FB_BUILD_DATE_ISO__
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_DATE_ISO__

描述
替换为包含 ISO 日期格式构建?


-------------------------------------------------------- KeyPgDdfbbuildsha1 ----

__FB_BUILD_SHA1__
  
编译器设置的内部定义（宏字符串）

语法
__FB_BUILD_SHA1__

描述
替换为编译器的源 SHA-1 修订版的字符串。该值是使用用于生成编译器二进制文件的源代码修


-------------------------------------------------------- KeyPgDdfbcygwin ----

__FB_CYGWIN__   _编译_CYGWIN
  
编译器设置的内部定义

语法
__FB_CYGWIN__

描述
定义时，在编译器的 Cygwin 版本中，或者在使用 -target cygwin 命令行选?


-------------------------------------------------------- KeyPgDdfbdarwin ----

__FB_DARWIN__   _编译_DARWIN
  
编译器设置的内部定义

语法
__FB_DARWIN__

描述
定义时不使用在编译器的达尔文版本中编译时或使用 -target darwin ?


-------------------------------------------------------- KeyPgDdfbdebug ----

__FB_DEBUG__   _编译_调试
  
编译器设置的内部定义（宏值）

语法
__FB_DEBUG__

描述
__FB_DEBUG__指示编译时是否在命令行上指定了“生成调试信息”选项或“启用内部定义”选项。
如果指定了任一选项，则返回非零 （-1）。否则返回零 （0）。
可用于


-------------------------------------------------------- KeyPgDdfbdos ----

__FB_DOS__   _编译_DOS
  
编译器设置的内部定义

语法
__FB_DOS__

描述
如果为 DOS 目标进行编译，则定义时不创建在编译时创建的值。在 DOS 托管版本中缺省，或在使用 -target dos 命令行选项时处于?


-------------------------------------------------------- KeyPgDdfberr ----

__FB_ERR__   _编译_错误
  
编译器设置的内部定义（宏值）

语法
__FB_ERR__

描述
__FB_ERR__指示在编译模块时是否在编译器命令行上指定了 -e、-ex 或 -exx。
指示在编译模块时，是否在编译器命令行上指定了 -earray、-enullptr 或 -elocation，或者通过使用 -exx 进行


-------------------------------------------------------- KeyPgDdfbeval ----

__FB_EVAL__
  
编译器执行的内部定义（宏）。

语法
__FB_EVAL__( arg )

参数
arg
论点

描述
在编译时计算参数（常量表达式）。
当参数计算生成字符串时，返回使用预处理器运算符格式化的字符串：__FB_EVAL__
-a （形式： ），
 - 或 （形式： ）如果需要。Non-Escaped String 


-------------------------------------------------------- KeyPgDdfbfpmode ----

__FB_FPMODE__   _编译_快速_
  
编译器设置的内部定义

语法
__FB_FPMODE__

描述
定义为启用了 SSE 快速算术?


-------------------------------------------------------- KeyPgDdfbfpu ----

__FB_FPU__   _编译_浮点
  
编译器设置的内部定义

语法
__FB_FPU__

描述
定义为启用了 SSE 浮


-------------------------------------------------------- KeyPgDdfbfreebsd ----

__FB_FREEBSD__   _编译_FREEBSD
  
编译器设置的内部定义

语法
__FB_FREEBSD__

描述
定义时在编译时在 FreeBSD 版本的编译器中创建的值，或者当使用 -target freebsd 命令?


-------------------------------------------------------- KeyPgDdfbgcc ----

__FB_GCC__   _编译_GCC
  
编译器设置的内部定义

语法
__FB_GCC__

描述
如果使用 -gen gcc，则定义为 true


-------------------------------------------------------- KeyPgDdfbgui ----

__FB_GUI__
  
编译器设置的内部定义（宏值）

语法
__FB_GUI__

描述
__FB_GUI__指示编译时是否在命令行上指定了可执行子系统选项 '-s gui'。
如果指定了可执行子系统选项 “-s gui”，则?


-------------------------------------------------------- KeyPgDdfbjoin ----

__FB_JOIN__
  
编译器执行的内部定义（宏）。

语法
__FB_JOIN__( arg1, arg2 )

参数
arg1,arg2
要加入的左 （1） 和右 （2） 个参数

描述
将两个令牌参数连?


-------------------------------------------------------- KeyPgDdfblang ----

__FB_LANG__   _编译_语言
  
编译器设置的内部定义（宏值）

语法
__FB_LANG__

描述
__FB_LANG__指示在编译模块时设置的语言兼容性选项。默认情况下将设置为 。可以使用以下一种（或多种）方法更改语言兼容性选项：__FB_LANG__"fb"
 -lang 命令行选项
 -forcelang 命令?


-------------------------------------------------------- KeyPgDdfblinux ----

__FB_LINUX__   _编译_LINUX
  
编译器设置的内部定义

语法
__FB_LINUX__

描述
在编译到 Linux 目标时，不使用编译时创建的值进行定义。默认为 Linux 托管版本的编译器，或在使用 -tar


-------------------------------------------------------- KeyPgDdFBMain ----

__FB_MAIN__   _编译_主模_
  
编译器设置的内部定义

语法
__FB_MAIN__

描述
__FB_MAIN__在主模块中定义，而不是在其他模块中定义。
编译器将


-------------------------------------------------------- KeyPgDdFBMinVersion ----

__FB_MIN_VERSION__   _编译_最小编译版本
  
用于测试最低编译器版本的宏函数

语法
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

用法
__FB_MIN_VERSION__( major, minor, patch)

参数
major
要测试的最低主要版本
minor
要测试的最低次要版本
patch
要测试的最低补丁版本

返回值
如果编译器版本小于指定版本，


-------------------------------------------------------- KeyPgDdfbmt ----

__FB_MT__   _编译多线程
  
编译器设置的内部定义（宏值）

语法
__FB_MT__

描述
__FB_MT__指示编译时是否在命令行上指定了多线程选项 -mt，或者是否在源代码中更多地使用了 or 关键?


-------------------------------------------------------- KeyPgDdfbnetbsd ----

__FB_NETBSD__   _编译_NETBSD
  
编译器设置的内部定义

语法
__FB_NETBSD__

描述
定义时，在 NetBSD 版本的编译器中，或者在使用 -target netbsd 命令行选项?


-------------------------------------------------------- KeyPgDdfbopenbsd ----

__FB_OPENBSD__   _编译_OPENBSD
  
编译器设置的内部定义

语法
__FB_OPENBSD__

描述
在 OpenBSD 版本的编译器中，或者在使用 -target openbsd 命令行选项时，定义时


-------------------------------------------------------- KeyPgDdfboptimize ----

__FB_OPTIMIZE__
  
编译器设置的内部定义

语法
__FB_OPTIMIZE__

描述
始终定义，并且将具有从 0 到 3（默认情况下?


-------------------------------------------------------- KeyPgDdfboptionbyval ----

__FB_OPTION_BYVAL__   _编译选项支持值传递
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_BYVAL__

描述
指示当未显式声明 by value /by 引用说明符时，是否通过引用传递给 或 按值传递的参数（如 with ），或者像默认情况下那样按值传递。
如果默认情况下参数是传递值，则设置为非零 ?


-------------------------------------------------------- KeyPgDdfboptiondynamic ----

__FB_OPTION_DYNAMIC__   _编译选项数组变长
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_DYNAMIC__

描述
__FB_OPTION_DYNAMIC__定义为 true（负数 （-1）），如果发出了最近的语?


-------------------------------------------------------- KeyPgDdfboptionescape ----

__FB_OPTION_ESCAPE__   _编译选项_支持转义
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_ESCAPE__

描述
指示默认情况下，如果未以 $ 运算符显式前缀（对于非转义字符串）或 ！转义字符串的运算符。
处理字符串文本的缺省方法是在编译或使用源文件中的 -lang 命令行选项期


-------------------------------------------------------- KeyPgDdfboptionexplicit ----

__FB_OPTION_EXPLICIT__   _编译选项_支持EXPLICIT
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_EXPLICIT__

描述
__FB_OPTION_EXPLICIT__指示以前是否在源中使用过。
如果尚未设置该选项，


-------------------------------------------------------- KeyPgDdfboptiongosub ----

__FB_OPTION_GOSUB__   _编译选项_支持GOSUB
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_GOSUB__

描述
指示在编译时如何处理和将要处理。如果该选项设置为 （-1），则允许此选项，并且仅被识别为从 gosub 返回。如果未设置该选项 （0），则不允许这样做，并且仅将其识别为从过程返回。
?


-------------------------------------------------------- KeyPgDdfboptionprivate ----

__FB_OPTION_PRIVATE__   _编译选项_支持PRIVATE
  
编译器设置的内部定义（宏值）

语法
__FB_OPTION_PRIVATE__

描述
指示 默认情况下，和 的 是否具有模块作用域或全局作用域（如果未用 或 显式指定）。
函数和子的默认作用域说明符是在编译期间或在源文件中使用 -lang 命令行选项来设置的。
如?


-------------------------------------------------------- KeyPgDdfboutdll ----

__FB_OUT_DLL__   _编译_输出DLL
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_DLL__

描述
__FB_OUT_DLL__指示编译时编译器命令行上指定的输出文件类型是共享库。
如果输出是共享库，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将计算


-------------------------------------------------------- KeyPgDdfboutexe ----

__FB_OUT_EXE__   _编译_输出EXE
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_EXE__

描述
__FB_OUT_EXE__指示编译时编译器命令行上指定的输出文件类型是可执行文件。
如果输出是可执行文件，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将


-------------------------------------------------------- KeyPgDdfboutlib ----

__FB_OUT_LIB__   _编译_输出LIB
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_LIB__

描述
__FB_OUT_LIB__指示编译时编译器命令行上指定的输出文件类型是静态库。
如果输出是静态库，则返回非零 （-1）。否则返回零 （0）。
只有 、 、 或 中的一个将计算


-------------------------------------------------------- KeyPgDdfboutobj ----

__FB_OUT_OBJ__   _编译_输出OBJ
  
编译器设置的内部定义（宏值）

语法
__FB_OUT_OBJ__

描述
__FB_OUT_OBJ__指示编译时编译器命令行上指定的输出文件类型是对象模块。
如果输出是对象模块，则返回非零 （-1）。否则返回零 （0）。
只有一个 、 、 或 的计算结


-------------------------------------------------------- KeyPgDdfbpcos ----

__FB_PCOS__   _编译常规PC
  
编译器设置的内部定义

语法
__FB_PCOS__

描述
定义在编译时创建的操作系统，如果操作系统具有类似于常见 PC 操作系统的文件系统行为，例如 DOS?


-------------------------------------------------------- KeyPgDdfbppc ----

__FB_PPC__
  
编译器设置的内部定义

语法
__FB_PPC__

描述
定义编译时创建的编译目标是否?


-------------------------------------------------------- KeyPgDdfbquote ----

__FB_QUOTE__
  
编译器执行的内部定义（宏）。

语法
__FB_QUOTE__( arg )

参数
arg
论点

描述
将参数转换为字符串，类似于 stringize 运算符 （#），但可以在任何位置使用（将在转换前展开参数）。
更准确地说，与通过参数传递的文本相比，返回一个多引号文本（前缀为 ?


-------------------------------------------------------- KeyPgDdfbsignature ----

__FB_SIGNATURE__   _编译_编译签名
  
编译器设置的内部定义（宏字符串）

语法
__FB_SIGNATURE__


-------------------------------------------------------- KeyPgDdfbsse ----

__FB_SSE__   _编译_SSE
  
编译器设置的内部定义

语法
__FB_SSE__

描述
如果启用了 SSE 浮?


-------------------------------------------------------- KeyPgDdfbuniqueid ----

__FB_UNIQUEID__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID__( stack-id )

参数
stack-id
要访问的堆栈的名称

描述
获取由 标识的堆栈顶部的标识符（不修改堆栈的大小）。
 （允许将新的唯一标识符推送到堆栈，并允许从堆栈中弹出标识符）
注意：stack-id__FB_UNIQUEID_PUSH____FB_UNIQUEID_PO


-------------------------------------------------------- KeyPgDdfbuniqueidpop ----

__FB_UNIQUEID_POP__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID_POP__( stack-id )

参数
stack-id
要弹出的堆栈的名称

描述
从标识的堆栈中弹出一个标识符（堆栈的大小减小 1）。
 （允许获取堆栈顶部的标识符，并允许将新的唯一标识符推送到堆栈）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_PUSH__


-------------------------------------------------------- KeyPgDdfbuniqueidpush ----

__FB_UNIQUEID_PUSH__
  
编译器执行的内部定义（宏）。

语法
__FB_UNIQUEID_PUSH__( stack-id )

参数
stack-id
要推送的堆栈的名称

描述
将新的唯一标识符推送到 由 标识的堆栈（堆栈的大小增加 1）。
 （允许在堆栈顶部获取标识符，并允许从堆栈中弹出标识符）
注意：stack-id__FB_UNIQUEID____FB_UNIQUEID_POP__



-------------------------------------------------------- KeyPgDdfbunix ----

__FB_UNIX__   _编译_UNIX
  
编译器设置的内部定义

语法
__FB_UNIX__

描述
定义在编译时创建的操作系统，如果操?


-------------------------------------------------------- KeyPgDdfbunquote ----

__FB_UNQUOTE__
  
编译器执行的内部定义（宏）。

语法
__FB_UNQUOTE__( arg )

参数
arg
论点

描述
采用文本字符串并将其转换回标记。
更准确地说，与通过参数传递的文本相比，返回一个带子引?


-------------------------------------------------------- KeyPgDdfbvectorize ----

__FB_VECTORIZE__   _编译_编号级别
  
编译器设置的内部定义

语法
__FB_VECTORIZE__

描述
定义为由 


-------------------------------------------------------- KeyPgDdFBVerMajor ----

__FB_VER_MAJOR__   _编译_主版本号
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MAJOR__

Description
__FB_VER_MAJOR__ will return the major version of FreeBASIC currently being used.  For example, the major version is 0 for FreeBASIC 0.90, and will remain 0 until FreeBASIC version


-------------------------------------------------------- KeyPgDdFBVerMinor ----

__FB_VER_MINOR__   _编译_次版本号
  
编译器设置的内部定义（宏值）

语法
__FB_VER_MINOR__

描述
__FB_VER_MINOR__将返回当前正在使用的 FreeBASIC 的次要版本?


-------------------------------------------------------- KeyPgDdFBVerPatch ----

__FB_VER_PATCH__   _编译_版本修订
  
编译器设置的内部定义（宏值）

语法
__FB_VER_PATCH__

描述
__FB_VER_PATCH__将返回当前正在使用的FreeBASIC版本的补丁/颠覆/修订版号。例如，对于 FreeBAS


-------------------------------------------------------- KeyPgDdfbversion ----

__FB_VERSION__   _编译_版本号
  
编译器设置的内部定义（宏字符串）

语法
 __FB_VERSION__



-------------------------------------------------------- KeyPgDdfbwin32 ----

__FB_WIN32__   _编译_Win32
  
编译器设置的内部定义

语法
__FB_WIN32__

描述
如果编译到 Win（32 位或 64 位）目标，则定义在编译时不创建值。在 Win 托管版本中为默认值，如果使用 -target win32 或 -


-------------------------------------------------------- KeyPgDdfbx86 ----

__FB_X86__
  
编译器设置的内部定义

语法
__FB_X86__

描述
定义编译时创建的编译目标是否使用 X


-------------------------------------------------------- KeyPgDdfbxbox ----

__FB_XBOX__   _编译_XBOX
  
编译器设置的内部定义

语法
__FB_XBOX__

描述
定义时不使用在编译时使用 -target xbox 命令行选项时创


-------------------------------------------------------- KeyPgDdfile ----

__FILE__   __文件__
  
编译器设置的内部定义（宏字符串）

语法
__FILE__

描述
替换为引用的源文件名?


-------------------------------------------------------- KeyPgDdfilenq ----

__FILE_NQ__   __文件_未用
  
编译器设置的内部定义（宏字符串）

语法
__FILE_NQ__

描述


-------------------------------------------------------- KeyPgDdfunction ----

__FUNCTION__   __函数__
  
编译器设置的内部定义（宏字符串）

语法
__FUNCTION__

描述
替换为当前功能块的引号名称。
它的正常用途是在调试中报告错误的值。
如果在模块级别使用，则给定的?


-------------------------------------------------------- KeyPgDdfunctionnq ----

__FUNCTION_NQ__   __函数_未引用__
  
编译器设置的内部定义（宏字符串）

语法
__FUNCTION_NQ__

描述
替换为当前功能块（如果使用）的非引号名称。
如果在模块级别使用，则给定的函数名称将用于主模块或其他模块。?


-------------------------------------------------------- KeyPgDdline ----

__LINE__   __行__
  
编译器设置的内部定义（宏值）

语法
__LINE__

描述
替换为所用源文件的


-------------------------------------------------------- KeyPgDdpath ----

__PATH__   __路径__
  
编译器设置的内部定义（宏字符串）

语法
__PATH__

描述



-------------------------------------------------------- KeyPgDdtime ----

__TIME__   __时间__
  
编译器设置的内部定义（宏值）

语法
__TIME__

描述
替换已使用的文本字符串


-------------------------------------------------------- KeyPgDeallocate ----

Deallocate   内存分配清除
  
释放以前分配的内存

语法
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

用法
Deallocate( pointer )

参数
pointer
以前分配的缓冲区的地址。

描述
此过程将释放以前使用 分配的内存。 必须是有效的指针。过程返回后，将呈现为无效（指向无效的内存地址），并且其使用（取消引用或再次调用Deallocate）将导致未定义的行为


-------------------------------------------------------- KeyPgDeclare ----

Declare   声明
  
声明模块级或成员过程

语法
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]

Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

参数
param_list
用逗号分隔的括号括起来的参数列表。
return_type
、或 过程的返回类型。FunctionOperatorProperty
name
过程的名称或符号。
op_symbol
运算符的名称或符号。
T
新的用户定义类型的名称。

描述
该语句声明 a 、 、 、 或 。
可以在代码中引用该过程，而无需查看其定义，尽管它必须在某个位置定义。从本质上讲，该声明引入


-------------------------------------------------------- KeyPgDefbyte ----

DefByte   默认字节
  
为变量名称范围指定默认数据类型

语法
DefByte start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefByte指定未使用数据类型声明（或根


-------------------------------------------------------- KeyPgDefdbl ----

DefDbl   默认双精型
  
为变量名称范围指定默认数据类型

语法
DefDbl start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefDbl指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDefined ----

defined   预定义
  
预处理器函数，用于测试是否定义了交易品种

语法
defined (symbol_name)

参数
symbol_name
要测试的品种的名称

返回值
如果已定义交易品种，则返回非零 （），否则返回零 （）。-10

描述
给定符号名称，如果已定义符号，则预处?


-------------------------------------------------------- KeyPgDefint ----

DefInt   默认整型
  
为变量名称范围指定默认数据类型

语法
DefInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefInt指定未使用数据类型声明（或根本?


-------------------------------------------------------- KeyPgDeflng ----

DefLng   默认长型
  
为变量名称范围指定默认数据类型

语法
DefLng start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefLng指定未使用数据类型声明（或根


-------------------------------------------------------- KeyPgDeflongint ----

DefLongInt   默认长整型
  
为变量名称范围指定默认数据类型

语法
DefLongInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefLongInt指定未使用数据类型声明（或根本


-------------------------------------------------------- KeyPgDefshort ----

DefShort   默认短整型
  
为变量名称范围指定默认数据类型

语法
DefShort start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefShort指定未使用数据类型声明（或根


-------------------------------------------------------- KeyPgDefsng ----

DefSng   默认单精型
  
为变量名称范围指定默认数据类型

语法
DefSng start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefSng指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDefstr ----

DefStr   默认字符
  
为变量名称范围指定默认数据类型

语法
DefStr start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefStr指定未使用数据类型声明（或根本


-------------------------------------------------------- KeyPgDefubyte ----

DefUByte   默认U字节
  
为变量名称范围指定默认数据类型

语法
DefUByte start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUByte指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDefuint ----

DefUInt   默认U整型
  
为变量名称范围指定默认数据类型

语法
DefUInt start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUInt指定未使用数据类型声明（或根本不


-------------------------------------------------------- KeyPgDefulongint ----

Defulongint   默认U长整型
  
为变量名称范围指定默认数据类型

语法
Defulongint start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
Defulongint指定未使用数据类型声明（或根本?


-------------------------------------------------------- KeyPgDefushort ----

DefUShort   默认U短整型
  
为变量名称范围指定默认数据类型

语法
DefUShort start_letter[-end_letter ][, ...]

参数
start_letter
范围中的第一个字母
end_letter
范围中的最后一个字母

描述
DefUShort指定未使用数据类型声明（或根?


-------------------------------------------------------- KeyPgDestructor ----

Destructor   析构函数
  
当类或用户定义的类型超出范围或被销毁时自动调用

语法
Type typename
field declarations
Declare Destructor ( )
End Type

Destructor typename ( ) [ Export ]
statements
End Destructor

参数
typename 
的名称TypeClass

描述
当用户定义的或变量超出范围或使用运算符显式销毁时，将调用析构函数方法。
是为其声明和定义方法的类型的名称。的名称解析遵循与 在 中使用的过程相同的规则。
该方法?


-------------------------------------------------------- KeyPgDim ----

Dim   定义
  
声明变量

语法
Dim [Shared] name1 As DataType [, name2 As DataType, ...]
或
Dim [Shared] As DataType name1 [, name2, ...]
阵 列：
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
初始值设定项：
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

描述
按名称声明变量并保留内存以容纳它。
变量必须先声明，然后才能在 -lang fb 方言中使用，或者在其他方言中使用。只有在 -lang qb 和 -lang fblite 方言中，变量可以在不首先声明它们的情


-------------------------------------------------------- KeyPgDir ----

Dir   目录取名称
  
在文件系统中搜索并返回有关项目的信息;执行目录搜索属性

语法
# Include "dir.bi"

Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

用法
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

参数
item_spec
要与项目名称匹配的模式。
attrib_mask
要匹配项属性所依据的位掩码。
out_attrib
引用分配给找到的每个项的属性（如果有）的位掩码。
p_out_attrib
指向分配了找到的每个项属性（如果有）的位掩码的指针。

返回值
如果未找到与名称或属性掩码匹配的项目，则 （or ） 将赋值为零并返回空字符串。否则，（或 ）将分配项目的属性掩码，并返回不带路径的项目名称。item_specattrib_maskout_attrib*p_out_attribout_attrib*p_out_attrib

描述
Dir返回与作?


-------------------------------------------------------- KeyPgDo ----
Do   重复
Description



-------------------------------------------------------- KeyPgDoloop ----

Do...Loop
  
用于循环的控制流语句

语法
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

描述
该语句执行以下语句块中的语句，直到/同时条件（如果有）的计算结果为 true。
如果使用，则当条件计算结果为 true 时，语句将停止重复语句块。关键字具有相反的效果，如果条件计算结果为 false?


-------------------------------------------------------- KeyPgDots ----

... (Ellipsis)
  

	用于代替过程参数传递可变数量的参数，或用作数组声明中的上限，以表示元素数将由初始值设定项确定。

语法
Declare { Sub | Function } proc_name cdecl ( param_list, ... )  { | [ ByRef ] As return_type }

#define identifier( [ parameters, ] variadic_parameter... ) body

Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

描述
可变参数程序
省略号（三个点，）在过程声明和定义中用于指示变量参数列表。
必须始终指定第一个参数（至少），并且必须使用 C 调用约定调用该过程。
?


-------------------------------------------------------- KeyPgDouble ----

Double   双精度
  
标准数据类型：64 位浮点

语法
Dim variable As Double

描述
Double 是一种 64 位浮点数据类型，用于存储更精确的十进制数。它们可以在 到 的范围内保存正值，也可以在 到 的范围内保存负值，或者保存为 零 （）。它们最多包含 53 位精度，或大约 15 位?


-------------------------------------------------------- KeyPgDraw ----

Draw   绘图
  
用于序列化像素绘图的声明

语法
Draw [target,] cmd

参数
target
要利用的缓冲区
cmd
包含命令序列的字符串

描述
绘图将通过 / 缓冲区（如果指定）在当前工作页面集上进行。
该语句可用于同时发出多个绘图命令;快速绘制图形很有用。命令字符串接受以下命令：
用于打印像素的命令：Sc


-------------------------------------------------------- KeyPgDrawString ----

Draw String   绘图
  
用于将文本呈现到图像或屏幕的图形语句。

语法
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

用法
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

参数
buffer
要在其上绘制字符串的子画面。如果未提供，它将被绘制到屏幕上。
STEP
使用相对坐标。如果添加，则相对于最后一个绘制点平移 x 和 y 坐标。STEP
x,y
要绘制的水平/垂直位置，相对于屏幕的左上角（除非使用 - 见上文）。文本的左上角将在此位置绘制。STEP
text
包含要绘制的文本的字符串
color
如果未提供字体，则允许您选择文本的颜色。如果省略，则使用默认前台。
如果提供了字体，则忽略，并且字体本身指定每个像素的颜色。Colorcolor
font
包含自定义字体的图像缓冲区。如果未提供字体，则使用当前文本分辨率的标准字体，并忽略以下参数。
method|Custom
指定如何在目标曲面顶部绘制字体字符。允许使用与为语句找到的相同方法，唯一的区别是默认方法是用于此函数。此参数仅适用于自定义字体。PutTrans
alpha
alpha 值，范围为 0-255。此参数仅适用于 或 方法。AddAlpha
b


-------------------------------------------------------- KeyPgDylibfree ----

DyLibFree   动态库卸载
  
从内存中卸载动态链接库

语法
Declare Sub DyLibFree ( ByVal libhandle As Any Pointer )

用法
DyLibFree( libhandle )

参数
libhandle
要卸载的库的句柄。

描述
DyLibFree用于在运行时库中发布以前


-------------------------------------------------------- KeyPgDylibload ----

DyLibLoad   动态库加载
  
在运行时加载到动态链接库 （DLL） 到内存中

语法
Declare Function DyLibLoad ( ByRef libname As String ) As Any Pointer

用法
result = DyLibLoad ( libname )

参数
libname
包含要加载的库的名称。String

返回值
已加载库的句柄。零对错误Pointer

描述
DyLibLoad用于在运行时库中链接到程序。此函数执行链接并返回一个句柄，该句柄在调用库中的函数时必须?


-------------------------------------------------------- KeyPgDylibsymbol ----

DyLibSymbol   动态库地址
  
返回 dll 中函数或变量的地址

语法
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByVal symbol As Short ) As Any Ptr

用法
result = DyLibSymbol ( libhandle, symbol )

参数
libhandle
返回的 DLL 的 Any Ptr 句柄DyLibLoad
symbol
一个字符串，包含函数的名称，或库中要返回的地址的变量。仅在 Windows 中，也可以是包含函数/变量的序号。Short

返回值
A 表示库中的函数或变量。
如果函数失败，则返回值为 0。Pointer

描述
DyLibSymbol返回一个指针，该指针指向 在 所指向的 dll 中名为 的变量或函数。 是通过使用 加载 dll


-------------------------------------------------------- KeyPgElse ----
Else   否
Description



-------------------------------------------------------- KeyPgElseif ----
ElseIf   又
Description



-------------------------------------------------------- KeyPgEncoding ----

Encoding   编码类型
  
指定文本文件的字符格式

语法
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

参数
filename对于 {输入|输出|追加}
要打开的文件名，或InputOutputAppend
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
指示文件的编码类型
filenum
要与打开的文件关联的未使用的文件编号

描述
Encoding指定 Unicode 文本文件的格式，因此并使用正确的编码。如果从语句中省略，


-------------------------------------------------------- KeyPgEnd ----

End (Statement)   结束
  
控制流语句以结束程序。

语法
Declare Sub End ( ByVal retval As Long = 0 )

用法
End [ retval ]

参数
retval
错误代码返回系统。

描述
用于退出程序并返回操作系统。可以指定可选的整数返回值以指示系统的错误代码。如果未给出返回值，则在程序结束时自动返回值 。
此语句的用法不会完全关闭范围。局部变量不会自


-------------------------------------------------------- KeyPgEndblock ----

End (Block)   结束
  
指示复合语句块的结束。

语法
End { Sub | Function | If  | Select  | Type  | Enum  | Scope  | With  | Namespace  | Extern  | Constructor  | Destructor  | Operator | Property }

描述
用于指示最新代码块的结束。
块的类型必须包含在命令中：、 或 之一。
结束 一个 、 、 、 、 或 块也会关闭该块内定义的变量的作用域。当作用域关闭时，作用域内定义的变量将被销毁，并根?


-------------------------------------------------------- KeyPgEndif ----
End If   结
Description



-------------------------------------------------------- KeyPgEnum ----

Enum   枚举
  
声明枚举类型。

语法
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

参数
typename
的名称Enum
symbolname
常量的名称
expression
常量表达式
Explicit
要求符号必须由typename.symbolname

描述
Enum，表示声明与离散值对应的符号名称列表。如果未给出初始值，则第一项将设置为 。除非给出，否则每个后续交易品种的值都比前一个交易品种多一个。
符号可以各在自己的?


-------------------------------------------------------- KeyPgEnviron ----

Environ   环境变量
  
返回系统环境变量的值

语法
Declare Function Environ ( ByRef varname As Const String ) As String

用法
result = Environ[$]( varname )

参数
varname
环境变量的名称。

返回值
返回环境变量的文本值，如果变量不


-------------------------------------------------------- KeyPgEof ----

EOF   文件到尾
  
检查是否已到达打开文件的末尾

语法
Declare Function EOF ( ByVal filenum As Long ) As Long

用法
result = EOF( filenum )

参数
filenum
打开的文件的文件编号。

返回值
如果已达到文件末尾，则返回 true （-1），否则返回零 （0）。

描述
从 中打开的文件读取 时，了解何时到达文件末尾非常有用，从而避免了因读取文件末尾而导致的错误。使?


-------------------------------------------------------- KeyPgErase ----

Erase   擦除
  
擦除数组的声明

语法
Declare Sub Erase ( array As Any [, ... ] )

用法
Erase( array0 [, array1 ... arrayN ] )

参数
array
要擦除的数组。

描述
在固定长度的数组上使用会重置所有元素，而不会释放分配的内存。
在物体的情况下，有破坏然后重建。
在可变长度数组（数组大小已调整）上使用可释放分配?


-------------------------------------------------------- KeyPgErfn ----

Erfn   错误函数
  
错误报告功能

语法
Declare Function Erfn ( ) As ZString Ptr

用法
result = Erfn ( ) 

返回值
返回一个指针，该指针指向标识发生错误的函数的字符串。
如果未使用 -exx 编译


-------------------------------------------------------- KeyPgErl ----

Erl   错误行
  
错误处理函数，用于返回发生错误的行

语法
Declare Function Erl ( ) As Integer

用法
result = Erl

返回值
一个 Integer 返回值，其中包含上次发生错误的行号。

描述
Erl将返回上次发生错误的行号。如果未发生任?


-------------------------------------------------------- KeyPgErmn ----

Ermn   错误模块
  
错误报告功能

语法
Declare Function Ermn ( ) As ZString Ptr

用法
result = Ermn ( ) 

返回值
返回一个指针，该指针指向标识发生错误的模块的字符串。
如果未使用 -exx 编


-------------------------------------------------------- KeyPgErr ----

Err   错误
  
获取或设置运行时错误号

用法
result = Err( )
or
Err = number

描述
该函数返回 FreeBASIC 运行时错误号（32 位），该错误号可由内置语句和函数设置，或由程序通过 或 设置。与 不同，设置错误号而不调用错误处理程序。
有关预定义的运行时错误号及其相关含义?


-------------------------------------------------------- KeyPgError ----

Error   错误号
  
用于强制生成错误的错误处理语句

语法
Declare Sub Error ( errno As Integer )

用法
Error number

参数
number
要生成的错误号

描述
Error 调用使用 On Error 指定的错误处理程序，或者，如果未设置任何错误处理程序，则中止程序，打印?


-------------------------------------------------------- KeyPgEvent ----

Event (Message Data From Screenevent)   事件
  
ScreenEvent 用于返回事件数据的预定义结构 （UDT） fbgfx.bi

语法
#include once "fbgfx.bi"
using fb
Dim variable As Event

描述
为了清楚起见，我们在这里报告结构：
 
该字段将包含事件类型 ID，而其余 4 个整数将保存事件类型的敏感数据。
 事件类型EVENT
Type Event Field = 1
    Type As Long
    Union



-------------------------------------------------------- KeyPgExec ----

Exec   外部调用
  
临时将执行转移到外部程序

语法
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

用法
result = Exec( program, arguments )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。
arguments
要传递给程序的命令行参数。

返回值
程?


-------------------------------------------------------- KeyPgExepath ----

ExePath   程序路径
  
返回正在运行的程序的路径

语法
Declare Function ExePath ( ) As String

用法
result = ExePath

返回值
设置为正在运行的程序的路径的变量。String


-------------------------------------------------------- KeyPgExit ----

Exit   退出
  

	Control flow statement to exit a compound statement block

Syntax
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }

Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


Description
Leaves a code block such as a , , , , , , , , , or a   block. The execution skips the rest of the block and goes to the line after its end.

Where there are multiple  /  /  /  blocks


-------------------------------------------------------- KeyPgExp ----

Exp   指数
  
提高到给定数字的幂的返回e

语法
Declare Function Exp cdecl ( ByVal number As Double ) As Double

用法
result = Exp( number )

参数
number
那被提升到权力。Doublenumbere

返回值
将的 Double 值返回为 的幂。enumber

描述
数学常数，也称为欧拉常数，是 和 的基数，并且是一个无理数和超越数。二十个有效数字的值为：。所需的参数可以是函数范围内的任何有效数值表达式。如果太大，则返?


-------------------------------------------------------- KeyPgExport ----

Export   导出
  
定义说明符，用于指示 DLL 中的过程应从其他程序中可见

语法
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

描述
如果在 DLL 中使用此子句定义了函数，则该函数将添加到公共导出表中，因此外部


-------------------------------------------------------- KeyPgExtends ----

Extends   派生类型
  
指定从中派生新类型的基类型

语法
Type|Union typename Extends base_typename
...
End Type|Union

描述
Extends声明派生自 。派生的用户定义类型 ，继承基类型的字段和方法。 对象可以代替对象使用。从继承的字段和方法将像 的成员一样隐式访问。
但是，如果继承的成员具有相同的标识符，则?


-------------------------------------------------------- KeyPgExtendsWstring ----

Extends Wstring   派生类型
  
指定继承 Wstring 行为的类型

语法
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

描述
Extends Wstring声明继承 的属性和行为。目的是允许用户创建自定义字符串类型（即动态内存管理），这些类型可以很好地集成到现有的内置 fbc 编译器中（与 fbc 类型的良好互操作性）。
使用合


-------------------------------------------------------- KeyPgExtendsZstring ----

Extends Zstring   派生类型
  
指定继承 Z 字符串行为的类型

语法
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

描述
Extends Zstring声明继承 的属性和行为。目的是允许用户创建自定义字符串类型（即动态内存管理），这些类型可以很好地集成到现有的内置 fbc 编译器中（与 fbc 类型的良好互操作性）。
使?


-------------------------------------------------------- KeyPgExtern ----

Extern   外部扩展
  
声明具有外部链接的变量、数组或对象

语法
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

参数
symbolname
变量、数组或对象的名称。
aliasname
变量、数组或对象的备用外部名称。

描述
声明为外部名称，这意味着它是外部模块的全局模块，包括那些要编译为静态和动态库 （DLL） 的模块。
仅声明变量、数组和对象，而不定义它们（与 或 ?


-------------------------------------------------------- KeyPgExternBlock ----

Extern...End Extern
  
语句块，允许调用为特定语言或平台编译的函数。

语法
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

描述
Extern块为过程提供默认调用约定，并强制要求特定的名称修饰。
块为过程提供了默认的调用约定，并且还保留了其中声明的所有名称的大小写。在没有 EXTERN 块的情况下，可以通过与包?


-------------------------------------------------------- KeyPgFalse ----

False   假
  
编译器设置的固有常量

语法
Const False As Boolean

描述
在使用的位置


-------------------------------------------------------- KeyPgFBArray ----

Fbarray (Array Descriptor Structure And Access)
  
包含文件中的预定义结构 （UDT） 和过程声明，可用于访问数组描述符数据字段。fbc-int/array.bi

语法
从：./inc/fbc-int/array.bi

# If __FB_LANG__ = "fb"
Namespace FBC
# endif

Const FB_MAXDIMENSIONS As Integer = 8

Type FBARRAYDIM
    Dim As UInteger elements     “”元素数

    Dim As Integer LBound        '' 尺寸下限

    Dim As Integer UBound        '' 尺寸上限

End Type

Const FBARRAY_FLAGS_DIMENSIONS = &h0000000f    在 dimTb（） 中分配的条目数

Const FBARRAY_FLAGS_FIXED_DIM  = &h00000010    '' 数组具有固定数量的维度

Const FBARRAY_FLAGS_FIXED_LEN  = &h00000020    '' 数组指向固定长度内存

Const FBARRAY_FLAGS_RESERVED   = &hffffffc0    '' 保留，请勿使用


Type FBARRAY
    Dim As Any Ptr index_ptr     '' @array（0， 0， 0， ... ）

    Dim As Any Ptr base_ptr      内存在数组最低边界处开始的''

    Dim As UInteger size         “”已分配内容的字节大小

    Dim As UInteger element_len  单个元素的“”字节大小

    Dim As UInteger dimensions   '' 尺寸数

    Dim As UInteger flags        “” FBARRAY_FLAGS_*


    '' 注意尺寸的数量;全血细胞计数可分配

    “”一个较小的描述符，少于 FB_MAXDIMENSIONS

    dimTb（） 中的 ''，如果在编译时已知它们

    永远不需要“”。始终尊重数量

    访问 dimTb（） 时的'' 尺寸


    Dim As FBARRAYDIM dimTb(0 To FB_MAXDIMENSIONS-1)
End Type

Extern "rtlib"
    Declare Function ArrayDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Any ) As FBC.FBARRAY Ptr
    Declare Function ArrayConstDescriptorPtr Alias "fb_ArrayGetDesc" _
        ( array() As Const Any ) As Const FBC.FBARRAY Ptr
End Extern

# If __FB_LANG__ = "fb"
End Namespace
# endif
        
用法
#include once "fbc-int/array.bi"
using FBC

' then:
Dim pd As FBARRAY Ptr
...
pd = ArrayDescriptorPtr ( array() )

' or safer:
Dim pd As Const FBARRAY Ptr
...
pd = ArrayConstDescriptorPtr ( array() )

参数
pd 
指向数组描述符的指针的名称
array 


-------------------------------------------------------- KeyPgFBMemcopy ----

Fb_Memcopy
  
将内存块从一个位置复制到另一个位置

语法
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memcopy( dst, src, bytes )

参数
dst
目标内存的起始地址
src
源内存的起始地址
bytes
要复制的字节数

返回值
返回目标内存的起始地址。

描述
fb_memcopy将给定数量的字节从内存位置复制到内存位置。
每个起始地址都取自对变量或数组元素的引用。
内存区域不得重叠（否则，不能保证?


-------------------------------------------------------- KeyPgFBMemcopyclear ----

fb_MemCopyClear
  
将内存块的第一部分从一个位置复制到另一个位置，并清除其余部分

语法
Declare Sub fb_MemCopyClear ( ByRef dst As Any, ByVal dstlen As UInteger, ByRef src As Any, ByVal srclen As UInteger )

用法
fb_memcopy( dst, dstlen, src, srclen )

参数
dst
目标内存的起始地址
dstlen
要写入的字节数
src
源内存的起始地址
srclen
要复制的第一个字节数（其他已清除）

描述
fb_memcopycopy将给定数量的字节（）从内存位置复制到内存位置，但只有第一个字节被真正复制，其余的被清除（-字节）。
每?


-------------------------------------------------------- KeyPgFBMemmove ----

Fb_Memmove
  
将内存块从一个位置复制到另一个位置

语法
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

用法
[result =] fb_memmove( dst, src, bytes )

参数
dst
目标内存的起始地址
src
源内存的起始地址
bytes
要复制的字节数

返回值
返回目标内存的起始地址。

描述
fb_memmove将给定数量的字节从内存位置复制到内存位置。每个起始地址都取自对变量或数组元素的引用。
复制就像使用中间缓冲区一样进行，允?


-------------------------------------------------------- KeyPgField ----

Field   字段
  
指定字段对齐方式。

语法
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

描述
Field可用于打包或比默认布局更紧密。最常用的值是 ，这会导致 尽可能紧密地打包 或，而不会在字段之间或 末尾添加任何填充字节。 只能用于减少字段对齐?


-------------------------------------------------------- KeyPgFileattr ----

FileAttr   文件属性
  
返回有关打开的文件编号的信息

语法
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

用法
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )

或

#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

参数
filenum
打开的文件或设备的文件编号Open
returntype
一个整数值，指示要返回的信息类型。

返回值
与返回类型关联的值，否则出错时为 0。

描述
根据提供的文件号返回有关文件编号的信息returntype
价值描述不断1文件模式fbFileAttrMode2文件句柄fbFileAttrHandle3编码fbF


-------------------------------------------------------- KeyPgFilecopy ----

FileCopy   文件复制
  
复制文件

语法
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

用法
#include "file.bi"
FileCopy source, destination

或

#include "file.bi"
result = FileCopy( source, destination )

参数
source
指定要从中复制的文件的文件名的参数。此文件必须存在。String
destination
指定要复制到的文件的文件名的参数。如果此文件存在，它将被覆盖。任何打开的文件句柄当前都不应引用此文件。String

返回值
成功时或发生错误时返回。01

描述
将源文件的内容复制到目标文件中，?


-------------------------------------------------------- KeyPgFiledatetime ----

FileDateTime   文件日期时间
  
将文件的上次修改日期和时间作为“串行日期”返回 

语法
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

用法
#include "file.bi"
result = FileDateTime( filename )

或

#include "vbcompat.bi"
result = FileDateTime( filename )

参数
filename
要检索其日期和时间的文件名。



-------------------------------------------------------- KeyPgFileexists ----

FileExists   文件存在
  
测试文件是否存在

语法
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

用法
#include "file.bi"
result = FileExists( filename )

或

#include "vbcompat.bi"
result = FileExists( filename )

参数
filename
用于测试是否存在的文件名。

返回值
如果文件存在，则返回非零 （），否则返回零 （）。-10

描述
FileExists测试文件是否存在。
在内部，它可能会发出Open（）和Close（）函数，这可能会产生后果 - 例如，文


-------------------------------------------------------- KeyPgFileflush ----

FileFlush
  
将应用程序流缓冲区刷新到系统，或将系统缓冲区刷新到文件

语法
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

用法
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

参数
filenum
绑定文件或设备的文件编号。如果未给出，或 -1，则刷新所有打开的文件。
systembuffers
如果为非零，则将系统缓冲区刷新到物理设备。默认值为零 （0）。

返回值
返回零 （0） 表示成功，如果无法刷新文件缓冲区，则返回错误代码。

描述
FileFlush将应用程序缓冲输出写入基础流，如果为非零，则写入基础物理?


-------------------------------------------------------- KeyPgFilelen ----

FileLen   文件大小
  
查找给定文件名的文件的长度

语法
Declare Function FileLen ( filename As String ) As LongInt

用法
#include "file.bi"
result = FileLen(filename)

或

#include "vbcompat.bi"
result = FileLen(filename)

参数
filename
一个参数，指定要返回其长度的文件的文


-------------------------------------------------------- KeyPgFileseteof ----

FileSetEof
  
设置绑定到文件编号的打开文件的长度

语法
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

用法
#include "file.bi"
result = FileSetEof(fnum)

参数
filenum
绑定文件或设备的文件编号。

返回值
返回零 （0） 表示成功，如果无法设置文件末尾（文件大小），则返回错误代码。

描述
FileSetEof根据当前文件位置设置文件的结尾。文件位置与 中一样基于一个。
当当前文件位置位于文件末尾之前时，文件将被截断。


-------------------------------------------------------- KeyPgFix ----

Fix   截断
  
返回数字的整数部分，舍入到零

语法
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

用法
result = Fix( number )

参数
number
要截断的浮点数

返回值
返回 的整数部分，舍入到零。number

描述
等效于： .例如，将返回 ，并将返回 。对于整数类型，返回的数字保持不变。
注意：此函数也等效于 。
一元可以使用用


-------------------------------------------------------- KeyPgFlip ----

Flip   翻页
  
更改当前视频显示页面

语法
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

用法
Flip [ frompage ] [, topage ]

参数
frompage
上一页
topage
要显示的新页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
在普通图形模式下，是 和 的别名。有关详细信息，请参阅。
在 OpenGL 模式下，执行硬件翻页并显示反缓冲器的内容。建议您在 OpenGL 模式下定?


-------------------------------------------------------- KeyPgFor ----
For   循
Description



-------------------------------------------------------- KeyPgFormat ----

Format   格式化
  
以指定的格式设置数字的格式

语法
Declare Function Format ( ByVal numerical_expression As Double, ByRef formatting_expression As Const String = "" ) As String

用法
#include "string.bi"
result = Format[$]( numerical_expression, formatting_expression )

参数
numerical_expression
要格式化的数字
formatting_expression
格式化模式

返回值
Format返回一个字符串，其结果的格式设置为格式设置表达式中指示的格式。
格式表达式是一个字符串，可以生成数字或日期时间值。

描述
要恢复有意义的日期时间值，数值表达式必须是从相应函数获取的日期序列。
此函数是 FreeBASIC 的一部分，?


-------------------------------------------------------- KeyPgFornext ----

For...Next
  
用于循环的控制流语句

语法
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

参数
iterator
用于从初始值循环访问到结束值的变量标识符
datatype
如果指定，变量将自动使用类型声明iteratordatatype
startvalue
表示迭代器起始值的表达式
endvalue
用于与迭代器的值进行比较的表达式
stepvalue
每次迭代后添加到迭代器的表达式

描述
循环初始化为 ，然后执行 递增 ， 直到超过 。如果未显式给出，它将设置为 。
和 的值在语句执行后立即存?


-------------------------------------------------------- KeyPgFrac ----

Frac   小数
  
返回数字的小数部分

语法
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

用法
result = Frac( number )

参数
number
要获取分数部分的数字或表达式。

返回值
返回数字或表达式的小数部分。

描述
等效于： .
例如，将返回 ，并将返回 。对于整数类型，始终返回该值。
一?


-------------------------------------------------------- KeyPgFre ----

Fre   内存可用值
  
返回可用内存量

语法
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

用法
result = Fre( [ value ] )

参数
value
保留未使用的虚拟参数以向后兼容;可以忽略。

返回值
返回可


-------------------------------------------------------- KeyPgFreefile ----

FreeFile   文件号
  
返回可用文件编号

语法
Declare Function FreeFile ( ) As Long

用法
result = FreeFile

返回值
下一个可用文件编号（如果有），否则为零 （）。0

描述
返回下一个可用文件号的编号，其有效值为 ，或者如果已打开了 255 个文件。此值是文件的必需参数。 在程序员无法跟踪已用文件编号的复杂程序中打开文件时非常有用。


-------------------------------------------------------- KeyPgFunction ----

Function   函数
  
定义返回值的过程

语法
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

参数
identifier：函数
的名称：外部可见的（对链接器）名称括在引号中
： 
 ：external_identifierparameter_listparameter[, parameter[, ...]]parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数中引用的变量的名称。如果参数是数组，则标识符后必须跟空括号。
 ：变量
的类型 ：如果调用中未指定任何参数，则参数的值typedefault_value
return_type：函数
返回的变量的类型：组成函数体
的一个或多个语句：从函数返回的值statementsreturn_value

描述
函数定义一个代码块，该代码块可以使用单个语句（函数调用）执行?


-------------------------------------------------------- KeyPgFunctionPtr ----

Function Pointer   函数
  
存储指向返回值的过程的指针的数据类型Function

语法
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

参数
parameter_list： 参数[， 参数[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：函数
中引用的变量的名称：变量
的类型：如果调用中未指定任何参数，则参数的值typedefault_value
return_value：从函数
返回的值 ：要设置为初始值的函数的地址intializer

描述
指针是一个过程指针，用于存储返回值的已编译代码的内存位置。如果未给出初始值，则默认初始值为零 （0）。



-------------------------------------------------------- KeyPgGetfileio ----

Get (File I/O)   获取
  
将数据从文件读取到缓冲区

语法
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

用法
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

参数
filenum
打开文件时传递给的值。Open
position
必须开始读取的位置。如果文件被打开，仓位在记录中;否则，它以字节为单位。如果省略，则从当前文件指针位置开始读取。位置是从 1 开始的：即文件的第一条记录或字节位于 位置 。
如果省略或为零 （），则文件读取将从当前文件位置开始。For Random1position0
data
写入数据的缓冲区。它可以是数值变量、字符串、数组、用户定义类型或取消引用的指针。读取操作将尝试完全填充变量，除非达到。
获取数组时，后跟一对空括号：“”。 将读取数组中所有值的数据。 是不允许的。
获取 s 时，读取的字节数与字符串数据中的字节数相同。 是不允许的。
注意：如果要将值读入缓冲区，则不应将指针传递到缓冲区;相反，您应该传递缓冲区中的第一个变量（这可以通过取消引用指针来完成）。如果直接传递指针，则将覆盖指针变量，而不是它指向的内存。EOFdata()GetamountStringamountOperator * (Value Of)Get
amount
使从文件读取到内存的连续变量，即从 的内存位置开始将文件中的数据字节读取到内存中。如果省略，则默认为 ，表示只?


-------------------------------------------------------- KeyPgGetgraphics ----

Get (Graphics)   获取
  
获取当前工作页的一部分或图像缓冲区的副本

语法
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

参数
source
图像缓冲区的地址。如果省略它，则会复制当前工作页面。
STEP
表示以下坐标不是绝对坐标。
[STEP](x1, y1)
要复制的子图像左上角的坐标。 指示偏移量相对于当前图形光标位置。STEP(x1, y1)
[STEP](x2, y2)
要复制的子图像右下角的坐标。 指示 和 分别相对于 和。STEPx2y2x1y1
dest
以前分配的缓冲区的地址，用于存储图像数据。

描述
Get复制当前工作页面的矩形部分，该坐标由坐标 （， ） 


-------------------------------------------------------- KeyPgGetjoystick ----

GetJoystick   游戏杆获取
  
从连接的游戏设备读取按钮和轴信息

语法
Declare Function GetJoystick ( ByVal id As Long, ByRef buttons As Integer = 0, ByRef a1 As Single = 0, ByRef a2 As Single = 0, ByRef a3 As Single = 0, ByRef a4 As Single = 0, ByRef a5 As Single = 0, ByRef a6 As Single = 0, ByRef a7 As Single = 0, ByRef a8 As Single = 0 ) As Integer

用法
result = GetJoystick( id[, buttons[, a1[, a2[, a3[, a4[, a5[, a6[, a7[, a8]]]]]]]]] )

参数
id
设备 id 号 （0 - 15）
buttons
按钮状态
a1
第一轴值
a2
第二轴值
a3
第三轴值
a4
第四轴值
a5
第五轴值
a6
第六轴值
a7
第七轴值
a8
第八轴值

返回值
0成功或失败。所有轴位置都以浮点格式返回。1

描述
GetJoystick将检索按钮状态，以及最多 8 个轴的轴位置，对于由 和 之间的数字确定的操纵杆。按钮的存储方式与


-------------------------------------------------------- KeyPgGetkey ----

GetKey   键取值
  
返回键盘缓冲区中第一个键的 ascii 代码

语法
Declare Function GetKey ( ) As Long

用法
result = GetKey

返回值
返回的 ascii 代码的值。

描述
它返回键盘缓冲区中第一个键的 ascii 代码。该键将从缓冲区中删除。如果不存在密钥，请等待它。
对于扩展键（返回两个字符），扩展代码在第一个字节中返回，常规代码在第?


-------------------------------------------------------- KeyPgGetmouse ----

GetMouse   鼠标获取
  
检索鼠标指针设备的状态

语法
Declare Function GetMouse ( ByRef x As Long, ByRef y As Long, ByRef wheel As Long = 0, ByRef buttons As Long = 0, ByRef clip As Long = 0 ) As Long
Declare Function GetMouse ( ByRef x As LongInt, ByRef y As LongInt, ByRef wheel As LongInt = 0, ByRef buttons As LongInt = 0, ByRef clip As LongInt = 0 ) As Long

用法
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

参数
x
x 坐标值
y
y 坐标值
wheel
滚轮值
buttons
按钮状态
clip
剪辑状态

返回值
0成功时，或出错时（例如，因为鼠标位于图形窗口外）或失败时。（设置运行时错误）1

描述
GetMouse检索鼠标位置和按钮状态;信息在通过引用传递给此函数的变量中返回。如果鼠标不可用，则所有变量都将包含该值。
?


-------------------------------------------------------- KeyPgGosub ----

GoSub   跳转
  
控制流语句以使用一段代码并返回。

语法
GoSub label

描述
执行跳转到由行标签标记的子例程。始终使用 退出 a ，执行将在 之后的下一个语句上继续。
跳转必须与 相同的 main/function/sub 块中的行标签。子例程中的所有变量都与块共享，不能使用


-------------------------------------------------------- KeyPgGoto ----

Goto   转到
  
控制流语句跳转到程序的另一部分

语法
Goto label

描述
将代码执行跳转到行标签。
使用退出作用域时，将销毁在该作用域中定义的任何局部变量（调用析构函数）。
当 跳过变量定义而不是变量作用域的末尾时，可能会不允许使用。如果变量需要构?


-------------------------------------------------------- KeyPgHex ----

Hex   十六进制
  
返回给定数字的十六进制数

语法
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String

Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Hex[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
要返回的可选位数。

返回值
包含 的无符号十六进制表示形式的字符串。number

描述
返回整数 的无符号十六进制字符串表示形式。十六进制数字的范围为 0-9 或 A-F。
如果指定 > 0，则结果字符串将恰好是该长度。如


-------------------------------------------------------- KeyPgHibyte ----

HiByte   单字节高位
  
获取操作数的第二个字节。

语法
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

用法
result = HiByte( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低 16 位字的高字节值。

描述
此宏将数值表达式转换为值，然后展开?


-------------------------------------------------------- KeyPgHiword ----

HiWord   双字节高位
  
获取操作数的第二个 16 位字。

语法
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

用法
result = HiWord( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低 32 位 dword 的 16 位高字的值。

描述
此宏将数值表达式转换为一个值，然后扩展为表示其第?


-------------------------------------------------------- KeyPgHour ----

Hour   时间取小时
  
从日期序列中获取一天中的小时数 

语法
Declare Function Hour ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Hour( dateserial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中


-------------------------------------------------------- KeyPgIfthen ----

If...Then
  
用于条件分支的控制流语句

语法
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

备注：（不带空格）也像在QB中一样支持向后兼容。EndIf

描述
If...Then是一种做决定的方式。
它是一种仅在条件为 true 时才执行代码的机制，并且可以根据更多条件提供要执行的替代代码：
如果条件为真，则执行代码（紧随其后）。


-------------------------------------------------------- KeyPgIif ----

IIf   如果是
  
返回两个值之一的条件函数。

语法
IIf ( condition, expr_if_true, expr_if_false )

参数
condition
要测试的条件。
非零值的计算结果为 true，而零值的计算结果为 false。
expr_if_true
要计算并返回 if 为 true 的表达式。
它必须返回：condition
一个数值，可以是整数、浮点数或指针，包括布尔值，
或字符串值，
或 UDT 值。
expr_if_false
要计算并返回 if 为 false 的表达式。
它必须与（数字、字符串或 UDT）的类型相同。conditionexpr_if_true

返回值
if 为非零，否则conditionexpr_if_trueexpr_if_false

描述
IIf返回不同的数字或字符串或 UDT 值（不是引用），具体取?


-------------------------------------------------------- KeyPgImageConvertRow ----

ImageConvertRow   图像转换行
  
将一行图像数据转换为其他颜色深度

语法
Declare Sub ImageConvertRow ( ByVal src As Any  Ptr, ByVal src_bpp As Long, ByVal dst As Any  Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

用法
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

参数
src
源行开头的地址。源可以是位深度为每像素 24 位或 32 位的全彩色图像，也可以是位深度为每像素 1-8 位的调色板图像。只有在进行转换时处于使用正确调色板的屏幕模式时，转换调色板图像才能正常工作。
src_bpp
源行中每个像素的位数。第1-8、24和32段。
dst
目标行开头的地址。图像可以是每像素 16 位或 32 位的全彩色图像。如果源是调色板图像，则目标也可以是每像素 1 到 8 位


-------------------------------------------------------- KeyPgImagecreate ----

ImageCreate   图像创建
  
为映像分配和初始化存储

语法
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

用法
result = ImageCreate( width, height [, [ color ][, depth ]] )

参数
width
所需宽度，以像素数为单位。
height
所需高度（以像素数为单位）。
color
用于填充图像区域的像素值。
depth
所需的颜色深度，以每像素位数为单位。

返回值
如果无法创建映像，则返回 NULL （），否则返回映像的地址。 必须在图形模式初始化后调用，否则它将返回 。
因此，在变量声明的情况下，不能用作集成初始值设定项，即使在（在成员字段或构造函数中）中也是如此，因为（共享变量的）初始化值是在程序开始时设置的，然后运行任何用户代码。图像分配调用必须在单独的可执行指令中，并且在图形模式初始?


-------------------------------------------------------- KeyPgImageDestroy ----

ImageDestroy   图像销毁
  
销毁和取消分配映像的存储

语法
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

用法
ImageDestroy( image )

参数
image
要销毁的映像的地址。

描述
销毁 所指向 的图像，该图像必须是从调用 ?


-------------------------------------------------------- KeyPgImageInfo ----

ImageInfo   图像信息
  
检索有关图像的信息

语法
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As Long = 0, ByRef height As Long = 0, ByRef bypp As Long = 0, ByRef pitch As Long = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As LongInt, ByRef height As LongInt, ByRef bypp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long

用法
in the LONG (or INTEGER<32>) version of the function:
result = ImageInfo( image [, [ width ] [, [ height ] [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]]]] )
in the LONGINT (or INTEGER<64>) version of the function:
result = ImageInfo( image , width , height [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]] )

参数
image
映像的地址。
width
存储图像的宽度（以像素为单位）。
height
存储图像的高度（以像素为单位）。
bypp
存储图像每像素的字节数 - 即单个像素的大小，以字节为单位。
pitch
存储图像的间距 - 即每条扫描线（行）的大小，以字节为单位。请注意，这可能不仅仅是 ，因为扫描线可能会被填充，以允许它们在内存中更好地对齐。width * bypp
pixdata
存储图像的第一条扫描线的起始地址。
size
将映像的大小存储在内存中（以字节为单位）。

返回值
如果未指向有效图像，则返回一个 （）。否则，将为 、 、 和 分配适当的值，并返回零 （）。image1widt


-------------------------------------------------------- KeyPgImplements ----

Implements   继承接口
  
指定要由用户定义类型
实现的接口 注意：存根页。即使此关键字已保留，接口尚未实现。

语法
Type typename Implements interface
...
End Type

描述

例

方言差异
在 -lang qb 方言中不可用，除非使用别名 引用。__Implements

与QB的区别
FreeBASIC 的


-------------------------------------------------------- KeyPgImport ----

Import   导入
  
位于 DLL 中的公共数据的外部链接属性

语法
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

描述
仅在外部模块中（使用关键字）用于访问 Win32 DLL 中的全局变量：变量名称将添加到动态?


-------------------------------------------------------- KeyPgInclib ----

#inclib   #包含库
  
预处理器指令

语法
#inclib "libname"

描述
在链接过程中包含一个库，就


-------------------------------------------------------- KeyPgInclude ----

#include   #包含
  
预处理器语句，用于包含另一个源文件的内容

语法
#include [once] "file"

描述
#include在指令出现的位置插入来自另一个文件的源代码。这具有从包含文件编译源代码的效果，就好像它是包含它的源文件的一部分一样。一旦编译器到达包含文件的末尾，原始源文件将继?


-------------------------------------------------------- KeyPgInkey ----

Inkey   键输入
  
返回一个字符串，表示在键盘缓冲区中等待的第一个键

语法
Declare Function Inkey ( ) As String

用法
result = Inkey[$]

返回值
在键盘缓冲区中找到的第一个字符，如果未找到，则为空字符串 （）。""

描述
扫视键盘缓冲区并返回找到的第一个字符（如果有）的表示形式。然后，该键将从缓冲区中删除，并且不会回显到屏幕上。如果键盘缓冲区为空，


-------------------------------------------------------- KeyPgInp ----

Inp   端口
  
返回硬件端口处的值。

语法
Declare Function Inp ( ByVal port As UShort ) As Integer

用法
value = Inp(port)

参数
port
要读取的端口号。

返回值
指定端口处


-------------------------------------------------------- KeyPgInput ----

Input   输入
  
从键盘读取值列表

语法
Input [;] ["prompt" ,|; ] variable_list

参数
prompt
作为提示写入屏幕的可选字符串文本。如果后跟分号 （），则提示符后面将附加一个问号 （）。如果它后跟逗号，则不会附加任何内容。;"? "
variable_list
逗号分隔的变量列表，用于保存从用户读取的值。

描述
从键盘读取列表值，直到第一个回车符。数值从其字符串表示形式转换为变量列表中的相应类型。字符在键入?


-------------------------------------------------------- KeyPgInputfilemode ----

Input (File Mode)   输入
  
指定要为输入模式打开的文本文件

语法
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行输入的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行读取的文件模式。
此模式允许使用 按顺序读取文本行，或读取 以 逗号分隔的值。
文本文件不能在FreeBASIC中


-------------------------------------------------------- KeyPgInputnum ----

Input()
  
从控制台或文件中读取许多字符

语法
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

用法
result = Input[$]( n [, [#]filenum ] )

参数
n
要读取的字节数。
filenum
绑定文件或设备的文件编号。

返回值
返回读取的字符中的 a 个。String

描述
从 控制台或 指定的绑定文件/设备读取许多字符。
第


-------------------------------------------------------- KeyPgInputPp ----

Input #   输入
  
从文本文件中读取值列表

语法
Input # filenum, variable_list

参数
filenum
为打开的文件或设备的文件编号Input
variable_list
用于保存读取的值的变量列表

描述
通过绑定文件编号从文本文件读取一组以分隔符分隔的值，并按读取顺序将它们写入 中的变量。如果变量是数值，则读取值将从其字符串表示形式转换为相应的类型。



-------------------------------------------------------- KeyPgInstr ----

InStr   字符串搜索
  
查找字符串中子字符串或字符的第一个匹配项

语法
Declare Function InStr ( ByRef str As Const String,  [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

用法
first = InStr( [ start, ] str, [ Any ] substring )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
搜索开始的位置。第一个字符从位置 1 开始。str

返回值
中第一个出现的 的位置。substringstr

描述
定位子字符串或字符在字符串中首次出现的位置。在第一种形式（不带参数）中，搜索从第一个字符开始。
如


-------------------------------------------------------- KeyPgInstrrev ----

InStrRev   字符串搜索反向
  
查找字符串中子字符串或字符的最后一个匹配项

语法
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

用法
last = InStrRev( str, [ Any ] substring [, start ]  )

参数
str
要搜索的字符串。
substring
要查找的子字符串。
start
搜索开始的位置。第一个字符从位置 1 开始。str

返回值
中最后出现的 的位置。substringstr

描述
定位子字符串或字符在字符串中最后出现的位置。如果未给出参数或小于零，则搜索从最后一个字符开始。
如果出现以下情


-------------------------------------------------------- KeyPgInt ----

Int   数取整
  
返回数字的下限

语法
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

用法
result = Int( number )

参数
number
要舍入的浮点数

返回值
返回 的下限，即小于或等于它的最大整数。number

描述
 Int返回 的底线。例如，将返回 ，并将返回 。对于整数类型，


-------------------------------------------------------- KeyPgInteger ----

Integer   整数型
  
标准数据类型：32 位或 64 位有符号，大小与SizeOf(Any Ptr)

语法
Dim variable As Integer
Dim variable As Integer<bits>

参数
bits
一个数字常量表达式，指示所需大小的整数位。允许的值为 、 或 。8163264

描述
整数是 FreeBASIC 用于整数数学运算和按位运算的主要数据类型。它是数字文本的默认类型。
在第一种形式中，Integer 是 32 位或 64 位有符号整数数据?


-------------------------------------------------------- KeyPgIs ----

Is   是类
  
语句块中的子句。Select Case

语法
Case Is expression

描述
指定将基于表达式（包括大于 （>） 或小于 （<） 运


-------------------------------------------------------- KeyPgIsDate ----

IsDate   是日期
  
测试字符串是否可以转换为日期序列

语法
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

用法
#include "vbcompat.bi"
result = IsDate( stringdate )

参数
stringdate
要测试的字符串

返回值
如果日期字符串可以转换为日期序列，则返回非零 （-1），否则返回零 （0）。

描述
日期字符串必须采用在操作系统的区域设置中设置的格式，才能被视为


-------------------------------------------------------- KeyPgIsredirected ----

IsRedirected   是重定向
  
检查 stdin 或 stdout 是否重定向到文件

语法
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

用法
#include "fbio.bi"
result = IsRedirected( is_input )

参数
is_input
指示要返回的信息类型的 A。Long

返回值
如果 stdin 或 stdout 被重定向，则返回非零 （），否则返回零 （）。-10

描述
IsRedirected 检查 stdin 或 stdout 是否重定向到文件，而不是像往常一样连接到控制台/终端。
如果


-------------------------------------------------------- KeyPgKill ----

Kill   删文件
  
从磁盘/存储介质中删除文件。

语法
Declare Function Kill ( ByRef filename As Const String ) As Long

用法
result = Kill( filename )

参数
filename
文件名是要删除的磁盘文件的名称。如果文件不在当前目录中，则路径也必须指定为 。path/file

返回值
成功时返回零 （），出错时返回非零。0

?


-------------------------------------------------------- KeyPgLbound ----

LBound   数组取下限
  
返回数组维度的下限

语法
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = LBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
要获取 的下限的维度

返回值
返回数组维度的下限。
描述
LBound返回可用作数组特定维度的索引的最小值。
数组维度从一 （） 到 的编号，其中维度的总数。如果未指定，将返回第一个维度的下限。
如果为零 （），


-------------------------------------------------------- KeyPgLcase ----

LCase   字符串小写
  
返回字符串的小写副本

语法
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = LCase[$]( str [ , mode ] )

参数
str
要转换为小写的字符串。
mode
转换模式：0 = 当前区域设置，1 = 仅 ASCII

返回值
的小写副本。str

?


-------------------------------------------------------- KeyPgLeft ----

Left   字符串取左
  
返回字符串最左侧的子字符串

语法
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Left[$]( str, n )

参数
str
源字符串。
n
要从源字符串返回的字符数。

返回值
返回 最左边的子字符串。str

描述
返回从 的左侧（开头）开始的最左侧字


-------------------------------------------------------- KeyPgLen ----

Len   字符串总长
  
返回表达式或数据类型的长度

语法
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer

Declare Operator Len ( ByRef expression As datatype ) As datatype

Declare Function Len ( datatype ) As Integer	

用法
result = Len( expression )
或
result = Len( DataType )

参数
expression
任何类型的表达式。
datatype
数据类型。

返回值
返回表达式或数据类型（包括 UDT 的数据字段）的大小（以字节为单位）。

描述
Len返回表达式的长度或数据类型的大小（以字节为单位）。
在第一种形式中，如果 是 ， 或 ，将返回字符串的长度（以字符为单位?


-------------------------------------------------------- KeyPgLet ----

Let   赋值
  
指示赋值运算符。

语法
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

描述
该命令旨在帮助程序员区分赋值语句（例如）和相等性测试（例如）。由于编译器不需要它，因此通常会省略它。
 let 可以用作左侧运算符，将用户定义类型的成员分配给多个


-------------------------------------------------------- KeyPgLib ----

Lib   库
  
指定可在其中找到子项或函数作为声明的一部分的库

语法
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type

Extern "mangling" lib "libname"
declarative statements
end Extern

Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type


描述
在 或声明中，以及在类方法声明（包括构造函数和析构函数）中，指示包含函数的库。以这种方式指定的库被链接进来，就好像或已经使用过


-------------------------------------------------------- KeyPgLinegraphics ----

Line (Graphics)   画线
  
绘制线条

语法
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

参数
target
指定要在其上绘制的缓冲区
STEP
指示起始坐标是相对的
(x1, y1)
线路的起始坐标
STEP
指示结束坐标是相对的
(x2, y2)
线的结束坐标
color
颜色属性。
B|BF
指定框或框填充模式
style
线条样式

描述
在两点之间绘制直线或框的图形语句。该操作将在通过 设置的当前工作页面上进行，或者如果指定，则在缓冲区/缓冲区上进行。
坐标


-------------------------------------------------------- KeyPgLineinput ----

Line Input   画线
  
从键盘读取一行输入

语法
Line Input [;] [promptstring {;|,} ] stringvariable

参数
promptstring
在等待输入之前显示的可选提示。如果后跟分号 （），则提示符后面将附加一个问号 （）。如果它后跟逗号，则不会附加任何内容。;"? "
stringvariable
用于接收文本行的变量

描述
从键盘读取一行文本并将其存储在字符串变量中。
（如果有） 将写入当前光标位置的屏幕，并且读取的字符在提示符之后?


-------------------------------------------------------- KeyPgLineinputPp ----

Line Input #   画线
  
从文件中读取一行文本

语法
Line Input #file number, string_variable

参数
file number
为其打开的文件的文件编号Input
string_variable
用于接收文本行的变量

描述
从打开的文本文件中读取一行（通过绑定的文件编号打开），并将其存储在字符串变


-------------------------------------------------------- KeyPgLoByte ----

LoByte   单字节低位
  
获取操作数的最低字节。

语法
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

用法
result = LoByte( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低字节值。

描述
此宏将数值


-------------------------------------------------------- KeyPgLoc ----

LOC   文件位置
  
返回上次执行文件读/写操作的文件位置

语法
Declare Function LOC ( ByVal filenum As Long ) As LongInt

用法
result = LOC( filenum )

参数
filenum
打开的文件的文件编号。

返回值
上次执行读/写操作的文件位置。

描述
返回上次执行文件读/写的位置。
该位置在记录中标明：
在随机打开的文件中，打开文件时指定的记录长度用于
文本文件（FOR INPUT|输出|追加，记录


-------------------------------------------------------- KeyPgLocal ----

Local   本地
  
用于设置当前错误处理程序的错误处理语句

语法
On Local Error Goto label

描述
构造中的子句允许在相同或 in 中定义错误处理程序。
 备注：目前，编译器会忽略该子句（仅在 Sub/Function 内部授权），并且错误处理程序可以在 On [Local] Error 所在的同一过程的?


-------------------------------------------------------- KeyPgLocate ----

Locate   光标定位
  
设置当前光标位置

语法
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

用法
Locate [row], [column], [state]

result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

参数
row
控制台中基于 1 的垂直字符位置。
column
控制台中基于 1 的水平字符位置。
state
游标仅在控制台模式下的状态：关闭，打开;文本光标在图形模式下从不可见。01
start
忽视。仅允许 -lang qb 方言兼容性。
stop
忽视。仅允许 -lang qb 方言兼容性。

返回值
返回包含当前游标位置和状态的 32 位。低字的低字节包含列，低字的高字节包含行，高字包含游标状态。
如果任何行、列或状态参数只是由调用 来设置的，则返回值将反映这些新值，而不是以前的值。如果在调用 中省略了


-------------------------------------------------------- KeyPgLock ----

Lock   锁定
  
限制对文件或文件部分的读/写访问

语法
Lock #filenum, record
Lock #filenum, start To end

参数
filenum
用于文件的文件编号。Open
record
要锁定的记录（文件）。Random
start
要从中锁定的第一个字节位置（文件）。Binary
end
要锁定到的最后一个字节位置（文件）。Binary

描述
Lock暂时限制其他线程或程序对文件或文件部?


-------------------------------------------------------- KeyPgLof ----

LOF   文件长度
  
返回打开的磁盘文件的长度

语法
Declare Function LOF ( ByVal filenum As Long ) As LongInt

用法
result = LOF( filenum )

参数
filenum
打开的磁盘文件的文件编号。

返回值
打开的磁盘文件的长度（以字节为单位）。

描述
返回以前使用给?


-------------------------------------------------------- KeyPgLog ----

Log   对数
  
返回给定数字的自然对数

语法
Declare Function Log cdecl ( ByVal number As Double ) As Double

用法
result = Log( number )

参数
number
用于计算自然对数的数字。

返回值
返回以 e 为底数（也称为自然对数）的对数。number

描述
这种符号可能会有些混淆，因为在数学中，自然对数函数通常表示为LN，而以10为底的对数通常表示为LOG。FreeBASIC，像大多数计算机编程语言一样，使用LO


-------------------------------------------------------- KeyPgLong ----

Long   长型
  
标准数据类型：32 位有符号整数

语法
Dim variable As Long

描述
32 位有符号整数数据类型。可以保存从 到 的值?


-------------------------------------------------------- KeyPgLongint ----

LongInt   长整型
  
标准数据类型：64 位有符号

语法
Dim variable As LongInt

描述
64 位有符号整数数据类型。可以保存从 -9 223 372 036 854 775 808 到 9 223 372 0


-------------------------------------------------------- KeyPgLoop ----
Loop   重复
Description



-------------------------------------------------------- KeyPgLoWord ----

LoWord   双字节低位
  
获取操作数的最低 16 位字。

语法
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

用法
result = LoWord( expr )

参数
expr
转换为值的数值表达式。UInteger

返回值
返回 expr 的低字的值。

描述
此宏将数值表?


-------------------------------------------------------- KeyPgLpos ----

LPos   打印位置
  
返回在最后一条语句中发送到打印机端口的字符数。LPrint

语法
Declare Function LPos ( ByVal printer As Long ) As Long

用法
result = LPOS(printer)

参数
printer
0、1、2 或 3。表示打印机端口 （LPT#）

返回值
返回


-------------------------------------------------------- KeyPgLprint ----

LPrint   打印机打印
  
将文本写入默认打印机。

语法
LPrint  [ Using formatstring,] [expressionlist] [(, | ;)] ...

参数
formatstring
指定输出格式的字符串。
expressionlist
要根据指定格式输出的变量列表。

描述
打印到连接到并行端口 LPT1 的打印机，或者如果不存在，则打印到默认打印机。要打印到与缺省打印机不同的打印机，请使用 。
子句的格式根据 。除了UDT，任何


-------------------------------------------------------- KeyPgLset ----

LSet   字符串左齐
  
左对齐字符串

语法
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
LSet dst, src
LSet dst_udt, src_udt

参数
dst
用于接收数据的字符串。String
src
获取数据的源。String
dst_udt
用户定义以接收数据。Type
src_udt
用户定义要从中复制数据。Type

描述
LSetleft 将文本对齐到字符串缓冲区中，用空格填充字符串的左侧，用空格填充右侧部分。不会修改字符串缓冲区大小。
如果文本对于字


-------------------------------------------------------- KeyPgLtrim ----

LTrim   字符串删空格左边
  
删除字符串左侧的周围子字符串或字符

语法
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = LTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的左侧（开头）修剪周围的字符。如果指定，将修剪?


-------------------------------------------------------- KeyPgMemberFunction ----

Function (Member)   函数
  
声明或定义返回值的成员过程

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }

Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

参数
typename 
、或 的名称TypeClassUnion
fieldname 
过程的名称
external_name
外部链接时看到的字段名称
parameters 
要传递给过程的参数
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Function使用或调用返回值的成员过程访问成员过程（也可以通过指定 返回引用）。该过程可以选择性地接受参数或 。 在没有显式使用关键字的情况?


-------------------------------------------------------- KeyPgMemberSub ----

Sub (Member)   过程
  
声明或定义成员过程

语法
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }

Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

参数
typename 
、或 的名称TypeClassUnion
fieldname 
过程的名称
external_name
外部链接时看到的字段名称
parameters 
要传递给过程的参数
calling convention specifier	
可以是以下之一：或cdeclstdcallpascal

描述
Sub成员使用或调用成员过程进行访问，并且可以选择接受参数或 。 在没有显式使用关键字的情况下重载。
是为其声明和定义方法的类型的名称。的名称?


-------------------------------------------------------- KeyPgMetaDynamic ----

$Dynamic   $动态数组
  
元命令，用于更改数组的分配方式

语法
'$Dynamic
or
Rem $Dynamic

描述
'$Dynamic是一个元命令，它指定以下任何数组声明都是可变长度的，无论它们是否使用常量下标范围声明。这


-------------------------------------------------------- KeyPgMetaInclude ----

$Include   $包含文件
  
元命令语句以包含另一个源文件的内容

语法
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

描述
$Include在元命令出现的位置插入来自另一个文件的源代码。这具有从包含文件编译源代码的效果，就好像它是包含它的源文件的一部分一样。一旦编译器到达包含文件的末尾，原始源文件


-------------------------------------------------------- KeyPgMetaLang ----

$Lang   $语言
  
元命令语句，用于设置编译器方言。

语法
'$lang: "lang"
or
Rem $lang: "lang"

参数
"lang"
要设置的方言，括在双引号中，并且必须是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令行上提供 -forcelang 选项，则可用于设置显示该选项的源模块的方言。最多将在源模块上进行两次传递。在第一次传递时，如果指定的方言不是默认方


-------------------------------------------------------- KeyPgMetaStatic ----

$Static   $静态数组
  
元命令，用于更改数组的分配方式

语法
'$Static
or
Rem $Static

描述
'$Static是覆盖 的行为的元命令，也就是说，使用常量下标范围声明的数组是固定长度的。这对于所使用的模


-------------------------------------------------------- KeyPgMidfunction ----

Mid (Function)   字符串取子串
  
返回字符串的子字符串

语法
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

用法
result = Mid[$]( str, start [, n ] )

参数
str
源字符串。
start
子字符串中的起始位置。第一个字符从位置 1 开始。str
n
子字符串长度，以字符为单位。

描述
返回从 中开始的子字符串。如果 为空，则返回空字符串 （）。如果或然后返回空字符串 （）。



-------------------------------------------------------- KeyPgMidstatement ----

Mid (Statement)   字符串取子串
  
用另一个字符串覆盖一个字符串的子字符串

语法
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

用法
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

参数
text
要使用的字符串。
start
要覆盖的子字符串的起始位置。第一个字符从位置 1 开始。text
length
要覆盖的字符数。

描述
将 的最大字符复制到 中，从 开始。
如果未指定，则复制所有字符串的大小保持不变;如果太大?


-------------------------------------------------------- KeyPgMinute ----

Minute   时间取分
  
从日期序列中获取小时的分钟数 

语法
Declare Function Minute ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Minute( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中返


-------------------------------------------------------- KeyPgMkd ----

MKD   数转字符双精型
  
是否将二进制从变量复制到 ，将其长度设置为 8 个字节DoubleString

语法
Declare Function MKD ( ByVal number As Double ) As String

用法
result = MKD[$]( number )

参数
number
要将变量二进制复制到 .DoubleString

返回值
返回 带有 的二进制副本的 。StringDouble

描述
是否从变量到 的二进制复制将其长度?


-------------------------------------------------------- KeyPgMkdir ----

MkDir   目录新建
  
在本地文件系统上创建文件夹/目录

语法
Declare Function MkDir ( ByRef folder As Const String ) As Long

用法
result = MkDir( folder )

参数
folder
要创建的新默认文件夹/目录，或要创建的子文件夹/子目录的路径。

返回值
成功时返回零 （0），失败时返回负 1 （-1）。

描述
在本地文件系统上创建文件?


-------------------------------------------------------- KeyPgMki ----

MKI   数转字符整型
  
是否从整数变量复制到与输入变量大小长度相同的二进制变量String

语法
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

用法
result = MKI[$]( number )
result = MKI[$]<bits>( number )

参数
number
将 或变量复制到 二进制文件。IntegerInteger<bits>String

返回值
返回 包含 的二进制副本。Stringnumber

描述
是否从 或 变量到 的二进制副本将其长度设置为类型中的字节数。生成的字符串可以使用 或 读回整数类型。
此函数可用于在不使用定义的情


-------------------------------------------------------- KeyPgMkl ----

MKL   数转字符长型
  
是否将二进制从变量复制到 ，将其长度设置为 4 个字节LongString

语法
Declare Function MKL ( ByVal number As Long ) As String

用法
result = MKL( number )

参数
number
要将变量二进制复制到 .LongString

返回值
返回 带有 的二进制副本的 。StringLong

描述
是否将二进制副本从变量复制到 ，将?


-------------------------------------------------------- KeyPgMklongint ----

MKLongInt   数转字符长整型
  
是否将二进制从变量复制到 ，将其长度设置为 8 个字节LongIntString

语法
Declare Function MKLongInt ( ByVal number As LongInt ) As String

用法
result = MKLongInt[$]( number )

参数
number
要将变量二进制复制到 .LongIntString

返回值
返回 带有 的二进制副本的 。StringLongInt

描述
执行从变量到字符串的二进制复制，将其长度设?


-------------------------------------------------------- KeyPgMks ----

MKS   数转字符单精型
  
是否将二进制从变量复制到 ，将其长度设置为 4 个字节SingleString

语法
Declare Function MKS ( ByVal number As Single ) As String

用法
result = MKS[$]( number )

参数
number
要将变量二进制复制到 .SingleString

返回值
返回 带有 的二进制副本的 。StringSingle

描述
是否将二进制副本从变量复制到 ，将其长


-------------------------------------------------------- KeyPgMkshort ----

MKShort   数转字符短型
  
是否将二进制从变量复制到 ，将其长度设置为 2 个字节ShortString

语法
Declare Function MKShort ( ByVal number As Short ) As String

用法
result = MKShort[$](number)

参数
number
要将变量二进制复制到 .ShortString

返回值
返回 带有 的二进制副本的 。StringShort

描述
执行从 SHORT 变量到字符串的二进制复制，


-------------------------------------------------------- KeyPgModuleConstructor ----

Constructor (Module)   构造函数
  
指定在模块级代码之前执行过程

语法
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

描述
关键字在定义中使用（在声明行级别禁止），以强制执行模块级代码之前的过程。定义为构造函数的过程的使用方式可能与普通过程相同，也就是说，可以从模块级代码以及其他过程中调用它们。



-------------------------------------------------------- KeyPgModuleDestructor ----

Destructor (Module)   析构函数
  
指定在程序终止时执行过程

语法
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

描述
定义要从已编译程序的结束代码自动调用的过程。结束代码由编译器生成，并在程序正常终止时执行。定义为析构函数的过程的使用方式可能与普通过程相同，也就是说，可以从模块级代码以及其他?


-------------------------------------------------------- KeyPgMonth ----

Month   日期取月份
  
从日期序列中获取一年中的月份

语法
Declare Function Month ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Month( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回月份编号。
月份值的范围为 1-12，1


-------------------------------------------------------- KeyPgMonthname ----

MonthName   日期月名称
  
从其整数表示形式中获取月份的名称

语法
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

用法
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

参数
month
一年中月份的数字 - 1：1 月到 12：12 月
abbreviate
标志，指示名称应缩写

返回值
从值 1 到 12 返回本地操作系统语言月份名称。month

描述
如果为 true，则返回月份


-------------------------------------------------------- KeyPgMultikey ----

MultiKey   扫描键码
  
通过键盘扫描码检测按键的状态。

语法
Declare Function MultiKey ( ByVal scancode As Long ) As Long

用法
result = MultiKey(scancode)

参数
scancode
要检查的密钥的扫描码。

返回值
如果按下指定扫描代码的键，则返回，否则返回 。-10

描述
MultiKey是一个功能，它将随时检测由扫描码确定的任何密钥的状态。如果按下该键，它将返回，否则它将返回 。
使用时未禁用键盘输入缓冲区;也


-------------------------------------------------------- KeyPgMutexCreate ----

MutexCreate   互斥锁创建
  
创建用于同步线程执行的互斥体

语法
Declare Function MutexCreate ( ) As Any Ptr

用法
result = MutexCreate

返回值
创建的互斥体的句柄，或失败时的空指针 （0）。Any Ptr

描述
互斥体是“互斥”的缩写，是一种在线程内同步共享数据的方法。如果存在多个线程使用的全局变量（或由多个线程多次调用的单个线程使用的局部静态变量），则在


-------------------------------------------------------- KeyPgMutexDestroy ----

MutexDestroy   互斥锁销毁
  
销毁互斥体

语法
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

用法
MutexDestroy( id )

参数
id
要销毁的互斥体的句柄。Any Ptr

描述
Mutexdestroy放弃 由 创建的互斥体。此调用应在使用互斥锁的任何线


-------------------------------------------------------- KeyPgMutexLock ----

MutexLock   互斥锁锁住
  
获取互斥体

语法
Declare Sub MutexLock ( ByVal id As Any Ptr )

用法
MutexLock( id )

参数
id
要锁定的互斥体的句柄。Any Ptr

描述
Mutexlock使用由 生成的互斥体“句柄”停止任何其他线程，直到该句柄被 解锁。
此类已停止的线程将挂起其执行，并且


-------------------------------------------------------- KeyPgMutexUnlock ----

MutexUnlock   互斥锁解锁
  
释放互斥锁

语法
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

用法
MutexUnlock( id )

参数
id
要解锁的互斥体的句柄。Any Ptr

描述
Mutexunlock释放由 创建并用 锁定的互斥体“句柄”。这允许共享互斥体的其他线


-------------------------------------------------------- KeyPgNaked ----

Naked   裸代码
  
编写没有序言/后记代码的函数

语法
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

参数
identifier- 程序的名称。
 - 调用过程的约定 - 可以是 、 或 
 - 过程正文中的代码。用于处理参数和返回值的代码都必须手动完成。请注意，执行这些操作的方法可能会更改，具体取决于调用约定。
 - 要传递给过程的参数。
 - 函数的数据类型。calling_conventioncdeclpascalstdcallasm_statementsparam_l


-------------------------------------------------------- KeyPgName ----

Name
  
重命名磁盘上的文件

语法
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

用法
result = Name( oldname, newname )

参数
oldname
现有文件的名称。
newname
文件的新名称。

返回值
成功时返回零 （），失败时返回非零。0

描述
重命名最初调用的文件或文件夹。
如果存在同名的文件/文件夹，则不能保证该?


-------------------------------------------------------- KeyPgNamespace ----

Namespace   命名空间
  
声明命名空间块。

语法
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

参数
identifier
命名空间的名称（包括嵌套名称说明符）。
aliasname
命名空间的备用外部名称。

描述
命名空间允许将对象（预定义的数据类型和 UDT，包括联合和枚举）和过程（包括其声明）等实体分组到名称下。这样，全局范围可以分为“子范围”，每个子范围都


-------------------------------------------------------- KeyPgNext ----

Next   下步
  
控制流语句以标记循环的结束。For...Next

语法
Next [ identifier_list ]

描述
指示与匹配语句关联的语句块的结尾。
当在没有identifier_list的情况下单独使用时，它将关闭最新的语句块。
是可选的，可以是一个或多个用逗号分隔的变量名称。保留此形式的语句是?


-------------------------------------------------------- KeyPgNow ----

Now   现在
  
以日期序列形式获取当前系统时间 

语法
Declare Function Now ( ) As Double

用法
#include "vbcompat.bi"
result = Now

返回值
返回一个日期序列，其中包含系统在执行时的日期和时间。

描述
由于时间是日期序列的小数部分，如果


-------------------------------------------------------- KeyPgObject ----

Object   对象
  
提供运行时类型信息的内置类型

语法
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

用法
Type typename Extends Object
End Type

Dim variable As Object

描述
Object 是一种内置类型，它为从它派生的所有类型提供运行时类型信息 （RTTI），允许它们与 一起使用，并支持和方法。
扩展内置对象类型允许在 的顶部添加一个额外的隐藏 vtable 指针字?


-------------------------------------------------------- KeyPgOct ----

Oct   八进制
  
将数字转换为八进制表示形式

语法
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String

Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

用法
result = Oct[$]( number [, digits ] )

参数
number
计算为数字的数字或表达式。浮点数将转换为 .LongInt
digits
返回的字符串中所需的位数。

返回值
包含 的无符号八进制表示形式的字符串。number

描述
返回 的无符号八进制字符串表示形式。八进制数字的范围从 0 到 7。
如果指定 > 0，则结果字符串将恰好是该长度。如有必要，?


-------------------------------------------------------- KeyPgOffsetof ----

OffsetOf   取偏移值
  
返回类型中字段的偏移量。

语法
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname )	

用法
result = OffsetOf( typename, fieldname )

参数
typename
使用语句定义的类型的名称。Type...End Type
fieldname
在类型（或派生类型的基类型）中定义的字段的名称。

描述
对于非派生类型，将返回位置，作为从 开头开始的偏移量（以字节为单位） 返回。
对于派生类型，将返回


-------------------------------------------------------- KeyPgOnerror ----

On Error   在
  
用于设置当前错误处理程序的错误处理语句

语法
On [Local] Error Goto label

参数
label
发生错误时要跳转到的标签

描述
“出错”上，在发生错误时触发跳转到错误处理程序。此类错误可由内置语句触发，例如 ，或在使用语句时触发。
注： 仅当使用 -e、-ex 或 -exx 选项之一编译程序时，才会


-------------------------------------------------------- KeyPgOngosub ----

On...Gosub
  
基于表达式调用标签

语法
On expression GoSub label1[, ...]

描述
根据表达式的值分支到不同的标签。表达式值 1 将分支到第一个标签，值 2 将分支到第二个标签，依此类推。如果表达式的值为零 （0） 或大于列表中的项目数，则在 后面的下一个语句上继续执行。
此


-------------------------------------------------------- KeyPgOngoto ----

On...Goto
  
跳转到基于表达式的标签。

语法
On expression Goto label1[, ...]

描述
根据表达式的值分支到不同的标签。表达式值 1 将分支到第一个标签，值 2 将分支到第二个标签，依此类推。如果表达式的值为零 （0） 或大


-------------------------------------------------------- KeyPgOpAdd ----

Operator + (Addition)   运算符
  
对两个表达式求和

语法
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer

Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs + rhs

参数
lhs
要求和的左侧表达式。
rhs
要求和的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的总和。

描述
当左侧和右侧表达式是数值时，运算符 + （Add） 将返回两个值的总和。
当左侧和右侧表达式是字符串值时，运算符 +（Add） 连接两个字符串并返回


-------------------------------------------------------- KeyPgOpAnd ----

Operator And (Conjunction)   运算符
  
返回两个数值的按位和（连词）

语法
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs And rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位和（合词）。

描述
此运算符返回其操作数的按位和，这是一个逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔?


-------------------------------------------------------- KeyPgOpAndAlso ----

Operator Andalso (Short Circuit Conjunction)   运算符
  
返回两个数值的短路和（合相）

语法
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs AndAlso rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的短路和（合相）。

描述
此运算符计算左侧表达式。如果结果为零，则立即返回零。如果结果为非零，则计算右侧，并返回其逻辑结果。
 （对


-------------------------------------------------------- KeyPgOpArrayIndex ----

Operator () (Array Index)   运算符
  
返回对数组中元素的引用

语法
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

用法
result = lhs ( rhs [, ...] )
or
lhs ( rhs [, ...] ) = value

参数
lhs
数组。
rhs
数组中元素的索引。
T
任何数据类型。

描述
此运算符返回对数组中元素的引用。对于多维数组，必须指定多个索引（?


-------------------------------------------------------- KeyPgOpAssignment ----

Operator =[>] (Assign)   运算符
  
为变量赋值

语法
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs = rhs
或
lhs => rhs

或者，在 QB方言，

[ Let ] lhs = rhs
或
[ Let ] lhs => rhs

参数
lhs
要分配到的变量。
T1
任何数字、布尔值、字符串或指针类型。
rhs
要分配给 的值。lhs
T2
任何类型均可转换为 。T2

描述
此运算符将其右侧操作数 （） 的值分配给其左侧操作数 （）。右侧操作数必须隐式转换为左侧类型 （）（对于布尔值到整数的转换，false ?


-------------------------------------------------------- KeyPgOpAt ----

Operator @ (Address Of)   运算符
  
返回字符串文本、变量、对象或过程的地址

语法
Declare Operator @ ( ByRef rhs As T ) As T Pointer

用法
result = @ rhs

参数
rhs
要检索其地址的字符串文本、变量、对象或过程。
T
任何标准、用户定义或过程类型。

返回值
返回右侧 （） 操作数的地址。rhs

描述
运算符 @ （地址） 返回其操作数的内存地址。
当操作数为 类型时，将返回内部字符串描述符的地址。使用（字符串


-------------------------------------------------------- KeyPgOpCast ----

Operator Cast   运算符
  
用于将 UDT（用户定义类型）变量转换为指定数据类型的运算符

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

用法
Cast( datatype, expression )

参数
typename 
、或 的名称TypeClassUnion
datatype 
要转换为它的类型的名称、内置数据类型（标准数据类型）或 UDT 不同于typename
expression 
要转换的表达式，实例typename

描述
将（变量）转换为其他 .
必须在 、 、 或 内声明。
与所有非静态成员过程一样，它传递了一个隐藏参数。
当只有返回类?


-------------------------------------------------------- KeyPgOpCombineAdd ----

Operator += (Add And Assign)   运算符
  
向变量添加和赋值

语法
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )

Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

用法
lhs += rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要添加到 的值。lhs
T2
任何数值类型。
T
任何数据类型。

描述
此运算符向变量添加并赋值。它在功能上等效于：
对于数值类型，右侧表达式 （） 将转换为左侧类型 （）。
对于字符串类型，此运算符在功能上等效于 


-------------------------------------------------------- KeyPgOpCombineAnd ----

Operator And= (Conjunction And Assign)   运算符
  
执行按位和（连词）并将结果赋给变量

语法
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs And= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位和（并入）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符按位执行 and 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpCombineConcat ----

Operator &= (Concatenate And Assign)   运算符
  
将一个字符串追加并分配给另一个字符串

语法
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

用法
lhs &= rhs

参数
lhs
要为其分配的字符串。
rhs
要追加到 的值。lhs
T2
任何可以转换为字符串的数字、字符串或用户定义类型。

描述
此运算符将一个字符串追加到另一个字符串上。右侧表达式 （） 在串联之前转换为字符串。它在功能上等效于，
其中结果被分配回左侧字


-------------------------------------------------------- KeyPgOpCombineDivide ----

Operator /= (Divide And Assign)   运算符
  
将值除法并赋给变量

语法
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs /= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要除以的值。lhs
T2
任何数值类型。

描述
此运算符将值除法并赋给变量。它在功能上等效于：
lhs = lhs / rhs

对于使?


-------------------------------------------------------- KeyPgOpCombineEqv ----

Operator Eqv= (Equivalence And Assign)   运算符
  
执行按位 eqv（等效性）并将结果分配给变量

语法
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Eqv= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位 eqv（等效）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 eqv 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpCombineExponentiate ----

Operator ^= (Exponentiate And Assign)   运算符
  
对变量进行幂化并赋值

语法
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

用法
lhs ^= rhs

参数
lhs
要分配到的变量。
rhs
要幂所依据的值。lhs

描述
此运算符对变量进行幂幂赋值。它在功能上等效于：
lhs = lhs ^ rhs

对于使用适当语法作为成员的用户定义类型，可以重载此运算符。
注意：此


-------------------------------------------------------- KeyPgOpCombineImp ----

Operator Imp= (Implication And Assign)   运算符
  
执行按位 imp（隐含）并将结果分配给变量

语法
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Imp= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
使用 执行按位 imp（隐含）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 imp 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpCombineIntegerDivide ----

Operator \= (Integer Divide And Assign)   运算符
  
整数除以变量并将其赋值

语法
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs \= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要除以的值。lhs
T2
任何数值类型。

描述
此运算符除法（整数除法）并为变量赋值。它在功能上等效于：
lhs = lhs \ rhs




-------------------------------------------------------- KeyPgOpCombineModulus ----

Operator Mod= (Modulus And Assign)   运算符
  
除以一个值并将余数赋给变量

语法
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

用法
lhs Mod= rhs

参数
lhs
要分配到的变量。
rhs
要除以的值。lhs

描述
此运算符将两个类型的值除以，并将余数赋给其左侧 （） 变量。它在功能上等效于：Integerlhs
lhs = lhs Mod rhs

对于?


-------------------------------------------------------- KeyPgOpCombineMultiply ----

Operator *= (Multiply And Assign)   运算符
  
将值相乘并赋值给变量

语法
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs *= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要乘以的值。lhs
T2
任何数值类型。

描述
此运算符将值相乘并赋值给变量。它在功能上等效于：
lhs = lhs * rhs

右侧表达式 （） 将转换为左侧类型 


-------------------------------------------------------- KeyPgOpCombineOr ----

Operator Or= (Inclusive Disjunction And Assign)   运算符
  
执行按位或（包括分离）并将结果赋给变量

语法
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Or= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
与 执行按位或（包括断开）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 or 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于?


-------------------------------------------------------- KeyPgOpCombineShiftLeft ----

Operator Shl= (Shift Left And Assign)   运算符
  
向左移动并将值赋给变量

语法
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shl= rhs

参数
lhs
要分配到的变量。
rhs
要向左移动的值。lhs

描述
此运算符将左侧 （） 参数中的位移动其右侧 （） 参数指定的次数，并将结果分配给 。它在功能上等效于：lhsrhslhs
lhs = lhs Shl rhs


-------------------------------------------------------- KeyPgOpCombineShiftRight ----

Operator Shr= (Shift Right And Assign)   运算符
  
向右移动并为变量赋值

语法
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

用法
lhs shr= rhs

参数
lhs
要分配到的变量。
rhs
要直接移动的值。lhs

描述
此运算符将左侧 （） 参数中的位移动其右侧 （） 参数指定的次数，并将结果分配给 。它在功能上等效于：lhsrhslhs
lhs = lhs Shr rhs



-------------------------------------------------------- KeyPgOpCombineSub ----

Operator -= (Subtract And Assign)   运算符
  
减去变量并将其赋值

语法
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

用法
lhs -= rhs

参数
lhs
要分配到的变量。
T1
任何数值类型。
rhs
要从 中减去的值。lhs
T2
任何数值类型。
T
任何数据类型。

描述
此运算符减去变量并将其赋值。它在功能上等效于：
lhs = lhs - rhs

对于数值类型，右侧表达式 （） 将?


-------------------------------------------------------- KeyPgOpCombineXor ----

Operator Xor= (Exclusive Disjunction And Assign)   运算符
  
执行按位 xor（独占析取）并将结果赋给变量

语法
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

用法
lhs Xor= rhs

参数
lhs
要分配到的变量。
T1
任何数字或布尔类型。
rhs
使用 执行按位 xor（独占或）的值。lhs
T2
任何数字或布尔类型。

描述
此运算符执行按位 or 并将结果赋给变量（对于将布尔值转换为整数，false 或 true 布尔值变为 0 或 -1 整数值）。它在功能上等效于：



-------------------------------------------------------- KeyPgOpConcat ----

Operator + (String Concatenation)   运算符
  
连接两个字符串

语法
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

用法
result = lhs + rhs

参数
lhs
要连接的左侧字符串。
rhs
要连接的右侧字符串。

描述
此运算符连接两个字符串。与 Operator &（带转换的字符串串联）不同，这两个表达式都必须是?


-------------------------------------------------------- KeyPgOpConcatConvert ----

Operator & (String Concatenation With Conversion)   运算符
  
连接两个字符串，根据需要将非字符串转换为字符串

语法
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

用法
result = lhs & rhs

参数
lhs
要连接的左侧表达式。
T
可转换为标准数据类型的任何标准数据类型或用户定义类型。
rhs
要连接的右侧表达式。
U
可转换为标准数据类型的任何标准数据类型或用户定义类型。
V
生成的字符串类型（因操作数而异）。

描述
此运算符连接两个表达式。如果任?


-------------------------------------------------------- KeyPgOpDelete ----

Operator Delete Statement   运算符
  
操作员销毁数据并释放与Operator New Expression

用法
Delete buf
or
Delete[] buf

参数
buf 
指向已由运算符或运算符分配的内存的指针，运算符的数组版本（必须根据要删除的数据类型提供类型化指针）。New ExpressionNew[] ExpressionNew Expression

描述
运算符用于销毁和释放使用运算符创建的对象的内存。删除 TYPE 时，将调用其析构函数。 运算符应仅与从运算符返回的地址一起使用。
运


-------------------------------------------------------- KeyPgOpDeleteOverload ----

Operator Delete Overload   运算符
  
成员运算符，用于在应用于 UDT（用户定义的类型）时提供过载内存解除分配进程部分。Operator Delete Statement

语法
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator delete[] ( buf  As Any Ptr )

参数
buf 
指向已由运算符或运算符（运算符的数组版本）分配的内存的指针。New OverloadNew[] OverloadNew Overload

描述
成员运算符在应用于 UDT（用户定义的类型）时重载运算符提供的内存解除分配进程部分。因此，用户可以定义自己的内存解除分配进?


-------------------------------------------------------- KeyPgOpDivide ----

Operator / (Divide)   运算符
  
除以两个数值表达式

语法
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs / rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回股息和除数的商。

描述
运算符 / （除法）返回股息和除数的商。
这两个操作数都不会以任何方式进行修改。与整数除法不


-------------------------------------------------------- KeyPgOpen ----

Open   文件打开
  
使用文件操作打开磁盘文件以进行读取或写入

语法
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber

Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

用法
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
或
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
或
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len =  record_length] )
或
Open filename For {Input|Output|Append} As filenumber
或
Open filename For Binary Access {Read|Write} As filenumber
或
Open filename For Random Access {Read|Write} As filenumber [Len =  record_length]


参数
filename
要打开的磁盘文件的名称的字符串值。相对文件路径相对于当前目录（请参见）。CurDir
encoding_type
读取或写入文本时要使用的编码可以是：
 Encoding "ascii" （默认使用 ASCII 编码）
 Encoding "utf8" （使用 8 位 Unicode 编码）
 Encoding "utf16" （使用 16 位 Unicode 编码）
 Encoding "utf32" （使用 32 位 Unicode 编码）
access_type
调用进程请求的访问类型。
 Access [Read] [Write] （可以使用读写访问权限，这是默认设置）
lock_type
对来自其他进程（线程或程序）的磁盘文件访问施加限制，可以是：
 Shared （文件可由其他进程自由访问）
 Lock [Read] [Write] （可以拒绝对其他进程的读写访问权限）
filenumber
要绑定到磁盘文件的可用文件编号，可通过 找到该文件。FreeFile
record_length
从磁盘文件读取或写入磁盘文件的每条记录的大小（以字节为单位）。缺?


-------------------------------------------------------- KeyPgOpenCom ----

Open Com   文件打开
  
打开用于输入和输出的串行端口

语法
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

用法
result = Open Com( options[,] As[#] filenumber )

参数
options
一个字符串，包含用于控制端口的选项。
filenumber
要绑定到端口的文件编号。

返回值
Open Com()成功时返回 32 位 ：零 （），否则返回非零错误代码。Long0

描述
此命令打开PC的串行端口，允许使用正常的文件命令发送和接收数据，如，，，...
主要参数是 a，它至少描述了要打开的通信?


-------------------------------------------------------- KeyPgOpenCons ----

Open Cons   ????
  
?????????? ?stdin? ??? ?stdout? ?????????????

??
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

??
result = Open Cons( [For {Input|Output}[,]] As filenumber )
??????QB?????
Open Cons [For {Input|Output}] As filenumber

??
filenumber
???? stdin ? stdout ??????????? ???????FreeFile

???
?????????? 32 ? ??????? ?0?????????????Open Cons()Long

??
Open Cons?????? stdin ? stdout ?????????????????????????????? ? ???????? ??????????
 ?????? stdin ?????????? ????????? stdout ?????????? ?????????????????
 stdin ? stdout ?????????????? OS ????


-------------------------------------------------------- KeyPgOpenErr ----

Open Err   文件打开
  
打开文件操作的标准输入 （stdin） 和标准错误 （stderr） 流。

语法
Open Err [for mode] As [#]filenumber As Long

用法
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

参数
mode
忽视。
filenumber
未使用的文件编号。

返回值
如果成功完成，则返回 32 位 ：零，否则返回非零值以指示失败。LongOpen Err()

描述
此命令打开以读取和写入控制台，从而允许使用普通文件命令执行读取和写入操作。
是不同于允许将错误消息与主控制台输出分开重?


-------------------------------------------------------- KeyPgOpenLpt ----

Open Lpt   文件打开
  
打开打印机设备

语法
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

用法
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

参数
x
指定端口号。如果省略，输出将发送到系统打印后台处理程序。
Printer_Name
要打开的打印机的名称。此参数在 DOS 上被忽略。
TITLE=Doc_Title
打印机后台处理程序看到的打印作业的标题。此参数在 DOS 上被忽略。
EMU=TTY
使用驱动程序文本映像在 Windows GDI 打印机上模拟 TTY 输出。此参数在 DOS 和 Linux 上被忽略。
For Input|Output
子句是允许兼容的，但它被忽略。
filenumber
要分配给设备的未使用文件编号。

返回值
如果成功完成，则返回 32 位 ：，否则返回非零值以指示失败。Long0Open Lpt()

描述
Open Lpt打


-------------------------------------------------------- KeyPgOpenPipe ----

Open Pipe   文件打开
  
打开外部进程的标准输入 （stdin） 或输出 （stdout） 流以进行文件操作。

语法
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

用法
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
或
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
（或类似QB的语法，）
Open Pipe filename For {Input|Output} As filenumber
（或，）
Open Pipe filename For Binary access_type As filenumber

参数
shell_command
要在操作系统命令外壳中执行的外部进程。相对文件路径相对于当前目录（请参见）。为需要在其可执行路径或参数中使用双引号的进程打开管道时，整个管道字符串应嵌套在双引号内。CurDir
access_type
调用进程请求的读取或写入访问权限的类型。
 Access {Read|}（  可以打开外部进程的 stdin 或 stdout 流）Write
filenumber
要绑定到外部进程的 stdin 或 stdout 流的可用文件编号。

返回值
在第一次使用中，返回 32 位 ：成功时返回零 （），否则返回非零错误代码?


-------------------------------------------------------- KeyPgOpenScrn ----

Open Scrn   文件打开
  
直接打开控制台，将输入和输出作为文件

语法
Open Scrn [for mode] As [#]filenumber As Long

用法
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

参数
mode
要么或 .如果省略，则假定为。InputOutputOutput
filenumber
未使用的文件编号。

返回值
如果成功完成，则返回 32 位 ：零 （），否则返回非零值以指示失败。Long0Open Scrn()

描述
此命令将作为文件打开输入和输出控制台，允许使用普通文件命令对其进行读/写。
在某些实现中，此命令可能使用对控制台


-------------------------------------------------------- KeyPgOpEqual ----

Operator = (Equal)   运算符
  
比较两个表达式的相等性

语法
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs = rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式相等，则返回负 1 （-1）;如果表达式不相等，则返回零 （0）。

描述
运算符 = （相等） 是一个二元运算符，它比较两个表达式的相等性并返回结果 - 一个布尔值，主要以： 负 1 （-1）


-------------------------------------------------------- KeyPgOpEqv ----

Operator Eqv (Equivalence)   运算符
  
返回两个数值的按位和（等效）

语法
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Eqv rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位等效性。

描述
此运算符返回其操作数的按位等效性，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布?


-------------------------------------------------------- KeyPgOperator ----

Operator   运算符
  
声明或定义重载运算符。

语法
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator Delete[] ( buf  As Any Ptr )
End { Type | Class | Union }

{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }

Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator typename.[] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf  As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf  As Any Ptr ) [ Export ]

参数
typename 
、 、 或 的名称。TypeClassUnionEnum
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

描述
内置运算符（如 、）在表达式中使用时具有预定义的行为。当运算符的至少一个参数是 、 、 或数据类型时，可以重载这些运算符以执行预定义操作以外的操作。
运算符只是函数。运算符


-------------------------------------------------------- KeyPgOpExponentiate ----

Operator ^ (Exponentiate)   运算符
  
将数值表达式提高到一定功效

语法
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs ^ rhs

参数
lhs
左侧基本表达式。
rhs
右侧指数表达式。

返回值
返回提高到某个指数的基本表达式的幂。

描述
运算符 ^ （幂） 返回基表达式 （） 提高到某个指数表达式 （） 的结果。 仅适用于双浮点数，其他类型的操作数将在执行幂之前转换为双精度。小?


-------------------------------------------------------- KeyPgOpFor ----

Operator For (Iteration)   运算符
  
声明或定义具有用户定义类型变量的循环使用的运算符For...Next

语法
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
end_value
用作循环终止值的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静


-------------------------------------------------------- KeyPgOpGreaterThan ----

Operator > (Greater Than)   运算符
  
比较一个表达式大于另一个表达式

语法
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs > rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于右侧表达式，则返回负 1 （-1）;如果小于或等于，则返回零 （0）。

描述
运算符 > （大于）是


-------------------------------------------------------- KeyPgOpGreaterThanOrEqual ----

Operator >= (Greater Than Or Equal)   运算符
  
比较大于或等于另一个表达式的表达式

语法
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs >= rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式大于或等于右侧表达式，则返回负 1 （-1）;如果小于，则返回零 （0）。

描述
运算符 >=（大于或等于）是一个二元?


-------------------------------------------------------- KeyPgOpImp ----

Operator Imp (Implication)   运算符
  
返回两个数值的按位和（暗示）

语法
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Imp rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位含义。

描述
此运算符返回其操作数的按位含义，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔值


-------------------------------------------------------- KeyPgOpIntegerDivide ----

Operator \ (Integer Divide)   运算符
  
划分两个表达式Integer

语法
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

用法
result = lhs \ rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回股息和除数的商。Integer

描述
运算符 \（整数除法）将两个表达式相除并返回结果。浮点数值通过向上或向下舍入转换为，并且生成的商的小数部?


-------------------------------------------------------- KeyPgOpIs ----

Operator Is (Run-Time Type Information)   运算符
  
检查对象是否与从其编译时类型派生的类型
兼容（在继承上下文中）

语法
result = expression Is  typename

参数
expression
要检查的表达式，是直接或间接派生自 使用的 类型的对象。ObjectExtends
typename
要检查的子类型。此类型必须直接或间接派生自表达式类型（对象的编译时类型）。

返回值
如果表达式是实类型的对象或其从表达式类型派生的基类型之一，则返回负 1 （）;如果表达式是不兼容类型的对象，则返回零 （）。-1typename0

描述
该运算符必须与继承结合使用，以便?


-------------------------------------------------------- KeyPgOpLessThan ----

Operator < (Less Than)   运算符
  
比较一个表达式小于另一个表达式

语法
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs < rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于右侧表达式，则返回负 1 （-1）;如果大于或等于，则返回零 （0）。

描述
运算符 < （小于） 是一?


-------------------------------------------------------- KeyPgOpLessThanOrEqual ----

Operator <= (Less Than Or Equal)   运算符
  
比较小于或等于另一个表达式的表达式

语法
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

用法
result = lhs <= rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果左侧表达式小于或等于右侧表达式，则返回负 1 （-1）;如果大于，则返回零 （0）。

描述
运算符 <=（小于或等于


-------------------------------------------------------- KeyPgOpLet ----

Operator Let (Assign)   运算符
  
指示重载运算符 = （赋值） 时的赋值运算符

语法
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }

Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

用法
lhs = rhs
或
lhs => rhs

参数
typename 
、 或 的名称。TypeClassUnion
lhs
要分配到的变量。
rhs
要分配的值。

描述
Let用于重载运算符并将其与比较运算符区分开来。
将通过调用 中定义的运算符过程将 分配给 。
这包括通过使用 （或 ） 赋值从函数返回的对象的情况。
目


-------------------------------------------------------- KeyPgOpLetlist ----

Operator Let() (Assignment)   运算符
  
将用户定义类型的字段分配给变量列表

语法
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
或
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

参数
variable1 [, variable2 [, ... ]]
以逗号分隔的变量列表，用于接收变量字段的值。UDT
UDT_var
用户定义的类型变量。

描述
将变量字段中的值分配给变量列表。
当为 a Base 时，由运算符分配?


-------------------------------------------------------- KeyPgOpMemberAccess ----

Operator . (Member Access)   运算符
  
从对对象的引用返回对成员的引用

语法
Declare Operator . ( ByRef lhs As T ) ByRef As U

用法
result = lhs . rhs

参数
lhs
对象。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
引用的类型。rhs

返回值
返回对 指定的成员的引用。rhs

描述
运算符 .（?


-------------------------------------------------------- KeyPgOpModulus ----

Operator Mod (Modulus)   运算符
  
从除法操作中查找剩余部分

语法
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

用法
result = lhs Mod rhs

参数
lhs
左侧的红利表达式。
rhs
右侧除数表达式。

返回值
返回除法操作的其余部分。

描述
运算符 Mod（模数）除以两个表达式并返回余数。?


-------------------------------------------------------- KeyPgOpMultiply ----

Operator * (Multiply)   运算符
  
将两个数值表达式相乘

语法
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

用法
result = lhs * rhs

参数
lhs
左侧乘数表达式。
rhs
右侧乘数表达式。

返回值
返回两个乘数的乘积。

描述
运算符 * （乘法?


-------------------------------------------------------- KeyPgOpNegate ----

Operator - (Negate)   运算符
  
更改数值表达式的符号

语法
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

用法
result = - rhs

参数
rhs
要否定的右侧数值表达式。

返回值
返回表达式的负数。

描述
运算符 - （否定）是否


-------------------------------------------------------- KeyPgOpNew ----

Operator New Expression   运算符
  
用于动态分配内存并构造指定类型的数据的运算符。

用法
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

参数
datatype
要创建的数据类型的名称。
initializers
变量的初始值。
count
要分配的元素的确切数量。

返回值
数据类型为指向新分配数据的指针，如果内存分配失败，则为空指针。

描述
运算符动态分配内存并构造指定的数据类型。
对于简单类型（如整数），可以给出初始值。对于没有构造函数


-------------------------------------------------------- KeyPgOpNewOverload ----

Operator New Overload   运算符
  
成员运算符，用于过载应用于 UDT（用户定义的类型）时提供的动态内存分配过程部分。Operator New Expression

语法
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

参数
size 
要分配的字节数。
返回值
类型为 Any Ptr 的指针，指向新分配的内存的开始。

描述
成员运算符在应用于 UDT（用户定义类型）时，会重载该运算符提供的动态内存分配进程部分。因此，用户可以定义自己的动态内存分?


-------------------------------------------------------- KeyPgOpNext ----

Operator Next (Iteration)   运算符
  
确定是否应终止循环For...Next

语法
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
cond,end_value
用作循环终止值的对象typename
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静态成员过程一样?


-------------------------------------------------------- KeyPgOpNot ----

Operator Not (Complement)   运算符
  
返回数值的按位非补码

语法
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer

Declare Operator Not ( ByRef rhs As T ) As T

用法
result = Not rhs

参数
rhs
右侧表达式。
T
任何数字或布尔类型。

返回值
返回其操作数的按位补集。

描述
此运算符返回其操作数的按位补集，这是一个逻辑运算，它生成一个值，其位设置取决于操作数的位。
 （对于布尔类型?


-------------------------------------------------------- KeyPgOpNotEqual ----

Operator <> (Not Equal)   运算符
  
比较不等式的两个表达式

语法
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

用法
result = lhs <> rhs

参数
lhs
要与之进行比较的左侧表达式。
rhs
要与之进行比较的右侧表达式。
T
任何指针类型。

返回值
如果表达式不相等，则返回负 1 （-1）;如果表达式相等，则返回零 （0）。

描述
运算符 <> （不等于） 是一个二元运算符，它比较两个表达式的不等式并返回结果 - ?


-------------------------------------------------------- KeyPgOpOr ----

Operator Or (Inclusive Disjunction)   运算符
  
返回两个数值的按位或（包括析取）

语法
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Or rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位析取。

描述
此运算符返回其操作数的按位析取，这是一种逻辑运算，该操作产生一个值，其位设置取决于操作数的位（对于将布尔值


-------------------------------------------------------- KeyPgOpOrElse ----

Operator Orelse (Short Circuit Inclusive Disjunction)   运算符
  
返回两个数值的短路或（非独占分离）

语法
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs OrElse rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的短路或（包括析取）。

描述
此运算符计算左侧表达式。如果结果为非零，则立即返回（true）。如果结果为零，则计算右侧，并返回其逻辑结


-------------------------------------------------------- KeyPgOpPlacementNew ----

Operator Placement New   运算符
  
用于在指定内存地址处构造对象的运算符。

语法
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

参数
address 
内存中要构造的位置。括号不是可选的。
initializers
变量的初始值。
datatype
要构造的数据类型的名称。
count
要构造的元素数。

返回值
指向新构造数据的类型的指针。datatype

描述
运算符在指定的内存位置构造指定的数据类型。
对于简单类型（如整数），可以给出初始值。对于没有 s 的类型，可


-------------------------------------------------------- KeyPgOpPpConcat ----

Operator ## (Preprocessor Concatenate)   运算符
  
用于连接字符串的预处理器运算符

语法
text##text

描述
此运算符通过连接令牌两侧的文本来创建新令牌。此文本可以被其他宏识别并进一步扩展。一种用途是创建一个宏，该宏根?


-------------------------------------------------------- KeyPgOpPpEscape ----

Operator ! (Escaped String Literal)   运算符
  
显式指示应为转义序列处理字符串文本。

语法
!"text"

参数
!
预处理器转义字符串运算符
"text"	
包含转义字符的字符串文本

描述
此运算符显式指示应处理其后面的字符串文本（用双引号括起来）作为转义序列。这是一个预处理器运算符，只能在编译时与字符串文本一起使用。
字符串文本?


-------------------------------------------------------- KeyPgOpPpNoescape ----

Operator $ (Non-Escaped String Literal)   运算符
  
显式指示不应为转义序列处理字符串文本。

语法
$"text"

参数
$
预处理器非转义运算符
"text"	
字符串文本

描述
此运算符显式指示不应处理其后面的字符串文本（用双引号括起来）作为转义序列。这是一个预处理器运算符，只能在编译时与字符串文本一起使用。
字符串文本的默认?


-------------------------------------------------------- KeyPgOpPpStringize ----

Operator # (Preprocessor Stringize)   运算符
  
用于将宏参数转换为字符串的预处理器运算符

语法
#macro_argument

描述
此运算符将 转换为一个字符串，其值为参数的名称。此替换是在宏扩展期间（编译之前）进行的。
 注意：由于此功能，在宏中使用文件处理语句时应小心。由于采用“#”参数的文件处理?


-------------------------------------------------------- KeyPgOpProcptr ----

Operator Procptr (Procedure Pointer)   运算符
  
返回过程的地址

语法
Declare Operator ProcPtr ( ByRef identifier As proctype [, proctype ] ) As proctype Ptr

用法
result = ProcPtr ( identifier [, proctype ] )

参数
identifier
过程标识符。
proctype
任何类型的过程（子/函数）。

返回值
返回过程的地址。

描述
此运算符返回 或 过程的地址。
使用两个参数语法时，这允许基于子/函数类型获取 过程指针。
这样就可以显式指定子/函数的“类型”，以解决过程重载或检查非


-------------------------------------------------------- KeyPgOpPtrIndex ----

Operator [] (Pointer Index)   运算符
  
返回对来自地址的内存偏移量的引用

语法
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T


用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

参数
lhs
基址。
rhs
从 的有符号偏移量。lhs
T
任何数据类型。

描述
此运算符返回对内存中距基址一定距离的值的引用。它本质上是“”的简写，因为引用可以被认为是具有内存位置“”作为值的指针，并且隐式取消引用;两者都做同样的


-------------------------------------------------------- KeyPgOpPtrMemberAccess ----

Operator -> (Pointer To Member Access)   运算符
  
从指向对象的指针返回对成员的引用

语法
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

用法
result = lhs -> rhs

参数
lhs
对象的地址。
T
用户定义的类型。
rhs
要访问的成员的名称。
U
引用的类型。rhs

返回值
返回对 指定的成员的引用。rhs

描述
运算符 ->（指向成员访问的指针）通过指向某个对象的成员的指针返回对该对象的引用。它具有取消引用指向对象的指针，然后使用 的效?


-------------------------------------------------------- KeyPgOpShiftLeft ----

Operator Shl (Shift Left)   运算符
  
将数值表达式的位向左移动

语法
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shl ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shl ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shl rhs

参数
lhs
左侧表达式。
rhs
右侧偏移表达式。

返回值
返回向左移动次数的结果。lhsrhs

描述
运算符 Shl（向左移）将左侧表达式 （） 中的所有位向左移动，由右侧表达式 （） 指定多次。从数值上讲，结果与 “” 相同。例如，“” 返回二进制数，“


-------------------------------------------------------- KeyPgOpShiftRight ----

Operator Shr (Shift Right)   运算符
  
将数值表达式的位向右移动

语法
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shr ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shr ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

用法
result = lhs Shr rhs

参数
lhs
左侧表达式。
rhs
右侧偏移表达式。

返回值
返回右移移次数的结果。lhsrhs

描述
运算符 Shr（向右移动）将左侧表达式 （） 中的所有位向右移动，由右侧表达式 （） 指定多次。从数值上讲，结果与“ / ”相同。例如，“” 返回二进制数，


-------------------------------------------------------- KeyPgOpStep ----

Operator Step (Iteration)   运算符
  
递增循环的迭代器For...Next

语法
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

用法
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

参数
(including arguments)
typename
、或 的名称TypeClassUnion
stp,step_value
用作增量值的对象typename
iterator
用作迭代器的对象typename
end_value
用作循环终止值的对象typename
start_value
最初用于将构造或赋值复制到迭代器的对象typename

描述
Operator For，并且可以在用户定义的类型定义中重载，以允许将该类型的对象用作循环中的迭代器和步骤值。
与所有非静态成员过程一样，


-------------------------------------------------------- KeyPgOpStringIndex ----

Operator [] (String Index)   运算符
  
返回对字符串中字符的数值的引用

语法
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

用法
result = lhs [ rhs ]
or
lhs [ rhs ] = value

参数
lhs
字符串（字符串引用，而不是作为本地副本返回的字符串）。
rhs
与第一个字符的从零开始的偏移量。
T
宽字符类型（因平台而异）。

描述
以下运算符返回对字符串中特定字符的数值的引用：
对于一个或一个：StringZString
a（包含字符的 ASCII 值）。UByte
?


-------------------------------------------------------- KeyPgOpStrptr ----

Operator Strptr (String Pointer)   运算符
  
返回字符串的字符数据的地址。

语法
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

用法
result = StrPtr ( lhs )

参数
lhs
字符串。

返回值
向字符串/字符串的字符数据返回 a（如果为空字符串，则为 null 值）。ZString/WString Ptr

描述
此运算符返回指向字符串/字符串的字符数据开头的 。 是获取字符串字符数据地址的正确方法。
如果为空（仅适用于长度可变的字符串），则返回空指


-------------------------------------------------------- KeyPgOpSubtract ----

Operator - (Subtract)   运算符
  
减去两个表达式

语法
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer

Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

用法
result = lhs - rhs

参数
lhs
要从中减去的左侧表达式。
rhs
要减去的右侧表达式。
T
任何指针类型。

返回值
返回两个表达式的减法。

描述
当左侧和右侧表达式是数值时，运算符 - （减去）返回两个值的减法。
如果左侧和右侧表达式都是类型，则对于某种类型，运算符对地址执行指针减?


-------------------------------------------------------- KeyPgOption ----

Option()
  
指定符号的其他属性和/或特征。

语法
Option( "literal-text" )

参数
literal-text
指定选项的文字文本。请参阅说明。

描述
Option()允许程序员指定其他属性或特征。在语法中，需要将字符串括在引号和括号中。无法识别的选项将被忽略。
还可以用作语句来指定其他编译时选项。请参见编译器开关。



-------------------------------------------------------- KeyPgOptionbase ----

Option Base   选项
  
指定数组声明的默认下限

语法
Option Base base_subscript

参数
base_subscript
数字文本值

描述
Option Base是为以下任何数组声明设置默认下限的语句。此默认值对于使用模块的其余部分仍然有效，并且可


-------------------------------------------------------- KeyPgOptionbyval ----

Option ByVal   选项
  
指定默认情况下在过程声明中按值传递参数

语法
Option ByVal

描述
Option ByVal是一个语句，它将过程参数的缺省传递约定设置为按值，就像用 声明一样。此默认


-------------------------------------------------------- KeyPgOptiondynamic ----

Option Dynamic   选项
  
指定可变长度数组声明

语法
Option Dynamic

描述
Option Dynamic是一个语句，它指定任何后续数组声明都是可变长度的，无论它们是否使用常量下标范围声明。这对于所使用的模?


-------------------------------------------------------- KeyPgOptionescape ----

Option Escape   选项
  
指定默认情况下应为类似 C 的转义序列处理字符串文本

语法
Option Escape

描述
Option Escape是一个语句，默认情况下，它会导致针对类似 C 的转义序列处理字符串文本。通常，转义序列在字符串文本中不起作用，除非字符串以 ！ 为前缀。运算符（转义字符串文本


-------------------------------------------------------- KeyPgOptionexplicit ----

Option Explicit   选项
  
强制在使用变量、对象和数组之前对其进行声明

语法
Option Explicit

描述
Option Explicit是一个语句，它强制任何以下变量、对象或数组用法前面加上声明，例如，


-------------------------------------------------------- KeyPgOptiongosub ----

Option Gosub   选项
  

	Enables support for GoSub and On Gosub.

Syntax
Option Gosub

Description
Option Gosub enables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to 


-------------------------------------------------------- KeyPgOptionnogosub ----

Option Nogosub   选项
  
禁用对 和 的支持。GoSubOn Gosub

语法
Option Nogosub

描述
Option Nogosub禁用对 和 的支持（从 gosub）。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为


-------------------------------------------------------- KeyPgOptionnokeyword ----

Option NoKeyword   选项
  
“未定义”保留关键字

语法
Option NoKeyword keyword

参数
keyword
要取消定义的关键字

描述
Option NoKeyword是一个取消定义 FreeBASIC 保留关键字的语句，这意味着它可以用作变量、对象


-------------------------------------------------------- KeyPgOptionprivate ----

Option Private   选项
  
默认情况下为过程声明指定内部链接

语法
Option Private

描述
Option Private是一个语句，默认情况下，它为以下任何过程声明内部链接，就像用 声明一样。此缺省值对于


-------------------------------------------------------- KeyPgOptionstatic ----

Option Static   选项
  
恢复为默认数组声明行为

语法
Option Static

描述
Option Static是一个语句，它覆盖 的行为，即使用常量下标范围声明的数组是固定长度的。这对于所使用的模块的其余部分仍然有效?


-------------------------------------------------------- KeyPgOpValueOf ----

Operator * (Value Of)   运算符
  
取消引用指针

语法
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T


用法
result = * rhs
or
* rhs = value

参数
rhs
要取消引用的地址。
T
任何标准、用户定义或过程类型。

返回值
返回对存储在地址 中的值的引用。rhs

描述
运算符 * （值的）返回对存储在地址处的值的引用，通常称为取消引用运算符。操作数不会以任何方式进行修改。
可以取消引用的任何类型的 ，但 .



-------------------------------------------------------- KeyPgOpVarptr ----

Operator Varptr (Variable Pointer)   运算符
  
返回变量或对象的地址

语法
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

语法
result = VarPtr ( lhs )

参数
lhs
变量或对象。
T
任何数据类型。

返回值
返回变量或对象的地址。

描述
此运算符返回其操作数的地址。
当操作数为 类型时，将返回内部字符串描述符的地址。用于检索字符串数据的地址。
操作数不能是数组，但可以是数组元素。例如


-------------------------------------------------------- KeyPgOpXor ----

Operator Xor (Exclusive Disjunction)   运算符
  
返回两个数值的按位异构（独占析取）

语法
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

用法
result = lhs Xor rhs

参数
lhs
左侧表达式。
T1
任何数字或布尔类型。
rhs
右侧表达式。
T2
任何数字或布尔类型。
Ret
数字或布尔类型（随 和 而异）。T1T2

返回值
返回两个操作数的按位 xor。

描述
此运算符返回其操作数的按位排除，这是一种逻辑运算，该操作将生成一个值，其位设置取决于操作数的位（对于将布尔?


-------------------------------------------------------- KeyPgOrGfx ----

Or   或
  
图形语句的参数，该语句使用按位作为 blitting 方法PutOr

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

参数
Or
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有蒙版颜色，尽管颜色值（在全彩色模式下）不会产生


-------------------------------------------------------- KeyPgOut ----

Out   端口输出
  
将值输出到硬件端口。

语法
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

用法
Out port,value

参数
port
要写入的硬件端口。
data
要写入的数?


-------------------------------------------------------- KeyPgOutput ----

Output   输出
  
指定要为输出模式打开的文本文件

语法
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

参数
filename
要打开以进行输出的文件名
encoding_type
指示文件的编码类型
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号

描述
用于打开文本文件进行写入的文件模式。
此模式用于写入带有 的文本，或以逗号分隔的值。
文本文件不能在FreeBASIC中同时读取和写


-------------------------------------------------------- KeyPgOverload ----

Overload   对象重载
  
指定过程名称可以重载

语法
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]

Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]

[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程声明中，允许重载过程名称，也就是说，如果其他过程（无论是子过程还是函数）的参数列表是唯一的，则可以使用相同的名称声明其他过程（ 无论它们是子还是函数）。如果两个参数列表包含


-------------------------------------------------------- KeyPgOverride ----

Override   对象覆盖
  
方法属性;指定方法必须覆盖虚拟

语法
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

描述
在方法声明中，可用于指示此方法应重写基类中的虚拟或抽象方法。然后，如果该方法不重写任何内容（只有非静态方法可以重写虚拟或抽象方法），编译器将显示错误。
强烈建议不要强制使用 


-------------------------------------------------------- KeyPgPaint ----

Paint   填充
  
填充由指定颜色的边框分隔的区域

语法
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
用于开始泛光填充（绘画）的像素的坐标
paint
颜色属性或填充图案
 一个数值表示一种颜色，而一个字符串表示一个填充图案
border_color
填充的边界颜色

描述
图形命令，用于填充由指定颜色的边框分隔的区域。也称为“泛水填充”或“油漆桶”。
可以在语句设


-------------------------------------------------------- KeyPgPalette ----

Palette   调色模式
  
使用调色板颜色自定义模式中的颜色

语法
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

参数
Get
指示获取选项板信息，而不是设置选项板信息
index
调色板索引
color
颜色属性
r
红色成分
g
绿色成分
b
蓝色分量
Using
指示使用颜色值数组
arrayname(idx)
用于获取/设置颜色属性的数组和索引

描述
该语句用于检索或自定义颜色深度高达8bpp的图形模式的当前调色板;在具有较高颜色深度的模式下使用时将不起作用


-------------------------------------------------------- KeyPgPascal ----

pascal   pascal
  
在过程声明中指定 Pascal 样式的调用约定

语法
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在 Pascal 调用约定中，任何参数都将以与它们列出的顺序相同的顺序传递（推送到堆栈上），即从左到右。过程不需要保留 或 寄存器，并且必须在堆栈返


-------------------------------------------------------- KeyPgPcopy ----

PCopy   复制P模式
  
将一个图形或文本页面复制到另一个图形或文本页面

语法
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

用法
PCopy [ source ] [, destination ]

参数
source
要从中复制的页面
destination
要复制到的页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
将一个图形或文本视频页面复制到另一个图形或文本视频页面。用于在一个不可见页面上绘制所有图形并将其复制到活动的可见页?


-------------------------------------------------------- KeyPgPeek ----

Peek   内存取地址
  
获取内存中某个地址处的任意类型的值

语法
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

用法
Peek( [ datatype, ] address )

参数
address
内存中要从中获取值的地址。
datatype
要获取的值的类型。如果省略，则假定为。UByte

描述
此过程返回对内存地址在内存中给出的值的引用，并且等效于：
*cast(ubyte ptr, address)
或
*cast(datatype ptr, address)



-------------------------------------------------------- KeyPgPmap ----

PMap   映射P模式
  
映射视图和物理映射之间的坐标。

语法
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

用法
result = PMap( coord, func )

参数
coord
指示要映射的坐标的表达式。
func
要应用于给定坐标的映射函数编号。

返回值
映射的坐标值。

描述
此函数转换视图（由语句定义）和物理（由语句设置）映射之间的坐标。根据 的值，用于计算要由 以下者返回的不同映射：WindowView (Graphic


-------------------------------------------------------- KeyPgPoint ----

Point   点
  
返回指定像素坐标的颜色属性

语法
result = Point( coord_x, coord_y [,buffer] )
or
result = Point( function_index )


用法
coord_x
像素的 x 坐标
coord_y
像素的 y 坐标
buffer
要从中读取的图像缓冲区
function_index
要返回的屏幕坐标类型：值之一 、 、 、0123

返回值
返回数据类型为 .
如果提供了像素的坐标，Point 将返回指定坐标处的颜色属性，作为 8 个 bpp 索引模式下的 8 位调色板索引、16 个 bpp 模式下的 24 位 RGB 值（未使用的前 8 位，R、G，B 的精度有限）以及 32 bpp 模式下的 32 位 RGB 或 RGBA 值（高 8 位未使用或保持 Alpha）。请注意，它不会返回 16 位值（5 位 R + 6 位 G + 5 位 B）。
如果参数是函数索引，则 Point 将返回由最后一个图形命令设置的图形光标坐标之一。ULongx, y

论点返回的值0当前物理 x 坐标。1当前物理 y 坐标。2当前视图 x 坐标。如果尚未使用 WINDOW 语句，则返回与 POINT（0） 函数相同的值。3


-------------------------------------------------------- KeyPgPointCoord ----

PointCoord   点坐标
  
查询的笔在图形模式下的位置Draw

语法
Declare Function PointCoord( ByVal func As Long ) As Single

用法
result = PointCoord( func )

描述
该函数可用于在图形模式下查询笔的 x 和 y 位置。结果值取决于传递的 func 值：PointCoordDraw

函子值：返回值：0x 物理坐标，与 PMap（ 点坐


-------------------------------------------------------- KeyPgPoke ----

Poke   内存读址
  
将值分配给内存中的位置。

语法
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

用法
Poke [ datatype, ] address, value

参数
datatype
指定地址处的数据类型。如果省略，则假定为。UByte
address
内存中要分配到的位置。
value
要分配的值。

描述
Poke为内存中的某个位置赋值。它等效于
*cast(ubyte ptr, address) = value
或
*cast(datatype ptr, address) = value

当 是用户定义的?


-------------------------------------------------------- KeyPgPos ----

Pos   位置
  
返回文本光标的水平（从左到右）位置

语法
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

用法
result = Pos[ ( dummy ) ]

参数
dummy
为向后兼容 QBASIC 而保留的未使用参数。

返回值
返回文本?


-------------------------------------------------------- KeyPgPpassert ----

#assert   #编译中断
  
预处理器条件指令

语法
#assert  condition

参数
condition
假定为真的条件表达式

描述
在编译时断言条件表达式的真实性。如果 为 false，则编译将因错误而停止。
此语


-------------------------------------------------------- KeyPgPpcmdline ----

#Cmdline
  
预处理器指令

语法
#cmdline "args..."

参数
args...
有效且通用选项的参数列表（用空格分隔）。Compiler Options-print-help

描述
#cmdline是一个预处理器指令，允许从第一个指定的 fb 源文件内部进行指定。第一个源文件是在 shell 或 IDE 命令行上调用 fbc 编译器的第一个指定的 '.bas' 文件。 在第一个源?


-------------------------------------------------------- KeyPgPpdefine ----

#define   #预定义
  
用于定义宏的预处理器指令

语法
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

描述
#define允许声明基于文本的预处理器宏。一旦编译器看到 a，它将开始用 替换 的进一步出现。 可能为空。扩展以递归方式完成，直到没有更多要扩展的内容，编译器可以继续分析生成的代码。 可?


-------------------------------------------------------- KeyPgPpelse ----

#else   #否则
  
预处理器条件指令

语法
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

描述
#else可以添加到 、 或 块中，以便为条件


-------------------------------------------------------- KeyPgPpelseif ----

#elseif   #又如
  
预处理器条件指令

语法
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

描述
可以将#elseif?


-------------------------------------------------------- KeyPgPpendif ----

#endif   #结束如果
  
预处理器条件指令

语法
#endif

描述
结束一组条件指令 请参阅
 、?


-------------------------------------------------------- KeyPgPperror ----

#error   #错误
  
预处理器诊断指令

语法
#error error_text

参数
error_text
显示消息

描述
#error中断编译以在编译器找到它时显示，然后解析继续。
此关键字必须由 ...括起来，因此编译器只有在满足时才能访问。



-------------------------------------------------------- KeyPgPpif ----

#if   #如果
  
预处理器条件指令

语法
#if (expression)
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果计算结果为 True（非零），则包括 / 块中包含的语句;如果计算结果为 False （），则包括排除（忽略）。
此条件指


-------------------------------------------------------- KeyPgPpifdef ----

#ifdef   #如果定义
  
预处理器条件指令

语法
#ifdef symbol
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果已定义，则包括块中的语句，如果未定义，则排除（忽略）。
等效于#i


-------------------------------------------------------- KeyPgPpifndef ----

#ifndef   #如果未定义
  
预处理器条件指令

语法
#ifndef symbol
' Conditionally included statements
#endif

描述
有条件地在编译时包含语句。
如果未定义，则包括块中的语句，如果未定义符号，则排除（忽略）。
等效


-------------------------------------------------------- KeyPgPplang ----

#lang   #语言
  
用于设置编译器方言的预处理器语句。

语法
#lang "lang"

参数
"lang"
要设置的方言，括在双引号中，并且必须是 、 、 或 之一。"fb""fblite""qb""deprecated"

描述
如果未在命令行上提供 -forcelang 选项，则可用于设置显示该选项的源模块的方言。最多将在源模块上进行两次传递。在第一次传递时，如果指定的方言不是默认?


-------------------------------------------------------- KeyPgPplibpath ----

#libpath   #库路径
  
用于添加库搜索路径的预处理器语句

语法
#libpath "path"

描述
将库搜索路径添加到链接器的搜索路径列表中，就像在命令行上使用“-p”选项指定一样。
?


-------------------------------------------------------- KeyPgPpline ----

#line   #行号
  
用于设置当前行号和文件名的预处理器指令

语法
#line number [ "name" ]

参数
number 
新行号
"name"
新文件名（可选）

描述
通知编译器行号和文件名的更改，并相应地更新 和 宏值。
编译时消息和运行时消息都受此指令的影响


-------------------------------------------------------- KeyPgPpmacro ----

#Macro...#Endmacro
  
用于定义多行宏的预处理器指令

语法
#macro identifier [?] ( [ parameters ] )
body
#endmacro

#macro identifier [?] ( [ parameters, ] Variadic_Parameter... )
body
#endmacro

描述
#macro是 的多行版本。
如果在定义语法中使用 可选的问号 （？），则可以调用带有参数的宏，而无需在参数两边使用括号。
 注意：请注意触发的可能性，以免与包含宏名称作为其术语之一的表?


-------------------------------------------------------- KeyPgPpPragma ----

#pragma   #兼容设定
  
预处理器指令

语法
#pragma option [ = value ]
或或
#pragma push ( option [, value ] )

#pragma pop ( option )

参数
和相关 s 的可能值：optionvalue

选择价值描述msbitfields假使用与 gcc 兼容的位字段（默认）msbitfields真使用与 Microsoft C 编译器中使用的位字段兼容的位字段一次不适用导致编译指示的源文件的行为就像它曾经包含在#include一样...固执性假禁用当前源中的“CONST 限定符已丢弃”警告固执性真在当前源中启用“已丢弃 CONST 限定符”警告查找108假对非限定符号名称使用常规符号查找查找108真对非限定符号名称使用 fbc-1.08.x 或更早版本的符号查找
如果未给出值，编译器将假定为 True （-1）。可以使用零 （0） 值代替 False。可以使


-------------------------------------------------------- KeyPgPpPragmaReserve ----

#Pragma Reserve   #兼容设定
  
预处理器指令

语法
#pragma reserve symbol
奥罗罗
#pragma reserve (extern) symbol

#pragma reserve (asm) symbol

#pragma reserve (asm, extern) symbol)或#pragma reserve (extern, asm) symbol)

参数
symbol
要保留的符号名称。

描述
#pragma reserved语句是预处理器指令，允许用户通过访问 fbc 编译器的内部符号表来保留符号名称：
- #pragma reserve symbol
语句将在当前范围/命名空间中保留一个符号名称，如


-------------------------------------------------------- KeyPgPpprint ----

#print   #输出
  
预处理器诊断指令

语法
#print text

描述
使编译器


-------------------------------------------------------- KeyPgPpundef ----

#undef   #取消定义
  
用于取消定义宏的预处理器指令

语法
#undef symbol

描述
取消定义以前用 定义的符号。
可用于确保宏或符号的生存期有限，并且不会与稍后可能在源代码中定义的类似宏定义冲突。
 ?


-------------------------------------------------------- KeyPgPreserve ----

Preserve   数组保留
  
用于保留内容将调整数组大小ReDim

语法
ReDim Preserve array(...) [As datatype]

描述
用于，以便在调整数组大小时，不会重置数据，而是保留数据。这意味着当阵列扩大时，只有新数据被重置，而旧数据保持不变（但不一定在内存中的相同绝对地址）。
 注意：可能无法在所有情?


-------------------------------------------------------- KeyPgPreset ----

PReset   绘制像素
  
绘制单个像素

语法
PReset [target ,] [STEP] (x, y) [,color]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要在其上绘制的缓冲区。 可能是使用 或 创建的映像。如果省略，则目标默认为屏幕的当前工作页面。
是像素的坐标。STEP（如果存在），则表示坐标相


-------------------------------------------------------- KeyPgPrint ----

(Print | ?)
  
将文本写入屏幕

语法
(Print | ?) [ expressionlist ] [ , | ; ]

参数
expressionlist
要打印的项目列表

描述
Print将值列表输出到屏幕。数值将转换为其字符串表示形式，符号的左填充。用户定义类型的对象必须重载 。
表达式列表中的连续值由逗号 （） 或分号 （） 分隔。逗号表示打印应位于下一个


-------------------------------------------------------- KeyPgPrintPp ----

(Print | ?) #
  
将值列表写入文件或设备

语法
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

参数
filenum
为 打开的文件或设备的文件编号。OutputAppend
expressionlist
要写入的值的列表。

描述
Print #将值列表输出到文本文件或设备。数值将转换为其字符串表示形式，符号的左填充。用户定义类型的对象必须重载 。
表达式列表中的连续值由逗号 （） 或分号 （?


-------------------------------------------------------- KeyPgPrintusing ----

(Print | ?) Using
  
将格式化文本输出到屏幕或输出设备。

语法
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

参数
filenum
为 打开的文件或设备的文件编号。（或者，可在适当情况下使用，而不是OutputAppendLPrintPrint #)
printexpressionlist
要打印的项目的可选前面列表，以逗号 （） 或分号 （） 分隔（有关详细信息，请参阅）。,;Print
formatstring
要使用的字符串格式。
expressionlist
要设置格式的项目列表，以分号 （） 分隔。;

描述
使用参数确定的格式打印到屏幕显示各种表达式。在内部，使用 2048 字节的缓冲


-------------------------------------------------------- KeyPgPrivate ----

Private   私有
  
指定具有内部链接的过程

语法
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程定义（在声明行级别禁止）中，指定过程具有内部链接，这意味着其名称对外部模块不可见。
因此，在编译的模块中，如果两个过程都是 ，则可能存在两个具有相同标识符但定义在不同模块内?


-------------------------------------------------------- KeyPgProperty ----

Property   类属性
  
声明或定义类型或类中的属性

语法
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }

Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

参数
typename 
或 的名称TypeClass
fieldname 
属性的名称
new_value 
传递给要分配的属性的值
index 
属性索引值

描述
Property字段用于获取和设置 a 的值，或者以与其他数据字段相同的方式设置 a 的值，只是执行过程，而不是简单地分配到字段或从字段中检索到的值。
是为其声明


-------------------------------------------------------- KeyPgPset ----

PSet   绘点
  
绘制单个像素

语法
PSet [target ,] [STEP] (x, y) [,color]

参数
target
指定要在其上绘制的缓冲区。
STEP
表示坐标是相对的
(x, y)
像素的坐标。
color
颜色属性。

描述
target指定要在其上绘制的缓冲区。 可能是使用 或 创建的映像。如果省略，则默认为屏幕的当前工作页面。
是像素的坐标。 如果存在，则指示坐标相对于图形光标?


-------------------------------------------------------- KeyPgPsetGfx ----

PSet   绘点
  
选择作为 blitting 方法的图形语句的参数PutPSet

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

参数
PSet
必填。

描述
该方法将源像素值复制到目标像素上。
这是最简单的方法。目标缓冲区中的像素将直接被源缓?


-------------------------------------------------------- KeyPgPtr ----

(Pointer | Ptr)
  
变量声明类型修饰符

语法
... As DataType {Pointer | Ptr}

描述
声明指针变量。
变量类型可以是预定义类型，也可以是用户定义类型。
运算符 或 用于获取变量的地址。运算符用于取消引用指针，即访?


-------------------------------------------------------- KeyPgPublic ----

Public   公共
  
指定具有外部链接的过程。

语法
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

描述
在过程定义（在声明行级别禁止）中，指定过程具有外部链接，这意味着其名称对外部


-------------------------------------------------------- KeyPgPutfileio ----

Put (File I/O)   写入字节
  
将数据从缓冲区写入文件

语法
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

用法
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

参数
filenum
打开文件时传递给的值。Open
position
文件中必须从何处开始的位置。如果文件已打开，则该位置位于记录中，否则以字节为单位给出。如果省略，则从当前文件指针位置开始写入。该位置是从 1 开始的：即文件的第一个记录或字节位于 位置 。
如果省略或为零 （），则文件写入将从当前文件位置开始。PutFor Random1position0
data
从中写入数据的缓冲区。它可以是数值变量、字符串、数组或用户定义的类型。该操作将尝试将完整的变量传输到磁盘，除非给出。
放置数组时，后面应跟一对空的括号：“”。 将写入数组中的所有数据。 是不允许的。
输入 s 时，写入的字节数与字符串数据中的字节数相同。 是不允许的。
注意：如果要从缓冲区写入值，则不应将指针传递到缓冲区;相反，您应该传递缓冲区中的第一个变量（这可以通过取消引用指针来完成）。如果直接传递指针，则将放置指针变量中的内存，而不是它指向的内存。amountdata()PutamountStringamountOperator * (Value Of)Put
amount
使写入文件的连续变量到文件中 - 即它将字?


-------------------------------------------------------- KeyPgPutgraphics ----

Put (Graphics)   写入字节
  
将图像复制到另一个图像或屏幕

语法
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

参数
target
是要在其中绘制图像的缓冲区的地址。如果省略，图像将被模糊到屏幕上。见下文。
[STEP](x, y)
指定从目标缓冲区或屏幕的左上角开始的偏移量，以便将图像绘制到该缓冲区或屏幕。 指示偏移量相对于当前图形光标位置。STEP(x, y)
source
是要绘制的图像的缓冲区的地址。见下文。
(x1, y1)-[STEP](x2, y2)
在源缓冲区中指定要绘制的矩形区域。如果省略，则绘制整个缓冲区。 指示 和 分别相对于 和。STEPx2y2x1y1
method
指定用于将图像绘制到目标缓冲区的方法，并且可以是以下任一方法（默认方法是）：
 与背景无关的方法XOR
PSet：源像素值将复制而不进行修改。
 ：源像素值在复制之前被否定为 1 的补码。
 ：源像素值将复制而不进行修改。不绘制蒙版颜色的源像素。见下文。PRESETTrans
依赖于背景的方法
And：目标像素与源像素按位排列。见下文。
 ：目标像素与源像素按位排列。见下文。
 ：目标像素与源像素按位排列。见下文。
 ：源与参数或图像的单个像素中指定的透明度因子混合。见下文。
 ：源乘以值，并随着饱和度添加到


-------------------------------------------------------- KeyPgRandom ----

Random   随机访问
  
指定要为随机访问模式打开的文件或设备

语法
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

参数
filename
要打开的文件名
access_type
指示文件是可以从中读取、写入文件还是同时读取到两者
lock_type
锁定以在文件打开时使用
filenum
要与打开的文件关联的未使用的文件编号
record_length
用于文件的记录的大小

描述
打开一个文件或设备，用于读取和/或写入给定文件中的二进制数据，其中包含大小为 的记录。
如果该文件


-------------------------------------------------------- KeyPgRandomize ----

Randomize   随机初始化
  
为随机数生成器设定种子

语法
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

用法
Randomize [ seed ][, algorithm ]

参数
seed
随机数生成器的种子值，但对于除算法 #4 之外的所有算法，小数部分都被剪裁（见下文）。如果省略，将改用基于 的值。DoubleTimer
algorithm
用于选择算法的整数值（有关可用算法，请参阅标准标头“fbmath.bi”）。如果省略，则使用当前语言方言的默认算法。

描述
设置有助于生成随机数的随机种子，并选择要使用的算法。
的常量在 中定义?


-------------------------------------------------------- KeyPgRead ----

Read   读取
  
读取与语句一起存储的值。Data

语法
Read variable_list

描述
使用命令读取存储在应用程序中的数据。
的元素必须是基本类型，数字，字符串或数组和用户定义类型的元素。
程序中的所有语句都表现为单个列表，在读取一个语句的最后一个元素后，将读取以?


-------------------------------------------------------- KeyPgReadFile ----

Read (File Access)   读取
  
文件访问说明符

语法
Open filename As String For Binary Access Read As #filenum As Integer

描述
语句中子句的说明符。 指定


-------------------------------------------------------- KeyPgReadWriteFile ----

Read Write (File Access)   读取
  
文件访问说明符

语法
Open filename As String For Binary Access Read Write As #filenum As Integer

描述
语句中子句的说明符。 指定文件对输入?


-------------------------------------------------------- KeyPgReallocate ----

Reallocate   重分配内存
  
为现有的保留内存块重新分配存储

语法
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

用法
result = Reallocate( pointer, count )

参数
pointer
要重新分配的已分配内存的地址。
count
要重新分配的总字节数。

返回值
重新分配的内存的地址。如果重新分配不成功，并且 所指向的原始内存保持不变，则返回 null （） 指针。0pointer

描述
尝试重新分配以前使用 或 分配的内存的大小。缓冲区的内容将被保留，但如果小于内存块的原始大小，缓


-------------------------------------------------------- KeyPgRedim ----

ReDim   重定义
  
定义可变长度数组或调整其大小

语法
声明动态数组：
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
调整动态数组的大小：
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]
艺术
ReDim [ Preserve ] [ ( ] expression [ ) ] ([subscript [, ...]]) [, ...]

参数
Shared
指定在整个模块中对阵列的共享（文件范围）访问。
Preserve
与现有阵列一起使用时，在调整大小时将保留阵列的内容。请注意，在某些情况下，数据不会保留其原始索引，请参阅下文。Preserve
symbolname
新的或现有的数组标识符。
expression或(expression)
引用现有数组的表达式。这可用于调整作为用户定义类型成员的数组的大小。在某些情况下，有必要在表达式两边指定括号（特别是如果数组表达式本身包含括号） - 请参阅下面的示例。
subscript: [lowerbound To ] upperbound
数组维度的下限和上限范围。下限默认值为零 （），如果未指定，


-------------------------------------------------------- KeyPgRem ----

Rem   注释
  
指示源代码中的注释。

语法
Rem comment

' Comment

/' Multi-line
   comment '/

描述
以 开头的源代码行指示该行是注释，不会进行编译。
单引号字符 （'） 也可用于指示注释，并可能出现在源


-------------------------------------------------------- KeyPgReset ----

Reset   重置
  
关闭所有打开的文件，或重置标准 I/O 句柄。

语法
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

用法
Reset
or
Reset( streamno )

参数
streamno
要重置的流编号，用于 stdin 或 stdout。01

描述
Reset，当调用时不带任何参数时，将关闭所有磁盘文件。
 ，当使用参数调用时，将重置与 stdin （） 或 stdout （） 关联的重定向流或管道流。
 运行时错误：
可以?


-------------------------------------------------------- KeyPgRestore ----

Restore   恢复数据
  
更改与语句一起存储的值的下一个读取位置。Data

语法
Restore [label]

描述
将下一个要读取的数据指针设置为标签之后第一个语句的第一个元素。标签必须包含在与当前正在执行的代码相同的模块中。 改变正常的从上到下的顺序，其中 是 


-------------------------------------------------------- KeyPgResume ----

Resume   恢复行
  
在跳转到错误处理程序后恢复执行的错误处理语句

语法
Resume

描述
Resume在错误处理程序（由 调用）中的传统 QB 错误处理机制中使用，以将执行返回到导致错误的行?


-------------------------------------------------------- KeyPgResumenext ----

Resume Next   恢复行
  
在跳转到错误处理程序后恢复执行的错误处理语句

语法
Resume Next

描述
Resume Next在错误处理程序（由 调用）中的传统 QB 错误处理机制中使用，以将执行返回到导致?


-------------------------------------------------------- KeyPgReturn ----

Return (From Procedure)   返回
  
控制要从过程或 返回的流语句。GoSub

语法
Return expression

描述
Return用于从过程返回。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为从过程返回。启用支持后，将识别为从 gosub 返回。
 （from p


-------------------------------------------------------- KeyPgReturnGosub ----

Return (From Gosub)   返回
  
控制要从过程或 返回的流语句。GoSub

语法
Return [ label ]

描述
Return用于从 gosub 返回。
因为可能意味着从 gosub 返回或从过程返回，并且可用于启用和禁用支持。当支持被禁用时，将被识别为从过程返回。启用支持后，将识别为从 gosub 返回。
 （来?


-------------------------------------------------------- KeyPgRgb ----

RGB   RGB
  
计算高/真彩色模式的有效颜色值

语法
#define RGB(r,g,b) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (&hFF000000ul))

用法
result = RGB(red, green, blue)

参数
red
红色分量值
green
绿色分量值
blue
蓝色分量值

返回值
组合颜色。

描述
red和是 -的分量范围为 -。
该函数可用于计算在高/真彩色模式下使用的有效颜色值。它返回一个无符号 long，格式为 ，其中 ，等于以十六进制格式传递给此函数的?


-------------------------------------------------------- KeyPgRgba ----

RGBA   RGBA
  
计算有效的颜色值，包括高/真彩色模式的 alpha（透明度）

语法
#define RGBA(r,g,b,a) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (CUByte(a) Shl 24))

用法
result = RGBA(red, green, blue, alpha)

参数
red
红色分量值
green
绿色分量值
blue
蓝色分量值
alpha
阿尔法分量值

返回值
组合颜色

描述
red、和 是范围为 -的组件。
该函数可用于计算有效的颜色值，包括用于在高/真彩色模式下使用的 Alpha 通道。它返回一个无符号长整型，格式为 ，?


-------------------------------------------------------- KeyPgRight ----

Right   字符串取右边
  
返回字符串最右边的子字符串

语法
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

用法
result = Right[$]( str, n )

参数
str
源字符串。
n
子字符串长度，以字符为单位。

返回值
返回 最右边的子字符串。str

描述
返回从 的右侧（结尾）开始的最右边?


-------------------------------------------------------- KeyPgRmdir ----

RmDir   删目录
  
从文件系统中删除文件夹/目录

语法
Declare Function RmDir ( ByRef folder As Const String ) As Long

用法
result = RmDir( folder )

参数
folder
要删除的文件夹/目录。

返回值
成功时返回零 （0），失败时返回


-------------------------------------------------------- KeyPgRnd ----

Rnd   随机值
  
返回范围中的随机双精度数字[0, 1)

语法
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

用法
result = Rnd( seed )

参数
seed
可选参数。如果的值为零 （），则生成的最后一个随机数为 repeate。对于任何其他数字，将返回一个新的随机数。使用与 QB 兼容的算法，负数将完全重新设定生成器的种子。no 参数的默认值是返回一个新的随机数。Singleseed0.0

返回值
返回生成的随机数。

描述
基于随机种子返回区域中的许多类型（即 ），请参见。
可以使用各种不同的?


-------------------------------------------------------- KeyPgRset ----

RSet   字符串对齐向右
  
右对齐字符串缓冲区中的字符串

语法
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

用法
RSet dst, src

参数
dst
用于将文本复制到其中的缓冲区。StringWString
src
来源或正确证明。StringWString

描述
RSetright 将文本对齐到字符串缓冲区中，用空格填充字符


-------------------------------------------------------- KeyPgRtrim ----

RTrim   字符串删空格右边
  
删除字符串右侧的周围子字符串或字符

语法
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = RTrim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的右侧（末尾）修剪周围的字符。如果指定，将修剪?


-------------------------------------------------------- KeyPgRun ----

Run   运行
  
将执行转移到外部程序

语法
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

用法
result = Run( program [, arguments ] )

参数
program
要将控制权移交给的程序（可执行文件）的文件名（包括文件路径）。
arguments
要传递给程序的命令行参数。

返回


-------------------------------------------------------- KeyPgSadd ----

SAdd   取地址
  
返回指向字符串变量数据的指针

语法
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

用法
result = SAdd( str )

参数
str
用于获取 地址的字符串表达式或变量

返回值
指向?


-------------------------------------------------------- KeyPgScope ----

Scope...End Scope
  
用于开始新作用域块的语句

语法
Scope
[statements]
End Scope

描述
Scope 块允许在程序中（重新）定义和在本地使用变量。
当变量在作用域结构内（重新）定义时，可以从其（重新）定义到作用域结束使用此局部工作变量。在此期间，作用域外具有相同名称的任何变?


-------------------------------------------------------- KeyPgScreenCons ----

Screen (Console)   屏幕
  
获取给定位置的字符或颜色属性

语法
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

用法
result = Screen( row, column [, colorflag ] )

参数
row
从控制台左上角开始的从 1 开始的偏移量。
column
从控制台左上角开始的从 1 开始的偏移量。
colorflag
如果等于 0，则返回 ASCII 代码，否则返回 color 属性。如果省略，则默认为 0。

返回值
字符的 ASCII 或颜色属性。

描述
Screen返回在控制台输出的给定位置找到的字符或 color 属性。它在控制台模式和图形模式下工作。
 col


-------------------------------------------------------- KeyPgScreencontrol ----

ScreenControl   屏幕控制
  
设置或获取内部图形库设置

语法
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As Long = &h80000000, ByRef param2 As Long = &h80000000, ByRef param3 As Long = &h80000000, ByRef param4 As Long = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As LongInt, ByRef param2 As LongInt = &h80000000, ByRef param3 As LongInt = &h80000000, ByRef param4 As LongInt = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param As String)

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenControl( what [, [ param1 ] [, [ param2 ] [, [ param3 ] [, param4 ]]]] )
or,
ScreenControl( what , param )
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenControl( what , param1 [, [ param2 ] [, [ param3 ] [, param4 ]]] )
or,
ScreenControl( what , param )

参数
what
指定要执行的功能
param1
第一个整数参数，包含要在进入时设置的值或在退出时获得的值
param2
第二个整数参数，包含要在进入时设置的值或在退出时获得的值
param3
第三个整数参数，包含要在进入时设置的值或在退出时获得的值
param4
第四个整数参数，包含要在进入时设置的值或在退出时获得的值
param
字符串参数，包含要在输入时设置的文本或在退出时获得的文本

描述
此函数可用于设置或获取?


-------------------------------------------------------- KeyPgScreencopy ----

ScreenCopy   屏幕复制
  
将图形页的内容复制到另一个图形页

语法
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

用法
ScreenCopy [ from_page ] [, to_page ]

参数
from_page
要从中复制的页面
to_page
要复制到的页面

返回值
如果成功，则返回零 （），或返回非零错误代码以指示失败。0

描述
from_page是要从中复制的页面。如果省略此参数，则假定当前工作页。 是要复制到的页面。如果省略此参数，则假定当前可见的页面。页


-------------------------------------------------------- KeyPgScreenevent ----

ScreenEvent   屏幕事件
  
查询和检索系统事件。

语法
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

用法
result = ScreenEvent( [ event ] )

参数
event
指定函数应在其中存储事件数据的缓冲区。

返回值
如果有要检索的挂起事件，则返回，否则。-10

描述
此函数从内部 GfxLib 事件队列中返回最新的可用系统事件。例如，我们所说的“事件”是指任何鼠标或键盘活动。
事件数据（如果可用）将被复制


-------------------------------------------------------- KeyPgScreenglproc ----

ScreenGLProc   屏幕GL地址
  
获取 OpenGL 过程的地址

语法
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

参数
procname
要检索 地址的过程的名称

描述
此函数可用于获取任何 OpenGL 过程的地址，以用于检索指向与 OpenGL 扩展关联?


-------------------------------------------------------- KeyPgScreengraphics ----

Screen (Graphics)   屏幕
  
使用类似 QB 的模式编号初始化图形模式

语法
-lang fb|fblite 方言：-lang qb 方言：
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]

Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]
参数
mode 
是 QB 样式图形屏幕模式编号（见下文）。如果为 ，则关闭任何当前设置的图形模式，并且所有函数都将恢复其正常的控制台模式功能。有关可用模式，请参见下文。mode0
depth
是颜色深度（以每像素位数为单位）。这只对模式和更高版本有影响。和 的值是允许的。 也分别允许作为 和 的别名。如果省略，则默认为 。1481632152416328
num_pages
是您想要的视频页面数，见下文。如果省略，则默认为 。1
flags
用于选择几个东西作为图形驱动程序优先级，全屏模式。文件中预定义了一些常量，可供使用。请参阅页面 ScreenRes 以获取可用标志。fbgfx.bi
refresh_rate
请求刷新率。如果它在当前卡中不可用或省略了参数，FreeBASIC 会自动选择速率。
active_page
用于设置活?


-------------------------------------------------------- KeyPgScreeninfo ----

ScreenInfo   屏幕信息
  
检索有关当前视频模式或桌面的信息。

语法
Declare Sub ScreenInfo ( ByRef w As Long = 0, ByRef h As Long = 0, ByRef depth As Long = 0, ByRef bpp As Long = 0, ByRef pitch As Long = 0, ByRef rate As Long = 0, ByRef driver As String = "" )
Declare Sub ScreenInfo ( ByRef w As LongInt, ByRef h As LongInt, ByRef depth As LongInt = 0, ByRef bpp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef rate As LongInt = 0, ByRef driver As String = "" )

用法
in the LONG (or INTEGER<32>) version of the sub:
ScreenInfo [ w ] [, [ h ] [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]]
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenInfo w , h [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]

参数
w
宽度。
h
高度。
depth
颜色深度（以位为单位）。
bpp
每像素字节数。
pitch
每条扫描行的字节数。
rate
刷新率。
driver
驱动程序名称。

描述
此功能可用于获取当前模式信息，如图形驱动程序名称、颜色深度、屏幕大小等。
如果未设置图形模式时调用 if，它将返回有关桌面?


-------------------------------------------------------- KeyPgScreenlist ----

ScreenList   屏幕列表
  
查找可用的全屏视频模式

语法
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

用法
result = ScreenList( [ depth ] )

参数
depth
请求模式列表的颜色深度（支持的深度为 、 、 和815162432)

返回值
返回 ，当没有更多要读取的分辨率时。0

描述
它的工作方式与函数类似：对函数的第一次调用需要指定参数，它返回所请求深度的最低支持分辨率。进一步调用无参数将返回下一个解决方案。当?


-------------------------------------------------------- KeyPgScreenlock ----

ScreenLock   屏幕锁定
  
锁定工作页的帧缓冲区

语法
Declare Sub ScreenLock ( )

用法
ScreenLock

描述
FreeBASIC 的所有图形库函数都绘制到帧缓冲区，并且每次绘制时都会自动将帧缓冲区复制到实际的屏幕内存中。如果用户程序执行大量绘图，则自动刷新可能需要花费大量时间。
该功能锁定自动?


-------------------------------------------------------- KeyPgScreenptr ----

ScreenPtr   屏幕指针
  
返回指向当前工作页的帧缓冲区的指针

语法
Declare Function ScreenPtr ( ) As Any Ptr

用法
result = ScreenPtr

返回值
指向当前工作页帧缓冲内存的指针，如果未设置图形模式，则为 NULL （）。0

描述
ScreenPtr提供了一种直接读/写工作页的帧缓冲区的方法。 应在尝试任何读取或写入之前使用。返回的指针在对 或 的任何后续调用之前一直有效，这?


-------------------------------------------------------- KeyPgScreenres ----

ScreenRes   屏幕初化
  
通过指定水平和垂直分辨率来初始化图形模式

语法
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long
用法
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

参数
width,height
分别显示宽度和高度。对于全屏模式，用户应使用 检查分辨率的可用性。ScreenList
depth
颜色深度（以每像素位数为单位）。有效的颜色深度为：、、、、 和 。和 的值也允许分别作为 和 的别名。如果省略，则默认值为每像素 8 位。8 位及以下将给出调色板图像。缺省调色板将是 中使用的 256 色板的第一种颜色。12481632152416322 ^ depthScreen 13
num_pages
要创建的视频页数，缺省情况下为 。（请参阅1Screen)
flags
用于设置屏幕的各种属性，包括全屏模式和图形驱动程序优先级。（有关可用标志，请参阅标准标头“fbgfx.bi”）
refresh_rate
屏幕所需的刷新率仅对全屏模式有影响，并且仅对某些系统和驱动程序有影响。默认为适当的值，?


-------------------------------------------------------- KeyPgScreenset ----

ScreenSet   屏幕设置
  
设置当前工作和可见页面

语法
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

用法
ScreenSet [ work_page ] [, visible_page ]

参数
work_page
工作页面索引
visible_page
可见页面的索引

描述
ScreenSet允许设置当前工作页面和当前可见页面。页码范围从 到 ，其中 是 使用 或 设置图形模式时指定的页数。您可以使用此功能来实现翻页或双缓冲。
如果提供但省略 ，?


-------------------------------------------------------- KeyPgScreensync ----

ScreenSync   屏幕同步
  
将显示器更新与硬件同步

语法
Declare Function ScreenSync ( ) As Long

用法
result = ScreenSync

返回值
如果成功，则为零;如果以前未设置图形模式，则为非零。

描述
此 GfxLib 语句停止程序的执行，直到图形卡发出信号，它已结束跟踪帧并将启动新帧。
如果程序使用帧之间的这一小段时间间隔来重绘图像，则闪烁会大大减少。


-------------------------------------------------------- KeyPgScreenunlock ----

ScreenUnlock   屏幕解锁
  
解锁工作页面的帧缓冲区

语法
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

用法
ScreenUnlock [ start_line ] [, end_line ]

参数
startline
可选参数，指定要更新的第一个屏幕行。如果省略，则假定顶部屏幕行。
endline
指定要更新的最后一个屏幕行的可选参数。如果省略，则假定底部屏幕行。

描述
ScreenUnlock解锁当前工作页面（假设它以前已通过调用锁定），并允许系统重新启动定期更新屏幕。当使用 和 调用时?


-------------------------------------------------------- KeyPgSecond ----

Second   时间取秒
  
从日期序列中获取秒数 

语法
Declare Function Second ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Second( date_serial )

参数
date_serial
日期序列

返回值
从包含日期序列格式的日期的变量中返回?


-------------------------------------------------------- KeyPgSeekreturn ----

Seek (Function)   文件定位
  
获取文件或设备的下一个读/写操作的位置

语法
Declare Function Seek ( ByVal filenum As Long ) As LongInt

参数
filenum
打开的文件的文件编号

返回值
下一次读取或写入操作将发生的文件位置。

描述
如果文件是在访问模式下打开的，则该位置在记录?


-------------------------------------------------------- KeyPgSeekset ----

Seek (Statement)   文件定位
  
设置文件上下一个读/写操作的位置

语法
Seek [#]filenum, position

参数
filenum
打开的文件的文件编号
position
i/o 操作的新位置

描述
设置对文件执行下一次读取或写入操作的位置。
如果文件是在访问模式下打开的，则该位置在


-------------------------------------------------------- KeyPgSelectcase ----

Select Case   选择判断
  
条件语句块

语法
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

描述
Select Case根据表达式的值执行特定代码。该表达式计算一次，并按顺序与每个表达式进行比较，直到找到匹配的表达式。执行匹配的 Case 分支中的代码，程序向下跳到块的末尾。 匹配任何尚未匹配的情


-------------------------------------------------------- KeyPgSetdate ----

SetDate   设置日期
  
设置当前系统日期

语法
Declare Function SetDate ( ByRef newdate As Const String ) As Long

用法
result = SetDate( newdate )

参数
newdate
要设置的新日期

返回值
在除 DOS 之外的所有端口上成功时返回零，或在失败时返回非零。

描述
要设置日期，只需按照以下格式之一设置格式并发送到：、、、或（是月份、是日或年）。两位数的年份数字基于 1900 年。
返回的错误代码可以在下一


-------------------------------------------------------- KeyPgSetenviron ----

SetEnviron   设置环境
  
设置系统环境变量

语法
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

用法
result = SetEnviron( varexpression )

参数
varexpression
环境变量的名称和设置采用以下（或等效）形式：varname=varstring。
 （varname 是环境变量的名称，varstring 是要设置的文本值）

返回值
如果成功，则返回零 （0），否则返回非零。

描述
修


-------------------------------------------------------- KeyPgSetmouse ----

SetMouse   设置鼠标
  
设置鼠标光标的位置和可见性

语法
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

用法
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

参数
（对于每个参数，是一个表示“无更改”的特殊值。-1
x
可选 - 设置 x 坐标
y
可选 - 设置 y 坐标
visibility
可选 - 设置可见性：表示可见，表示隐藏10
clip
可选 - 设置剪切：指示鼠标被剪辑到图形窗口，表示没有剪切10

返回值
成功时为零 （），非零表示失败。0

描述
SetMouse将设置鼠标指针的 （， ） 坐标，以及设置其可见性。鼠标位置是使用 an


-------------------------------------------------------- KeyPgSettime ----

SetTime   设置时间
  
设置当前系统时间

语法
Declare Function SetTime ( ByRef newtime As Const String ) As Long

用法
result = SetTime( newtime )

参数
newtime
设置新时间

返回值
在除 DOS 之外的所有端口上成功时返回零，或在失败时返回非零。

描述
要设置时间，请格式化日期并按以下格式之一发送到：、 、 或 （是小时、分钟和秒）。
返回的


-------------------------------------------------------- KeyPgSgn ----

Sgn   数取符号
  
返回数字的符号部分

语法
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

用法
result = Sgn( number )

参数
number
要查找标志的号码

返回值
返回 的符号部分。number
如果数字大于零，则返回 。Sgn1
如果数字等于零，则返回 。Sgn0
如果数字小于零，则返回 。Sgn-1

描述
必需的参数可以是任何有


-------------------------------------------------------- KeyPgShared ----

Shared   共享型
  
变量声明修饰符，用于指定整个模块的可见性

语法
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
[Static] Var Shared ...

描述
Shared使模块级变量在 s 和 s 内可见。
如果未在模块级变量的声明中使用，则该变量仅对该文件中的模块级代码可见（此外，堆栈上仅存储了一个声明了不带修饰符的变量，而不是在命名


-------------------------------------------------------- KeyPgShell ----

Shell   外部程序
  
向系统命令解释器发送命令

语法
Declare Function Shell ( ByRef command As Const String ) As Long

用法
result = Shell( command )

参数
command
指定要发送到命令解释器的命令的字符串。

返回值
如果无法执行该命令，


-------------------------------------------------------- KeyPgShort ----

Short   短整型
  
标准数据类型：16 位有符号

语法
Dim variable As Short

描述
16 位有符号整数数据类型


-------------------------------------------------------- KeyPgSin ----

Sin   正弦
  
返回角度的正弦

语法
Declare Function Sin ( ByVal angle As Double ) As Double

用法
result = Sin( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的正弦值作为 在 的范围内返回。angleDouble-1.01.0

描述
参数以弧度（而不是度）为单位进行度量。
对于


-------------------------------------------------------- KeyPgSingle ----

Single   单精度
  
标准数据类型：32位浮点

语法
Dim variable As Single

描述
Single 是用于存储十进制数的 32 位浮点数据类型。它们可以在 到 的范围内保存正值，也可以在 到 的范围内保存负值，或者保存为 零 （）。它们最多包含 24 位精度，或大约


-------------------------------------------------------- KeyPgSizeof ----

SizeOf   取大小
  
返回变量的大小或类型（以字节为单位）。

语法
SizeOf ( variable | DataType )

描述
运算符返回一个值：或 占用的字节数（包括 UDT 的数据字段）。
与 不同，当与固定长度的字符串（包括固定长度的 s 和 s）一起使用时，它将返回它们使用的字节数，当与可变长度字符?


-------------------------------------------------------- KeyPgSleep ----

Sleep   延迟
  
等待，直到指定的时间过去，或者按下某个键。

语法
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

用法
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

参数
amount
可选的等待毫秒数（默认为等待按键）。
keyflag
可选标志;为它指定一个值，表示正常睡眠，或指定等待不能被按键打断。01

返回值
如果不是有效值（即 or 以外的值）以指示失败或其他值，则返回。1keyflag010

描述
Sleep将等待，直到经过（如果传递了任何值）的毫秒（在 -lang qb 中可以是秒，见下文）或


-------------------------------------------------------- KeyPgSpace ----

Space   字符串空格
  
创建一个给定长度的字符串，其中填充了空格 （" ")

语法
Declare Function Space( ByVal count As Integer ) As String

用法
result = Space[$]( count )

参数
count
一种整数类型，指定要创建的字符串的长度。

返回值
创建


-------------------------------------------------------- KeyPgSpc ----

Spc   字符空格
  
输出功能，用于在写入屏幕或文件时跳过空格

语法
Spc( columns )

用法
Print Spc( spaces ) [(, | ;)] ...

参数
spaces
要跳过的空格数

描述
Spc跳过给


-------------------------------------------------------- KeyPgSqr ----

Sqr   平方根
  
返回数字的平方根

语法
Declare Function Sqr ( ByVal number As Double ) As Double

用法
result = Sqr( number )

参数
number
数字（大于或等于零）

返回值
返回参数 的平方根。
如果等于零，则返回零 （）。
如果 小于零，则返回一个表示“未定义”的特殊值，打印如 “” 或 ，则精确文本与平台相关。numbernumberSqr0.0numberSqrNaN"IND"

描述
这与将参数提高到一半的幂相同：。所需的参数可以是任何大于或等于零的有效数值表达式。
如果 将 or 传递?


-------------------------------------------------------- KeyPgStatic ----

Static   静态
  
定义具有静态存储的变量、对象和数组

语法
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]
or
Static Var symbol1 = expression [, symbol2 = expression, ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

参数
symbol
变量或数组符号名称。
array-dimensions
lower-bound To upper-bound [, ...]
或
 或空。Any [, Any...]
expression
常量表达式或常量表达式数组

描述
指定变量、对象和数组的静态存储;它们在程序启动时分配，并在退出时解除分配。对象在定义时构造一次，并在程序退出时销毁。
声明静态数组时，只能将数字


-------------------------------------------------------- KeyPgStaticMember ----

Static (Member)   静态
  
声明静态成员过程或变量

语法
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type

Dim typename.variablename As DataType [= initializer] [, ...]

[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

描述
静态成员过程
Static方法没有传递给它们的隐式实例参数。这允许它们像普通的非成员过程一样使用（例如，使用回调过程指针）。方法的一个优点是它们封装在命名空间中，因此能够访问 的实例的 


-------------------------------------------------------- KeyPgStdcall ----

stdcall   标准调用
  
在过程声明中指定 stdcall 样式的调用约定

语法
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

描述
在过程声明中，指定过程将使用调用约定。在调用约定中，任何参数都将以列出它们的相反顺序传递（推送到堆栈上），即从右到左。过程不需要保留 或 寄存器，并且必须在堆栈返回之前清理堆


-------------------------------------------------------- KeyPgStep ----

Step   步进
  
语句修饰符。

语法
For iterator = initial_value To end_value Step increment

Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]

Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]

Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

描述
在语句中，指定循环迭代器与每个循环的增量。
在 或 语句中，指示以下


-------------------------------------------------------- KeyPgStick ----

Stick   游戏操纵杆
  
从连接的游戏设备读取轴位置

语法
Declare Function Stick ( ByVal axis As Long ) As Long

用法
result = Stick( axis )

参数
axis
要查询位置的轴数

返回值
对于指定的 ，返回一个介于 1 和 200 之间的数字，如果未连接设备，则返回零 （0）。axis

描述
Stick将检索第一个和第二个游戏设备上第一个和第二个轴的轴位置。 必须是介于 0 和 3 之间的数字，具有以下含义：axis

轴返回0游?


-------------------------------------------------------- KeyPgStop ----

Stop
  
暂停程序执行，并在结束程序之前等待按键。

语法
Declare Sub Stop ( ByVal retval As Long = 0 )

用法
Stop

参数
retval
错误代码返回系统。

描述
停止程序的执行并待命。它是作为调试的帮助提供的，因为它保留了内存并且不会关闭文件。对于正常的程?


-------------------------------------------------------- KeyPgStr ----

Str   数转字符
  
返回数字、布尔或 Unicode 字符串的字符串表示形式

语法
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

用法
result = Str[$]( number )
or
result = Str( string )

参数
number
要转换为字符串的数值表达式。
string
要转换为字符串的字符串表达式。

描述
Str将数值变量转换为其字符串表示形式。以这种方式使用时，它等效于应用于数值变量，而与函数相反，函数将字符串转换为数字。
将布尔变量?


-------------------------------------------------------- KeyPgStrig ----

Strig   游戏按钮
  
从连接的游戏设备读取按钮状态

语法
Declare Function Strig ( ByVal button As Long ) As Long

用法
result = Strig( button )

参数
button
用于查询状态的按钮

返回值
返回 -1（按下）或 0（未按下）以指示所请求的状态。button

描述
Strig将检索第一个和第二个游戏设备上第一个和第二个按钮的按钮状态。 必须是介于 0 和 7 之间的数字，并具有以下含义：button

按钮要返回的?


-------------------------------------------------------- KeyPgString ----

String   数转字符串
  
标准数据类型：8 位字符串

语法
Dim variable As String [ * size]

描述
A 是字符数组。
不带参数的声明将根据字符串的长度动态调整大小。长度范围可以从 0 字节到 2 GB。描述符包含指向实际字符串、字符串长度以及为其分配的空间量的指针。 将返回指向描述符的


-------------------------------------------------------- KeyPgStringFunction ----

String (Function)   数转字符串
  
创建特定长度的字符串并用特定字符填充

语法
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

用法
result = String[$]( count, ch_code )
或
result = String[$]( count, ch )

参数
count
一个整数，指定要创建的字符串的长度。
ch_code
指定要用于填充字符串的 ASCII 字符代码的长字符代码。
ch
一个字符串，其第一个字符将用于填充字符串。

返回值


-------------------------------------------------------- KeyPgSub ----

Sub   过程
  
定义过程

语法
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub

[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

参数
identifier：子例程
的名称：外部可见的（对链接器）名称括在引号中
：参数[，参数[，...]]
 ：external_identifierparameter_listparameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程中引用的变量的名称。如果参数是数组，则标识符后必须跟空括号。
 ：变量
的类型 ：如果调用中未指定任何参数，则参数的值typedefault_value
statements：组成子例程主体的一个或多个语句

描述
子例程是一个代码块，可以随时从程序调用。此代码可能需要多次执行，而子例程提


-------------------------------------------------------- KeyPgSubPtr ----

Sub Pointer   过程
  
存储指向过程的指针的数据类型Sub

语法
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

参数
parameter_list： 参数[， 参数[， ...]]
 ：parameter[ByRef|ByVal] identifier [As type] [= default_value]
identifier：子例程
中引用的变量的名称：变量
的类型：如果调用中未指定任何参数，则参数的值typedefault_value
intializer：要设置为初始值的子例程的地址

描述
指针是存储已编译代码的内存位置的过程指针。如果未给出初始值，则默认初始值为零 （0）。
过程的内存地址可以通过获取


-------------------------------------------------------- KeyPgSwap ----

Swap   交换
  
交换两个变量的值

语法
Declare Sub Swap  ( ByRef a As Any, ByRef b As Any )

参数
a
要交换的变量。
b
要交换的变量。

描述
交换两个变量的值，包括 UDT 实例（交换所有数据成员）。
 注： 当数据由指针单独引用或在描述性结构（例如 UDT）中引用时，仅交换指针的值或描述性结构的内容，而不访?


-------------------------------------------------------- KeyPgSystem ----

System   系统
  
关闭所有打开的文件并结束程序

语法
Declare Sub System ( ByVal retval As Long = 0 )

用法
System( [ retval ] )

参数
retval
错误代码返回系统。

描述
关闭所有打开的文件，退出程序，然后返回到操作系统。可以指定可选的返回值（整数）以向系统返回错误代码。如果未给出返回值，则自动返回值 0。这与 和 此处相同，用于较旧的


-------------------------------------------------------- KeyPgTab ----

Tab
  
写入屏幕或文件时设置列

语法
Tab( col_num )

用法
Print Tab( column ) [(, | ;)] ...

参数
column
1-要移动到的基于列号

描述
Tab在将光标移动到屏幕或文件时将光标移动到给定数字。在新旧光标位置之间跳过的字符单元格保持不变。
如?


-------------------------------------------------------- KeyPgTan ----

Tan   正切
  
返回角度的切线

语法
Declare Function Tan ( ByVal angle As Double ) As Double

用法
result = Tan( angle )

参数
angle
角度（以弧度为单位）

返回值
将参数的切线作为 -无穷大到无穷大范围内的一个返回。angleDouble

描述
参数以弧度（而不是度）为单位进行度量?


-------------------------------------------------------- KeyPgThen ----
Then   然
Description



-------------------------------------------------------- KeyPgThis ----

This   本对象
  
将隐藏实例参数传递给 或 中的非静态成员函数TypeClass

语法
This.fieldname
or
With This
.fieldname
End With

描述
This是对 或的实例的引用，该实例（通过隐藏）传递给该类型或类的所有非静态成员函数。非静态成员函数是在 或 的主体内声明的过程，包括 、、、赋值或 和 过程。
附加参数的数据类


-------------------------------------------------------- KeyPgThiscall ----

__Thiscall
  
在成员过程声明中指定 Thiscall 调用约定

语法
Type typename
declare Sub name __Thiscall [Overload] [Alias "alias"] ( parameters )
declare Function name __Thiscall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type
End Type

描述
在成员过程声明中，指定过程将使用调用约定。在 Thiscall 调用约定中，隐式和隐藏的 This 参数在寄存器中传递。
调用约定仅适用于 32 位 x86 目标，并且仅部分实现。它在使用 -gen gcc 后端


-------------------------------------------------------- KeyPgThreadCall ----

ThreadCall   线程调用
  
在单独的执行线程
中启动一个带有参数的用户定义过程 Threadcall 在内部使用 LibFFI：使用此功能编写程序的人应小心遵循 LibFFI 的许可证，该许可证可在 http://github.com/atgreen/libffi/blob/master/LICENSE 中找到。

语法
Function ThreadCall subname([paramlist]) As Any Ptr

用法
threadid = ThreadCall subname([paramlist])

参数
subname
子例程的名称
paramlist
要传递给子例程的参数列表，与普通的子调用一样。

返回值
Threadcall 返回所创建线程的句柄，或在失败时返回空指针 （）。Any Ptr0

描述
例如，Threadcall 创建一个线程，该线程与调用它的代码同时运行。通过?


-------------------------------------------------------- KeyPgThreadCreate ----

ThreadCreate   线程创建
  
在单独的执行线程中启动用户定义过程

语法
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

用法
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

参数
procptr
指向旨在用作线程的指针（请参阅获取指向 sub 的指针）。sub 必须具有以下签名（相同的参数、相同的调用约定）才能与 procptr 兼容：SubOperator Procptr (Procedure Pointer)
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
旨在用作线程的参数。FreeBASIC 期望此参数存在，但不得省略！Any PtrSub
param
Any Ptr将通过其 userdata 参数传递给所指向的线程的参数。例如，这可以是指向结构的指针，也可以是包含各种信息的数组，供线程 sub 使用。如果未给出参数，则 （零） 将改为传递给线程子的 userdata 参数。Subprocptr0
stack_size
要为此线程的堆栈保留的可选字节数。

返回值
ThreadCreate 向创建的线程返回句柄，或在失败时?


-------------------------------------------------------- KeyPgThreadDetach ----

ThreadDetach   线程终止
  
释放线程句柄而不等待线程完成

语法
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

用法
#include "fbthread.bi"
ThreadDetach( id )

参数
id
Any Ptr由 或 创建的线程的句柄ThreadCreateThreadCall

描述
ThreadDetach 释放与 或 返回的线程句柄关联的资源。线程句柄将被 ThreadDetach 销毁，并且无法再使用。
与 不同，ThreadDetach 不会等待线程完成，线程执行会独立继续。


-------------------------------------------------------- KeyPgThreadSelf ----

ThreadSelf
  
返回当前线程的线程句柄。

语法
Declare Function ThreadSelf ( ) As Any Ptr

用法
#include "fbthread.bi"
result = ThreadSelf

返回值
ThreadSelf 返回当前线程的句柄。Any Ptr

描述
ThreadSelf 用于获取当前线程的句柄。
此函数可以唯一标识现有线程：
-如果有多个线程，并且一个线程已完成，则可以重用该句柄。
 - 因此，对于所有仍在运行的唯一线程，句?


-------------------------------------------------------- KeyPgThreadWait ----

ThreadWait   线程等待
  
等待线程完成执行并释放线程句柄

语法
Declare Sub ThreadWait ( ByVal id As Any Ptr )

用法
ThreadWait( id )

参数
id
Any Ptr由 或 创建的线程的句柄ThreadCreateThreadCall

描述
ThreadWait 等待由线程创建或完成执行，然后释放与线程句柄关联的资源。在 指定的线程结束之前，ThreadWait 不会返回。
在等待期间，调用方不会消耗 CPU 时间。
为了释


-------------------------------------------------------- KeyPgTime ----

Time   时间字符
  
以字符串形式返回当前系统时间

语法
Declare Function Time ( ) As String

用法
result = Time[$]

返回值
返回当前系统时间


-------------------------------------------------------- KeyPgTimer ----

Timer   时间计时值
  
返回自静态参考点以来经过的时间量。

语法
Declare Function Timer ( ) As Double

用法
result = Timer

返回值
返回自静态参考点以来的时间（以秒为单位）的精度结果。Double

描述
该函数对于了解一段代码的运行时间或控制代码的计时非常有用。若要了解程序中两点之间经过了多少时间，可以记录起点和终点处的值，然后从结束值中减


-------------------------------------------------------- KeyPgTimeserial ----

TimeSerial   时间序列值
  
获取指定小时、分钟和秒的日期序列

语法
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

用法
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

参数
hour
小时数，在 0-23 范围内
minute
分钟数
second
秒数

返回值
返回一个日期序列，其中包含由 和 参数中的值形成的时间。返回的日期序列没有整数部分。hoursminut


-------------------------------------------------------- KeyPgTimeValue ----

TimeValue   时间数值
  
从时间字符串获取日期序列

语法
Declare Function TimeValue ( ByRef timestring As String ) As Double

用法
#include "vbcompat.bi"
result = TimeValue( timestring )

参数
timestring
要转换的字符串

返回值
从时间字符串返回日期序列。

描述
时间字符串必须采用以下格式，否则
编译器


-------------------------------------------------------- KeyPgTo ----

To   到
  
用于指定范围的语句修饰符。

语法
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

描述
关键字用于定义特定的数值范围。仅当与 和 语句一起使用时，此关键字才有效。
在第一种语法中，关键字定义语句中迭代器的初始值和结束值。
在第二种语法中，关键字定义了用于比较的下限和?


-------------------------------------------------------- KeyPgTransGfx ----

Trans   透明
  
图形语句的参数，该语句选择透明背景作为 blitting 方法Put

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

参数
Trans
必填。

描述
Trans选择透明背景作为删除图像缓冲区的方法。这与方法类似，但会跳过包含蒙版颜色的像素。
对于 8 位彩色图像，蒙版颜色为调色板索引 0。对于 16/32 位彩色图像，蒙版颜色为


-------------------------------------------------------- KeyPgTrim ----

Trim   字符串删头尾
  
删除字符串左侧和右侧的周围子字符串或字符

语法
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

用法
result = Trim[$]( str [, [ Any ] trimset ] )

参数
str
源字符串。
trimset
要修剪的子字符串。

返回值
返回修剪过的字符串。

描述
此过程从源字符串的左侧（开头）和右侧（结尾）修剪周围的字符。如果指定?


-------------------------------------------------------- KeyPgTrue ----

True   真
  
编译器设置的固有常量

语法
Const True As Boolean

描述
在使用位置


-------------------------------------------------------- KeyPgType ----

Type   类型
  
声明用户定义类型。

语法
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type

Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]

Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType

fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]

As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...

Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union

...
End Type

描述
Type用于声明包含一个或多个数据字段的自定义数据类型，包括整数类型、浮点类型、固定大小或可变长度（动态）数组、固定大小或可变长度字符串、位字段或其他用户定义类型。
类型支持与面向对象


-------------------------------------------------------- KeyPgTypeAlias ----

Type (Alias)   类型
  
声明类型的备用名称

语法
Type typename As symbol

参数
typename 
新的备用名称。
symbol 
要与 关联的符号或数据类型声明。typename

描述
symbol可以指任何已声明的数据类型，包括内置数据类型或指针、声明、声明或声明。
类型别名可用于允许在过程声明中对参数进行前向声明，但只能与指针（无论其传递模式


-------------------------------------------------------- KeyPgTypeof ----

TypeOf   取类型
  
返回变量的类型。

语法
TypeOf ( variable | datatype )

参数
variable
任何类型的变量。
datatype
数据类型。

描述
TypeOf是编译器内部函数，它将自身替换为传递给它的变量的类型。它可以用于变量声明（示例1），也可以用于预处理器中进行比较，打印。（示例 2）
还支持传递任何内部数据类型或


-------------------------------------------------------- KeyPgTypeTemp ----

Temporary Types
  
创建用户定义类型的临时副本

语法
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

参数
initializers
类型的初始值（或仅第一个）
typename
或 的名称TypeUnion

返回值
类型的临时副本。

描述
用于创建临时类型。如果未明确给出，则将尽可能从其用法中推断出来。临时副本的用法可能包括将其赋给变量、将其作为参数传递给过程或将其作为过程的值返回。



-------------------------------------------------------- KeyPgUbound ----

UBound   数组取上限
  
返回数组维度的上限

语法
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

用法
result = UBound( array [, dimension ] )

参数
array
任何类型的数组
dimension
要获取的上限的维度

返回值
返回数组维度的上限。
描述
UBound返回可用作数组特定维度的索引的最大值。
数组维度从一 （） 到 的编号，其中维度的总数。如果未指定，将返回第一个维度的上限。
如果为零 （0）?


-------------------------------------------------------- KeyPgUbyte ----

UByte   无符号字节
  
标准数据类型：8 位无符号。
等效于 。Unsigned Byte

语法
Dim variable As UByte

描述
8 位无符号


-------------------------------------------------------- KeyPgUcase ----

UCase   字符串大写
  
返回字符串的大写副本

语法
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

用法
result = UCase[$]( str [ , mode ] )

参数
str
要转换为大写的字符串。
mode
转换模式：0 = 当前区域设置，1 = 仅 ASCII

返回值
的大写副本。str



-------------------------------------------------------- KeyPgUinteger ----

UInteger   无符号整型
  
标准数据类型：32 位或 64 位无符号，大小与 相同。
等效于 。SizeOf(Any Ptr)Unsigned Integer

语法
Dim variable As UInteger
Dim variable As UInteger<bits>

参数
bits
一个数值常量表达式，指示所需无符号整数位的大小。允许的值为 、 或 。8163264

描述
32 位或 64 位无符号整数数据类型，具体取决于平台。
如果给定了显式位大小，则提供了一种数据类型，该数据类型最多?


-------------------------------------------------------- KeyPgUlong ----

ULong   无符号长型
  
标准数据类型：32 位无符号整数。
等效于 。Unsigned Long

语法
Dim variable As ULong

描述
32 位无符号整数数据类型。?


-------------------------------------------------------- KeyPgUlongint ----

ULongInt   无符号长整型
  
标准数据类型：64 位无符号。
等效于 。Unsigned LongInt

语法
Dim variable As ULongInt

描述
64 位无符号整数数据类型。可以保存从 0 到 18 4


-------------------------------------------------------- KeyPgUnion ----

Union   联合型
  
声明联合用户定义类型。

语法
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

参数
typename
的名称Union
fieldname
数据字段成员的名称
member function declaration
任何受支持的成员函数

描述
数据元素占用内存中的公用空间（对于 的所有数据元素，内存地址相同）。的数据元素可以是简单的数据字段，也可以是未命名的数据字段块。
的大小是最大数据元素的大


-------------------------------------------------------- KeyPgUnlock ----

Unlock   解锁
  
删除文件上的先前访问限制（锁定）

语法
Unlock #filenum, record
Unlock #filenum, start To end

参数
filenum
用于文件的文件编号。Open
record
要解锁的记录（文件）。Random
start
要解锁的范围中的第一个字节位置（文件）。Binary
end
要解锁的范围中的最后一个字节位置（文件）。Binary

描述
Unlock删?


-------------------------------------------------------- KeyPgUnsigned ----

Unsigned   无符号数
  
整数数据类型修饰符

语法
Dim variable As Unsigned {integer-based data type}

描述
强制基于整数的数据


-------------------------------------------------------- KeyPgUntil ----

Until   直到
  
语句中使用的条件子句。Do..Loop

语法
Do Until condition
or
Loop Until condition

描述
Until与?


-------------------------------------------------------- KeyPgUshort ----

UShort   短整型
  
标准数据类型：16 位无符号。
等效于 。Unsigned Short

语法
Dim variable As UShort

描述
16 位无符号整


-------------------------------------------------------- KeyPgUsing ----

Using (Namespaces)   引用
  
将命名空间符号引入当前范围

语法
Using identifier [, identifier [, ...] ]

参数
identifier：要使用的名称。Namespace

描述
该命令允许访问给定命名空间中的所有符号，而无需该命名空间的名称前缀。与 C++ 不同，但与 C# 不同，在 之后不需要关键字，因为不能从命名空间继承单个符号。
只允许在?


-------------------------------------------------------- KeyPgVaArg ----

va_arg   变参表
  
从变量参数列表中返回当前参数。

语法
variable = va_arg ( argument_list, datatype )

描述
该宏允许在函数中使用可变数量的参数：va_arg
 	va_arg返回列表中的当前参数，其预期数据类型为 。argument_listdatatype
在首次使用之前，必须使用命令进行初始化。va_argargument_li


-------------------------------------------------------- KeyPgVaFirst ----

va_first   变参首个
  
返回指向变量参数列表中第一个参数的指针

语法
pointer_variable = va_first()

描述
该函数提供一个非类型化的指针值，该值指向传递给函数的第一个变量参


-------------------------------------------------------- KeyPgVal ----

Val   数取值
  
将字符串转换为浮点数

语法
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

用法
result = Val( strnum )

参数
strnum
包含要转换的数字的字符串

返回值
返回转换后的精度数字
 如果字符串的第一个字符无效，将返回 。DoubleVal0

描述
Val("10")会回来，还会再来。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。科


-------------------------------------------------------- KeyPgValint ----

ValInt   数取整值
  
将字符串转换为 32 位整数

语法
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

用法
result = ValInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的值 如果字符串
的第一个字符无效，将返回 。LongValInt0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。任?


-------------------------------------------------------- KeyPgVallng ----

ValLng   数取长值
  
将字符串转换为 64 位整数

语法
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

用法
result = ValLng ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的 a 如果字符串
的第一个字符无效，将返回 。LongIntValLng0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停止。任何


-------------------------------------------------------- KeyPgValuint ----

ValUInt   数取无符整型值
  
将字符串转换为无符号的 32 位整数

语法
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

用法
result = ValUInt ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的值 如果字符串
的第一个字符无效，将返回 。ULongValUInt0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停


-------------------------------------------------------- KeyPgValulng ----

ValULng   数取无符长型值
  
将字符串转换为无符号的 64 位整数

语法
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

用法
result = ValULng ( strnum )

参数
strnum
要转换的字符串

返回值
返回转换后的字符串的 a 如果字符串
的第一个字符无效，将返回 。ULongIntValULng0

描述
例如，将返回 ，并且也将返回。该函数从左侧分析字符串，跳过任何空格，并返回它可以读取的最长数字，并在找到的第一个不合适的字符处停?


-------------------------------------------------------- KeyPgVaNext ----

va_next   变参次个
  
返回指向变量参数列表中下一个参数的指针

语法
Argument_Pointer = va_next ( Argument_List, datatype )

描述
该宏提供了一个指针值，指向列表中的下一个参数，即当前参数的类型。
使用 时不受支持。使用可?


-------------------------------------------------------- KeyPgVar ----

Var   变量
  
声明一个变量，其类型是从初始值设定项表达式中隐含的

语法
[Static] Var [Shared] symbolname = expression[, symbolname = expression]

描述
Var声明一个变量，其类型是从初始值设定项表达式中隐含的。在声明中指定显式类型是非法的。初始值设定项表达式可以是常量，也可以是任何类型的任何变量。
注意：不支持 ，因为


-------------------------------------------------------- KeyPgViewgraphics ----

View (Graphics)
  
为图形关键字设置新的物理坐标映射和修剪区域

语法
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

参数
x1 As Integer,y1 As Integer
视口的一角相对于屏幕左上角的水平和垂直偏移量（以像素为单位）。
x2 As Integer,y2 As Integer
视口另一角相对于屏幕左上角的水平和垂直偏移量（以像素为单位）。
fill_color As ULong
用于填充新视口的颜色。
border_color As ULong
要在新视口周围绘制的边框的颜色。

描述
视口或剪切区域是图形屏幕的矩形区域，在此区域之外不会执行图形绘制。也就是说，将?


-------------------------------------------------------- KeyPgViewtext ----

View Print
  
设置屏幕的可打印文本区域

语法
View Print [ firstrow To lastrow ]

参数
firstrow
第一行打印区域
lastrow
打印区域的最后一行

描述
将屏幕上的文本打印区域（在控制台模式或图形模式下）的边界设置为从第一个开始到最后一个（包括最后


-------------------------------------------------------- KeyPgVirtual ----

Virtual   虚拟事件
  
声明虚拟方法

语法
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

描述
虚拟方法是可以被从声明它们的类型派生的数据类型覆盖的方法，从而允许动态多态性。与方法相反，虚拟方法必须具有实现，该实现在未覆盖虚拟方法时使用。
派生类型可以通过声明具有相同标识符和?


-------------------------------------------------------- KeyPgVisPrivate ----

Private: (Access Control)
  
在 或 中指定私有成员访问控制TypeClass

语法
Type typename
Private:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Private:表示关注它具有私有访问权限。私有成员只能从 或 的成员函数内部访问（因此，对于从 或 派生的类型或类，不能从成员函数内部访问）。
在给出不同的访问控制说明符?


-------------------------------------------------------- KeyPgVisProtected ----

Protected: (Access Control)
  
在 或 中指定受保护的成员访问控制TypeClass

语法
Type typename
Protected:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Protected:表示关注它具有受保护的访问权限。受保护的成员只能从 or 的成员函数内部访问，也可以从 或 派生的类进行访问。
以下内容受到保护，直到给出不同的访问控制说?


-------------------------------------------------------- KeyPgVisPublic ----

Public: (Access Control)
  
在 或 中指定公共成员访问控制TypeClass

语法
Type typename
Public:
member declarations
End Type

参数
typename
或 的名称TypeClass
member declarations
字段、函数或枚举的声明

描述
Public:表示关注它具有公共访问权限。公共成员可通过使用 或 访问。
在给出不同的访问控制说明符之前，以下各项是公共的，如果未提供
成员访问控制说明符，则
默?


-------------------------------------------------------- KeyPgWait ----

Wait   等待
  
从带有掩码的硬件端口读取。

语法
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

用法
Wait port, and_value [, xor_value]

参数
port
要读取的端口。
and_mask
掩码值为 和 端口值 与。
xor_mask
掩码值为 Xor 端口值。

返回值
成功时为 0，失败时为 -1。

描述



-------------------------------------------------------- KeyPgWbin ----

WBin   宽字符二进制
  
返回数字的二进制（Unicode）表示形式WString

语法
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString

Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WBin( number [, digits] )

参数
number
计算为整数的整数或表达式。
digits
要返回的可选位数。

返回值
返回 的二进制表示形式 被截断或填充零 （） 以适合位数（如果已指定）。WStringnumber"0"

描述
返回一个 （Unicode），表示整数 的二进制值。二进制数字的范围从 到 。
如果指定 > ，则结果 w


-------------------------------------------------------- KeyPgWchr ----

WChr   取宽字符
  
返回包含一个或多个 Unicode 字符的宽字符字符串

语法
Declare Function Wchr ( ByVal ch As Integer [, ... ] ) As WString

用法
result = WChr( ch0 [, ch1 ... chN ] )

参数
ch
字符的 Unicode 整数值。

返回值
返回宽字符字符串。

描述
WChr返回一个宽字符字符串，其中包含由传递给它的 Unicode 值所表示的字符。
当与数值常量或文本一起使用时，将在编译时计算结果，因此可以在变量


-------------------------------------------------------- KeyPgWeekday ----

Weekday   工作日
  
从日期序列中获取一周中的天数

语法
Declare Function Weekday ( ByVal serial As Double , ByVal firstdayofweek As Long = fbusesystem ) As Long

用法
#include "vbcompat.bi"
result = Weekday( date_serial [, firstdayofweek ] )

参数
date_serial
日期
firstdayofweek
一周的第一天

返回值
从包含日期序列格式的日期的变量中返回星期日编号。

描述
工作日值必须在 1-7 范围内，其含义取决于参数
是可选的。firstdayofweekfirstdayofweek

价值一周的第一天不断省略星期日 0本地设置fb


-------------------------------------------------------- KeyPgWeekdayname ----

WeekdayName   工作日名
  
从其整数表示形式中获取工作日的名称

语法
Declare Function WeekdayName ( ByVal weekday As , ByVal abbreviate As Long = 0, ByVal firstdayofweek As Long = fbUseSystem ) As String

用法
#include "vbcompat.bi"
result = WeekdayName( weekday [, abbreviate [, firstdayofweek ] ] )

参数
weekday
星期几
abbreviate
标志，指示名称应缩写
firstdayofweek
一周的第一天

返回值
从值 1 到 7 返回本地操作系统语言星期几名称。weekday

描述
如何解释取决于参数。
如果为 true，则返回 3 个字母的缩写，如果为 false 或省略，则返回整个名称。
是指定如下的可选参数：weekda


-------------------------------------------------------- KeyPgWend ----

Wend   继续
  
控制流语句。

语法
While [condition]
[statement block]
Wend

描述
Wend指定循环块的


-------------------------------------------------------- KeyPgWhex ----

WHex   宽字符16进制
  
返回数字的十六进制（Unicode）表示形式WString

语法
Declare Function WHex ( ByVal number As UByte ) As WString
Declare Function WHex ( ByVal number As UShort ) As WString
Declare Function WHex ( ByVal number As ULong ) As WString
Declare Function WHex ( ByVal number As ULongInt ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr ) As WString

Declare Function WHex ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WHex( number [, digits ] )

参数
number
计算为整数的整数或表达式。
digits
要返回的可选位数。

返回值
返回 的十六进制表示形式 被截断或填充零 （） 以适合位数（如果已指定）。WStringnumber"0"

描述
十六进制数字的范围为 -或 -。
如果指定 > ，则得到的将恰?


-------------------------------------------------------- KeyPgWhile ----

While   当条件
  
控制流语句。

语法
Do While condition
[statement block]
Loop
or
Do
[statement block]
Loop While condition
or
While [condition]
[statement block]
Wend

描述
While指定循环块在以下计算结果为 true 时将继续。在每次?


-------------------------------------------------------- KeyPgWhilewend ----

While...Wend
  
用于循环的控制流语句

语法
While [condition]
[statement block]
Wend

描述
如果表达式条件的计算结果为 true，则该语句将导致 中的以下一组语句重复执行。
如果在首次执行语句时计算结果为 false，则跳过 ，并在包含语句后立即恢复执行。
如果在语句块内遇到语句，则循


-------------------------------------------------------- KeyPgWidth ----

Width
  
设置或获取显示的行数和列数

语法
Width [columns] [, rows]
Width LPrint columns
Width { #filenum | devicename }, columns
result = Width( )

参数
columns
用于输出的列（以字符为单位）
rows
用于输出的行（以字符为单位）
filenum
要申请的文件编号
devicename
要应用的设备名称

返回值
返回一个 32 位，其中高字是行数，低字是当前设置的列数。Long

描述
设置输出设备（控制台、打印机或文本文件）的最大字符列数。如果发送到设备的文本达到宽度，则会生成自动回车符


-------------------------------------------------------- KeyPgWindow ----

Window   窗口
  
为当前视口设置新的视图坐标映射

语法
Window [ [Screen] ( x1, y1 )-( x2, y2 ) ]

参数
Screen
指定 y 坐标的可选参数从上到下递增。
( x1, y1 )-( x2, y2 )
与当前视口的相对角对应的新浮点值。如果省略，则删除坐标映射。Window

描述
Window用于定义新的坐标系。 并且是要映射到当前视口相对角落的新坐标;传递给图形基元语句的所有未来坐标都将受到此新映射的影响。如果


-------------------------------------------------------- KeyPgWindowtitle ----

WindowTitle   窗口标题
  
设置程序窗口标题

语法
Declare Sub WindowTitle ( ByRef title As Const String )

用法
WindowTitle title

参数
title
要指定为新窗口标题的字符串。

描述
此语句对于更改程序窗口标题很有用。如果程序已在窗口模式下运行，则新标题集将立即变为活动状态，否则将成为由对 or 语句的后续调用产生的任何窗口的新标题。如果在设置新?


-------------------------------------------------------- KeyPgWinput ----

Winput()
  
从控制台或文件中读取大量宽字符

语法
Declare Function WInput( ByVal num As Integer ) As WString
Declare Function WInput( ByVal num As Integer, ByVal filenum As Long = 0 ) As WString

用法
result = WInput( num [, [#]filenum } )

参数
num
要读取的字符数。
filenum
绑定文件或设备的文件编号。

返回值
返回读取的字符的 WString。

描述
从控制台或 指定的绑定文件/设备读取许多宽字符。
第一个版本等待并从键盘缓冲区读取宽


-------------------------------------------------------- KeyPgWith ----

With   关联 
  
语句块，以允许隐式访问用户定义类型变量中的字段

语法
With user_defined_var
statements
End With

描述
该块允许在引用用户定义的变量的字段时省略其名称。然后，可以在字段之前仅使用一个句点（）访问字段，例如，如果包含称为“element”的字段元素，则可以在块中以“”的形式访问?


-------------------------------------------------------- KeyPgWoct ----

WOct   宽字符8进制
  
将数字转换为 Unicode 八进制表示形式

语法
Declare Function WOct ( ByVal number As UByte ) As WString
Declare Function WOct ( ByVal number As UShort ) As WString
Declare Function WOct ( ByVal number As ULong ) As WString
Declare Function WOct ( ByVal number As ULongInt ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr ) As WString

Declare Function WOct ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

用法
result = WOct( number [, digits ] )

参数
number
要转换为八进制表示的数字。
digits
返回的字符串中所需的位数。

返回值
数字的 Unicode 八进制表示形式，截断或用零 （） 填充以适合位数（如果指定）。"0"

描述
返回 的八进制（Unicode）表示形式。八位数字的范围从 到 。
如果指定 > ，则结果字符串将恰好是


-------------------------------------------------------- KeyPgWrite ----

Write   写入
  
将逗号分隔的值列表输出到屏幕

语法
Write [ expressionlist ]

参数
expressionlist
要打印的以逗号分隔的项目列表

描述
将值输出到屏幕。这些值用逗号分隔，字符串括在双引号中。如果绝对值小于 1 的数值，则以零 （） 为前缀（例如，）。绝对值大于或等于 的浮点数，或?


-------------------------------------------------------- KeyPgWriteFile ----

Write (File Access)   写入
  
文件访问说明符

语法
Open filename As String For Binary Access Write As #filenum As Integer

描述
语句中子句的说明符。 指定?


-------------------------------------------------------- KeyPgWritePp ----

Write #   写入
  
将逗号分隔的值列表输出到文本文件或设备

语法
Write # filenum , [ expressionlist ]

参数
filenum
为 或 打开的打开的文件或设备的文件编号。OutputAppend
expressionlist
要打印的以逗号分隔的项目列表

描述
将中的值输出到绑定到 的文本文件或设备中。这些值用逗号分隔，字符串括在双引号中。如果未给出任何值（例如，的值将输出为），则大于零（）和小


-------------------------------------------------------- KeyPgWspace ----

WSpace   宽字符空格
  
创建一个给定长度的 ，其中填充了空格 （WString" ")

语法
Declare Function WSpace( ByVal count As Integer ) As WString

用法
result = WSpace( count )

参数
count
一种整数类型，指定要创建的字符串的长度。

返回值
创建的 .如果 .WStringcount <


-------------------------------------------------------- KeyPgWstr ----

WStr   宽字符转换
  
返回数字或 ASCII 字符串的宽字符字符串表示形式

语法
Declare Function WStr ( ByVal n As Byte ) As WString
Declare Function WStr ( ByVal n As UByte ) As WString
Declare Function WStr ( ByVal n As Short ) As WString
Declare Function WStr ( ByVal n As UShort ) As WString
Declare Function WStr ( ByVal n As Long ) As WString
Declare Function WStr ( ByVal n As ULong ) As WString
Declare Function WStr ( ByVal n As LongInt ) As WString
Declare Function WStr ( ByVal n As ULongInt ) As WString
Declare Function WStr ( ByVal n As Single ) As WString
Declare Function WStr ( ByVal n As Double ) As WString
Declare Function WStr ( ByRef str As Const String ) As WString
Declare Function WStr ( ByVal str As Const WString Ptr ) As WString

用法
result = WStr( number )
or
result = WStr( string )

参数
number
要转换为宽字符字符串的数值表达式。
string
要转换为宽字符字符串的字符串表达式。

返回值
返回数值或字符串表达式的宽字符表示形式。

描述
WStr将数值?


-------------------------------------------------------- KeyPgWstring ----
WStr   宽字?
Description



-------------------------------------------------------- KeyPgWstringFunction ----

Wstring (Function)   宽字符串
  
用特定宽度的某个宽字符的一定长度填充 aWString

语法
Declare Function WString ( ByVal count As Integer, ByVal ch_code As Long ) As WString
Declare Function WString ( ByVal count As Integer, ByRef ch As Const WString ) As WString

用法
result = WString( count, ch_code )
or
result = WString( count, ch )

参数
count
指定要创建的字符串的长度。Integer
ch_code
指定要用于填充字符串的 Unicode 字符。Long
ch
第一个字符将用于填充字符串的 A。WString

返回值
创建的 .如果是空字符串或 ， 则将返回空字符串。WStrin


-------------------------------------------------------- KeyPgXorGfx ----

Xor   异或
  
图形语句的参数，该语句使用按位作为 blitting 方法PutXor

语法
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Xor

参数
Xor
必填。

描述
该方法使用按位函数将每个源像素与相应的目标像素组合在一起。这样做的结果是输出为目标像素。
此方法适用于所有图形模式。没有蒙版颜色，尽管颜色值（在全彩色模式下）不会产?


-------------------------------------------------------- KeyPgYear ----

Year   日期取年份
  
从日期序列中获取年份

语法
Declare Function Year ( ByVal date_serial As Double ) As Long

用法
#include "vbcompat.bi"
result = Year( date_serial )

参数
date_serial
日期

返回值
从包含日期序列格式的日期的变量中返回年份?


-------------------------------------------------------- KeyPgZstring ----

ZString   Z字符串
  
标准数据类型：8 位字符串

语法
Dim variable As ZString * size
Dim variable As ZString Ptr

描述
A 是 C 样式的固定大小的字符数组。它没有描述符，因此可以更快地计算其长度，以将其作为参数传递给函数。当变量具有固定的（数值常量或可在编译时计算的表达式）时，FreeBASIC 通过将内容截


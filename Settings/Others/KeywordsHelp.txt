
-------------------------------------------------------- KeyPgAbs ----

Abs
  

	Calculates the absolute value of a number

Syntax
Declare Function Abs ( ByVal number As Integer ) As Integer
Declare Function Abs ( ByVal number As UInteger ) As UInteger
Declare Function Abs ( ByVal number As Double ) As Double

Usage
result = Abs( number )

Parameters
number
Value to find the absolute value of.

Return Value
The absolute value of number.

Description
The absolute value of a number is its positive magnitude.  If a number is negative, its value will be negated and the positive result returned.  For example, Abs(-1) and Abs(1) both retu


-------------------------------------------------------- KeyPgAbstract ----

Abstract
  

	Declare abstract methods

Syntax
Type typename Extends base_typename
Declare Abstract Sub|Function|Property|Operator ...
End Type

Description
Abstract is a special form of Virtual. The difference is that abstract methods do not have a body, but just the declaration. Essentially this allows the declaration of an interface which


-------------------------------------------------------- KeyPgAccess ----

Access
  

	Clause of the Open statement to specify requested privileges

Syntax
Open filename for Binary Access {Read | Write | Read Write} as [#]filenum

Usage
open filename for binary Access Read as #filenum
open filename for binary Access Write as #filenum
open filename for binary Access Read Write as #filenum

Parameters
Read
Open the file with only read privileges.
Write
Open the file with only write privileges.
Read Write
Open the file with read and write privileges.

Description
Access is used with the Open statement to request read, write, or read and write privileges.  If the Access clause is not specified, Read Write is assumed.




-------------------------------------------------------- KeyPgAcos ----

Acos
  

	Finds the arccosine of an angle

Syntax
Declare Function Acos ( ByVal number As Double ) As Double

Usage
result = Acos( number )

Parameters
number
A cosine value in the range [-1..1].

Return Value
The arccosine of number, in radians, in the range [0..Pi].

Description
Acos returns the arccosine of the argument number as a Double within the range of 0 to Pi.  The arccosine is the inverse of the Cos function. The returned angle is measured in radians (n


-------------------------------------------------------- KeyPgAddGfx ----

Add
  

	Parameter to the Put graphics statement which selects addition as the blitting method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Add[ ,multiplier ]

Parameters
Add
Required.
multiplier
Optional value between 0 and 255.  The source pixels are premultiplied by (multiplier / 256) before being added.  If omitted, this value defaults to 255.

Description
Add selects addition as the method for blitting an image buffer.  For each source and target pixel, the values of each respective component are added together to produce the result.
The


-------------------------------------------------------- KeyPgAlias ----

Alias (Name)
  

	Clause of the Sub and Function statements that provides an alternate internal name.

Syntax
[Declare] { Sub | Function } usablename Alias "alternatename" (...)

Usage
declare sub usablename Alias "alternatename" ( ... )
or
declare function usablename Alias "alternatename" ( ... )
or
sub usablename Alias "alternatename" ( ... )
...
end sub
or
function usablename Alias "alternatename" ( ... )
...
end function
or
type typename Alias "alternatename" ( ... )
...
end type

Description
Alias gives an alternate name to a procedure.  This alternate name cannot be used within the program to call the procedure, but it is visible (if the function is not private) to the link


-------------------------------------------------------- KeyPgAliasModifier ----

Alias (Modifier)
  

	Modifies the data type name mangling (decoration) of a public symbol

Syntax
... As [ Const ] datatype alias "modifier" [ Const [ Ptr ... ] ]

Usage
Dim variable As datatype alias "modifier"
Type name As datatype alias "modifier"
Declare Sub name ( param As datatype alias "modifier", ... )
Declare Function name ( param As datatype alias "modifier", ... ) As datatype alias "modifier"

Parameters
datatype
Standard data type or user defined data type to modify
modifier
One of the supported modifiers as described in Description section following
Description
Alias "modifier", when specified following a data type, gives an alternate meaning to the data type, which may be needed for linking with languages other than FreeBASIC.

Public symbol


-------------------------------------------------------- KeyPgAllocate ----

Allocate
  

	Allocates a block of memory from the free store

Syntax
Declare Function Allocate cdecl ( ByVal count As UInteger ) As Any Ptr

Usage
result = Allocate( count )

Parameters
count
The size, in bytes, of the block of memory to allocate.

Return Value
If successful, the address of the start of the allocated memory is returned. Otherwise, if the requested block size could not be allocated, or if count < 0, then the null pointer (0) is returned.

Description
Attempts to allocate, or reserve, count number of bytes from the free store (heap). The newly allocated memory is not initialized.

As the initial value of newly allocated memory is un


-------------------------------------------------------- KeyPgAlphaGfx ----

Alpha
  

	Parameter to the Put graphics statement which selects alpha blending as the method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Alpha, alphaval

Parameters
Alpha
Required.
alphaval
Optional alpha parameter in the range [0..255].  Overrides alpha values in individual pixels.

Description
Alpha selects alpha blending as the method for Putting an image.  If the alphaval parameter is specified, it overrides the alpha value of each pixel, and the mask color (magenta) will be


-------------------------------------------------------- KeyPgAndGfx ----

And
  

	Parameter to the Put graphics statement which uses a bit-wise And as the blitting method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], And

Parameters
And
Required.

Description
The And method combines each source pixel with the corresponding destination pixel, using the bit-wise And function.  The result of this is output as the destination pixel.
This method 


-------------------------------------------------------- KeyPgAny ----

Any
  

	The Any keyword is used as a placeholder for a type or value in various ways.

Syntax
Dim identifier As Any Pointer|Ptr
or
Declare Sub|Function identifier ( ByRef identifier As Any [ , ... ] )
or
Dim identifier(Any [, Any...]) As DataType
or
[ Declare ] { Sub | Function } proc_name ( param(Any [, Any...]) As DataType  )
or
Dim identifier As DataType = Any
or
New DataType ( Any )
or
New(Address) DataType [count] { Any }
or
InStr|InStrRev ( string, Any substring )

Description
 Pointers:
A special pointer type called the Any Ptr (or "Any Pointer") allows pointing to any variable type.  If you cast it to a DataType Ptr, it can be indexed or dereferenced to acc


-------------------------------------------------------- KeyPgAppend ----

Append
  

	Specifies text file to be opened for append mode

Syntax
Open filename for Append [Encoding encoding_type] [Lock lock_type] as [#]filenum 

Parameters
filename
file name to open for append
encoding_type
indicates encoding type for the file
lock_type
locking to be used while the file is open
filenum
unused file number to associate with the open file

Description
A file mode used with Open to open a text file for writing.

This mode is used to add text to an existing file  with Print #, or comma separated values with Write#.

Text files can't


-------------------------------------------------------- KeyPgArrayLen ----

Arraylen
  

	Provides the length of an array given its array-name.

Syntax
Declare Function ArrayLen ( arrayname() As Const Any ) As UInteger

Usage
#include once "fbc-int/array.bi"
using FB
...
result = ArrayLen(arrayname())

Parameters
arrayname
The name of the array for which the length is returned.

Description
Returns the total number of elements of the array specified by arrayname() (taking into account all dimensions of array).




-------------------------------------------------------- KeyPgArraySize ----

Arraysize
  

	Provides the size of an array given its array-name.

Syntax
Declare Function ArraySize ( arrayname() As Const Any ) As UInteger

Usage
#include once "fbc-int/array.bi"
using FB
...
result = ArraySize(arrayname())

Parameters
arrayname
The name of the array for which the size is returned.

Description
Returns the total size (in bytes) of the array specified by arrayname() (size of array element multiplied by total number of array elements).




-------------------------------------------------------- KeyPgAs ----

As
  

	Part of a declaration which specifies a data type, or part of the Open statement which specifies a file handle.

Syntax
symbolname As datatype

Open ... As #filenumber
Type ... As datatype

Description
As is used to declare the type of variables, fields or arguments and is also used in the Open statement to determine the file handle. As is also used with the Type (Alias) syntax, simila


-------------------------------------------------------- KeyPgAsc ----

Asc
  

	Returns the corresponding ASCII or Unicode integer representation of a character.

Syntax
Declare Function Asc ( ByRef str As Const String, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const ZString Ptr, ByVal position As Integer = 1 ) As ULong
Declare Function Asc ( ByVal str As Const WString Ptr, ByVal position As Integer = 1 ) As ULong

Usage
result = Asc( str [, position ] )

Parameters
str
The source string.
position
The position in the string of a character.

Return Value
The raw character value stored at position in str.
If both str and position can be evaluated at compile time (like Asc("a") or Asc(chr(97)) or Asc("abc", 2) ...), the value is returned in a UInteger result, otherwise in a ULong result.

Description
If str is a String or a ZString, the UByte value at that position is returned. This will be a 7-bit ASCII code, or even a 8-bit character value from some code-page, depending on the stri


-------------------------------------------------------- KeyPgAsin ----

Asin
  

	Finds the arcsine of a number

Syntax
Declare Function Asin ( ByVal number As Double ) As Double

Usage
result = Asin( number )

Parameters
number
Sine value in the range [-1..1].

Return Value
The arcsine of number, in radians, in the range [-Pi/2..Pi/2].

Description
Asin returns the arcsine of the argument number as a Double within the range of -Pi/2 to Pi/2.  The arcsine is the inverse of the Sin function. The returned angle is measured in radians 


-------------------------------------------------------- KeyPgAsm ----

Asm
  

	Code block that allows the use of architecture-specific instructions.

Syntax
Asm
architecture-dependent instructions
End Asm

Or

Asm architecture-dependent instructions

Description
The Asm block is used to insert specific machine-code instructions in a program in order to perform operations that cannot be carried out using the features of the language or to hand-op


-------------------------------------------------------- KeyPgAssert ----

Assert
  

	Debugging macro that halts program execution if an expression is evaluated to 0 (false).

Syntax
#define Assert(expression) If (expression) = 0 Then : fb_Assert( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

Usage
Assert( expression )

Parameters
expression
Any valid conditional/numeric expression.  If expression evaluates to 0 (i.e. "false"), execution is halted.

Description
The Assert macro is intended for use in debugging and works only if the -g or -eassert option is specified on the fbc command line. In this case it prints an error message and stops the 


-------------------------------------------------------- KeyPgAssertwarn ----

AssertWarn
  

	Debugging macro that prints a warning if an expression evaluates to 0.

Syntax
#define AssertWarn(expression) If (expression) = 0 Then : fb_AssertWarn( __FILE__, __LINE__, __FUNCTION__, #expression ) : End If

Usage
AssertWarn( expression )

Parameters
expression
Any valid expression.  If expression evaluates to 0, a warning message is printed to stderr (console).

Description
The AssertWarn macro is intended for use in debugging and works only if the -g option is selected in the FBC command line. In this case it prints a warning message if expression evaluate


-------------------------------------------------------- KeyPgAtan2 ----

Atan2
  

	Returns the arctangent of a ratio

Syntax
Declare Function Atan2 ( ByVal y As Double, ByVal x As Double ) As Double

Usage
result = ATan2( y, x )

Parameters
y
Vertical component of the ratio.
x
Horizontal component of the ratio.

Return Value
The angle whose tangent is y/x, in radians, in the range [-Pi..Pi].

Description
ATan2 returns the arctangent of the ratio y/x as a Double within the range of -Pi to Pi.  The arctangent is the inverse of the Tan function. The returned angle is measured in radians (no


-------------------------------------------------------- KeyPgAtn ----

Atn
  

	Returns the arctangent of a number

Syntax
Declare Function Atn ( ByVal number As Double ) As Double

Usage
result = Atn( number )

Parameters
number
A number.

Return Value
The angle, in radians, whose tangent is number, in the range [-Pi/2..Pi/2].

Description
Atn returns the arctangent of the argument number as a Double within the range of -Pi/2 to Pi/2.  The arctangent is the inverse of the Tan function. The returned angle is measured in rad


-------------------------------------------------------- KeyPgBase ----

Base (Member Access)
  

	Provides explicit access to base type members in non-static methods of a Type

Syntax
Base.member
Base [ .Base ... ] .member

Description
Base provides a way to explicitly access members of a specific base type, in the context of non-static methods of a user-defined type derived from another type using Extends.

By using


-------------------------------------------------------- KeyPgBaseInit ----

Base (Initializer)
  

	Specifies an initializer for the base UDT in derived Udt constructors

Syntax
Base ( constructor-parameters... )
or:
Base ( UDT-initializers... )

Description
The Base initializer can be used at the top of constructors of derived UDTs. It allows to specify an explicit constructor call or UDT initializers to be used to initialize the base objec


-------------------------------------------------------- KeyPgBeep ----

Beep
  

	Produces a beep sound.

Syntax
Declare Sub Beep ( )

Usage
Beep

Description
Beep tells the system to sound a beep noise. Note that this might not work on some platforms. Since this command is not reliable and there is no way to specify the frequency and duration


-------------------------------------------------------- KeyPgBin ----

Bin
  

	Returns a binary (base 2) string representation of an integer

Syntax
Declare Function Bin ( ByVal number As UByte ) As String
Declare Function Bin ( ByVal number As UShort ) As String
Declare Function Bin ( ByVal number As ULong ) As String
Declare Function Bin ( ByVal number As ULongInt ) As String
Declare Function Bin ( ByVal number As Const Any Ptr ) As String

Declare Function Bin ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Bin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

Usage
result = Bin[$]( number [, digits ] )

Parameters
number
A number or expression evaluating to a number.  A floating-point number will be converted to a LongInt.
digits
Desired number of digits in the returned string.

Return Value
A string containing the unsigned binary representation of number.

Description
Returns a string representing the unsigned binary value of the integer number. Binary digits range from 0 to 1.

If you specify digits > 0, the result string will be exactly that lengt


-------------------------------------------------------- KeyPgBinary ----

Binary
  

	Specifies file or device to be opened for binary mode

Syntax
Open filename for Binary [Access access_type] [Lock lock_type] as [#]filenum 

Parameters
filename
file name to open
access_type
indicates whether the file may be read from, written to or both
lock_type
locking to be used while the file is open
filenum
unused file number to associate with the open file

Description
Opens a file or device for reading and/or writing binary data in the file filenum, with free format.
If the file does not exist, a new file will be created. The file pointer is initiali


-------------------------------------------------------- KeyPgBit ----

Bit
  

	Gets the state of an individual bit in an integer value.

Syntax
#define Bit( value, bit_number ) (((value) And (Cast(TypeOf(value), 1) Shl (bit_number))) <> 0)

Usage
result = Bit( value, bit_number )

Parameters
value
The integer value.
bit_number
The index of the bit.

Return Value
Returns an Integer value of -1 if the bit is set, or 0 if the bit is cleared.

Description
This macro expands to an integer value indicating whether or not the bit specified by bit_number is set in the integer value. Behaves as `(value And 1 Shl bit_number) <> 0`.

The valid


-------------------------------------------------------- KeyPgBitreset ----

BitReset
  

	Gets the value with a specified bit cleared, from a copied integer.

Syntax
#define BitReset( value, bit_number ) ((value) And Not (Cast(TypeOf(Value), 1) Shl (bit_number)))

Usage
result = BitReset( value, bit_number )

Parameters
value
The integer value.
bit_number
The index of the bit to clear.

Return Value
Returns the integer value with the specified bit cleared.

Description
This macro expands to a copy of the integer value with the specified bit_number cleared (to off, or `0`). Behaves as `value And Not (1 Shl bit_number)`.
To clear a specified bit in a va


-------------------------------------------------------- KeyPgBitset ----

BitSet
  

	Gets the value with a specified bit set, from a copied integer.

Syntax
#define BitSet( value, bit_number ) ((value) Or (Cast(TypeOf(Value), 1) Shl (bit_number)))

Usage
result = BitSet( value, bit_number )

Parameters
value
The integer value.
bit_number
The index of the bit to set.

Return Value
Returns the integer value with the specified bit set.

Description
This macro expands to a copy of the integer value with the specified bit_number set (to on, or `1`). Behaves as `value Or (1 Shl bit_number)`.
To set a specified bit in a variable, the 


-------------------------------------------------------- KeyPgBload ----

BLoad
  

	Loads arbitrary data from a file created with BSave, or a compatible BMP image file.

Syntax
Declare Function BLoad ( ByRef filename As Const String, ByVal dest As Any Ptr = 0, ByVal pal As Any Ptr = 0 ) As Long

Usage
result = BLoad( filename [, [ dest ] [, pal ] ] )

Parameters
filename
the name of the file to load the image from; can include a file path
dest
the memory location to load the image to, or null (0) to copy the image to the current graphics screen work page
pal
the memory location to load the palette to, or null (0) to change the current graphics screen palette, if it uses one

Return Value
Returns zero (0) if successful, or a non-zero error code to indicate a failure. (throws a runtime error)

Description
BLoad can be used to load image data or any other data from a file created with BSave, and store that data in an array or paste it to the screen. If dest is absent or null (0), the image


-------------------------------------------------------- KeyPgBoolean ----

Boolean
  

	Standard data type

Syntax
Dim variable As Boolean

Description
Boolean data type. Can hold the values True or False
Default value on initialization is False

Notes on definition of boolean data type:
- Ideally, the definition of the boolean data


-------------------------------------------------------- KeyPgBsave ----

BSave
  

	Saves an array of arbitrary data and palette information to a file on disk

Syntax
Declare Function BSave ( ByRef filename As Const String, ByVal source As Any Ptr, ByVal size As ULong = 0, ByVal pal As Any Ptr = 0, ByVal bitsperpixel As Long = 0 ) As Long

Usage
result = BSave( filename, source [,[ size ][,{ pal | pal, bitsperpixel }]] )

Parameters
filename
the name of the file to create for storing the pixel and palette data.
source
the address of the data to store, or null (0) to store pixel data from the current screen work page.
size
optional, the total number of bytes of data to store.  This value is needed unless the output is a BMP file.
pal
optional, the address of a buffer holding 256 Palette colors, or null (0) for the current screen palette.
bitsperpixel
optional, a requested bit depth for the output BMP image. If bitsperpixel is specified, pal must also be specified (at a least null (0) value), otherwise an error is obtained.

Return Value
Returns zero (0) if successful, or a non-zero error code to indicate a failure. (throws a runtime error)

Description
BSave is used for saving arbitrary data from memory into a file, using a file format specific to FB, or saving images into a standard BMP image file, replacing an existing file if necess


-------------------------------------------------------- KeyPgByref ----

Byref (Parameters)
  

	Declaration specifier to explicitly pass a parameter by reference

Syntax
ByRef param As datatype

Usage
[ Declare ] { Sub | Function } proc_name ( ByRef param As datatype  )

Description
Passes a variable by reference, that is its address, to a subroutine or function. When a variable is passed by reference, the contents of the variable can be changed by the target subrou


-------------------------------------------------------- KeyPgByrefFunction ----

Byref (Function Results)
  

	Specifies that a function result is returned by reference

Syntax
Function name ( parameter-list ) ByRef As datatype

Description
Causes the function result to be returned by reference, rather than by value. A function returning ByRef will return the address of a variable, instead of making a copy like when returni


-------------------------------------------------------- KeyPgByrefVariables ----

Byref (Variables)
  

	Declares a reference

Syntax
(Dim | Static) [Shared] ByRef name1 As DataType = variable1 [, ByRef name2 As DataType = variable2, ...]
or
(Dim | Static) [Shared] ByRef As DataType name1 = variable1 [, name2 = variable2, ...]
or
[Static] Var [Shared] ByRef name1 = variable1 [, ByRef name2 = variable2, ...]

Parameters
name
reference name
variable
variable name to refer

Description
Declares a reference (by name) to a variable.

A reference is an entity that is a way to access data located in memory. A reference is not the data itself but only information about it


-------------------------------------------------------- KeyPgByte ----

Byte
  

	Standard data type: 8 bit signed

Syntax
Dim variable As Byte

Description
8-bit signed whole-number data type. Can hold a value in the range of -128 to 127.




-------------------------------------------------------- KeyPgByval ----

ByVal
  

	Declaration specifier to explicitly pass a parameter by value

Syntax
ByVal param As datatype

Usage
[ Declare ] { Sub | Function } proc_name ( ByVal param As datatype  )

Description
ByVal in a parameter list of a declare statement causes a copy of the variable to be passed to the procedure (for example, a sub or function) by its value.

This means that if the valu


-------------------------------------------------------- KeyPgCall ----

Call
  

	Statement to invoke a subroutine

Syntax
Call procname ([parameter list])

Description
Calls a Sub or Function.

This keyword is a holdover from earlier dialects of BASIC, and is mainly deprecated.

In -lang qb, it can be used to call Subs in code before they are decla


-------------------------------------------------------- KeyPgCallocate ----

CAllocate
  

	Allocates memory for a certain number of elements from the free store and clears the contents

Syntax
Declare Function CAllocate cdecl ( ByVal num_elements As UInteger, ByVal size As UInteger = 1 ) As Any Ptr

Usage
result = CAllocate( num_elements [, size ] )

Parameters
num_elements
The number of elements to allocate memory for.
size
The size, in bytes, of each element.

Return Value
If successful, the address of the start of the allocated memory is returned. Otherwise, the null pointer (0) is returned.

Description
CAllocate initializes the allocated memory with zeros.
Consequently, CAllocate can be also directly used with String or Udt containing string, because the string descriptor is cleared (


-------------------------------------------------------- KeyPgCase ----
Case   
Description



-------------------------------------------------------- KeyPgCast ----

Cast
  

	Converts an expression to a specified data type

Syntax
Cast( datatype, expression )

Parameters
datatype 
a built-in data type (standard type)
expression 
a variable of another built-in data type

Description
Converts expression into a different datatype. Useful to be used in macros when datatype is unknown and also when converting to Type Alias.

This is a general form of conversion operat


-------------------------------------------------------- KeyPgCbool ----

CBool
  

	Converts numeric or string expression to a boolean (Boolean)

Syntax
Declare Function CBool ( ByVal expression As datatype ) As Boolean

Type typename
Declare Operator Cast ( ) As Boolean
End Type

Usage
result = CBool( numeric expression )
result = CBool( string expression )
result = CBool( user defined type )

Parameters
expression
a numeric, string, or user defined type to cast to a Boolean value
datatype
any numeric, string, or user defined type
typename
a user defined type

Return Value
A Boolean value.

Description
The CBool function converts a zero value to False and a non-zero value to True.

The name can be explained as 'Convert to Boolean'.

If the argument is a string expression, it is con


-------------------------------------------------------- KeyPgCbyte ----

CByte
  

	Converts numeric or string expression to Byte.

Syntax
Declare Function CByte ( ByVal expression As datatype ) As Byte

Type typename
Declare Operator Cast ( ) As Byte
End Type

Usage
result = CByte( numeric expression )
result = CByte( string expression )
result = CByte( user defined type )

Parameters
expression
A numeric, string, or pointer expression to cast to a Byte value.
datatype
Any numeric, string, or pointer data type.
typename
A user defined type.

Return Value
A Byte value.

Description
The CByte function rounds off the decimal part and returns a 8-bit Byte value. The function does not check for an overflow, and results are undefined for values which are less than -128 


-------------------------------------------------------- KeyPgCdbl ----

CDbl
  

	Converts numeric or string expression to Double precision floating point

Syntax
Declare Function CDbl ( ByVal expression As datatype ) As Double

Type typename
Declare Operator Cast ( ) As Double
End Type

Usage
result = CDbl( numeric expression )
result = CDbl( string expression )
result = CDbl( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a Double value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A Double precision value.

Description
The CDbl function returns a 64-bit Double value. The function does not check for an overflow, so be sure not to pass a value outside the representable range of the Double data type. The 


-------------------------------------------------------- KeyPgCdecl ----

cdecl
  

	Specifies a cdecl-style calling convention in a procedure declaration

Syntax
Sub name cdecl [Overload] [Alias "alias"] ( parameters )
Function name cdecl [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

Description
In procedure declarations, cdecl specifies that a procedure will use the cdecl calling convention. In the cdecl calling convention, any parameters are to be passed (pushed onto the stack


-------------------------------------------------------- KeyPgChain ----

Chain
  

	Temporarily transfers control to an external program

Syntax
Declare Function Chain ( ByRef program As Const String ) As Long

Usage
result = Chain( program )

Parameters
program
The file name (including file path) of the program (executable) to transfer control to.

Return Value
Returns the external program's exit code if executed successfully, or negative one (-1) otherwise.

Description
Transfers control over to an external program. When the program exits, execution resumes immediately after the call to Chain.




-------------------------------------------------------- KeyPgChdir ----

ChDir
  

	Changes the current drive and directory

Syntax
Declare Function ChDir ( ByRef path As Const String ) As Long

Usage
result = ChDir( path )

Parameters
path
A String argument specifying the path to change to.

Return Value
Returns zero (0) on success and negative one (-1) on failure.

Description
Changes the current drive and directory to that specified.




-------------------------------------------------------- KeyPgChr ----

Chr
  

	Returns a string of characters from one or more ASCII integer values

Syntax
Declare Function Chr ( ByVal ch As Integer [, ... ] ) As String

Usage
result = Chr[$]( ch0 [, ch1 ... chN ] )

Parameters
ch
The ASCII integer value of a character.

Return Value
Returns a string containing the character(s).

Description
Chr returns a string containing the character(s) represented by the ASCII values passed to it.

When Chr is used with numerical constants or literals, the result is evaluated at compil


-------------------------------------------------------- KeyPgCint ----

CInt
  

	Converts a numeric or string expression to an Integer or an Integer<bits>

Syntax
Declare Function CInt ( ByVal expression As datatype ) As Integer
Declare Function CInt<bits> ( ByVal expression As datatype ) As Integer<bits>

Type typename
Declare Operator Cast ( ) As Integer
Declare Operator Cast ( ) As Integer<bits>
End Type

Usage
result = CInt( expression )
result = CInt( string expression )
result = CInt( user defined type )

Parameters
bits
A numeric constant expression indicating the size in bits of integer desired.  The values allowed are 8, 16, 32 or 64.
expression
a numeric, string, or pointer expression to cast to a Integer value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
An Integer or Integer<bits> containing the converted value.

Description
If CInt is passed a numeric expression, it rounds it using using the round-to-even method - i.e. it rounds to the closest integer value, choosing the closest even integer if the number i


-------------------------------------------------------- KeyPgCircle ----

Circle
  

	Graphics statement to draw an ellipse or a circle

Syntax
Circle [target,] [STEP] (x,y), radius[, [color][, [start][, [end][, [aspect][, F]]]]]

Parameters
target
optional; specifies the image buffer to draw on
STEP
indicates that coordinates are relative
(x, y)
coordinates of the center of the ellipse
radius
the radius of the circle - or for an ellipse, the semi-major axis (i.e. the longest radius)
color
the color attribute
start
starting angle
end
ending angle
aspect
aspect ratio of the ellipse, the ratio of the height to the width
F
fill mode indicator

Description
Circle will draw a circle, ellipse, or arc based on the parameters given to it. 

target specifies a buffer to draw on.  target may be an image created with ImageCreate or Get (Graphic


-------------------------------------------------------- KeyPgClass ----

Class
  

	Declares a class object

Syntax
Class typename ...

Parameters
typename
name of the Class

Description
We would have put something useful here (honest) except this feature isn't implemented in the compiler yet.  But since it will get added in future, and there are several other document p


-------------------------------------------------------- KeyPgClear ----

Clear
  

	Clears or initializes some memory

Syntax
Declare Sub Clear cdecl ( ByRef dst As Any, ByVal value As Long = 0, ByVal bytes As UInteger )

Usage
Clear( dst, [value], bytes )

Parameters
dst
starting address of some memory
value
the value to set all bytes equal to
bytes
number of bytes to clear

Description
Clear sets one or more bytes in memory to a certain value (the default value is zero (0) if not specified). The starting address is taken from a reference to a variable or array element.


-------------------------------------------------------- KeyPgClng ----

CLng
  

	Converts numeric or string expression to Long

Syntax
Declare Function CLng ( ByVal expression As datatype ) As Long

Type typename
Declare Operator Cast ( ) As Long
End Type

Usage
result = CLng( numeric expression )
result = CLng( string expression )
result = CLng( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a Long value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A Long value.

Description
The CLng function rounds off the decimal part and returns a 32-bit Long value.  The function does not check for an overflow, and results are undefined for values which are less than -2 1


-------------------------------------------------------- KeyPgClngint ----

CLngInt
  

	Converts numeric or string expression to 64-bit integer (LongInt)

Syntax
Declare Function CLngInt ( ByVal expression As datatype ) As LongInt

Type typename
Declare Operator Cast ( ) As LongInt
End Type

Usage
result = CLngInt( numeric expression )
result = CLngInt( string expression )
result = CLngInt( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a LongInt value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A LongInt value.

Description
The CLngInt function rounds off the decimal part and returns a 64-bit LongInt value.  The function does not check for an overflow, and results are undefined for values which are less tha


-------------------------------------------------------- KeyPgClose ----

Close
  

	Stream I/O function to terminate access to a device

Syntax
Close [[#]filenum ] [, [#]filenum ...]
 or 
result = Close( [#filenum] )

Parameters
filenum
List of file numbers to close.

Return Value
Close returns a 32 bit Long: a zero (0) on success and a non-zero error code otherwise.

Description
Closes the files whose file numbers are passed as arguments. If an unused file number is passed, Close returns an error.

Close without arguments closes all the files presently opened.


-------------------------------------------------------- KeyPgCls ----

Cls
  

	Clears the screen in both text modes and graphics modes

Syntax
Declare Sub Cls ( ByVal mode As Long = 1 )

Usage
Cls mode

Parameters
mode
A optional numeric variable with a value from 0 to 2.  If omitted, it defaults to 1.

Description
An optional mode parameter may be given,

If omitted, Cls clears either the text or graphics viewport.  If a graphics viewport has been defined using the View (Graphics) statement, the


-------------------------------------------------------- KeyPgColor ----

Color
  

	Sets the display foreground / background color that is used with console output and graphics output of text

Syntax
Declare Function Color ( ByVal foreground As ULong , ByVal background As ULong ) As ULong

Usage
Color [foreground] [, background]
result = Color [( [foreground] [, background] )]

Parameters
foreground
the foreground color to set
background
the background color to set

Return Value
Returns a 32-bit value containing the current foreground color in the Low Word and the current background color in the High Word.
In hi/truecolor modes, only the foreground color is returned, taking up the whole 32 bits. Instead, see ScreenControl to return the current graphics mode color (foreground and background).

The old color values can be retrieved at the same time as setting new ones.

Description
The Color statement sets the current foreground and/or background colors. Circle, Draw, Line (Graphics), Cls, Paint, Print, PReset and PSet all use the last colors set by this function w


-------------------------------------------------------- KeyPgCommand ----

Command
  

	Returns command line parameters used to call the program

Syntax
Declare Function Command ( ByVal index As Long = -1 ) As String

Usage
result = Command[$]( [ index ] )

Parameters
index
Zero-based index for a particular command-line argument.

Return Value
  Returns the command-line arguments(s).

Description
Command returns command-line arguments passed to the program upon execution.

If index is less than zero (< 0), a space-separated list of all command-line arguments is returned, otherw


-------------------------------------------------------- KeyPgCommon ----

Common
  

	Variable declaration and scope modifier

Syntax
Common [Shared] symbolname[()] [AS DataType] [, ...]

Description
Declares a variable which is shared between code modules, including those to be compiled as static and dynamic libraries (DLLs).
A matching Common statement must appear in all other cod


-------------------------------------------------------- KeyPgCondBroadcast ----

CondBroadcast
  

	Restarts all threads CondWaiting for the handle

Syntax
Declare Sub CondBroadcast ( ByVal handle As Any Ptr )

Usage
CondBroadcast ( handle )

Parameters
handle
The handle of a conditional variable.

Description
Once the conditional is CondCreate and the threads are started, one of more of them (including the implicit main thread executing main program) can be set to CondWait for the conditional


-------------------------------------------------------- KeyPgCondCreate ----

CondCreate
  

	Creates a conditional variable to be used in synchronizing threads

Syntax
Declare Function CondCreate ( ) As Any Ptr

Usage
result = CondCreate

Return Value
A handle to a newly created conditional variable, or the null pointer (0) on failure.

Description
Once the conditional is Condcreated and the threads are started, one or more of them (including the implicit main thread executing main program) can be set to CondWait for the conditiona


-------------------------------------------------------- KeyPgCondDestroy ----

CondDestroy
  

	Destroys a multi-threading conditional variable when it is no more needed

Syntax
Declare Sub CondDestroy ( ByVal handle As Any Ptr )

Usage
CondDestroy ( handle )

Parameters
handle
The handle of a conditional variable to destroy.

Description
Once the conditional is CondCreated and the threads are started, one of more of them (including the implicit main thread executing main program) can be set to CondWait for the conditiona


-------------------------------------------------------- KeyPgCondSignal ----

CondSignal
  

	Restarts a thread suspended by a call to CondWait

Syntax
Declare Sub CondSignal ( ByVal handle As Any Ptr )

Usage
CondSignal ( handle )

Parameters
handle
The handle of a conditional variable.

Description
Once the conditional is created with CondCreate and the threads are started, one of more of them (including the implicit main thread executing main program) can be set to CondWait for th


-------------------------------------------------------- KeyPgCondWait ----

CondWait
  

	Stops execution of current thread until some condition becomes true

Syntax
Declare Sub CondWait ( ByVal handle As Any Ptr, ByVal mutex As Any Ptr )

Usage
CondWait ( handle, mutex )

Parameters
handle
The handle of a conditional variable.
mutex
The mutex associated with this conditional variable, which must be locked when testing the condition and calling CondWait.

Description
Function that stops the thread where it is called until some other thread  CondSignals or CondBroadcasts  the handle.

Once the conditional variable is created with CondCreate and the 


-------------------------------------------------------- KeyPgConst ----

Const
  

	Non-modifiable variable declaration.

Syntax
Const symbolname1 [AS DataType] = value1 [, symbolname2 [AS DataType] = value2, ...]
or
Const [AS DataType] symbolname1 = value1 [, symbolname2 = value2, ...]

Description
Declares non-modifiable constant data that can be integer or decimal (floating-point) numbers or strings. The constant type will be inferred if DataType isn't explicitly given.

Specif


-------------------------------------------------------- KeyPgConstMember ----

Const (Member)
  

	Specifies that a member procedure is read only.

Syntax
Type typename
Declare Const Sub|Function|Property|Operator ...
End Type

[Const] Sub|Function|... typename ...
...
End Sub|Function|...

Description
Specifies that a method does not change the object it is called on. The hidden This parameter will be considered read-only. The declaration can be read as 'invoking a const method promis


-------------------------------------------------------- KeyPgConstQualifier ----

Const (Qualifier)
  

	Specifies that a data type or pointer data type is read only.

Syntax
... As [Const] datatype [ [Const] Ptr ... ]

Parameters
datatype
Name of a standard or user defined data type.

Description
Specifies that the datatype or Ptr immediately to the right of the Const qualifier is to be considered as read only.  Read-only (Const) declarations are a measure of type safety that can


-------------------------------------------------------- KeyPgConstructor ----

Constructor
  

	Called automatically when a class or user defined type is created

Syntax
Type typename
Declare Constructor ( )
Declare Constructor ( [ ByRef | ByVal ] parameter As datatype [ = default ] [, ... ] )
End Type

Constructor typename ( [ parameters ] ) [ Export ]
statements
End Constructor

Parameters
typename 
name of the Type or Class

Description
Constructor methods are called when a user defined Type or Class variable is created.

typename is the name of the type for which the Constructor method is declared and defined.  Name 


-------------------------------------------------------- KeyPgContinue ----

Continue
  

	Control flow statement to continue next iteration of a loop

Syntax
Continue {Do | For | While}

Description
Skips all code until the end clause of a loop structure, i.e. Do...Loop, For...Next, or a While...Wend block, then executes the limit condition check. In the case of a For...Next, the va


-------------------------------------------------------- KeyPgCos ----

Cos
  

	Returns the cosine of an angle

Syntax
Declare Function Cos ( ByVal angle As Double ) As Double

Usage
result = Cos( angle )

Parameters
angle
the angle (in radians)

Return Value
Returns the cosine of the argument angle as a Double within the range of -1.0 to 1.0.

Description
The argument number is measured in radians (not degrees).

The value returned by this function is undefined for values of angle with an absolute value of 2 ^ 63 or greater.

Cos can 


-------------------------------------------------------- KeyPgCptr ----

CPtr
  

	Converts a pointer expression to a specified data type pointer

Syntax
CPtr( PointerDataType, expression )

Description
Converts expression to PointerDataType.

PointerDataType must be a Pointer type (e.g. a DataType Ptr or an Any Ptr), or a Type (Alias) to one.
expression may have a different pointer 


-------------------------------------------------------- KeyPgCshort ----

CShort
  

	Converts numeric or string expression to an integer (Short)

Syntax
Declare Function CShort ( ByVal expression As datatype ) As Short

Type typename
Declare Operator Cast ( ) As Short
End Type

Usage
result = CShort( numeric expression )
result = CShort( string expression )
result = CShort( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a Short value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A Short value.

Description
The CShort function rounds off the decimal part and returns a 16-bit Short value.  The function does not check for an overflow, and results are undefined for values which are less than -


-------------------------------------------------------- KeyPgCsign ----

CSign
  

	Converts an expression to signed

Syntax
CSign ( expression )

Usage
variable = CSign ( expression )

Description
Converts an unsigned expression to a signed one, useful to force signed behavior of division or multiplication (including with Shl and Shr).

This is the opposite of CUnsg.




-------------------------------------------------------- KeyPgCsng ----

CSng
  

	Converts numeric or string expression to Single precision floating point

Syntax
Declare Function CSng ( ByVal expression As datatype ) As Single

Type typename
Declare Operator Cast ( ) As Single
End Type

Usage
result = CSng( numeric expression )
result = CSng( string expression )
result = CSng( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a Single value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A Single precision value.

Description
The CSng function returns a 32-bit Single value. The function does not check for an overflow, so be sure not to pass a value outside the representable range of the Single data type. The 


-------------------------------------------------------- KeyPgCsrlin ----

CsrLin
  

	Returns the row position of the cursor

Syntax
Declare Function CsrLin ( ) As Integer

Usage
result = CsrLin

Return Value
An Integer specifying the current row of the cursor.

Description
Returns the current row the cursor is on (i.e. the "cursor line").  The topmost row is number 1.




-------------------------------------------------------- KeyPgCubyte ----

CUByte
  

	Converts numeric or string expression to an unsigned byte (UByte)

Syntax
Declare Function CUByte ( ByVal expression As datatype ) As UByte

Type typename
Declare Operator Cast ( ) As UByte
End Type

Usage
result = CUByte( numeric expression )
result = CUByte( string expression )
result = CUByte( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a UByte value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A UByte value.

Description
The CUByte function rounds off the decimal part and returns a 8-bit UByte value. The function does not check for an overflow, and results are undefined for values which are less than 0 o


-------------------------------------------------------- KeyPgCuint ----

CUInt
  

	Converts numeric or string expression to a UInteger or UInteger<bits>

Syntax
Declare Function CUInt ( ByVal expression As datatype ) As UInteger
Declare Function CUInt<bits> ( ByVal expression As datatype ) As UInteger<bits>

Type typename
Declare Operator Cast ( ) As UInteger
Declare Operator Cast ( ) As UInteger<bits>
End Type

Usage
result = CUInt( numeric expression )
result = CUInt( string expression )
result = CUInt( user defined type )

Parameters
bits
A numeric constant expression indicating the size in bits of unsigned integer desired.  The values allowed are 8, 16, 32 or 64.
expression
a numeric, string, or pointer expression to cast to a UInteger or UInteger<bits> value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A UInteger or UInteger<bits> containing the converted value.

Description
The CUInt function rounds off the decimal part and returns a UInteger value, or if a bits value is supplied, an unsigned integer type of the given size.

The function does not check fo


-------------------------------------------------------- KeyPgCulng ----

CULng
  

	Converts numeric or string expression to ULong

Syntax
Declare Function CULng ( ByVal expression As datatype ) As ULong

Type typename
Declare Operator Cast ( ) As ULong
End Type

Usage
result = CULng( numeric expression )
result = CULng( string expression )
result = CULng( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a ULong value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A ULong value.

Description
The CULng function rounds off the decimal part and returns a 32 bit ULong value. The function does not check for an overflow. The name can be explained as 'Convert to Unsigned LoNG'.




-------------------------------------------------------- KeyPgCulngint ----

CULngInt
  

	Converts numeric or string expression to 64-bit unsigned integer (ULongInt)

Syntax
Declare Function CULngInt ( ByVal expression As datatype ) As ULongInt

Type typename
Declare Operator Cast ( ) As ULongInt
End Type

Usage
result = CULngInt( numeric expression )
result = CULngInt( string expression )
result = CULngInt( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a ULongInt value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A ULongInt value.

Description
The CULngInt function rounds off the decimal part and returns a 64-bit ULongInt value.  The function does not check for an overflow, and results are undefined for values which are less t


-------------------------------------------------------- KeyPgCunsg ----
CUnsg   
Description



-------------------------------------------------------- KeyPgCurdir ----

CurDir
  

	Returns the current directory/folder

Syntax
Declare Function CurDir ( ) As String

Usage
result = CurDir

Return Value
A String which is set to the name of the current directory/folder.

Description
Returns the current directory/folder.




-------------------------------------------------------- KeyPgCushort ----

CUShort
  

	Converts numeric or string expression to an unsigned integer (UShort)

Syntax
Declare Function CUShort ( ByVal expression As datatype ) As UShort

Type typename
Declare Operator Cast ( ) As UShort
End Type

Usage
result = CUShort( numeric expression )
result = CUShort( string expression )
result = CUShort( user defined type )

Parameters
expression
a numeric, string, or pointer expression to cast to a UShort value
datatype
any numeric, string, or pointer data type
typename
a user defined type

Return Value
A UShort value.

Description
The CUShort function rounds off the decimal part and returns a 16-bit UShort value.  The function does not check for an overflow, and results are undefined for values which are less than


-------------------------------------------------------- KeyPgCustomgfx ----

Custom
  

	Parameter to the Put graphics statement which selects a custom method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Custom, custom_function_ptr [, parameter]

Parameters
Custom
Required.
custom_function_ptr
name of the custom user defined function.
parameter
optional Pointer to be passed to the custom function; if omitted, the default value is zero (0).

Description
Custom selects a custom user defined function as the method for blitting an image buffer.

The Custom method uses a user-defined function to calculate the final pixel values to be draw


-------------------------------------------------------- KeyPgCvaArg ----

Cva_Arg
  

	Macro to obtain the next argument from a variadic argument list object.

Syntax
variable = Cva_Arg ( argument_list, datatype )

Parameters
argument_list
Cva_List data type variable to access for next value
datatype
The datatype of the next value in the variable argument list argument_list

Description
The Cva_Arg macro allows the use of a variable number of arguments within a function:
 	Cva_Arg returns the current argument in the list, argument_list, with an expected data type of da


-------------------------------------------------------- KeyPgCvaCopy ----

Cva_Copy
  

	Macro to initialize variadic argument list object variable from an already initialized variadic argument list object variable

Syntax
Cva_Copy( dst_list, src_list )

Parameters
dst_list
destination Cva_List variable to initialize
src_list
source Cva_List variable to copy from

Description
Copies one Cva_List type variable to another Cva_List type variable.  dst_list is initialized using current state of src_list

src_list must already have been initialized with a previo


-------------------------------------------------------- KeyPgCvaEnd ----

Cva_End
  

	Macro to clean-up a variadic argument list object variable

Syntax
Cva_End( argument_list )

Parameters
argument_list
Cva_List variable to clean up

Description
Cleans-up a Cva_List type variable that was previously initialized with Cva_Start or Cva_Copy, like a destructor.

argument_list must already have been initialized with a previous Cva_


-------------------------------------------------------- KeyPgCvaList ----

Cva_List
  

	Variadic argument list object type

Syntax
Dim variable As Cva_List

Description
Cva_List is a built in data type for working with the variable length argument list in a variadic procedure.

Use Cva_Start to initialize the Cva_List variable (constructor).
Use Cva_


-------------------------------------------------------- KeyPgCvaStart ----

Cva_Start
  

	Macro to initialize variadic argument list object variable

Syntax
Cva_Start( argument_list, last_param )

Parameters
argument_list
Cva_List data type variable to initialize
last_param
The last parameter in the procedures parameter list before the Ellipsis ...

Description
In a variadic procedure definition, argument_list is a variable having the Cva_List type and must be initialized with Cva_Start to work with the variable length argument list passed to t


-------------------------------------------------------- KeyPgCvd ----

CVD
  

	Converts a 64-bit integer or 8-byte string to a double-precision value

Syntax
Declare Function CVD ( ByVal l As LongInt ) As Double
Declare Function CVD ( ByRef str As Const String ) As Double

Usage
result = CVD( l )
result = CVD( str )

Parameters
l
A 64-bit LongInt with a binary copy of a double-precision variable stored in it.
str
A String at least 8 bytes in length with a binary copy of a double-precision variable stored in it.

Return Value
Returns a Double value holding a binary copy of the input value.

Description
Does a binary copy from a 64-bit LongInt or 8-byte String to a Double variable.  A value of zero (0.0) is returned if the string is less than 8 bytes in length.  The result will make sen


-------------------------------------------------------- KeyPgCvi ----

CVI
  

	Converts a floating-point number or string to an integer variable using a binary copy

Syntax
32-bit:
Declare Function CVI ( ByVal f As Single ) As Integer
64-bit:
Declare Function CVI ( ByVal f As Double ) As Integer

Declare Function CVI ( ByRef str As Const String ) As Integer
Declare Function CVI<bits> ( expr As DataType ) As Integer<bits>

Usage
result = CVI( sng )
result = CVI( str )
result = CVI<bits>( expr )

Parameters
f
A floating-point number with a binary copy of an integer variable stored in it.  Its precision (Single or Double) depends on the size of Integer on the current platform
str
A String with a binary copy of an integer variable stored in it.
bits
Specifies a size of integer type to return.  The types and sizes of expr accepted will depend on the corresponding function called.
expr
An expression that will be copied into an Integer<bits>.

Return Value
An Integer or Integer<bits> variable containing a binary copy of the input expression.

Description
Returns an integer value using the binary data contained in a floating-point value, or a String.  A value of zero (0) is returned if the string contains fewer characters than the size of


-------------------------------------------------------- KeyPgCvl ----

CVL
  

	Converts a single-precision floating-point number or four-byte string to an integer (Long) variable

Syntax
Declare Function CVL ( ByVal sng As Single ) As Long
Declare Function CVL ( ByRef str As Const String ) As Long

Usage
result = CVL( sng )
result = CVL( str )

Parameters
sng
A Single floating-point number with a binary copy of an integer variable stored in it.
str
A String at least four bytes in length with a binary copy of an integer variable stored in it.

Return Value
A Long variable to copy the binary copy of a integer to.

Description
Returns a 32-bit Long integer value using the binary data contained in a Single, or a String of at least four bytes in length.  A value of zero (0) is returned if the string is less than


-------------------------------------------------------- KeyPgCvlongint ----

CVLongInt
  

	Converts a double-precision floating-point number or eight-byte string to a LongInt variable

Syntax
Declare Function CVLongInt ( ByVal dbl As Double ) As LongInt
Declare Function CVLongInt ( ByRef str As Const String ) As LongInt

Usage
result = CVLongInt( dbl )
result = CVLongInt( str )

Parameters
dbl
A Double floating-point number with a binary copy of a LongInt variable stored in it.
str
A String at least eight bytes in length with a binary copy of a LongInt variable stored in it.

Return Value
A LongInt variable holding a binary copy of the input variable.

Description
Returns a 64-bit LongInt value using the binary data contained in a Double, or a String of at least eight bytes in length.  A value of zero (0) is returned if the string is less than eig


-------------------------------------------------------- KeyPgCvs ----

CVS
  

	Converts a 32-bit integer or 4-byte string to a single-precision variable

Syntax
Declare Function CVS ( ByVal i As Integer ) As Single
Declare Function CVS ( ByRef str As Const String ) As Single

Usage
result = CVS( i )
result = CVS( str )

Parameters
i
A 32-bit Integer with a binary copy of a single-precision variable stored in it.
str
A String at least 4 bytes in length with a binary copy of a single-precision variable stored in it.

Return Value
Returns a Single value holding a binary copy of the input value.

Description
Does a binary copy from a 32-bit Integer or 4-byte String to a Single variable.  A value of zero (0.0) is returned if the string is less than 4 bytes in length.  The result will make sen


-------------------------------------------------------- KeyPgCvshort ----

CVShort
  

	Converts a two-byte string to a Short integer variable

Syntax
Declare Function CVShort ( ByRef str As Const String ) As Short

Usage
result = CVShort( str )

Parameters
str
A String at least two bytes in length with a binary copy of a Short integer variable stored in it.

Return Value
 Short variable holding the binary copy of a Keypgshort.

Description
Returns a 16-bit Short integer value using the binary data contained in a String of at least two bytes in length.  A value of zero (0) is returned if the string is less than two bytes in


-------------------------------------------------------- KeyPgData ----

Data
  

	Statement to store data at compile time.

Syntax
Data constant_expression1 [,constant_expression2]...

Description
Data stores a list of constant numeric or alphabetical expressions that are evaluated at compile time (except with -lang qb) and stored as constants that can be read into variables by us


-------------------------------------------------------- KeyPgDate ----

Date
  

	Returns the current system date as a string

Syntax
Declare Function Date ( ) As String

Usage
result = Date[$]

Return Value
Returns the current system date, in the format mm-dd-yyyy

Description
None




-------------------------------------------------------- KeyPgDateAdd ----

DateAdd
  

	Offset a date with a specified interval

Syntax
Declare Function DateAdd ( ByRef interval As Const String, ByVal number As Double, ByVal date_serial As Double ) As Double

Usage
#include "vbcompat.bi"
result = DateAdd( interval, number, date_serial )

Parameters
interval
string indicating which period of time corresponds to one unit of number
number
the number of intervals to add to the base date.  The number will be rounded to the nearest integer.
date_serial
the base date

Return Value
Returns a Date Serial corresponding to the received date_serial plus the number of intervals.

Description
Interval is specified as follows:

valueintervalyyyyyearsqquarter(three months)mmonthswwweeksd,w,ydayshhoursnminutessseconds  

The compiler will not recognize this function unless v


-------------------------------------------------------- KeyPgDateDiff ----

DateDiff
  

	Gets the difference of two dates measured by a specified interval

Syntax
Declare Function DateDiff ( ByRef interval As Const String, ByVal serial1 As Double, ByVal serial2 As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

Usage
#include "vbcompat.bi"
result = DateDiff( interval, date_serial1, date_serial2 [, firstdayofWeek [, firstweekofyear ] ] )

Parameters
interval
the unit of time (interval) with which to measure the difference
date_serial1
starting date serial
date_serial2
end date serial
firstdayofweek
first day of the week
firstdayofyear
first day of the year

Return Value
Returns an integer corresponding to the number of intervals found between two Date Serials.

If date_serial1 > date_serial2, the result is negative.

Description
interval is specified as follows:

valueintervalyyyyyearsqquarter(three months)mmonthsw seven day periods wwcalendar weeksd,ydayshhoursnminutessseconds  
first_dayofweek Affects the c


-------------------------------------------------------- KeyPgDatePart ----

DatePart
  

	Gets an interval from a date

Syntax
Declare Function DatePart ( ByRef interval As Const String, ByVal date_serial As Double, ByVal firstdayofweek As Long = fbUseSystem, ByVal firstdayofyear As Long = fbUseSystem ) As Long

Usage
#include "vbcompat.bi"
result = DatePart( interval, date_serial, first_dayofWeek [, first_week_of_year ] )

Parameters
interval
string indicating which part of the date is required
date_serial
the date serial to decode 
firstdayofweek
first day of the week
firstdayofyear
first day of the year

Return Value
Return an integer representing  the interval in the Date Serial.

Description

interval string indicating which part of the date is required is specified as follows:

valueintervalyyyyyearsqquarter(three months)mmonths w weekday ww week of the yearyday of the y


-------------------------------------------------------- KeyPgDateSerial ----

DateSerial
  

	Creates a date serial

Syntax
Declare Function DateSerial ( ByVal year As Long, ByVal month As Long, ByVal day As Long ) As Long

Usage
#include "vbcompat.bi"
result = DateSerial( year, month, day )

Parameters
year
the year
month
the month of the year
day
the day of the month

Return Value
Returns a date serial containing the date formed by the values in the year, month and day parameters.The date serial returned has no decimal part.

Description
The compiler will not recognize this function unless vbcompat.bi or datetime.bi is included.




-------------------------------------------------------- KeyPgDateValue ----

DateValue
  

	Returns a Date Serial from a string

Syntax
Declare Function DateValue ( ByRef date_string As String ) As Double

Usage
#include "vbcompat.bi"
result = DateValue( date_string )

Parameters
date_string
the string to convert to a date serial

Return Value
Returns a Date Serial from a date string.

Description
The date string must be in the format set in the regional settings of the Operating System. 

DateValue( Date() ) will work correctly only if the regional settings specify the same sho


-------------------------------------------------------- KeyPgDay ----

Day
  

	Gets the day of the month from a Date Serial

Syntax
Declare Function Day ( ByVal date_serial As Double ) As Long

Usage
#include "vbcompat.bi"
result = Day( date_serial )

Parameters
date_serial
the date

Return Value
Returns the day of the month from a  variable containing a date in  Date Serial  format. 

Description

The compiler will not recognize this function unless vbcompat.bi is included.




-------------------------------------------------------- KeyPgDddate ----

__DATE__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__DATE__

Description
Substitutes the compiler date in a literal string ("mm-dd-yyyy" format) where used.




-------------------------------------------------------- KeyPgDddateiso ----

__DATE_ISO__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__DATE_ISO__

Description
Substitutes the compiler date in a literal string ("yyyy-mm-dd" format) where used.  This format is in line with ISO 8601 and can be used for lexicographical date comparisons.




-------------------------------------------------------- KeyPgDdfb64bit ----

__FB_64BIT__
  

	Intrinsic define set by the compiler

Syntax
__FB_64BIT__

Description
Define created at compile time if the the compilation target is 64bit, otherwise undefined.




-------------------------------------------------------- KeyPgDdfbargc ----

__FB_ARGC__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_ARGC__

Description
Substituted with the number of arguments passed in on the command line.

__FB_ARGC__ is the name of a parameter passed to the program's implicit main function, and therefore is only de


-------------------------------------------------------- KeyPgDdfbargcount ----

__FB_ARG_COUNT__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_ARG_COUNT__( args... )

Parameters
args...
argument list

Description
Counts the number of arguments in the argument list (args...) and returns the corresponding value.
A value is always returned, with 0 corresponding to an empty argument list.

Because


-------------------------------------------------------- KeyPgDdfbargextract ----

__FB_ARG_EXTRACT__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_ARG_EXTRACT__( index, args... )

Parameters
index
zero-based offset from the first argument (zero or positive integer value)
args...
argument list

Description
Returns the argument from the argument list (args...) corresponding to the index value (index).

If the requested index value refers to an argument that does not exist in the supplied 


-------------------------------------------------------- KeyPgDdfbargleftof ----

__FB_ARG_LEFTOF__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_ARG_LEFTOF__( arg, sep [, ret] )

Parameters
arg
argument
sep
separator, obviously different from the comma (,)
ret
default return if separator not found

Description
Returns the left token of the argument (arg), based on the separator (sep).
(in the expression of the argument, the tokens and the separator must be spaced)

By default, if the defaul


-------------------------------------------------------- KeyPgDdfbargrightof ----

__FB_ARG_RIGHTOF__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_ARG_RIGHTOF__( arg, sep [, ret] )

Parameters
arg
argument
sep
separator, obviously different from the comma (,)
ret
default return if separator not found

Description
Returns the right token of the argument (arg), based on the separator (sep).
(in the expression of the argument, the tokens and the separator must be spaced)

By default, if the defau


-------------------------------------------------------- KeyPgDdfbargv ----

__FB_ARGV__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_ARGV__

Description
Substituted with a pointer to a list of pointers to the zero terminated command line arguments passed in on the command line.

__FB_ARGV__ is the name of a parameter passed to the prog


-------------------------------------------------------- KeyPgDdfbarm ----

__FB_ARM__
  

	Intrinsic define set by the compiler

Syntax
__FB_ARM__

Description
Define created at compile time if the compilation target uses the ARM CPU architecture, otherwise undefined.




-------------------------------------------------------- KeyPgDdfbasm ----

__FB_ASM__
  

	Intrinsic define set by the compiler

Syntax
__FB_ASM__

Description
__FB_ASM__ returns a string equal to "intel" or "att" depending on whether inline assembly blocks should use the Intel format or the GCC/AT&T format.




-------------------------------------------------------- KeyPgDdFBBackend ----

__FB_BACKEND__
  

	Intrinsic define set by the compiler

Syntax
__FB_BACKEND__

Description
Defined to either "gas" or "gcc", depending on which backend was specified via -gen.




-------------------------------------------------------- KeyPgDdFBBigEndian ----

__FB_BIGENDIAN__
  

	Intrinsic define set by the compiler

Syntax
__FB_BIGENDIAN__

Description
Define without a value created at compile time if compiling for a big endian target.

It can be used to compile parts of the program only if the target is big endian.




-------------------------------------------------------- KeyPgDdFBBuildDate ----

__FB_BUILD_DATE__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FB_BUILD_DATE__

Description
Substituted with the quoted string containing the date (MM-DD-YYYY) the compiler was built on.




-------------------------------------------------------- KeyPgDdfbbuilddateiso ----

__FB_BUILD_DATE_ISO__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FB_BUILD_DATE_ISO__

Description
Substituted with the quoted string containing the date (YYYY-MM-DD) the compiler was built on in ISO date format.




-------------------------------------------------------- KeyPgDdfbbuildsha1 ----

__FB_BUILD_SHA1__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FB_BUILD_SHA1__

Description
Substituted by a string of the compiler's source SHA-1 revision.  The value is set using the SHA-1 commit id of the source code revision used to build the compiler binary, if available. 


-------------------------------------------------------- KeyPgDdfbcygwin ----

__FB_CYGWIN__
  

	Intrinsic define set by the compiler

Syntax
__FB_CYGWIN__

Description
Define without a value created at compile time in the Cygwin version of the compiler, or when the -target cygwin command line option is used. It can be used to compile parts of the progr


-------------------------------------------------------- KeyPgDdfbdarwin ----

__FB_DARWIN__
  

	Intrinsic define set by the compiler

Syntax
__FB_DARWIN__

Description
Define without a value created at compile time in the Darwin version of the compiler, or when the -target darwin command line option is used. It can be used to compile parts of the progr


-------------------------------------------------------- KeyPgDdfbdebug ----

__FB_DEBUG__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_DEBUG__

Description
__FB_DEBUG__ indicates if the the generate debug information option -g or the enable intrinsic define __FB_DEBUG__ option Compiler Option: -edebug was specified on the command line at th


-------------------------------------------------------- KeyPgDdfbdos ----

__FB_DOS__
  

	Intrinsic define set by the compiler

Syntax
__FB_DOS__

Description
Define without a value created at compile time if compiling for the DOS target. Default in the DOS hosted version, or active when the -target dos command line option is used. It can be u


-------------------------------------------------------- KeyPgDdfberr ----

__FB_ERR__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_ERR__

Description
__FB_ERR__ indicates if -e, -ex, or -exx was specified on the compiler command line at the time of compilation of a module.

__FB_ERR__ indicates if -earray, -enullptr, or -elocation w


-------------------------------------------------------- KeyPgDdfbeval ----

__FB_EVAL__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_EVAL__( arg )

Parameters
arg
argument

Description
Evaluates the argument (constant-expression) at compile time.

When the argument evaluation produces a string, __FB_EVAL__ returns a string formatted with a preprocessor operator:
- a


-------------------------------------------------------- KeyPgDdfbfpmode ----

__FB_FPMODE__
  

	Intrinsic define set by the compiler

Syntax
__FB_FPMODE__

Description
Defined as "fast" if SSE fast arithmetics is enabled, or "precise" otherwise.




-------------------------------------------------------- KeyPgDdfbfpu ----

__FB_FPU__
  

	Intrinsic define set by the compiler

Syntax
__FB_FPU__

Description
Defined as "sse" if SSE floating point arithmetics is enabled, or "x87" otherwise.




-------------------------------------------------------- KeyPgDdfbfreebsd ----

__FB_FREEBSD__
  

	Intrinsic define set by the compiler

Syntax
__FB_FREEBSD__

Description
Define without a value created at compile time in the FreeBSD version of the compiler, or when the -target freebsd command line option is used. It can be used to compile parts of the pro


-------------------------------------------------------- KeyPgDdfbgcc ----

__FB_GCC__
  

	Intrinsic define set by the compiler

Syntax
__FB_GCC__

Description
Defined to true (-1) if -gen gcc is used, or false (0) otherwise.




-------------------------------------------------------- KeyPgDdfbgui ----

__FB_GUI__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_GUI__

Description
__FB_GUI__ indicates if the executable subsystem option '-s gui' was specified on the command line at the time of compilation.

Returns non-zero (-1) if the executable subsystem option


-------------------------------------------------------- KeyPgDdfbjoin ----

__FB_JOIN__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_JOIN__( arg1, arg2 )

Parameters
arg1, arg2
left (1) and right (2) arguments to join

Description
Joins two token arguments together as one, similar to token pasting operator (##) but more powerfull (will resolve arguments before joining).




-------------------------------------------------------- KeyPgDdfblang ----

__FB_LANG__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_LANG__

Description
__FB_LANG__ indicates which language compatibility option was set at the time of compilation of a module.  By default __FB_LANG__ will be set to "fb".  The language compatibility option 


-------------------------------------------------------- KeyPgDdfblinux ----

__FB_LINUX__
  

	Intrinsic define set by the compiler

Syntax
__FB_LINUX__

Description
Define without a value created at compile time when compiling to the Linux target. Default in the Linux hosted version of the compiler, or active when the -target linux command line opti


-------------------------------------------------------- KeyPgDdFBMain ----

__FB_MAIN__
  

	Intrinsic define set by the compiler

Syntax
__FB_MAIN__

Description
__FB_MAIN__ is defined in the main module and not defined in other modules.

The main module is determined by the compiler as either the first source file listed on the command line or


-------------------------------------------------------- KeyPgDdFBMinVersion ----

__FB_MIN_VERSION__
  

	Macro function to test minimum compiler version

Syntax
#define __FB_MIN_VERSION__( major, minor, patch) _
((__FB_VER_MAJOR__ > major) or _
((__FB_VER_MAJOR__ = major) and ((__FB_VER_MINOR__ > minor) or _
(__FB_VER_MINOR__ = minor and __FB_VER_PATCH__ >= patch_level))))

Usage
__FB_MIN_VERSION__( major, minor, patch)

Parameters
major
minimum major version to test
minor
minimum minor version to test
patch
minimum patch version to test

Return Value
Returns zero (0) if the compiler version is less than the specified version, or non-zero (-1) if the compiler version is greater than or equal to specified version

Description
__FB_MIN_VERSION__ tests for a minimum version of the compiler.




-------------------------------------------------------- KeyPgDdfbmt ----

__FB_MT__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_MT__

Description
__FB_MT__ indicates if the the multithreaded option -mt was specified on the command line at the time of compilation, or whether one of the Threadtcreate or ThreadCall keywords is used m


-------------------------------------------------------- KeyPgDdfbnetbsd ----

__FB_NETBSD__
  

	Intrinsic define set by the compiler

Syntax
__FB_NETBSD__

Description
Define without a value created at compile time in the NetBSD version of the compiler, or when the -target netbsd command line option is used. It can be used to compile parts of the progr


-------------------------------------------------------- KeyPgDdfbopenbsd ----

__FB_OPENBSD__
  

	Intrinsic define set by the compiler

Syntax
__FB_OPENBSD__

Description
Define without a value created at compile time in the OpenBSD version of the compiler, or when the -target openbsd command line option is used. It can be used to compile parts of the pro


-------------------------------------------------------- KeyPgDdfboptimize ----

__FB_OPTIMIZE__
  

	Intrinsic define set by the compiler

Syntax
__FB_OPTIMIZE__

Description
Always defined and will have a value from 0 to 3 (0 by default) to indicate the optimization level passed to the backend compiler via -O.




-------------------------------------------------------- KeyPgDdfboptionbyval ----

__FB_OPTION_BYVAL__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OPTION_BYVAL__

Description
Indicates if parameters to a Function or Sub are passed by reference as with ByRef, or by value as with ByVal by default when the by value / by reference specifier is not explicitly stat


-------------------------------------------------------- KeyPgDdfboptiondynamic ----

__FB_OPTION_DYNAMIC__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OPTION_DYNAMIC__

Description
__FB_OPTION_DYNAMIC__ is defined as true (negative one (-1)) if a recent Option Dynamic statement or '$Dynamic meta-command was issued. Otherwise, it is defined as zero (0).




-------------------------------------------------------- KeyPgDdfboptionescape ----

__FB_OPTION_ESCAPE__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OPTION_ESCAPE__

Description
Indicates if by default, string literals are processed for escape characters when not explicitly prefixed with the $ Operator for non-escaped strings, or the ! Operator for escaped strin


-------------------------------------------------------- KeyPgDdfboptionexplicit ----

__FB_OPTION_EXPLICIT__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OPTION_EXPLICIT__

Description
__FB_OPTION_EXPLICIT__ indicates if Option Explicit has been used previously in the source.  

Returns zero (0) if the option has not been set.  Returns non-zero (-1) if the option has


-------------------------------------------------------- KeyPgDdfboptiongosub ----

__FB_OPTION_GOSUB__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OPTION_GOSUB__

Description
Indicates how GoSub and Return will be handled at compile time. If the option is set (-1) then GoSub is allowed and Return is recognized as return-from-gosub only.  If the option is not 


-------------------------------------------------------- KeyPgDdfboptionprivate ----

__FB_OPTION_PRIVATE__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OPTION_PRIVATE__

Description
 Indicates if by default Function's and Sub's have module scope or global scope when not explicitly specified with Private or Public.

The default scope specifier for functions and sub


-------------------------------------------------------- KeyPgDdfboutdll ----

__FB_OUT_DLL__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OUT_DLL__

Description
__FB_OUT_DLL__ indicates that the specified output file type on the compiler command line at the time of compilation is a shared library.

Returns non-zero (-1) if the output is a shar


-------------------------------------------------------- KeyPgDdfboutexe ----

__FB_OUT_EXE__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OUT_EXE__

Description
__FB_OUT_EXE__ indicates that the specified output file type on the compiler command line at the time of compilation is an executable.

Returns non-zero (-1) if the output is an execut


-------------------------------------------------------- KeyPgDdfboutlib ----

__FB_OUT_LIB__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OUT_LIB__

Description
__FB_OUT_LIB__ indicates that the specified output file type on the compiler command line at the time of compilation is a static library.

Returns non-zero (-1) if the output is a stat


-------------------------------------------------------- KeyPgDdfboutobj ----

__FB_OUT_OBJ__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_OUT_OBJ__

Description
__FB_OUT_OBJ__ indicates that the specified output file type on the compiler command line at the time of compilation is an object module.

Returns non-zero (-1) if the output is an obj


-------------------------------------------------------- KeyPgDdfbpcos ----

__FB_PCOS__
  

	Intrinsic define set by the compiler

Syntax
__FB_PCOS__

Description
Define created at compile time if the OS has filesystem behavior styled like common PC OSes, e.g. DOS, Windows, OS/2, Symbian OS, possibly others. Drive letters, backslashes, that stuff,


-------------------------------------------------------- KeyPgDdfbppc ----

__FB_PPC__
  

	Intrinsic define set by the compiler

Syntax
__FB_PPC__

Description
Define created at compile time if the compilation target uses the PowerPC CPU architecture, otherwise undefined.




-------------------------------------------------------- KeyPgDdfbquote ----

__FB_QUOTE__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_QUOTE__( arg )

Parameters
arg
argument

Description
Converts the argument to a string, similar to stringize operator (#) but can be used anywhere (will expand the argument before conversion).
More precisely, __FB_QUOTE__ returns an over-


-------------------------------------------------------- KeyPgDdfbsignature ----

__FB_SIGNATURE__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FB_SIGNATURE__

Description
Substituted by a signature of the compiler where used.




-------------------------------------------------------- KeyPgDdfbsse ----

__FB_SSE__
  

	Intrinsic define set by the compiler

Syntax
__FB_SSE__

Description
Define without a value created at compile time if SSE floating point arithmetics is enabled.




-------------------------------------------------------- KeyPgDdfbuniqueid ----

__FB_UNIQUEID__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_UNIQUEID__( stack-id )

Parameters
stack-id
the name of the stack to access

Description
Gets the identifier at the top of stack identified by stack-id (the size of the stack is not modified).
(__FB_UNIQUEID_PUSH__ allows to push a new unique identifier on to the stack, and


-------------------------------------------------------- KeyPgDdfbuniqueidpop ----

__FB_UNIQUEID_POP__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_UNIQUEID_POP__( stack-id )

Parameters
stack-id
the name of the stack to pop

Description
Pops an identifier off of stack identified by stack-id (the size of the stack is decreased by 1).
(__FB_UNIQUEID__ allows to get the identifier at the top of the stack, and __FB_UNIQUEI


-------------------------------------------------------- KeyPgDdfbuniqueidpush ----

__FB_UNIQUEID_PUSH__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_UNIQUEID_PUSH__( stack-id )

Parameters
stack-id
the name of the stack to push

Description
Pushes a new unique identifier on to a stack identified by stack-id (the size of the stack is increased by 1).
(__FB_UNIQUEID__ allows to get the identifier at the top of the stack, and


-------------------------------------------------------- KeyPgDdfbunix ----

__FB_UNIX__
  

	Intrinsic define set by the compiler

Syntax
__FB_UNIX__

Description
Define created at compile time if the OS is reasonably enough like UNIX that you can call it UNIX, otherwise undefined.




-------------------------------------------------------- KeyPgDdfbunquote ----

__FB_UNQUOTE__
  

	Intrinsic define (macro) performed by the compiler.

Syntax
__FB_UNQUOTE__( arg )

Parameters
arg
argument

Description
Takes a literal string and converts it back to tokens.
More precisely, __FB_UNQUOTE__ returns a sub-quoted text compared to the one passed through the argument (the argument may already


-------------------------------------------------------- KeyPgDdfbvectorize ----

__FB_VECTORIZE__
  

	Intrinsic define set by the compiler

Syntax
__FB_VECTORIZE__

Description
Defined as the vectorisation level number set by the -vec command-line option.




-------------------------------------------------------- KeyPgDdFBVerMajor ----

__FB_VER_MAJOR__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MAJOR__

Description
__FB_VER_MAJOR__ will return the major version of FreeBASIC currently being used.  For example, the major version is 0 for FreeBASIC 0.90, and will remain 0 until FreeBASIC version 1.0 i


-------------------------------------------------------- KeyPgDdFBVerMinor ----

__FB_VER_MINOR__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_MINOR__

Description
__FB_VER_MINOR__ will return the minor version of FreeBASIC currently being used. For FreeBASIC version 0.90.1, for example, the minor version number is 90.




-------------------------------------------------------- KeyPgDdFBVerPatch ----

__FB_VER_PATCH__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__FB_VER_PATCH__

Description
__FB_VER_PATCH__ will return the patch/subversion/revision number the version of FreeBASIC currently being used. For FreeBASIC 0.18, for example, there were subversions 1, 2, 3, 4, 5 and


-------------------------------------------------------- KeyPgDdfbversion ----

__FB_VERSION__
  

	Intrinsic define (macro string) set by the compiler

Syntax
 __FB_VERSION__

Description
 Substituted by the version number of the compiler where used.




-------------------------------------------------------- KeyPgDdfbwin32 ----

__FB_WIN32__
  

	Intrinsic define set by the compiler

Syntax
__FB_WIN32__

Description
Define without a value created at compile time if compiling to the Win (32-bit or 64-bit) target. Default in Win hosted version, or active if the -target win32 or -target win64 command l


-------------------------------------------------------- KeyPgDdfbx86 ----

__FB_X86__
  

	Intrinsic define set by the compiler

Syntax
__FB_X86__

Description
Define created at compile time if the compilation target uses the X86 or X86_64 CPU architecture, otherwise undefined.




-------------------------------------------------------- KeyPgDdfbxbox ----

__FB_XBOX__
  

	Intrinsic define set by the compiler

Syntax
__FB_XBOX__

Description
Define without a value created at compile time when the -target xbox command line option is used. It can be used to compile parts of the program only if the target is Xbox.




-------------------------------------------------------- KeyPgDdfile ----

__FILE__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FILE__

Description
Substituted with the quoted source file name where used.

An example of normal use is to report wrong values in debugging.




-------------------------------------------------------- KeyPgDdfilenq ----

__FILE_NQ__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FILE_NQ__

Description
Substituted with the non-quoted source file name where used.




-------------------------------------------------------- KeyPgDdfunction ----

__FUNCTION__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FUNCTION__

Description
Substituted with the quoted name of the current function block where used.

Its normal use is to report wrong values in debugging.

If __FUNCTION__ is used at the module level, the f


-------------------------------------------------------- KeyPgDdfunctionnq ----

__FUNCTION_NQ__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__FUNCTION_NQ__

Description
Substituted with the non-quoted name of the current function block where used.

If __FUNCTION_NQ__ is used at the module level, the function name given will be __FB_MAINPROC__ for the 


-------------------------------------------------------- KeyPgDdline ----

__LINE__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__LINE__

Description
Substituted with the current line number of the source file where used.

Its normal use is to report wrong values in debugging.




-------------------------------------------------------- KeyPgDdpath ----

__PATH__
  

	Intrinsic define (macro string) set by the compiler

Syntax
__PATH__

Description
Set to the quoted absolute path of the source file at the time of compilation.




-------------------------------------------------------- KeyPgDdtime ----

__TIME__
  

	Intrinsic define (macro value) set by the compiler

Syntax
__TIME__

Description
Substitutes the compiler time in a literal string (24 clock, "hh:mm:ss" format) where used.




-------------------------------------------------------- KeyPgDeallocate ----

Deallocate
  

	Frees previously allocated memory

Syntax
Declare Sub Deallocate cdecl ( ByVal pointer As Any Ptr )

Usage
Deallocate( pointer )

Parameters
pointer
the address of the previously allocated buffer.

Description
This procedure frees memory that was previously allocated with Allocate. pointer must be a valid pointer. After the procedure returns, pointer will be rendered invalid (pointing to an in


-------------------------------------------------------- KeyPgDeclare ----

Declare
  

	Declares a module-level or member procedure

Syntax
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator op_symbol param_list [ [ ByRef ] As return_type ]

Type T
Declare Constructor [ param_list ]
Declare Destructor
Declare Sub name [ param_list ]
Declare Function name [ param_list ] [ ByRef ] As return_type
Declare Operator name [ param_list ] [ [ ByRef ] As return_type ]
Declare Property name [ ( [ param_list ] ) ] [ [ ByRef ] As return_type ]
End Type

Parameters
param_list
Parenthesized comma-separated list of parameters.
return_type
The return type of a Function, Operator, or Property procedure.
name
The name or symbol of the procedure.
op_symbol
The name or symbol of an operator.
T
The name of a new user-defined type.

Description
The Declare statement declares a Sub, Function, Operator, Constructor, or Destructor.
The procedure can be referred to in code without seeing its definition, although it must be defined


-------------------------------------------------------- KeyPgDefbyte ----

DefByte
  

	Specifies a default data type for a range of variable names

Syntax
DefByte start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefByte specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type Byte if the first letter of their names matc


-------------------------------------------------------- KeyPgDefdbl ----

DefDbl
  

	Specifies a default data type for a range of variable names

Syntax
DefDbl start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefDbl specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type Double if the first letter of their names mat


-------------------------------------------------------- KeyPgDefined ----

defined
  

	Preprocessor function to test if a symbol has been defined

Syntax
defined (symbol_name)

Parameters
symbol_name
Name of the symbol to test

Return Value
Returns non-zero (-1) if the symbol has been defined, otherwise returns zero (0).

Description
Given the symbol name, the defined() preprocessor function returns true if the symbol has been defined - or false if the symbol is unknown.

This is used mainly with #if.

Similar to


-------------------------------------------------------- KeyPgDefint ----

DefInt
  

	Specifies a default data type for a range of variable names

Syntax
DefInt start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefInt specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type Integer if the first letter of their names ma


-------------------------------------------------------- KeyPgDeflng ----

DefLng
  

	Specifies a default data type for a range of variable names

Syntax
DefLng start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefLng specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type Long if the first letter of their names match


-------------------------------------------------------- KeyPgDeflongint ----

DefLongInt
  

	Specifies a default data type for a range of variable names

Syntax
DefLongInt start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefLongInt specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type LongInt if the first letter of their name


-------------------------------------------------------- KeyPgDefshort ----

DefShort
  

	Specifies a default data type for a range of variable names

Syntax
DefShort start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefShort specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type Short if the first letter of their names ma


-------------------------------------------------------- KeyPgDefsng ----

DefSng
  

	Specifies a default data type for a range of variable names

Syntax
DefSng start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefSng specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type Single if the first letter of their names mat


-------------------------------------------------------- KeyPgDefstr ----

DefStr
  

	Specifies a default data type for a range of variable names

Syntax
DefStr start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefStr specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type String if the first letter of their names mat


-------------------------------------------------------- KeyPgDefubyte ----

DefUByte
  

	Specifies a default data type for a range of variable names

Syntax
DefUByte start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefUByte specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type UByte if the first letter of their names ma


-------------------------------------------------------- KeyPgDefuint ----

DefUInt
  

	Specifies a default data type for a range of variable names

Syntax
DefUInt start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefUInt specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type UInteger if the first letter of their names 


-------------------------------------------------------- KeyPgDefulongint ----

Defulongint
  

	Specifies a default data type for a range of variable names

Syntax
Defulongint start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
Defulongint specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type ULongInt if the first letter of their na


-------------------------------------------------------- KeyPgDefushort ----

DefUShort
  

	Specifies a default data type for a range of variable names

Syntax
DefUShort start_letter[-end_letter ][, ...]

Parameters
start_letter
the first letter in the range
end_letter
the last letter in the range

Description
DefUShort specifies that variables and arrays which aren't declared with a data type - or not declared at all - are implicitly declared of type UShort if the first letter of their names 


-------------------------------------------------------- KeyPgDestructor ----

Destructor
  

	Called automatically when a class or user defined type goes out of scope or is destroyed

Syntax
Type typename
field declarations
Declare Destructor ( )
End Type

Destructor typename ( ) [ Export ]
statements
End Destructor

Parameters
typename 
name of the Type of Class

Description
The destructor method is called when a user defined Type or Class variable goes out of scope or is destroyed explicitly with the Delete Statement operator.

typename is the name of the


-------------------------------------------------------- KeyPgDim ----

Dim
  

	Declares a variable

Syntax
Dim [Shared] name1 As DataType [, name2 As DataType, ...]
or
Dim [Shared] As DataType name1 [, name2, ...]
Arrays:
Dim name ( [lbound To] ubound [, ...] ) As DataType
Dim name ( Any [, Any...] ) As DataType
Dim name ( ) As DataType
Initializers:
Dim scalar_symbol As DataType = expression | Any
Dim array_symbol (arraybounds) As DataType = { expression [, ...] } | Any
Dim udt_symbol As DataType = ( expression [, ...] ) | Any

Description
Declares a variable by name and reserves memory to accommodate it.

Variables must be declared before they can be used in the -lang fb dialect or when using Option Explicit in the othe


-------------------------------------------------------- KeyPgDir ----

Dir
  

	Searches for and returns information about an item in the filesystem; performs a directory searchattrib

Syntax
# Include "dir.bi"

Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByRef item_spec As Const String, ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByRef out_attrib As Integer ) As String
Declare Function Dir ( ByVal attrib_mask As Integer = fbNormal, ByVal p_out_attrib As Integer Ptr = 0 ) As String

Usage
result = Dir( item_spec, [ attrib_mask ], out_attrib ] )
result = Dir( item_spec [, [ attrib_mask ] [, p_out_attrib ] ] )
result = Dir( out_attrib )
result = Dir( [ p_out_attrib ] )

Parameters
item_spec
The pattern to match an item's name against.
attrib_mask
The bit mask to match an item's attributes against.
out_attrib
Reference to a bit mask that's assigned each of the found item's attributes, if any.
p_out_attrib
Pointer to a bit mask that's assigned each of the found item's attributes, if any.

Return Value
If no item matching the name item_spec or the attribute mask attrib_mask was found, then out_attrib (or *p_out_attrib) is assigned to zero and an empty string is returned. Otherwise, out_attrib (or *p_out_attrib) is assigned the attribute mask of the item, and the item name, without a path, is returned.

Description
Dir returns the first filesystem item that matches the item_spec passed as an argument. To retrieve the next file items that match this item_spec pattern, call Dir again without this arg


-------------------------------------------------------- KeyPgDo ----
Do   
Description



-------------------------------------------------------- KeyPgDoloop ----

Do...Loop
  

	Control flow statement for looping

Syntax
Do [ { Until | While } condition ]
[ statement block ]
Loop
or
Do
[ statement block ]
Loop [ { Until | While } condition ]

Description
The Do statement executes the statements in the following statement block until/while the condition, if any,  evaluates to true.

If Until is used, the Do statement stops repetition of


-------------------------------------------------------- KeyPgDots ----

... (Ellipsis)
  

	Used in place of procedure parameter to pass a variable number of arguments, or as the upper bound in an array declaration to denote that the number of elements will be determined by the initializer.

Syntax
Declare { Sub | Function } proc_name cdecl ( param_list, ... )  { | [ ByRef ] As return_type }

#define identifier( [ parameters, ] variadic_parameter... ) body

Dim array_symbol ([lbound To] ...) [As datatype] => { expression_list }

Description
Variadic Procedures
The ellipsis (three dots, ...) is used in procedure declarations and definitions to indicate a variable argument list.

A first argument (at least) must always be 


-------------------------------------------------------- KeyPgDouble ----

Double
  

	Standard data type: 64 bit floating point

Syntax
Dim variable As Double

Description
Double is a 64-bit, floating-point data type used to store more precise decimal numbers. They can hold positive values in the range 4.940656458412465e-324 to 1.797693134862316e+308, or n


-------------------------------------------------------- KeyPgDraw ----

Draw
  

	Statement for sequenced pixel plotting

Syntax
Draw [target,] cmd

Parameters
target
the buffer to draw on
cmd
a string containing the sequence of commands

Description
Drawing will take place onto the current work page set via ScreenSet or onto the target Get/Put buffer if specified.
The Draw statement can be used to issue several drawing commands all


-------------------------------------------------------- KeyPgDrawString ----

Draw String
  

	Graphics statement to render text to an image or screen.

Syntax
Draw String [buffer,] [STEP] (x, y), text [,color [, font [, method [, (alpha|blender) [, parameter] ] ] ] ]

Usage
Draw String [buffer,] [STEP] (x, y), text [, color]
Draw String [buffer,] [STEP] (x, y), text , , font [, method [, alpha ] ]
Draw String [buffer,] [STEP] (x, y), text , , font, Custom, blender [, parameter]

Parameters
buffer
the sprite to draw the string on. If this is not supplied, it will be drawn to the screen.
STEP
use relative coordinates. If STEP is added, the x and y coordinates are translated relative to the last drawn point.
x, y
the horizontal / vertical position to draw to, relative to the top left hand corner of the screen (unless STEP is used - see above).  The top left corner of the text will be drawn at this position.
text
the string containing the text to draw
color
if no font is supplied, this allows you to choose the color of the text.  If omitted, the default foreground Color is used.
If a font is supplied, color is ignored, and the font itself specifies the color for each pixel.
font
an image buffer containing a custom font. If no font is supplied, the standard font for the current text resolution is used, and the following parameters are ignored.
method | Custom
specifies how the font characters are drawn on top of the target surface. The same methods as found for the Put statement are allowed, with the only difference that the default method is Trans for this function.  This parameter only applies to custom fonts.
alpha
alpha value, ranging 0-255.  This parameter only applies to the Add or Alpha methods.
blender
custom blender function for the Custom drawing method; see Put (Graphics) statement description for details.  This parameter only applies to the Custom method.
parameter
optional Pointer to be passed to the custom blender function; if omitted, the default value is zero (0).

Description
This graphics keyword prints a string to the screen with pixel positioning, transparent background, and can use an user-supplied font. Draw String does not update any text or graphics cu


-------------------------------------------------------- KeyPgDylibfree ----

DyLibFree
  

	Unloads a dynamic link library from memory

Syntax
Declare Sub DyLibFree ( ByVal libhandle As Any Pointer )

Usage
DyLibFree( libhandle )

Parameters
libhandle
The handle of a library to unload.

Description
DyLibFree is used to release at runtime libraries previously linked to your program with DyLibLoad. The argument is the handle to the library returned by DyLibLoad.




-------------------------------------------------------- KeyPgDylibload ----

DyLibLoad
  

	Loads to a Dynamic Link Library (DLL) into memory at runtime

Syntax
Declare Function DyLibLoad ( ByRef libname As String ) As Any Pointer

Usage
result = DyLibLoad ( libname )

Parameters
libname
A String containing the name of the library to load.

Return Value
The Pointer handle of the library loaded. Zero on error

Description
DyLibLoad is used to link at runtime libraries to your program. This function does the link and returns a handle that must be used with DyLibSymbol when calling a function in the library


-------------------------------------------------------- KeyPgDylibsymbol ----

DyLibSymbol
  

	Returns the address of a function or variable in a dll

Syntax
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByRef symbol As String ) As Any Ptr
Declare Function DyLibSymbol ( ByVal libhandle As Any Ptr, ByVal symbol As Short ) As Any Ptr

Usage
result = DyLibSymbol ( libhandle, symbol )

Parameters
libhandle
The Any Ptr handle of a DLL returned by DyLibLoad
symbol
A String containing name of the function, or variable in the library to return the address of.  In Windows only, can also be a Short containing the ordinal of the function/variable.

Return Value
A Pointer to the function or variable in the library.

If the function fails, the return value is 0.

Description
DyLibSymbol returns a pointer to the variable or function named symbol , in the dll pointed by libhandle. libhandle is obtained by loading the dll with DyLibLoad. The symbol must have be


-------------------------------------------------------- KeyPgElse ----
Else   
Description



-------------------------------------------------------- KeyPgElseif ----
ElseIf   
Description



-------------------------------------------------------- KeyPgEncoding ----

Encoding
  

	Specifies character format of a text file

Syntax
Open filename for {Input|Output|Append} Encoding "utf-8"|"utf-16"|"utf-32"|"ascii" as [#]filenum 

Parameters
filename for {Input|Output|Append}
file name to open for Input, Output, or Append
Encoding "utf-8"|"utf-16"|"utf-32"|"ascii"
indicates encoding type for the file
filenum
unused file number to associate with the open file

Description
Encoding specifies the format for an Unicode text file, so Winput # and Print # use the correct encoding.  If omitted from an Open statement, "ascii" encoding is the default.

Only lit


-------------------------------------------------------- KeyPgEnd ----

End (Statement)
  

	Control flow statement to end the program.

Syntax
Declare Sub End ( ByVal retval As Long = 0 )

Usage
End [ retval ]

Parameters
retval
Error code returned to system.

Description
Used to exit the program, and return to the operating system. An optional integer return value can be specified to indicate an error code to the system. If no return value is given, a va


-------------------------------------------------------- KeyPgEndblock ----

End (Block)
  

	Indicates the end of a compound statement block.

Syntax
End { Sub | Function | If  | Select  | Type  | Enum  | Scope  | With  | Namespace  | Extern  | Constructor  | Destructor  | Operator | Property }

Description
Used to indicate the end of the most recent code block.

The type of the block must be included in the command: one of Sub, Function, If, Select, Type, Enum, Scope, With, Namespace, Ex


-------------------------------------------------------- KeyPgEndif ----
End If   
Description



-------------------------------------------------------- KeyPgEnum ----

Enum
  

	Declares an enumerated type.

Syntax
Enum [typename [ Explicit ] ]
symbolname [= expression] [, ...]
...
End Enum

Parameters
typename
Name of the Enum
symbolname
Name of the constant
expression
A constant expression
Explicit
Requires that symbols must be explicitly referred to by typename.symbolname

Description
Enum, short for enumeration, declares a list of symbol names that correspond to discrete values. If no initial value is given, the first item will be set to 0.  Each subsequent symbol ha


-------------------------------------------------------- KeyPgEnviron ----

Environ
  

	Returns the value of a system environment variable

Syntax
Declare Function Environ ( ByRef varname As Const String ) As String

Usage
result = Environ[$]( varname )

Parameters
varname
The name of an environment variable.

Return Value
Returns the text value of the environmental variable, or the empty string ("") if the variable does not exist.

Description
Environ returns the text value of a system environment variable.




-------------------------------------------------------- KeyPgEof ----

EOF
  

	Checks to see if the end of an open file has been reached

Syntax
Declare Function EOF ( ByVal filenum As Long ) As Long

Usage
result = EOF( filenum )

Parameters
filenum
File number of an open file.

Return Value
Returns true (-1) if end-of-file has been reached, zero (0) otherwise.

Description
When reading from files opened for Input (File Mode), it is useful to know when the end of the file has been reached, thus avoiding errors caused by reading past the ends of files. Use E


-------------------------------------------------------- KeyPgErase ----

Erase
  

	Statement to erase arrays

Syntax
Declare Sub Erase ( array As Any [, ... ] )

Usage
Erase( array0 [, array1 ... arrayN ] )

Parameters
array
An array to be erased.

Description
Using Erase on a fixed-length array resets all elements without freeing the allocated memory.
In case of objects, there is destruction then re-construction.

Using Erase on a variable


-------------------------------------------------------- KeyPgErfn ----

Erfn
  

	Error reporting function

Syntax
Declare Function Erfn ( ) As ZString Ptr

Usage
result = Erfn ( ) 

Return Value
Returns a pointer to the string identifying the function where the error occurred.

Returns NULL if the source is not compiled with the -exx compiler option.

Description
An error reporting function returning a pointer to the name of the function.




-------------------------------------------------------- KeyPgErl ----

Erl
  

	Error handling function to return the line where the error occurred

Syntax
Declare Function Erl ( ) As Integer

Usage
result = Erl

Return Value
An Integer return value containing the line number where the last error occurred.

Description
Erl will return the line number where the last error occurred. If no error has occurred, Erl will return 0.

Erl cannot always be used effectively -- QB-like error handling must be ena


-------------------------------------------------------- KeyPgErmn ----

Ermn
  

	Error reporting function

Syntax
Declare Function Ermn ( ) As ZString Ptr

Usage
result = Ermn ( ) 

Return Value
Returns a pointer to the string identifying the module where the error occurred.

Returns NULL if the source is not compiled with the -exx compiler option.

Description
An error reporting function returning a pointer to the name of the module.




-------------------------------------------------------- KeyPgErr ----

Err
  

	Get or set the run-time error number

Usage
result = Err( )
or
Err = number

Description
The Err() function returns the FreeBASIC run-time error number (a 32 bit Long) which can be set by the built-in statements and functions, or by the program through Err = number or Error.


-------------------------------------------------------- KeyPgError ----

Error
  

	Error handling statement to force an error to be generated

Syntax
Declare Sub Error ( errno As Integer )

Usage
Error number

Parameters
number
The error number to generate

Description
Error invokes the error handler specified with On Error or, in case there was none set, aborts the program, printing an error message similar to those generated by the compiler's -exx ru


-------------------------------------------------------- KeyPgEvent ----

Event (Message Data From Screenevent)
  

	Pre-defined structure (UDT) from fbgfx.bi used by ScreenEvent to return event data 

Syntax
#include once "fbgfx.bi"
using fb
Dim variable As Event

Description
Here we report the EVENT structure for clarity:


Type Event Field = 1
    Type As Long
    Union
        Type
            scancode As Long
            ascii As Long
        End


-------------------------------------------------------- KeyPgExec ----

Exec
  

	Temporarily transfers execution to an external program

Syntax
Declare Function Exec ( ByRef program As Const String, ByRef arguments As Const String ) As Long

Usage
result = Exec( program, arguments )

Parameters
program
The file name (including file path) of the program (executable) to transfer control to.
arguments
The command-line arguments to be passed to the program.

Return Value
The exit status of the program, or negative one (-1) if the program could not be executed.

Description
Transfers control over to an external program. When the program exits, execution resumes immediately after the call to Exec.




-------------------------------------------------------- KeyPgExepath ----

ExePath
  

	Returns the path of the running program

Syntax
Declare Function ExePath ( ) As String

Usage
result = ExePath

Return Value
A String variable set to the path of the running program.

Description
Returns the path (the location) of the calling program. This is not necessarily the same as CurDir.




-------------------------------------------------------- KeyPgExit ----

Exit
  

	Control flow statement to exit a compound statement block

Syntax
Exit {Do | For | While | Select }
Exit {Sub | Function | Operator | Constructor | Destructor | Property }

Exit {Do [, Do [ , ...] ] |
For [, For [ , ...] ] | 
While [, While, [...] ] | 
Select [, Select [ , ...] ] }


Description
Leaves a code block such as a Sub, Function, Operator, Constructor, Destructor, Property, Do...Loop, For...Next, While...Wend, or a  Select Case block. The execution skips the rest of th


-------------------------------------------------------- KeyPgExp ----

Exp
  

	Returns e raised to the power of a given number

Syntax
Declare Function Exp cdecl ( ByVal number As Double ) As Double

Usage
result = Exp( number )

Parameters
number
The Double number that e is raised to the power of.

Return Value
Returns the Double value of e raised to power of number.

Description
The mathematical constant e, also called Euler's constant, is the base of the Exp and Log and is an irrational and transcendental number. The value of e to twenty significant figures is:


-------------------------------------------------------- KeyPgExport ----

Export
  

	Definition specifier to indicate that a procedure in a DLL should be visible from other programs

Syntax
{ Sub | Function } proc_name ( argumentlist ) [ [ ByRef ] As datatype ] Export

Description
If a function is defined with this clause in a DLL, it is added to the public export table, so external programs can dynamically link to it using DyLibSymbol.
(specifier to be put at th


-------------------------------------------------------- KeyPgExtends ----

Extends
  

	Specifies a base type from which to derive a new type

Syntax
Type|Union typename Extends base_typename
...
End Type|Union

Description
Extends declares typename to be derived from base_typename. The derived user-defined type, typename, inherits fields and methods of the base_typename base type. typename objects may be u


-------------------------------------------------------- KeyPgExtendsWstring ----

Extends Wstring
  

	Specifies a type which inherits a Wstring behavior

Syntax
Type|Union typename Extends Wstring [, base_typename]
...
End Type|Union

Description
Extends Wstring declares typename to inherit properties and behaviors of a WString. Purpose is to allow users to create custom string types (with i.e. dynamic memory management) that can


-------------------------------------------------------- KeyPgExtendsZstring ----

Extends Zstring
  

	Specifies a type which inherits a Zstring behavior

Syntax
Type|Union typename Extends Zstring [, base_typename]
...
End Type|Union

Description
Extends Zstring declares typename to inherit properties and behaviors of a ZString. Purpose is to allow users to create custom string types (with i.e. dynamic memory management) that can


-------------------------------------------------------- KeyPgExtern ----

Extern
  

	Declares a variable, array or object having external linkage

Syntax
Extern [ Import ] symbolname[ (subscripts) ] [ Alias "aliasname" ] As DataType [, ...]

Parameters
symbolname
The name of the variable, array or object.
aliasname
An alternate external name for the variable, array or object.

Description
Declares symbolname as an external name, meaning it is global to external modules including those to be compiled as static and dynamic libraries (DLLs).
Extern only declares variables, 


-------------------------------------------------------- KeyPgExternBlock ----

Extern...End Extern
  

	Statement block to allow calling of functions compiled for specific languages or platforms.

Syntax
Extern { "C" | "C++" | "Windows" | "Windows-MS" | "rtlib" } [ Lib "libname" ]
declarative statements
End Extern

Description
Extern blocks provide default calling conventions for procedures and mandate a certain name decoration.

Extern "C" blocks provide a default cdecl calling convention to procedures, and


-------------------------------------------------------- KeyPgFalse ----

False
  

	Intrinsic constant set by the compiler

Syntax
Const False As Boolean

Description
Gives the False Boolean value where used.




-------------------------------------------------------- KeyPgFBArray ----
Fbarray (Array Descriptor Structure And Access)   
Description



-------------------------------------------------------- KeyPgFBMemcopy ----

Fb_Memcopy
  

	Copies a block of memory from a location to another

Syntax
Declare Function fb_memcopy cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

Usage
[result =] fb_memcopy( dst, src, bytes )

Parameters
dst
starting address of destination memory
src
starting address of source memory
bytes
number of bytes to copy

Return Value
The starting address of destination memory is returned.

Description
fb_memcopy copies a given number of bytes from the memory location src to the memory location dst.
Each starting address is taken from a reference to a variable or array element.
The m


-------------------------------------------------------- KeyPgFBMemcopyclear ----

fb_MemCopyClear
  

	Copies the first part of a block of memory from a location to another and clears the rest

Syntax
Declare Sub fb_MemCopyClear ( ByRef dst As Any, ByVal dstlen As UInteger, ByRef src As Any, ByVal srclen As UInteger )

Usage
fb_memcopy( dst, dstlen, src, srclen )

Parameters
dst
starting address of destination memory
dstlen
number of bytes to write
src
starting address of source memory
srclen
number of first bytes to copy (other are cleared)

Description
fb_memcopycopy copies a given number of bytes (dstlen) from the memory location src to the memory location dst, but only the first srclen bytes are really copied and the rest is cleared 


-------------------------------------------------------- KeyPgFBMemmove ----

Fb_Memmove
  

	Copies a block of memory from a location to another

Syntax
Declare Function fb_memmove cdecl ( ByRef dst As Any, ByRef src As Any, ByVal bytes As UInteger ) As Any Ptr

Usage
[result =] fb_memmove( dst, src, bytes )

Parameters
dst
starting address of destination memory
src
starting address of source memory
bytes
number of bytes to copy

Return Value
The starting address of destination memory is returned.

Description
fb_memmove copies a given number of bytes from the memory location src to the memory location dst. Each starting address is taken from a reference to a variable or array element.
Copyin


-------------------------------------------------------- KeyPgField ----

Field
  

	Specifies field alignment.

Syntax
Type|Union typename Field = { 1 | 2 | 4 }
...
End Type|Union

Description
Field can be used to pack Types or Unions more tightly than the default layout. The most commonly used value is Field = 1, which causes the Type or Union to be packed as tightly as possi


-------------------------------------------------------- KeyPgFileattr ----

FileAttr
  

	Returns information about an open file number

Syntax
Declare Function FileAttr ( ByVal filenum As Long, ByVal returntype As Long = 1 ) As Integer

Usage
#include "file.bi"
result = FileAttr( filenum, [ returntype ] )

or

#include "vbcompat.bi"
result = FileAttr( filenum, [ returntype ] )

Parameters
filenum
The file number of a file or device opened with Open
returntype
An integer value indicating the type of information to return.

Return Value
A value associated with the return type, otherwise 0 on error.

Description
Information about the file number is returned based on the supplied returntype
ValueDescriptionconstant1File ModefbFileAttrMode2File HandlefbFileAttrHandle3EncodingfbFileAttrEncoding
F


-------------------------------------------------------- KeyPgFilecopy ----

FileCopy
  

	Copies a file

Syntax
Declare Function FileCopy ( ByVal source As ZString Ptr, ByVal destination As ZString Ptr ) As Long

Usage
#include "file.bi"
FileCopy source, destination

or

#include "file.bi"
result = FileCopy( source, destination )

Parameters
source
A String argument specifying the filename of the file to copy from.  This file must exist.
destination
A String argument specifying the filename of the file to copy to.  This file will be overwritten if it exists.  This file should not be currently referenced by any open file handles.

Return Value
Returns 0 on success, or 1 if an error occurred.

Description
Copies the contents of the source file into the destination file, overwriting the destination file if it already exists.
It is necessary to #include either "file.bi" or "vbcompat.bi" in


-------------------------------------------------------- KeyPgFiledatetime ----

FileDateTime
  

	Returns the last modified date and time of a file as Date Serial 

Syntax
Declare Function FileDateTime ( ByVal filename As ZString Ptr ) As Double

Usage
#include "file.bi"
result = FileDateTime( filename )

or

#include "vbcompat.bi"
result = FileDateTime( filename )

Parameters
filename
Filename to retrieve date and time for.

Return Value
Returns a Date Serial.

Description
Returns the file's last modified date and time as Date Serial.




-------------------------------------------------------- KeyPgFileexists ----

FileExists
  

	Tests the existence of a file

Syntax
Declare Function FileExists ( ByVal filename As ZString Ptr ) As Long

Usage
#include "file.bi"
result = FileExists( filename )

or

#include "vbcompat.bi"
result = FileExists( filename )

Parameters
filename
Filename to test for existence.

Return Value
Returns non-zero (-1) if the file exists, otherwise returns zero (0).

Description
FileExists tests for the existence of a file.
Internally, it may issue an Open() and a Close() function, which may have consequences - eg, any existing Lock(s) on the file may be releas


-------------------------------------------------------- KeyPgFileflush ----

FileFlush
  

	Flush application stream buffers to system, or system buffers to file

Syntax
Declare Function FileFlush ( ByVal filenum As Long = -1, ByVal systembuffers As Long = 0 ) As Long

Usage
#include "file.bi"
result = FileFlush()
result = FileFlush( filenum )
result = FileFlush( filenum, systembuffers )

Parameters
filenum
File number of bound file or device.  If not given, or -1, then flush all open files.
systembuffers
If non-zero, flush system buffers to physical device.  Default is zero (0).

Return Value
Returns zero (0) for success or an error code if file buffers could not be flushed.

Description
FileFlush writes application buffered output to the underlying stream, and if systembuffers is non-zero, to the underlying physical device as well.

In the form FileFlush(filenum), the


-------------------------------------------------------- KeyPgFilelen ----

FileLen
  

	Finds the length of a file given its filename

Syntax
Declare Function FileLen ( filename As String ) As LongInt

Usage
#include "file.bi"
result = FileLen(filename)

or

#include "vbcompat.bi"
result = FileLen(filename)

Parameters
filename
A String argument specifying the filename of the file whose length to return.

Description
Returns the size in bytes of the file specified by filename.




-------------------------------------------------------- KeyPgFileseteof ----

FileSetEof
  

	Sets the length of a open file bound to a file number

Syntax
Declare Function FileSetEof ( ByVal filenum As Long ) As Long

Usage
#include "file.bi"
result = FileSetEof(fnum)

Parameters
filenum
File number of bound file or device.

Return Value
Returns zero (0) for success or an error code if the end of file (file size) could not be set.

Description
FileSetEof Sets the end of file based on the current file position.  File position as in Seek is one based.

When the current file position is before the end of the file, the file is t


-------------------------------------------------------- KeyPgFix ----

Fix
  

	Returns the integer part of a number, rounding towards zero

Syntax
Declare Function Fix ( ByVal number As Single ) As Single
Declare Function Fix ( ByVal number As Double ) As Double
Declare Function Fix ( ByVal number As Integer ) As Integer
Declare Function Fix ( ByVal number As UInteger ) As UInteger

Usage
result = Fix( number )

Parameters
number
the floating-point number to truncate

Return Value
Returns the integer part of number, rounding towards zero.

Description
Equivalent to: Sgn(number) * Int(Abs(number)).  For example, Fix(1.3) will return 1.0, and Fix(-4.9) will return -4.0.  For integer types, the number is returned unchanged.

Note: this


-------------------------------------------------------- KeyPgFlip ----

Flip
  

	Changes the current video display page

Syntax
Declare Function Flip ( ByVal frompage As Long = -1, ByVal topage As Long = -1 ) As Long

Usage
Flip [ frompage ] [, topage ]

Parameters
frompage
previous page
topage
new page to display

Return Value
Returns zero (0) if successful, or a non-zero error code to indicate a failure.

Description
In normal graphics mode, Flip is an alias for PCopy and ScreenCopy. See ScreenCopy for details.

In OpenGL mode, Flip does a hardware page flip and displays the contents of the backbuf


-------------------------------------------------------- KeyPgFor ----
For   
Description



-------------------------------------------------------- KeyPgFormat ----

Format
  

	Formats a number in a specified format

Syntax
Declare Function Format ( ByVal numerical_expression As Double, ByRef formatting_expression As Const String = "" ) As String

Usage
#include "string.bi"
result = Format[$]( numerical_expression, formatting_expression )

Parameters
numerical_expression
number to format
formatting_expression
formatting pattern

Return Value
Format returns a string with the result of the numerical expression formatted as indicated in the formatting expression.
The formatting expression is a string that can yield numeric or date-time values.

Description
To recover meaningful date-time values the numerical expression must be a date serial obtained from the appropriate functions.
This function is part of FreeBASIC, however it is not reco


-------------------------------------------------------- KeyPgFornext ----

For...Next
  

	Control flow statement for looping

Syntax
For iterator [ As datatype ] = startvalue To endvalue [ Step stepvalue ]
[ statement block ]
Next [ iterator ]

Parameters
iterator
a variable identifier that is used to iterate from an initial value to an end value
datatype
If specified, the variable iterator will automatically be declared with the type datatype
startvalue
an expression that denotes the starting value of the iterator
endvalue
an expression used to compare with the value of the iterator
stepvalue
an expression that is added to the iterator after every iteration

Description
A For...Next loop initializes iterator to startvalue, then executes the statement block, incrementing iterator by stepvalue until it exceeds endvalue. If stepvalue is not explicitly give


-------------------------------------------------------- KeyPgFrac ----

Frac
  

	Returns the decimal part of a number

Syntax
Declare Function Frac ( ByVal number As Double ) As Double
Declare Function Frac ( ByVal number As Integer ) As Integer
Declare Function Frac ( ByVal number As UInteger ) As UInteger

Usage
result = Frac( number )

Parameters
number
the number or expression to get the fraction part of.

Return Value
Returns the fractional part of a number or expression.

Description
Equivalent to: (number - Fix(number)).
For example, Frac(4.25) will return 0.25, and Frac(-1.75) will return -0.75.  For integer types, the value 0 is always returned.

The Frac unary


-------------------------------------------------------- KeyPgFre ----

Fre
  

	Returns the amount of free memory available

Syntax
Declare Function Fre ( ByVal value As Long = 0 ) As UInteger

Usage
result = Fre( [ value ] )

Parameters
value
Unused dummy parameter kept for backward compatibility; can be ignored.

Return Value
Returns the amount of free memory, in bytes.

Description
Returns the free memory (ram) available, in bytes.




-------------------------------------------------------- KeyPgFreefile ----

FreeFile
  

	Returns a free file number

Syntax
Declare Function FreeFile ( ) As Long

Usage
result = FreeFile

Return Value
The next available file number, if any, otherwise zero (0).

Description
Returns the number of the next free file number with valid values 1 to 255, or 0 if there are already 255 files opened. This value is a required argument to Open a file. FreeFile is usef


-------------------------------------------------------- KeyPgFunction ----

Function
  

	Defines a procedure returning a value

Syntax
[Public|Private] Function identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]
statements
...
{ {Return [return_value]}|{Function = return_value}|{identifier = return_value} }
...
End Function

Parameters
identifier: the name of the function
external_identifier: externally visible (to the linker) name enclosed in quotes
parameter_list: parameter[, parameter[, ...]]
parameter: [ByRef|ByVal] identifier [As type] [= default_value]
identifier: the name of the variable referenced in the function.  If the argument is an array then the identifier must be followed by an empty parenthesis. 
type: the type of variable
default_value: the value of the argument if none is specified in the call
return_type: the type of variable returned by the function
statements: one or more statements that make up the function body
return_value: the value returned from the function

Description
A function defines a block of code which can be executed with a single statement (a function call), and provide a value back to the caller when finished (a return value). 	There are seve


-------------------------------------------------------- KeyPgFunctionPtr ----

Function Pointer
  

	Data type that stores a pointer to a Function procedure returning a value

Syntax
Dim variable As Function [cdecl|pascal|stdcall] [( [parameter_list] )] [ ByRef ] [As return_type] [= initializer]

Parameters
parameter_list: parameter[, parameter[, ...]]
parameter: [ByRef|ByVal] identifier [As type] [= default_value]
identifier: the name of the variable referenced in the function
type: the type of variable
default_value: the value of the argument if none is specified in the call
return_value: the value returned from the function
intializer: address of a function to set as the initial value

Description
A Function pointer is a procedure pointer that stores the memory location of compiled code that returns a value.  If no intializer is given the default initial value is zero (0).

The 


-------------------------------------------------------- KeyPgGetfileio ----

Get (File I/O)
  

	Reads data from a file to a buffer

Syntax
Get #filenum As Long, [position As LongInt], ByRef data As Any [, [amount As UInteger] [, ByRef bytesread As UInteger] ]
Get #filenum As Long, [position As LongInt], data As String [, , ByRef bytesread As UInteger ]
Get #filenum As Long, [position As LongInt], data() As Any [, , ByRef bytesread As UInteger ]

Usage
Get #filenum, position, data [, [amount] [, bytesread ] ]
varres = Get (#filenum, position, data [, [amount] [, bytesread ] ] )

Parameters
filenum
The value passed to Open when the file was opened.
position
The position where the read must start. If the file was opened For Random, the position is in records; otherwise, it is in bytes. If omitted, reading starts at the present file pointer position.  The position is 1-based: i.e. first record or byte of a file is at position 1.
If position is omitted or zero (0), file reading will start from the current file position.
data
The buffer where data is written. It can be a numeric variable, a string, an array, a user defined type or a dereferenced pointer. The read operation will try to fill completely the variable, unless the EOF is reached.
When getting arrays, data should be followed by an empty pair of brackets: "()".  Get will read data for all of the values in the array.  amount is not allowed.
When getting Strings, the number of bytes read is the same as the number of bytes in the string data. amount is not allowed.
Note: If you want to read values into a buffer, you should NOT pass a pointer to the buffer; instead you should pass the first variable in the buffer (this can be done by dereferencing the pointer with Operator * (Value Of)). If you pass a pointer directly, then Get will overwrite the pointer variable, not the memory it points to.
amount
Makes Get read amount consecutive variables from file to memory, i.e. it reads (amount * SizeOf(data) ) bytes of data from file into the memory starting at data's memory location.  If amount is omitted it defaults to 1, meaning that Get just reads a single variable.
bytesread
An unsigned integer variable to accept the result of the number of bytes read successfully from the file.

Return Value
Get() returns a 32 bit Long: a zero (0) on success; non-zero on error.
Note: if EOF (end of file) is reached while reading, Get will return success.  The amount of bytes actually read can be checked by passing a bytesread variable.

Description
Reads binary data from a file to a buffer variable

Get can be used as a function, and will return 0 on success or an error code on failure.	

For files opened in Random mode, the si


-------------------------------------------------------- KeyPgGetgraphics ----

Get (Graphics)
  

	Gets a copy of a portion of the current work page or an image buffer

Syntax
Get [source,] [STEP](x1, y1) - [STEP](x2, y2), dest

Parameters
source
the address of an image buffer. If it's omitted, the current work page is copied.
STEP
indicates that the following co-ordinates are not absolute co-ordinates.
[STEP](x1, y1)
co-ordinates of the upper-left corner of the sub-image to copy.  STEP indicates that (x1, y1) offsets are relative to the current graphics cursor position.
[STEP](x2, y2)
co-ordinates of the lower-right corner of the sub-image to copy.  STEP indicates that x2 and y2 are relative to x1 and y1, respectively.
dest
the address of a previously allocated buffer to store the image data.

Description
Get copies a rectangular portion of the current work page specified by the co-ordinates (x1,  y1) and (x2,  y2), which represent the upper-left and lower-right corners of the rectangle, 


-------------------------------------------------------- KeyPgGetjoystick ----

GetJoystick
  

	Reads buttons and axis information from attached gaming devices

Syntax
Declare Function GetJoystick ( ByVal id As Long, ByRef buttons As Integer = 0, ByRef a1 As Single = 0, ByRef a2 As Single = 0, ByRef a3 As Single = 0, ByRef a4 As Single = 0, ByRef a5 As Single = 0, ByRef a6 As Single = 0, ByRef a7 As Single = 0, ByRef a8 As Single = 0 ) As Integer

Usage
result = GetJoystick( id[, buttons[, a1[, a2[, a3[, a4[, a5[, a6[, a7[, a8]]]]]]]]] )

Parameters
id
the device id number (0 - 15)
buttons
the button status
a1
first axis value
a2
second axis value
a3
third axis value
a4
fourth axis value
a5
fifth axis value
a6
sixth axis value
a7
seventh axis value
a8
eighth axis value

Return Value
0 on success or 1 on failure.  All of the axis positions are returned in floating point format.

Description
GetJoystick will retrieves the button state, and the axis positions for up to 8 axes, for the joystick determined by id, a number between 0 and 15. Buttons are stored in a similar manner


-------------------------------------------------------- KeyPgGetkey ----

GetKey
  

	Returns the ascii code of the first key in the keyboard buffer

Syntax
Declare Function GetKey ( ) As Long

Usage
result = GetKey

Return Value
The value of the ascii code returned.

Description
It returns the ascii code of the first key in the keyboard buffer. The key is removed from the buffer. If no key is present, GetKey waits for it.
For extended keys (returning two charac


-------------------------------------------------------- KeyPgGetmouse ----

GetMouse
  

	Retrieves the status of the mouse pointing device

Syntax
Declare Function GetMouse ( ByRef x As Long, ByRef y As Long, ByRef wheel As Long = 0, ByRef buttons As Long = 0, ByRef clip As Long = 0 ) As Long
Declare Function GetMouse ( ByRef x As LongInt, ByRef y As LongInt, ByRef wheel As LongInt = 0, ByRef buttons As LongInt = 0, ByRef clip As LongInt = 0 ) As Long

Usage
result = GetMouse (x, y [, [ wheel ] [, [ buttons ] [, [ clip ]]]])

Parameters
x
x coordinate value
y
y coordinate value
wheel
scroll wheel value
buttons
button status
clip
clip status

Return Value
0 on success, or 1 on error (for example because the mouse is outside the graphic window) or on failure. (sets a runtime error)

Description
GetMouse retrieves the mouse position and buttons status; information is returned in the variables passed to this function by reference. If a mouse is not available, all variables will c


-------------------------------------------------------- KeyPgGosub ----

GoSub
  

	Control flow statement to use a section of code and return.

Syntax
GoSub label

Description
Execution jumps to a subroutine marked by a line label. Always use Return to exit a GoSub,  execution will continue  on next statement after GoSub. 

The line label where GoSub jumps m


-------------------------------------------------------- KeyPgGoto ----

Goto
  

	Control flow statement to jump to another part of the program

Syntax
Goto label

Description
Jumps code execution to a line label.

When using Goto label to exit a scope, any local variables defined in that scope are destroyed (destructors are called).

Usage of Goto label m


-------------------------------------------------------- KeyPgHex ----

Hex
  

	Returns the hexadecimal of the given number

Syntax
Declare Function Hex ( ByVal number As UByte ) As String
Declare Function Hex ( ByVal number As UShort ) As String
Declare Function Hex ( ByVal number As ULong ) As String
Declare Function Hex ( ByVal number As ULongInt ) As String
Declare Function Hex ( ByVal number As Const Any Ptr ) As String

Declare Function Hex ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Hex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

Usage
result = Hex[$]( number [, digits ] )

Parameters
number
A number or expression evaluating to a number.  A floating-point number will be converted to a LongInt.
digits
Optional number of digits to return.

Return Value
A String containing the unsigned hexadecimal representation of number.

Description
Returns the unsigned hexadecimal string representation of the integer number. Hexadecimal digits range from 0-9, or A-F.

If you specify digits > 0, the result string will be exactly t


-------------------------------------------------------- KeyPgHibyte ----

HiByte
  

	Gets the second byte of the operand.

Syntax
#define HiByte( expr ) ((Cast(UInteger, expr) And &h0000FF00) Shr 8)

Usage
result = HiByte( expr )

Parameters
expr
A numeric expression, converted to an UInteger value.

Return Value
Returns the value of the high byte of the low 16bit word of expr.

Description
This macro converts the numeric expression expr to an UInteger value, then expands to an UInteger representing the value of its second byte - that is the most-significant (high) byte of 


-------------------------------------------------------- KeyPgHiword ----

HiWord
  

	Gets the second 16bit word of the operand.

Syntax
#define HiWord( expr ) ((Cast(UInteger, expr) and &hFFFF0000) Shr 16)

Usage
result = HiWord( expr )

Parameters
expr
A numeric expression, converted to an UInteger value.

Return Value
Returns the value of the high 16bit word of the low 32bit dword of expr.

Description
This macro converts the numeric expression expr to an UInteger value, then expands to an UInteger representing the value of its second 16bit word - that is the most-significant (high) 16


-------------------------------------------------------- KeyPgHour ----

Hour
  

	Gets the hour of day from a Date Serial 

Syntax
Declare Function Hour ( ByVal date_serial As Double ) As Long

Usage
#include "vbcompat.bi"
result = Hour( dateserial )

Parameters
date_serial
the date serial

Return Value
Returns the hour from a variable containing a date in Date Serial format.

Description
The compiler will not recognize this function unless vbcompat.bi is included.




-------------------------------------------------------- KeyPgIfthen ----

If...Then
  

	Control flow statement for conditional branching

Syntax
If expression Then [statement(s)] [Else [statement(s)]] [End If]
or
If expression Then : [statement(s)] [Else [statement(s)]] : End If
or
If expression Then
[statement(s)]
[ ElseIf expression Then ]
[statement(s)]
[ Else ]
[statement(s)]
End If

Remark: EndIf (without blank) is also supported like in QB for backward compatibility.

Description
If...Then is a way to make decisions.
It is a mechanism to execute code only if a condition is true, and can provide alternative code to execute based on more conditions:
 Execute code


-------------------------------------------------------- KeyPgIif ----

IIf
  

	Conditional function that returns one of two values.

Syntax
IIf ( condition, expr_if_true, expr_if_false )

Parameters
condition
The condition to test.
A non-zero value evaluates as true, while a value of zero evaluates as false.
expr_if_true
An expression to evaluate and return if condition is true.
It must return:
 a numeric value, which can be an integer, floating point number or a pointer, including Boolean,
 or a string value,
 or an UDT value.
expr_if_false
An expression to evaluate and return if condition is false.
It must be same type as expr_if_true (either numeric, either string or UDT).

Return Value
if condition is non-zero, expr_if_true, otherwise expr_if_false

Description
IIf returns a different numeric or string or UDT value (not a reference) depending of the result of a conditional expression evaluated at run-time. Its typical use is in the middle of an


-------------------------------------------------------- KeyPgImageConvertRow ----

ImageConvertRow
  

	Converts a row of image data into another color depth

Syntax
Declare Sub ImageConvertRow ( ByVal src As Any  Ptr, ByVal src_bpp As Long, ByVal dst As Any  Ptr, ByVal dst_bpp As Long, ByVal width As Long, ByVal isrgb As Long = 1 )

Usage
ImageConvertRow( src, src_bpp, dst, dst_bpp, width [, isrgb ] )

Parameters
src
The address of the start of the source row.  The source can either be a full-color image with a bit depth of 24 or 32 bits per pixel, or a paletted image with a bit depth of 1-8 bits per pixel.  Converting a paletted image will only work properly if you are in a screen mode that is using the correct palette for the image when you do the conversion.
src_bpp
The number of bits per pixel in the source row.  1-8, 24 and 32.
dst
The address of the start of the destination row.  The image can be a full-color image of 16 or 32 bits per pixel.  If the source is a paletted image, the destination can also be a paletted image of 1 to 8 bits per pixel.
dst_bpp
The number of bits per pixel in the destination row.  Valid values for this are 1-8, 16 and 32.
width
The length of the row in pixels.
isrgb
A value of zero indicates that the Red and Blue channels are the other way round in the source image.  Use this switch if you want the Red and Blue channels to be swapped in the conversion.

Description
Copies the row of an image from one memory location to another, converting the color information in each pixel to match the destination image.




-------------------------------------------------------- KeyPgImagecreate ----

ImageCreate
  

	Allocates and initializes storage for an image

Syntax
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color ) As Any Ptr
Declare Function ImageCreate ( ByVal width As Long, ByVal height As Long, ByVal color As ULong = transparent_color, ByVal depth As Long ) As Any Ptr

Usage
result = ImageCreate( width, height [, [ color ][, depth ]] )

Parameters
width
The desired width, in number of pixels.
height
The desired height, in number of pixels.
color
The pixel value to fill the area of the image.
depth
The desired color depth, in bits per pixel.

Return Value
If the image could not be created, NULL (0) is returned, otherwise, the address of the image is returned. ImageCreate must be called after graphic mode initialization, else it returns 0.

Consequently, in case of Shared variable declaration, ImageCreate cannot be used as integrated initializer, even inside an Udt (in member field or constructor), because the initialization value (of shared variable) is set at the start of the program before any user code is run. The image allocation call must be in a separated executable instruction, and after the graphic mode initialization.

Description
Both procedures attempt to allocate memory for an image of the specified width and height. If not successful, NULL (0) is returned. Otherwise, an image of that size is created and initia


-------------------------------------------------------- KeyPgImageDestroy ----

ImageDestroy
  

	Destroys and deallocates storage for an image

Syntax
Declare Sub ImageDestroy ( ByVal image As Any Ptr )

Usage
ImageDestroy( image )

Parameters
image
The address of the image to destroy.

Description
Destroys the image pointed to by image, which must be an address returned from a call to ImageCreate.

Calling ImageDestroy on a null pointer induces no action.




-------------------------------------------------------- KeyPgImageInfo ----

ImageInfo
  

	Retrieves information about an image

Syntax
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As Long = 0, ByRef height As Long = 0, ByRef bypp As Long = 0, ByRef pitch As Long = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long
Declare Function ImageInfo ( ByVal image As Const Any Ptr, ByRef width As LongInt, ByRef height As LongInt, ByRef bypp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef pixdata As Any Ptr = 0, ByRef size As LongInt = 0 ) As Long

Usage
in the LONG (or INTEGER<32>) version of the function:
result = ImageInfo( image [, [ width ] [, [ height ] [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]]]] )
in the LONGINT (or INTEGER<64>) version of the function:
result = ImageInfo( image , width , height [, [ bypp ] [, [ pitch ] [ , [ pixdata ] [, size ]]]] )

Parameters
image
The address of the image.
width
Stores the width of the image, in pixels.
height
Stores the height of the image, in pixels.
bypp
Stores the bytes per pixel of the image - i.e. the size of a single pixel, in bytes.
pitch
Stores the pitch of the image - i.e. the size of each scanline (row), in bytes.  Note that this may be more than just width * bypp, because the scanlines may be padded to allow them to be aligned better in memory.
pixdata
Stores the address of the start of the first scanline of the image.
size
Stores the size of the image in memory, in bytes.

Return Value
If image doesn't point to a valid image, one (1) is returned. Otherwise, width, height, bypp, pitch, pixdata and size are assigned appropriate values, and zero (0) is returned.

Description
ImageInfo provides various information about an image, such as its dimensions and color depth, but also provides you with the information you need to directly access all the pixel data i


-------------------------------------------------------- KeyPgImplements ----

Implements
  

	Specifies an interface to be implemented by a user-defined type
Note: Stub page. Even though this keyword is reserved already, interfaces are not implemented yet.

Syntax
Type typename Implements interface
...
End Type

Description




-------------------------------------------------------- KeyPgImport ----

Import
  

	External linkage attribute for public data located in DLL's

Syntax
Extern Import symbolname[( subscripts)] [ Alias "aliasname"] [ As DataType] [, ...]

Description
Is used only (with the Extern keyword) in external modules to access global variables from Win32 DLLs: the variable names will be added to the dynamic library import list so that their a


-------------------------------------------------------- KeyPgInclib ----

#inclib
  

	Preprocessor directive

Syntax
#inclib "libname"

Description
Includes a library in the linking process as if the user specified -l libname on the command line.




-------------------------------------------------------- KeyPgInclude ----

#include
  

	Preprocessor statement to include contents of another source file

Syntax
#include [once] "file"

Description
#include inserts source code from another file at the point where the #include directive appears.  This has the effect of compiling the source code from the include file as though it wer


-------------------------------------------------------- KeyPgInkey ----

Inkey
  

	Returns a string representing the first key waiting in the keyboard buffer

Syntax
Declare Function Inkey ( ) As String

Usage
result = Inkey[$]

Return Value
The first character found in the keyboard buffer, or an empty string ("") if none found.

Description
Peeks into the keyboard buffer and returns a String representation of the first character, if any, found. The key is then removed from the buffer, and is not echoed to the screen. If the


-------------------------------------------------------- KeyPgInp ----

Inp
  

	Returns a value at a hardware port.

Syntax
Declare Function Inp ( ByVal port As UShort ) As Integer

Usage
value = Inp(port)

Parameters
port
Port number to read.

Return Value
The value at the specified port.

Description
This function retrieves the value at 'port' and returns immediately.




-------------------------------------------------------- KeyPgInput ----

Input
  

	Reads a list of values from the keyboard

Syntax
Input [;] ["prompt" ,|; ] variable_list

Parameters
prompt
an optional string literal that is written to the screen as a prompt.  If it is followed by a semicolon (;), a question mark ("? ") will be appended to the prompt.  If it is followed by a comma, nothing will be appended.
variable_list
a list of comma-separated variables used to hold the values read from the user.

Description
Reads a list values from the keyboard up until the first carriage return. Numerical values are converted from their string representation into the corresponding types in the variable lis


-------------------------------------------------------- KeyPgInputfilemode ----

Input (File Mode)
  

	Specifies text file to be opened for input mode

Syntax
Open filename for Input [Encoding encoding_type] [Lock lock_type] as [#]filenum 

Parameters
filename
file name to open for input
encoding_type
indicates encoding type for the file
lock_type
locking to be used while the file is open
filenum
unused file number to associate with the open file

Description
A file mode used with Open to open a text file for reading.

This mode allows to read sequentially lines of text with Line Input #, or to read comma separated values with Input #. 




-------------------------------------------------------- KeyPgInputnum ----

Input()
  

	Reads a number of characters from console or file

Syntax
Declare Function Input ( n As Integer ) As String
Declare Function Input ( n As Integer, filenum As Integer ) As String

Usage
result = Input[$]( n [, [#]filenum ] )

Parameters
n
Number of bytes to read.
filenum
File number of a bound file or device.

Return Value
Returns a String of the characters read.

Description
Reads a number of characters from the console, or a bound file/device specified by filenum.

The first version waits for and reads n characters from the keyboard buffer. Extended keys 


-------------------------------------------------------- KeyPgInputPp ----

Input #
  

	Reads a list of values from a text file

Syntax
Input # filenum, variable_list

Parameters
filenum
a file number of a file or device opened for Input
variable_list
a list of variables used to hold the values read

Description
Reads from a text file through a bound file number a delimiter-separated set of values and writes them in reading order into the variables in variable_list. If a variable is numeric the 


-------------------------------------------------------- KeyPgInstr ----

InStr
  

	Locates the first occurrence of a substring or character within a string

Syntax
Declare Function InStr ( ByRef str As Const String,  [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const String, [ Any ] ByRef substring As Const String ) As Integer
Declare Function InStr ( ByVal start As Integer, ByRef str As Const WString, [ Any ] ByRef substring As Const WString ) As Integer

Usage
first = InStr( [ start, ] str, [ Any ] substring )

Parameters
str
The string to be searched.
substring
The substring to find.
start
The position in str at which the search will begin. The first character starts at position 1.

Return Value
The position of the first occurrence of substring in str.

Description
Locates the position of the first occurrence of a substring or character within a string. In the first form of InStr (without start parameter), the search begins at the first character.



-------------------------------------------------------- KeyPgInstrrev ----

InStrRev
  

	Locates the last occurrence of a substring or character within a string

Syntax
Declare Function InStrRev ( ByRef str As Const String, [ Any ] ByRef substring As Const String, ByVal start As Integer = -1 ) As Integer
Declare Function InStrRev ( ByRef str As Const WString, [ Any ] ByRef substring As Const WString, ByVal start As Integer = -1 ) As Integer

Usage
last = InStrRev( str, [ Any ] substring [, start ]  )

Parameters
str
The string to be searched.
substring
The substring to find.
start
The position in str at which the search will begin. The first character starts at position 1.

Return Value
The position of the last occurrence of substring in str.

Description
Locates the position of the last occurrence of a substring or character within a string.  If start parameter is not given or is less than zero, the search begins at the last character.



-------------------------------------------------------- KeyPgInt ----

Int
  

	Returns the floor of a number

Syntax
Declare Function Int ( ByVal number As Single ) As Single
Declare Function Int ( ByVal number As Double ) As Double
Declare Function Int ( ByVal number As Integer ) As Integer
Declare Function Int ( ByVal number As UInteger ) As UInteger

Usage
result = Int( number )

Parameters
number
the floating-point number to round

Return Value
Returns the floor of number, i.e. the largest integer that is less than or equal to it.

Description
 Int returns the floor of number.  For example, Int(4.9) will return 4.0, and Int(-1.3) will return -2.0.  For integer types, the number is returned unchanged.

The Int unary Operator 


-------------------------------------------------------- KeyPgInteger ----

Integer
  

	Standard data type: 32-bit or 64-bit signed, same size as SizeOf(Any Ptr)

Syntax
Dim variable As Integer
Dim variable As Integer<bits>

Parameters
bits
A numeric constant expression indicating the size in bits of integer desired.  The values allowed are 8, 16, 32 or 64.

Description
Integer is the main data type FreeBASIC uses for integer math and bitwise operations. It is the default type for number literals.

In the first form Integer is a 32-bit or 64-bit signe


-------------------------------------------------------- KeyPgIs ----

Is
  

	Clause in the Select Case statement block.

Syntax
Case Is expression

Description
Is specifies that a particular case inside a Select Case block will be evaluated based on an expression including the greater than (>) or less than (<) operator and a value. 




-------------------------------------------------------- KeyPgIsDate ----

IsDate
  

	Tests if a string can be converted to a Date Serial

Syntax
Declare Function IsDate ( ByRef stringdate As Const String ) As Long

Usage
#include "vbcompat.bi"
result = IsDate( stringdate )

Parameters
stringdate
the string to test

Return Value
Returns non-zero (-1) if the date string can be converted to a Date Serial, otherwise returns zero (0).

Description
Date strings must be in the format set in the regional settings of the OS to be considered valid dates.

IsDate(Date) will return non-zero (-1) only if the regional settings specify th


-------------------------------------------------------- KeyPgIsredirected ----

IsRedirected
  

	Checks whether stdin or stdout is redirected to a file

Syntax
Declare Function IsRedirected ( ByVal is_input As Long = 0 ) As Long

Usage
#include "fbio.bi"
result = IsRedirected( is_input )

Parameters
is_input
A Long indicating the type of information to return.

Return Value
Returns non-zero (-1) if stdin or stdout is redirected, otherwise returns zero (0).

Description
IsRedirected checks whether stdin or stdout is redirected to a file, instead of being connected to the console/terminal as usual.

If is_input is equal to non-zero (-1), IsRedirected c


-------------------------------------------------------- KeyPgKill ----

Kill
  

	Deletes a file from disk / storage media.

Syntax
Declare Function Kill ( ByRef filename As Const String ) As Long

Usage
result = Kill( filename )

Parameters
filename
The filename is the name of the disk file to delete. If the file is not in the current directory, the path must also be given as path/file.

Return Value
Returns zero (0) on success, or non-zero on error.

Description
Kill deletes a file from disk / storage media.

The error code returned by Kill can be checked using Err in the next line. The function version of  Kill returns directly the error code


-------------------------------------------------------- KeyPgLbound ----

LBound
  

	Returns the lower bound of an array's dimension

Syntax
Declare Function LBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

Usage
result = LBound( array [, dimension ] )

Parameters
array
an array of any type
dimension
the dimension to get lower bound of

Return Value
Returns the lower bound of an array's dimension.
Description
LBound returns the lowest value that can be used as an index into a particular dimension of an array.

Array dimensions are numbered from one (1) to n, where n is the total number of d


-------------------------------------------------------- KeyPgLcase ----

LCase
  

	Returns a lower case copy of a string

Syntax
Declare Function LCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function LCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

Usage
result = LCase[$]( str [ , mode ] )

Parameters
str
String to convert to lowercase.
mode
The conversion mode: 0 = current locale, 1 = ASCII only

Return Value
Lowercase copy of str.

Description
Returns a copy of str with all of the letters converted to lower case.

If str is empty, the null string ("") is returned.




-------------------------------------------------------- KeyPgLeft ----

Left
  

	Returns the leftmost substring of a string

Syntax
Declare Function Left ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Left ( ByRef str As Const WString, ByVal n As Integer ) As WString

Usage
result = Left[$]( str, n )

Parameters
str
The source string.
n
The number of characters to return from the source string.

Return Value
Returns the leftmost substring from str.

Description
Returns the leftmost n characters starting from the left (beginning) of str. If str is empty, then the null string ("") is returned. If n <= 0 then the null string ("") is returned. If n


-------------------------------------------------------- KeyPgLen ----

Len
  

	Returns the length of an expression or data type

Syntax
Declare Function Len ( ByRef expression As String ) As Integer
Declare Function Len ( ByRef expression As ZString ) As Integer
Declare Function Len ( ByRef expression As WString ) As Integer

Declare Operator Len ( ByRef expression As datatype ) As datatype

Declare Function Len ( datatype ) As Integer	

Usage
result = Len( expression )
or
result = Len( DataType )

Parameters
expression
An expression of any type.
datatype
A DataType.

Return Value
Returns the size of an expression or DataType (including the data fields of a UDT) in bytes.

Description
Len returns the length of an expression or the size of a DataType, in bytes.

In the first form, if expression is of type String, WString or ZString, the length of the string in charac


-------------------------------------------------------- KeyPgLet ----

Let
  

	Indicates the assignment operator.

Syntax
Let variable = value
or
Let( variable1 [, variable2 [, ... ]] ) = udt
or
Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )
statements
end operator

Description
Command intended to help the programmer to distinguish an assignment statement (e.g. Let a = 1) from an equality test (e.g. If a = 1 then ...).  As the compiler does not require it, it i


-------------------------------------------------------- KeyPgLib ----

Lib
  

	Specifies the library where a sub or function can be found as part of a declaration

Syntax
Declare { Sub | Function } proc_name Lib "libname" [ Alias "symbol_name" ] ( arguments list ) As return_type

Extern "mangling" lib "libname"
declarative statements
end Extern

Type T
As Integer dummy
Declare Constructor Lib "libname" [ Alias "symbol_name" ] ( arguments list )
end Type


Description
In Sub or Function declarations, and also in class method declarations (including constructors and destructors), Lib indicates the library containing the function. Libraries specified in


-------------------------------------------------------- KeyPgLinegraphics ----

Line (Graphics)
  

	Draws a line

Syntax
Line [target,] [[STEP]|(x1, y1)]-[STEP] (x2, y2) [, [color][, [B|BF][, style]]]
or
Line - (x2, y2) [, [color][, [B|BF][, style]]]

Parameters
target
specifies buffer to draw on
STEP
indicates that the starting coordinates are relative
(x1, y1)
starting coordinates of the line
STEP
indicates that ending coordinates are relative
(x2, y2)
ending coordinates of the line
color
the color attribute.
B|BF
specifies box or box filled mode
style
line style

Description
Graphics statement that draws a straight line or a box between two points. The action will take place on the current work page set via ScreenSet, or onto the buffer Get/Put buffer if spe


-------------------------------------------------------- KeyPgLineinput ----

Line Input
  

	Reads one line of input from the keyboard

Syntax
Line Input [;] [promptstring {;|,} ] stringvariable

Parameters
promptstring
optional prompt to display before waiting for input. If it is followed by a semicolon (;), a question mark ("? ") will be appended to the prompt. If it is followed by a comma, nothing will be appended.
stringvariable
variable to receive the line of text

Description
Reads a line of text from the keyboard and stores it in a string variable.

The promptstring - if any - is written to the screen at the current cursor location, and characters read are


-------------------------------------------------------- KeyPgLineinputPp ----

Line Input #
  

	Reads one line of text from a file

Syntax
Line Input #file number, string_variable

Parameters
file number
file number of an file opened for Input
string_variable
variable to receive the line of text

Description
Reads a line from an open text file (opened for Input through a bound file number) and stores it in a string variable.  

A line of text ends at, but does not include the end of line c


-------------------------------------------------------- KeyPgLoByte ----

LoByte
  

	Gets the lowest byte of the operand.

Syntax
#define LoByte( expr ) (Cast(UInteger, expr) And &h000000FF)

Usage
result = LoByte( expr )

Parameters
expr
A numeric expression, converted to an UInteger value.

Return Value
Returns the value of the low byte of expr.

Description
This macro converts the numeric expression expr to an UInteger value, then expands to an UInteger representing the value of its least-significant (low) byte.




-------------------------------------------------------- KeyPgLoc ----

LOC
  

	Returns the file position where the last file read/write was performed

Syntax
Declare Function LOC ( ByVal filenum As Long ) As LongInt

Usage
result = LOC( filenum )

Parameters
filenum
The file number of an open file.

Return Value
The file position where the last read/write was performed.

Description
Returns the position where the last file read/write was performed.

The position is indicated in records:
In files opened FOR RANDOM the record length specified when file was opened i


-------------------------------------------------------- KeyPgLocal ----

Local
  

	Error handling statement to set the current error handler

Syntax
On Local Error Goto label

Description
The Local clause in an On Error construction allows to define an error handler in the same Sub or Function the On Local Error is in.

 Remark: Presently, the Local clause (authorized o


-------------------------------------------------------- KeyPgLocate ----

Locate
  

	Sets the current cursor position

Syntax
Declare Function Locate( row As Long = 0, column As Long = 0, state As Long = -1, start As Long = 0, stop As Long = 0 ) As Long

Usage
Locate [row], [column], [state]

result = Locate( [row], [column], [state] )
new_column = LoByte( result )
new_row = HiByte( result )
new_state = HiWord( result )

Parameters
row
the 1-based vertical character position in the console.
column
the 1-based horizontal character position in the console.
state
the state of the cursor in console-mode only: 0 is off, 1 is on; text cursor is never visible in graphics mode.
start
Ignored. Allowed for -lang qb dialect compatibility only.
stop
Ignored. Allowed for -lang qb dialect compatibility only.

Return Value
Returns a 32 bit Long containing the current cursor position and state. The Low Byte Of The Low Word contains the column, the High Byte Of The Low Word contains the row, and the High Word contains the cursor state.

If any of the row, column or state parameters were just set by the call to Locate, then the return value will reflect these new values, not the previous ones. If any of the parameters were omitted in the call to Locate, then the return value will reflect the current values, which are the same as before the call to Locate.

Locate will attempt to position the cursor at the specified row and column. If the position is beyond the screen extents, cursor will not reposition. And next Print to the screen will continue at last valid cursor position.  When printing to the last line of the screen, and the Print statement has a new line character, the screen will scroll and reposition the cursor automatically to the last line, column 1.

Description
Sets the text cursor in both graphics and console modes.




-------------------------------------------------------- KeyPgLock ----

Lock
  

	Restricts read/write access to a file or portion of a file

Syntax
Lock #filenum, record
Lock #filenum, start To end

Parameters
filenum
The file number used to Open the file.
record
The record (Random files) to lock.
start
The first byte position (Binary files) to lock from.
end
The last byte position (Binary files) to lock to.

Description
Lock temporarily restricts access by other threads or programs to a file, or portion of a file, usually to allow safe writing to it.

After modifying the data, an Unlock with the same 


-------------------------------------------------------- KeyPgLof ----

LOF
  

	Returns the length of an open disk file

Syntax
Declare Function LOF ( ByVal filenum As Long ) As LongInt

Usage
result = LOF( filenum )

Parameters
filenum
The file number of an open disk file.

Return Value
The length in bytes of an open disk file.

Description
Returns the length, in bytes, of a file opened previously with Open using the given filenum.

With Open Com it returns the length of the data pending to be read in the receive buffer.



-------------------------------------------------------- KeyPgLog ----

Log
  

	Returns the natural logarithm of a given number

Syntax
Declare Function Log cdecl ( ByVal number As Double ) As Double

Usage
result = Log( number )

Parameters
number
The number to calculate the natural log.

Return Value
Returns the logarithm with the base e (also know as the natural logarithm) of number.

Description
There can be some confusion with this notation given that in mathematics the natural logarithm function is usually denoted LN, while the logarithm of base 10 is often denoted as LOG. Fre


-------------------------------------------------------- KeyPgLong ----

Long
  

	Standard data type: 32-bit signed integer

Syntax
Dim variable As Long

Description
32-bit signed whole-number data type. Can hold values from -2147483648 to 2147483647. Corresponds to a signed DWORD.




-------------------------------------------------------- KeyPgLongint ----

LongInt
  

	Standard data type: 64 bit signed

Syntax
Dim variable As LongInt

Description
A 64-bit signed whole-number data type. Can hold values from -9 223 372 036 854 775 808 to 9 223 372 036 854 775 807. Corresponds to a signed QWORD.




-------------------------------------------------------- KeyPgLoop ----
Loop   
Description



-------------------------------------------------------- KeyPgLoWord ----

LoWord
  

	Gets the lowest 16bit word of the operand.

Syntax
#define LoWord( expr ) (Cast(UInteger, expr) And &h0000FFFF)

Usage
result = LoWord( expr )

Parameters
expr
A numeric expression, converted to an UInteger value.

Return Value
Returns the value of the low word of expr.

Description
This macro converts the numeric expression expr to an UInteger value, then expands to an UInteger representing the value of its least-significant (low) 16bit word.




-------------------------------------------------------- KeyPgLpos ----

LPos
  

	Returns the number of characters sent to the printer port in the last LPrint statement.

Syntax
Declare Function LPos ( ByVal printer As Long ) As Long

Usage
result = LPOS(printer)

Parameters
printer
Either 0, 1, 2 or 3.  Represents the printer port (LPT#)

Return Value
Returns the number of characters sent.

Description
Used to determine, from the last LPrint, how many characters were sent to the printer port.




-------------------------------------------------------- KeyPgLprint ----

LPrint
  

	Writes text to the default printer.

Syntax
LPrint  [ Using formatstring,] [expressionlist] [(, | ;)] ...

Parameters
formatstring
String specifying the output format.
expressionlist
List of variables to output according to the specified format.

Description
Prints expressionlist to the printer attached to the parallel port LPT1, or if it does not exist, to the default printer.  To print to a printer different from the default one, use Open 


-------------------------------------------------------- KeyPgLset ----

LSet
  

	Left-justifies a string

Syntax
Declare Sub LSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub LSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

Usage
LSet dst, src
LSet dst_udt, src_udt

Parameters
dst
String String to receive the data.
src
Source String to get the data.
dst_udt
User defined Type to receive the data.	
src_udt
User defined Type to copy the data from.

Description
LSet left justifies text into the string buffer dst, filling the left part of the string with src and the right part with spaces. The string buffer size is not modified.
If text is too 


-------------------------------------------------------- KeyPgLtrim ----

LTrim
  

	Removes surrounding substrings or characters on the left side of a string

Syntax
Declare Function LTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function LTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

Usage
result = LTrim[$]( str [, [ Any ] trimset ] )

Parameters
str
The source string.
trimset
The substring to trim.

Return Value
Returns the trimmed string.

Description
This procedure trims surrounding characters from the left (beginning) of a source string. Substrings matching trimset will be trimmed if specified, otherwise spaces (ASCII code 32) are t


-------------------------------------------------------- KeyPgMemberFunction ----

Function (Member)
  

	Declares or defines a member procedure returning a value

Syntax
{ Type | Class | Union } typename
Declare [ Static | Const ] Function fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ ByRef ] As datatype [ Static ]
End { Type | Class | Union }

Function typename.fieldname ( [ parameters ] ) [ ByRef ] As datatype [ Export ]
statements
End Function

Parameters
typename 
name of the Type, Class, or Union
fieldname 
name of the procedure
external_name
name of field as seen when externally linked
parameters 
the parameters to be passed to the procedure
calling convention specifier	
can be one of: cdecl, stdcall or pascal

Description
Function members are accessed with Operator . (Member Access) or Operator -> (Pointer To Member Access) to call a member procedure that returns a value (a reference can also be returned 


-------------------------------------------------------- KeyPgMemberSub ----

Sub (Member)
  

	Declares or defines a member procedure

Syntax
{ Type | Class | Union } typename
Declare [ Static | Const ] Sub fieldname [calling convention specifier] [ Alias external_name ] ( [ parameters ] ) [ Static ] 
End { Type | Class | Union }

Sub typename.fieldname ( [ parameters ] ) [ Export ]
statements
End Sub

Parameters
typename 
name of the Type, Class, or Union
fieldname 
name of the procedure
external_name
name of field as seen when externally linked
parameters 
the parameters to be passed to the procedure
calling convention specifier	
can be one of: cdecl, stdcall or pascal

Description
Sub members are accessed with Operator . (Member Access) or Operator -> (Pointer To Member Access) to call a member procedure and may optionally accept parameters either ByVal or ByRef. 


-------------------------------------------------------- KeyPgMetaDynamic ----

$Dynamic
  

	Metacommand to change the way arrays are allocated

Syntax
'$Dynamic
or
Rem $Dynamic

Description
'$Dynamic is a metacommand that specifies that any following array declarations are variable-length, whether they are declared with constant subscript ranges or not. This remains in effe


-------------------------------------------------------- KeyPgMetaInclude ----

$Include
  

	Metacommand statement to include contents of another source file

Syntax
'$Include [once]: 'file'
or
Rem $Include [once]: 'file'

Description
$Include inserts source code from another file at the point where the $Include metacommand appears.  This has the effect of compiling the source code from the include file as though it w


-------------------------------------------------------- KeyPgMetaLang ----

$Lang
  

	Metacommand statement to set the compiler dialect.

Syntax
'$lang: "lang"
or
Rem $lang: "lang"

Parameters
"lang"
The dialect to set, enclosed in double quotes, and must be one of "fb", "fblite", "qb", or "deprecated".

Description
If the -forcelang option was not given on the command line, $Lang can be used to set the dialect for the source module in which it appears.  At most two passes will be made on the source


-------------------------------------------------------- KeyPgMetaStatic ----

$Static
  

	Metacommand to change the way arrays are allocated

Syntax
'$Static
or
Rem $Static

Description
'$Static is a metacommand that overrides the behavior of $Dynamic, that is, arrays declared with constant subscript ranges are fixed-length. This remains in effect for the rest of the mo


-------------------------------------------------------- KeyPgMidfunction ----

Mid (Function)
  

	Returns a substring of a string

Syntax
Declare Function Mid ( ByRef str as Const String, ByVal start as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer ) as WString
Declare Function Mid ( ByRef str as Const String, ByVal start as integer, ByVal n as integer ) as String
Declare Function Mid ( ByVal str as Const WString Ptr, ByVal start as integer, ByVal n as integer ) as WString

Usage
result = Mid[$]( str, start [, n ] )

Parameters
str
The source string.
start
The start position in str of the substring. The first character starts at position 1.
n
The substring length, in characters.

Description
Returns a substring starting from start in str. If str is empty then the null string ("") is returned. If start <= 0 or start > len(str) then the null string ("") is returned.

In the 


-------------------------------------------------------- KeyPgMidstatement ----

Mid (Statement)
  

	Overwrites a substring of a string with another

Syntax
Declare Sub Mid ( ByRef text As String, ByVal start As Integer, ByVal length As Integer, ByRef expression As Const String )
Declare Sub Mid ( ByVal text As WString Ptr, ByVal start As Integer, ByVal length As Integer, ByVal expression As Const WString Ptr )

Usage
Mid( text, start ) = expression
Or
Mid( text, start, length ) = expression

Parameters
text
The string to work with.
start
The start position in text of the substring to overwrite. The first character starts at position 1.
length
The number of characters to overwrite.

Description
Copies a maximum of length characters of expression into text, starting at start.

If length is not specified, all of expression is copied. The size of the string text is unchanged; if


-------------------------------------------------------- KeyPgMinute ----

Minute
  

	Gets the minute of the hour from a Date Serial 

Syntax
Declare Function Minute ( ByVal date_serial As Double ) As Long

Usage
#include "vbcompat.bi"
result = Minute( date_serial )

Parameters
date_serial
the date serial

Return Value
Returns the minute from a  variable containing a date in  Date Serial  format.

Description
The compiler will not recognize this function unless vbcompat.bi is included.




-------------------------------------------------------- KeyPgMkd ----

MKD
  

	Does a binary copy from a Double variable to a String, setting its length to 8 bytes

Syntax
Declare Function MKD ( ByVal number As Double ) As String

Usage
result = MKD[$]( number )

Parameters
number
A Double variable to binary copy to a String.

Return Value
Returns a String with a binary copy of the Double.

Description
Does a binary copy from a Double variable to a String, setting its length to 8 bytes. The resulting string can be read back to a Double by CVD.

This function is useful to write numeri


-------------------------------------------------------- KeyPgMkdir ----

MkDir
  

	Makes a folder/directory on the local file system

Syntax
Declare Function MkDir ( ByRef folder As Const String ) As Long

Usage
result = MkDir( folder )

Parameters
folder
The new default folder/directory to be created, or a path to the sub-folder/sub-directory to be created.

Return Value
Returns zero (0) on success, and negative one (-1) on failure.

Description
Creates a folder/directoy on the local file system.

If folder is not a simple folder/directory name, but a path to a sub-folder/sub-directory, the parent folder(s)/directory(s) specif


-------------------------------------------------------- KeyPgMki ----

MKI
  

	Does a binary copy from an integer variable to a String of the same length as the size of the input variable

Syntax
Declare Function MKI ( ByVal number As Integer ) As String
Declare Function MKI<bits> ( ByVal number As Integer<bits> ) As String

Usage
result = MKI[$]( number )
result = MKI[$]<bits>( number )

Parameters
number
A Integer or Integer<bits> variable to binary copy to a String.

Return Value
Returns a String containing a binary copy of number.

Description
Does a binary copy from an Integer or Integer<bits> variable to a String, setting its length to the number of bytes in the type. The resulting string can be read back to an integer type 


-------------------------------------------------------- KeyPgMkl ----

MKL
  

	Does a binary copy from a Long variable to a String, setting its length to 4 bytes

Syntax
Declare Function MKL ( ByVal number As Long ) As String

Usage
result = MKL( number )

Parameters
number
A Long variable to binary copy to a String.

Return Value
Returns a String with a binary copy of the Long.

Description
Does a binary copy from a Long variable to a String, setting its length to 4 bytes. The resulting string can be read back to a Long by CVL.

This function is useful to write numeric va


-------------------------------------------------------- KeyPgMklongint ----

MKLongInt
  

	Does a binary copy from a LongInt variable to a String, setting its length to 8 bytes

Syntax
Declare Function MKLongInt ( ByVal number As LongInt ) As String

Usage
result = MKLongInt[$]( number )

Parameters
number
A LongInt variable to binary copy to a String.

Return Value
Returns a String with a binary copy of the LongInt.

Description
Does a binary copy  from a LongInt variable to a string, setting its length to 8 bytes. The resulting string can be read back to a longint by CVLongInt

This function is useful to writ


-------------------------------------------------------- KeyPgMks ----

MKS
  

	Does a binary copy from a Single variable to a String, setting its length to 4 bytes

Syntax
Declare Function MKS ( ByVal number As Single ) As String

Usage
result = MKS[$]( number )

Parameters
number
A Single variable to binary copy to a String.

Return Value
Returns a String with a binary copy of the Single.

Description
Does a binary copy  from a Single variable to a String, setting its length to 4 bytes. The resulting string can be read back to a Single by CVS.

This function is useful to write numer


-------------------------------------------------------- KeyPgMkshort ----

MKShort
  

	Does a binary copy from a Short variable to a String, setting its length to 2 bytes

Syntax
Declare Function MKShort ( ByVal number As Short ) As String

Usage
result = MKShort[$](number)

Parameters
number
A Short variable to binary copy to a String.

Return Value
Returns a String with a binary copy of the Short.

Description
Does a binary copy  from a SHORT variable to a string, setting its length to 2 bytes. The resulting string can be read back to a Short by CVShort

This function is useful to write nume


-------------------------------------------------------- KeyPgModuleConstructor ----

Constructor (Module)
  

	Specifies execution of a procedure before module-level code

Syntax
[Public | Private] Sub procedure_name [Alias "external_identifier"] [()] Constructor [priority] [Static]
{ procedure body }
End Sub

Description
The Constructor keyword is used in Sub definitions (forbidden at declaration line level) to force execution of the procedure prior to that of module-level code. Procedures defined as con


-------------------------------------------------------- KeyPgModuleDestructor ----

Destructor (Module)
  

	Specifies execution of a procedure at program termination

Syntax
[Public | Private] Sub identifier [Alias "external_identifier"] [()] Destructor [priority] [Static]
{ procedure body }
End Sub

Description
Defines a procedure to be automatically called from a compiled program's end-code.  End-code is generated by the compiler and is executed when the program terminates normally.  Procedure


-------------------------------------------------------- KeyPgMonth ----

Month
  

	Gets the month of the year from a Date Serial

Syntax
Declare Function Month ( ByVal date_serial As Double ) As Long

Usage
#include "vbcompat.bi"
result = Month( date_serial )

Parameters
date_serial
the date

Return Value
Returns the month number from a variable containing a date in  Date Serial  format.

The month values are in the range 1-12 being 1 for January and 12 for December.

Description

The compiler will not recognize this function unless vbcompat.bi is included.




-------------------------------------------------------- KeyPgMonthname ----

MonthName
  

	Gets the name of a month from its integral representation

Syntax
Declare Function MonthName ( ByVal month As Long, ByVal abbreviate As Long = 0 ) As String

Usage
#include "vbcompat.bi"
result = MonthName( month_number [, abreviate ] )

Parameters
month
the number of the month of the year - 1:January through 12:December
abbreviate
flag to indicate that name should be abbreviated

Return Value
Returns the local operating system language month name from month value 1 to 12.

Description
If abbreviate is true, the month name abbreviation  is returned. If omitted or false, the whole name is returned.
The compiler will not recognize this function unless vbcompat.bi or dat


-------------------------------------------------------- KeyPgMultikey ----

MultiKey
  

	Detects the status of keys by keyboard scancode.

Syntax
Declare Function MultiKey ( ByVal scancode As Long ) As Long

Usage
result = MultiKey(scancode)

Parameters
scancode
The scan code of the key to check.

Return Value
Returns -1 if the key for the specified scan code is pressed, otherwise returns 0.

Description
MultiKey is a function which will detect the status of any key, determined by scancode, at any time. It will return -1 if the key is pressed, otherwise it will return 0.

The keyboard 


-------------------------------------------------------- KeyPgMutexCreate ----

MutexCreate
  

	Creates a mutex used for synchronizing the execution of threads

Syntax
Declare Function MutexCreate ( ) As Any Ptr

Usage
result = MutexCreate

Return Value
The Any Ptr handle of the mutex created, or the null pointer (0) on failure.

Description
Mutexes, short for "Mutually Exclusive", are a way of synchronizing shared data within threads.  If there is a global variable used by multiple threads (or a local static variable used b


-------------------------------------------------------- KeyPgMutexDestroy ----

MutexDestroy
  

	Destroys a mutex

Syntax
Declare Sub MutexDestroy ( ByVal id As Any Ptr )

Usage
MutexDestroy( id )

Parameters
id
The Any Ptr handle of the mutex to be destroyed.

Description
Mutexdestroy discards a mutex created by MutexCreate.  This call should be executed after any threads using the mutex are no longer in use.

See MutexCreate for more general informatio


-------------------------------------------------------- KeyPgMutexLock ----

MutexLock
  

	Acquires a mutex

Syntax
Declare Sub MutexLock ( ByVal id As Any Ptr )

Usage
MutexLock( id )

Parameters
id
The Any Ptr handle of the mutex to be locked.

Description
Mutexlock halts any other threads using a mutex "handle", generated by MutexCreate, until the handle is unlocked with MutexUnlock.
Such a halted thread has its execution suspended and d


-------------------------------------------------------- KeyPgMutexUnlock ----

MutexUnlock
  

	Releases a mutex lock

Syntax
Declare Sub MutexUnlock ( ByVal id As Any Ptr )

Usage
MutexUnlock( id )

Parameters
id
The Any Ptr handle of the mutex to be unlocked.

Description
Mutexunlock releases a mutex "handle" created by MutexCreate, and locked with MutexLock.  This allows other threads sharing the mutex to continue execution.

See MutexCreate for more g


-------------------------------------------------------- KeyPgNaked ----

Naked
  

	Write functions without prolog/epilog code

Syntax
{Sub | Function} identifier Naked [calling_convention] ( param_list ) [[ ByRef ] As data_type]
asm_statements
End {Sub | Function}

Parameters
identifier - name of the procedure.
calling_convention - calling convention of the procedure - can be cdecl, pascal, or stdcall
asm_statements - the code in the procedure body.  The code for handling parameters and returning values must all be done manually.  Note that the methods for doing these can change, depending on the calling convention.
param_list - parameters to be passed to the procedure.
data_type - the data type of the function.

Description
Naked allows the programmer to write procedures without the compiler generating any prolog/epilog code.
This is useful when writing small, fast functions in Asm without any unnecessary 


-------------------------------------------------------- KeyPgName ----

Name
  

	Renames a file on disk

Syntax
Declare Function Name( ByRef oldname As Const String, ByRef newname As Const String ) As Long

Usage
result = Name( oldname, newname )

Parameters
oldname
Name of an existing file.
newname
New name of the file.

Return Value
Returns zero (0) on success and non-zero on failure.

Description
Renames a file or folder originally called oldname to newname.

The function is not guaranteed to succeed if a file/folder exists with the same name.  It may  succeed, overwriting the 


-------------------------------------------------------- KeyPgNamespace ----

Namespace
  

	Declares a namespace block.

Syntax
Namespace identifier [ Alias "aliasname" ]
statements
End Namespace

Parameters
identifier
The name of the namespace (including nested names specifier).
aliasname
An alternate external name for the namespace.

Description
Namespaces allow to group entities like objects (predefined data-types and UDTs including Union and Enum) and procedures (including their declarations) under a name. This way the global 


-------------------------------------------------------- KeyPgNext ----

Next
  

	Control flow statement to mark the end of a For...Next loop.

Syntax
Next [ identifier_list ]

Description
Indicates the end of a statement block associated with a matching For statement. 

When Next is used on its own without an identifier_list, it closes the most recent For statement bloc


-------------------------------------------------------- KeyPgNow ----

Now
  

	Gets the current system time as a Date Serial 

Syntax
Declare Function Now ( ) As Double

Usage
#include "vbcompat.bi"
result = Now

Return Value
Returns a date serial containing the system's date and time at execution time.

Description
As the time is the decimal part of a date serial, if the value of Now is saved to an integer, the time in it will be reset to 00:00:00

The compiler will not recognize this function un


-------------------------------------------------------- KeyPgObject ----

Object
  

	Built-in type providing run-time type information

Syntax
Type Object
As fb_BaseVT Ptr vtable_ptr
Declare Constructor()
End Type

Usage
Type typename Extends Object
End Type

Dim variable As Object

Description
Object is a built-in type which provides Run-Time Type Information (RTTI) for all types derived from it using Extends, allowing them to be used with Operator Is, and to support Virtual a


-------------------------------------------------------- KeyPgOct ----

Oct
  

	Converts a number to octal representation

Syntax
Declare Function Oct ( ByVal number As UByte ) As String
Declare Function Oct ( ByVal number As UShort ) As String
Declare Function Oct ( ByVal number As ULong ) As String
Declare Function Oct ( ByVal number As ULongInt ) As String
Declare Function Oct ( ByVal number As Const Any Ptr ) As String

Declare Function Oct ( ByVal number As UByte, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As UShort, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULong, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As ULongInt, ByVal digits As Long ) As String
Declare Function Oct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As String

Usage
result = Oct[$]( number [, digits ] )

Parameters
number
A number or expression evaluating to a number.  A floating-point number will be converted to a LongInt.
digits
Desired number of digits in the returned string.

Return Value
A string containing the unsigned octal representation of number.

Description
Returns the unsigned octal string representation of number. Octal digits range from 0 to 7.

If you specify digits > 0, the result string will be exactly that length.  It will be trunc


-------------------------------------------------------- KeyPgOffsetof ----

OffsetOf
  

	Returns the offset of a field within a type.

Syntax
#define OffsetOf(typename, fieldname) CInt( @Cast( typename Ptr, 0 )->fieldname )	

Usage
result = OffsetOf( typename, fieldname )

Parameters
typename
Name of the type as defined using the Type...End Type statements.
fieldname
Name of the field as defined within the type (or within the base types for a derived type).

Description
For a non-derived type, OffsetOf will return the location fieldname as offset in bytes from the beginning of typename.

For a derived type, OffsetOf will return the location fieldname 


-------------------------------------------------------- KeyPgOnerror ----

On Error
  

	Error handling statement to set the current error handler

Syntax
On [Local] Error Goto label

Parameters
label
Label to jump to when an error occurs

Description
On Error triggers a jump to an error handler when an error occurs. Such errors can be triggered by built-in statements such as Open, or when the Error statement is used.

Note: The err


-------------------------------------------------------- KeyPgOngosub ----

On...Gosub
  

	Calls a label based on an expression

Syntax
On expression GoSub label1[, ...]

Description
Branches to different labels depending on the value of expression. An expression value of 1 will branch to the first label, a value of 2 to the second, etc.  If the value of expression i


-------------------------------------------------------- KeyPgOngoto ----

On...Goto
  

	Jumps to a label based on an expression.

Syntax
On expression Goto label1[, ...]

Description
Branches to different labels depending on the value of expression. An expression value of 1 will branch to the first label, a value of 2 to the second, etc.  If the value of expression i


-------------------------------------------------------- KeyPgOpAdd ----

Operator + (Addition)
  

	Sums two expressions

Syntax
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator + ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator + ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator + ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator + ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer
Declare Operator + ( ByRef rhs As Integer, ByRef lhs As T Pointer ) As T Pointer

Declare Operator + ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator + ( ByRef lhs As Integer, ByRef rhs As T ) As T

Usage
result = lhs + rhs

Parameters
lhs
The left-hand side expression to sum.
rhs
The right-hand side expression to sum.
T
Any pointer type.

Return Value
Returns the sum of two expressions.

Description
When the left and right-hand side expressions are numeric values, Operator + (Add) returns the sum of the two values.

When the left and right-hand side expressions are string values, 


-------------------------------------------------------- KeyPgOpAnd ----

Operator And (Conjunction)
  

	Returns the bitwise-and (conjunction) of two numeric values

Syntax
Declare Operator And ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs And rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the bitwise-and (conjunction) of the two operands.

Description
This operator returns the bitwise-and of its operands, a logical operation that results in a value with bits set depending on the bits of the operands (for conversion of a boolean to an 


-------------------------------------------------------- KeyPgOpAndAlso ----

Operator Andalso (Short Circuit Conjunction)
  

	Returns the short circuit-and (conjunction) of two numeric values

Syntax
Declare Operator AndAlso ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs AndAlso rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the short circuit-and (conjunction) of the two operands.

Description
This operator evaluates the left hand side expression.  If the result is zero, then zero is immediately returned.  If the result is nonzero then the right hand side is evaluated, and the


-------------------------------------------------------- KeyPgOpArrayIndex ----

Operator () (Array Index)
  

	Returns a reference to an element in an array

Syntax
Declare Operator () ( lhs() As T, ByRef rhs As Integer, ... ) ByRef As T

Usage
result = lhs ( rhs [, ...] )
or
lhs ( rhs [, ...] ) = value

Parameters
lhs
An array.
rhs
An index of an element in the array.
T
Any data type.

Description
This operator returns a reference to an element in an array. For multidimensional arrays, multiple indexes must be specified (up to the total number of dimensions of the array).

For a


-------------------------------------------------------- KeyPgOpAssignment ----

Operator =[>] (Assign)
  

	Assigns a value to a variable

Syntax
Declare Operator Let ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs = rhs
or
lhs => rhs

or, in the QB dialect,

[ Let ] lhs = rhs
or
[ Let ] lhs => rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric, boolean, string or pointer type.
rhs
The value to assign to lhs.
T2
Any type convertible to T2.

Description
This operator assigns the value of its right-hand side operand (rhs) to its left-hand side operand (lhs). The right-hand side operand must be implicitly convertible to the left-hand side


-------------------------------------------------------- KeyPgOpAt ----

Operator @ (Address Of)
  

	Returns the address of a string literal, variable, object or procedure

Syntax
Declare Operator @ ( ByRef rhs As T ) As T Pointer

Usage
result = @ rhs

Parameters
rhs
The string literal, variable, object or procedure to retrieve the address of.
T
Any standard, user-defined or procedure type.

Return Value
Returns the address of the right-hand side (rhs) operand.

Description
Operator @ (Address of) returns the memory address of its operand.

When the operand is of type String, the address of the internal string descriptor is returned. Use Operator Strptr (


-------------------------------------------------------- KeyPgOpCast ----

Operator Cast
  

	Operator to convert a UDT (User Defined Type) variable into a specified data type

Syntax
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
...
End { Type | Class | Union }

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
...

Usage
Cast( datatype, expression )

Parameters
typename 
The name of the Type, Class, or Union
datatype 
The name of the type for conversion into it, a built-in data type (standard data type) or a UDT different from typename
expression 
The expression to convert, an instance of typename

Description
Converts an expression (a typename variable) into a different datatype.

Cast Operator must be declared inside the Type, Class, or Union.
As all non-static member procedures, it has p


-------------------------------------------------------- KeyPgOpCombineAdd ----

Operator += (Add And Assign)
  

	Adds and assigns a value to a variable

Syntax
Declare Operator += ( ByRef lhs As T1, ByRef rhs As T2 )

Declare Operator += ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Declare Operator += ( ByRef lhs As String, ByRef rhs As String )
Declare Operator += ( ByRef lhs As WString, ByRef rhs As WString )

Usage
lhs += rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric type.
rhs
The value to add to lhs.
T2
Any numeric type.
T
Any data type.

Description
This operator adds and assigns a value to a variable. It is functionally equivalent to:

lhs = lhs + rhs

For numeric types, the right-hand side expression (rhs) will be converted to


-------------------------------------------------------- KeyPgOpCombineAnd ----

Operator And= (Conjunction And Assign)
  

	Performs a bitwise-and (conjunction) and assigns the result to a variable

Syntax
Declare Operator And= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs And= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric or boolean type.
rhs
The value to perform a bitwise-and (conjunction) with lhs.
T2
Any numeric or boolean type.

Description
This operator performs a bitwise-and and assigns the result to a variable (for conversion of a boolean to an integer, false or true boolean value becomes 0 or -1 integer value). It is fu


-------------------------------------------------------- KeyPgOpCombineConcat ----

Operator &= (Concatenate And Assign)
  

	Appends and assigns a string onto another string

Syntax
Declare Operator &= ( ByRef lhs As String, ByRef rhs As T2 )
Declare Operator &= ( ByRef lhs As WString, ByRef rhs As T2 )

Usage
lhs &= rhs

Parameters
lhs
The string to assign to.
rhs
The value to append to lhs.
T2
Any numeric, string or user-defined type that can be converted to a string.

Description
This operator appends one string onto another. The right-hand side expression (rhs) is converted to a string before concatenation. It is functionally equivalent to,

lhs = lhs & rhs




-------------------------------------------------------- KeyPgOpCombineDivide ----

Operator /= (Divide And Assign)
  

	Divides and assigns a value to a variable

Syntax
Declare Operator /= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs /= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric type.
rhs
The value to divide lhs by.
T2
Any numeric type.

Description
This operator divides and assigns a value to a variable. It is functionally equivalent to:
lhs = lhs / rhs

This operator can be overloaded for user-defined types as a member Operator


-------------------------------------------------------- KeyPgOpCombineEqv ----

Operator Eqv= (Equivalence And Assign)
  

	Performs a bitwise-eqv (equivalence) and assigns the result to a variable

Syntax
Declare Operator Eqv= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs Eqv= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric or boolean type.
rhs
The value to perform a bitwise-eqv (equivalence) with lhs.
T2
Any numeric or boolean type.

Description
This operator performs a bitwise-eqv and assigns the result to a variable (for conversion of a boolean to an integer, false or true boolean value becomes 0 or -1 integer value). It is fu


-------------------------------------------------------- KeyPgOpCombineExponentiate ----

Operator ^= (Exponentiate And Assign)
  

	Exponentiates and assigns a value to a variable

Syntax
Declare Operator ^= ( ByRef lhs As Double, ByRef rhs As Double )

Usage
lhs ^= rhs

Parameters
lhs
The variable to assign to.
rhs
The value to exponentiate lhs by.

Description
This operator exponentiates and assigns a value to a variable. It is functionally equivalent to:
lhs = lhs ^ rhs

This operator can be overloaded for user-defined types as a member Op


-------------------------------------------------------- KeyPgOpCombineImp ----

Operator Imp= (Implication And Assign)
  

	Performs a bitwise-imp (implication) and assigns the result to a variable

Syntax
Declare Operator Imp= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs Imp= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric or boolean type.
rhs
The value to perform a bitwise-imp (implication) with lhs.
T2
Any numeric or boolean type.

Description
This operator performs a bitwise-imp and assigns the result to a variable (for conversion of a boolean to an integer, false or true boolean value becomes 0 or -1 integer value). It is fu


-------------------------------------------------------- KeyPgOpCombineIntegerDivide ----

Operator \= (Integer Divide And Assign)
  

	Integer divides and assigns a value to a variable

Syntax
Declare Operator \= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs \= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric type.
rhs
The value to divide lhs by.
T2
Any numeric type.

Description
This operator divides (integer division) and assigns a value to a variable. It is functionally equivalent to:
lhs = lhs \ rhs

This operator can be overloaded for user-defined types a


-------------------------------------------------------- KeyPgOpCombineModulus ----

Operator Mod= (Modulus And Assign)
  

	Divides a value and assigns the remainder to a variable

Syntax
Declare Operator Mod= ( ByRef lhs As Integer, ByRef rhs As Integer )

Usage
lhs Mod= rhs

Parameters
lhs
The variable to assign to.
rhs
The value to divide lhs by.

Description
This operator divides two values of Integer type and assigns the remainder to its left-hand side (lhs) variable. It is functionally equivalent to:
lhs = lhs Mod rhs

This operator can


-------------------------------------------------------- KeyPgOpCombineMultiply ----

Operator *= (Multiply And Assign)
  

	Multiplies and assigns a value to a variable

Syntax
Declare Operator *= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs *= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric type.
rhs
The value to multiply lhs by.
T2
Any numeric type.

Description
This operator multiplies and assigns a value to a variable. It is functionally equivalent to:
lhs = lhs * rhs

The right-hand side expression (rhs) will be converted to the left-hand 


-------------------------------------------------------- KeyPgOpCombineOr ----

Operator Or= (Inclusive Disjunction And Assign)
  

	Performs a bitwise-or (inclusive disjunction) and assigns the result to a variable

Syntax
Declare Operator Or= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs Or= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric or boolean type.
rhs
The value to perform a bitwise-or (inclusive disjunction) with lhs.
T2
Any numeric or boolean type.

Description
This operator performs a bitwise-or and assigns the result to a variable (for conversion of a boolean to an integer, false or true boolean value becomes 0 or -1 integer value). It is fun


-------------------------------------------------------- KeyPgOpCombineShiftLeft ----

Operator Shl= (Shift Left And Assign)
  

	Shifts left and assigns a value to a variable

Syntax
Declare Operator Shl= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shl= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shl= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shl= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

Usage
lhs shl= rhs

Parameters
lhs
The variable to assign to.
rhs
The value to shift lhs left by.

Description
This operator shifts the bits in its left-hand side (lhs) parameter a number of times specified by its right-hand side (rhs) parameter, and assigns the result to lhs. It is functionally 


-------------------------------------------------------- KeyPgOpCombineShiftRight ----

Operator Shr= (Shift Right And Assign)
  

	Shifts right and assigns a value to a variable

Syntax
Declare Operator Shr= ( ByRef lhs As Integer, ByRef rhs As Integer )
Declare Operator Shr= ( ByRef lhs As UInteger, ByRef rhs As UInteger )
Declare Operator Shr= ( ByRef lhs As LongInt, ByRef rhs As LongInt )
Declare Operator Shr= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt )

Usage
lhs shr= rhs

Parameters
lhs
The variable to assign to.
rhs
The value to shift lhs right by.

Description
This operator shifts the bits in its left-hand side (lhs) parameter a number of times specified by its right-hand side (rhs) parameter, and assigns the result to lhs. It is functionally 


-------------------------------------------------------- KeyPgOpCombineSub ----

Operator -= (Subtract And Assign)
  

	Subtracts and assigns a value to a variable

Syntax
Declare Operator -= ( ByRef lhs As T1, ByRef rhs As T2 )
Declare Operator -= ( ByRef lhs As T Ptr, ByRef rhs As Integer )

Usage
lhs -= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric type.
rhs
The value to subtract from lhs.
T2
Any numeric type.
T
Any data type.

Description
This operator subtracts and assigns a value to a variable. It is functionally equivalent to:
lhs = lhs - rhs

For numeric types, the right-hand side expression (rhs) will be converted


-------------------------------------------------------- KeyPgOpCombineXor ----

Operator Xor= (Exclusive Disjunction And Assign)
  

	Performs a bitwise-xor (exclusive disjunction) and assigns the result to a variable

Syntax
Declare Operator Xor= ( ByRef lhs As T1, ByRef rhs As T2 )

Usage
lhs Xor= rhs

Parameters
lhs
The variable to assign to.
T1
Any numeric or boolean type.
rhs
The value to perform a bitwise-xor (exclusive or) with lhs.
T2
Any numeric or boolean type.

Description
This operator performs a bitwise-or and assigns the result to a variable (for conversion of a boolean to an integer, false or true boolean value becomes 0 or -1 integer value). It is fun


-------------------------------------------------------- KeyPgOpConcat ----

Operator + (String Concatenation)
  

	Concatenates two strings

Syntax
Declare Operator + ( ByRef lhs As String, ByRef rhs As String ) As String
Declare Operator + ( ByRef lhs As ZString, ByRef rhs As ZString ) As ZString
Declare Operator + ( ByRef lhs As WString, ByRef rhs As WString ) As WString

Usage
result = lhs + rhs

Parameters
lhs
The left-hand side string to concatenate.
rhs
The right-hand side string to concatenate.

Description
This operator concatenates two strings.  Unlike Operator & (String Concatenation With Conversion) both expressions must be strings, and may not be converted (in fact, any attempt to conc


-------------------------------------------------------- KeyPgOpConcatConvert ----

Operator & (String Concatenation With Conversion)
  

	Concatenates two strings, converting non-strings to strings as needed

Syntax
Declare Operator & ( ByRef lhs As T, ByRef rhs As U ) As V

Usage
result = lhs & rhs

Parameters
lhs
The left-hand side expression to concatenate.
T
Any standard data type or user-defined type that can be converted to a standard data type.
rhs
The right-hand side expression to concatenate.
U
Any standard data type or user-defined type that can be converted to a standard data type.
V
The resultant string type (varies with operands).

Description
This operator concatenates two expressions. If either of the expressions is not a string type, it is converted to String with Str.

If either of the expressions is a WString, a WString


-------------------------------------------------------- KeyPgOpDelete ----

Operator Delete Statement
  

	Operator to destroy data and free memory allocated with the Operator New Expression

Usage
Delete buf
or
Delete[] buf

Parameters
buf 
A pointer to memory that has been allocated by New Expression operator or New[] Expression operator, the array-version of New Expression operator (a typed pointer must be provided in accordance to the data type to delete).

Description
The Delete Statement operator is used to destroy and free the memory of an object created with New Expression operator. When deleting a TYPE, its destructor will be called. Delete Statem


-------------------------------------------------------- KeyPgOpDeleteOverload ----

Operator Delete Overload
  

	Member operator to overload memory deallocation process part provided by Operator Delete Statement when applying to a UDT (User Defined Type).

Syntax
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator delete[] ( buf  As Any Ptr )

Parameters
buf 
A pointer to memory that has been allocated by New Overload operator or New[] Overload operator, the array-version of New Overload operator.

Description
The member operator Delete Overload overloads the memory deallocation process part provided by the Delete Statement operator when applying to a UDT (User Defined Type). So the user can d


-------------------------------------------------------- KeyPgOpDivide ----

Operator / (Divide)
  

	Divides two numeric expressions

Syntax
Declare Operator / ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator / ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Usage
result = lhs / rhs

Parameters
lhs
The left-hand side dividend expression.
rhs
The right-hand side divisor expression.

Return Value
Returns the quotient of a dividend and divisor.

Description
Operator / (Divide) returns the quotient of a dividend and divisor.

Neither operand is modified in any way. Unlike with integer division, float division by zero is safe to perform, th


-------------------------------------------------------- KeyPgOpen ----

Open
  

	Opens a disk file for reading or writing using file operations

Syntax
Open filename For Input [encoding_type] [lock_type] As [#]filenumber
Open filename For Output [encoding_type] [lock_type] As [#]filenumber
Open filename For Append [encoding_type] [lock_type] As [#]filenumber

Open filename For Binary [access_type] [lock_type] As [#]filenumber
Open filename For Random [access_type] [lock_type] As [#]filenumber [Len = record_length]

Usage
result = Open( filename[,] For {Input|Output|Append}[,] As filenumber )
or
result = Open( filename[,] For Binary[,] Access {Read|Write}[,] As filenumber )
or
result = Open( filename[,] For Random[,] Access {Read|Write}[,] As filenumber [[,] Len =  record_length] )
or
Open filename For {Input|Output|Append} As filenumber
or
Open filename For Binary Access {Read|Write} As filenumber
or
Open filename For Random Access {Read|Write} As filenumber [Len =  record_length]


Parameters
filename
A string value of the name of the disk file to open. Relative file paths are relative to the current directory (see CurDir).
encoding_type
The encoding to be used when reading or writing text, can be one of:
 Encoding "ascii" (ASCII encoding is used, default)
 Encoding "utf8" (8-bit Unicode encoding is used)
 Encoding "utf16" (16-bit Unicode encoding is used)
 Encoding "utf32" (32-bit Unicode encoding  is used)
access_type
The type of access requested by the calling process.
 Access [Read] [Write] (both read and write access can be used, which is the default)
lock_type
Imposes restrictions on disk file access from other processes (threads or programs), can be either:
 Shared (the file can be freely accessed by other processes)
 Lock [Read] [Write] (both read and write access can be denied to other processes)
filenumber
An available file number to bind to the disk file, which can be found with FreeFile.
record_length
The size, in bytes, of each record read from or written to the disk file. The default is 128.

Return Value
In the first usage, Open() returns a 32 bit Long value: zero (0) on success and a non-zero error code otherwise.

Description
Opens a disk file for reading and/or writing. The file number file_num is bound to the file on disk, for use in subsequent file operations, such as Input # and Lock. The next available f


-------------------------------------------------------- KeyPgOpenCom ----

Open Com
  

	Opens a serial port for input and output

Syntax
Declare Function Open Com ( byref options As String, As filenumber As Long ) As Long

Usage
result = Open Com( options[,] As[#] filenumber )

Parameters
options
A String containing options used in controlling the port.
filenumber
The file number to bind to the port.

Return Value
Open Com() returns a 32 bit Long: a zero (0) on success and a non-zero error code otherwise.

Description
This command opens a serial port of the PC, allowing to send and receive data by using the normal file commands as Print  #, Input #, Get #, ...

The main parameter is a String that de


-------------------------------------------------------- KeyPgOpenCons ----

Open Cons
  

	Opens the console's standard input (stdin) or output (stdout) streams for use in file operations.

Syntax
Open Cons As [#]filenumber
Open Cons For Input As [#]filenumber
Open Cons For Output As [#]filenumber

Usage
result = Open Cons( [For {Input|Output}[,]] As filenumber )
(or using the QB-like syntax,)
Open Cons [For {Input|Output}] As filenumber

Parameters
filenumber
An available file number to bind to the stdin or stdout stream, which can be found with FreeFile.

Return Value
In the first usage, Open Cons() returns a 32 bit Long: a zero (0) on success and a non-zero error code otherwise.

Description
Open Cons opens the console's stdin or stdout streams for reading or writing. A file number is bound to the stream, which is used in subsequent file operations, such as Input #. An avail


-------------------------------------------------------- KeyPgOpenErr ----

Open Err
  

	Opens both the standard input (stdin) and standard error (stderr) streams for file operations.

Syntax
Open Err [for mode] As [#]filenumber As Long

Usage
Open Err [for mode] as [#]filenumber
or
result = Open Err( [for mode[,]] as [#]filenumber )

Parameters
mode
Ignored.
filenumber
An unused file number.

Return Value
A 32 bit Long: a zero is returned if Open Err() completed successfully, otherwise a non-zero value is returned to indicate failure.

Description
This command opens stdin to read from and stderr to write to the console allowing read and write operations with normal file commands.

stderr is an output stream different from stdout


-------------------------------------------------------- KeyPgOpenLpt ----

Open Lpt
  

	Open a printer device

Syntax
Open Lpt ["[LPT[x]:][Printer_Name][,TITLE=Doc_Title][,EMU=TTY]"] [For Input|Output] As #filenumber

Usage
Open Lpt "LPT..." As [#]filenumber
or
result = Open Lpt( "LPT..."[,] As [#]filenumber )

Parameters
x
Specifies a port number.  If omitted, output is sent to the system print spooler.
Printer_Name
Name of printer to open.  This parameter is ignored on DOS.
TITLE=Doc_Title
Title of the print job as seen by the printer spooler.  This parameter is ignored on DOS.
EMU=TTY
Emulation of TTY output on a windows GDI printer, using driver text imaging.  This parameter is ignored on DOS and Linux.
For Input|Output
clause is allowed for compatibility, but it is ignored.
filenumber
An unused file number to assign to the device.

Return Value
A 32 bit Long: 0 is returned if Open Lpt() completed successfully, otherwise a non-zero value is returned to indicate failure.

Description
Open Lpt opens a connection to a printer device.  The connection is treated like a file, so data may be written to the printer using Print and Put # commands.  

Any printer attached t


-------------------------------------------------------- KeyPgOpenPipe ----

Open Pipe
  

	Opens an external process' standard input (stdin) or output (stdout) stream for file operations.

Syntax
Open Pipe shell_command For Input As [#]filenumber
Open Pipe shell_command For Output As [#]filenumber
Open Pipe shell_command For Binary access_type [#]filenumber

Usage
result = Open Pipe( command[,] For {Input|Output}[,] As filenumber )
or,
result = Open Pipe( command[,] For Binary[,] access_type[,] As filenumber )
(or in the QB-like syntax,)
Open Pipe filename For {Input|Output} As filenumber
(or,)
Open Pipe filename For Binary access_type As filenumber

Parameters
shell_command
The external process to execute in the operating system command shell. Relative file paths are relative to the current directory (see CurDir).  When opening a pipe for a process that requires double quotes in either its executable path, or its arguments, the entire pipe string should be nested inside of double quotes.
access_type
The type of read or write access requested by the calling process.
 Access {Read|Write} (either the stdin or stdout stream of the external process can be opened)
filenumber
An available file number to bind to the external process' stdin or stdout stream.

Return Value
In the first usage, Open Pipe() returns a 32 bit Long: a zero (0) on success and a non-zero error code otherwise.

Description
Open Pipe executes another process in the command shell and opens either its stdin or stdout streams for reading or writing. A file number is bound to the stream, which is used in subseq


-------------------------------------------------------- KeyPgOpenScrn ----

Open Scrn
  

	Opens the console directly for input and output as a file

Syntax
Open Scrn [for mode] As [#]filenumber As Long

Usage
Open Scrn [for mode] as [#]filenumber
or
result = Open Scrn( [for mode[,]] as [#]filenumber )

Parameters
mode
Either Input or Output.  If omitted, Output is assumed.
filenumber
An unused file number.

Return Value
A 32 bit Long: a zero (0) is returned if Open Scrn() completed successfully, otherwise a non-zero value is returned to indicate failure.

Description
This command opens the console for both input and output as a file, allowing to read/write from/to it with normal file commands.

This command may use direct access to the console for 


-------------------------------------------------------- KeyPgOpEqual ----

Operator = (Equal)
  

	Compares two expressions for equality

Syntax
Declare Operator = ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator = ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator = ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator = ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator = ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator = ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator = ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator = ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator = ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator = ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator = ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator = ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator = ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator = ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator = ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

Usage
result = lhs = rhs

Parameters
lhs
The left-hand side expression to compare to.
rhs
The right-hand side expression to compare to.
T
Any pointer type.

Return Value
Returns negative one (-1) if expressions are equal, or zero (0) if unequal.

Description
Operator = (Equality) is a binary operator that compares two expressions for equality and returns the result - a boolean value mainly in the form of an Integer: negative one (-1) for tru


-------------------------------------------------------- KeyPgOpEqv ----

Operator Eqv (Equivalence)
  

	Returns the bitwise-and (equivalence) of two numeric values

Syntax
Declare Operator Eqv ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs Eqv rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the bitwise-equivalence of the two operands.

Description
This operator returns the bitwise-equivalence of its operands, a logical operation that results in a value with bits set depending on the bits of the operands (for conversion of a boolea


-------------------------------------------------------- KeyPgOperator ----

Operator
  

	Declares or defines an overloaded operator.

Syntax
{ Type | Class | Union } typename
Declare Operator Cast () [ ByRef ] As datatype
Declare Operator @ () [ ByRef ] As datatype Ptr
Declare Operator assignment_op ( [ ByRef | ByVal ] rhs As datatype )
Declare Operator [] ( index As datatype ) [ ByRef ] As datatype
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator New[] ( size As UInteger ) As Any Ptr
Declare Operator Delete ( buf  As Any Ptr )
Declare Operator Delete[] ( buf  As Any Ptr )
End { Type | Class | Union }

{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
End { Type | Class | Union }

Declare Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype
Declare Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype

Operator typename.Cast () [ ByRef ] As datatype [ Export ]
Operator typename.@ () [ ByRef ] As datatype Ptr [ Export ]
Operator typename.assignment_op ( [ ByRef | ByVal ] rhs As datatype ) [ Export ]
Operator typename.[] ( index As datatype ) [ ByRef ] As datatype [ Export ]
Operator unary_op ( [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator binary_op ( [ ByRef | ByVal ] lhs As datatype, [ ByRef | ByVal ] rhs As datatype ) As datatype [ Export ]
Operator typename.New ( size as uinteger ) As Any Ptr [ Export ]
Operator typename.New[] ( size As UInteger ) As Any Ptr [ Export ]
Operator typename.Delete ( buf  As Any Ptr ) [ Export ]
Operator typename.Delete[] ( buf  As Any Ptr ) [ Export ]

Parameters
typename 
Name of the Type, Class, Union, or Enum.
assignment_op 
let += -= *= &= /= \= mod= shl= shr= and= or= xor= imp= eqv= ^=
unary_op
- not * -> abs sgn fix frac int exp log sin asin cos acos tan atn len sqr
binary_op
+ - * & / \ mod shl shr and or xor imp eqv ^ = <> < > <= >=

Description
The built in operators like =, +, and cast have predefined behaviors when used in expressions.  These operators can be overloaded to do something other than predefined operations when at


-------------------------------------------------------- KeyPgOpExponentiate ----

Operator ^ (Exponentiate)
  

	Raises a numeric expression to some power

Syntax
Declare Operator ^ ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Usage
result = lhs ^ rhs

Parameters
lhs
The left-hand side base expression.
rhs
The right-hand side exponent expression.

Return Value
Returns the exponentiation of a base expression raised to some exponent.

Description
Operator ^ (Exponentiate) returns the result of a base expression (lhs) raised to some exponent expression (rhs). ^ works with double float numbers only, operands of other types will be 


-------------------------------------------------------- KeyPgOpFor ----

Operator For (Iteration)
  

	Declares or defines operators used by a For...Next loop with user defined type variables

Syntax
{ Type | Class | Union } typename
Declare Operator For ()
Declare Operator For ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

Usage
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

Parameters
(including arguments)
typename
name of the Type, Class, or Union
stp, step_value
a typename object used as an incremental value
iterator
a typename object used as an iterator
end_value
a typename object used as a loop-terminating value
start_value
a typename object used to copy construct or assign to the iterator initially

Description
Operator For, Operator Next and Operator Step can be overloaded in user-defined type definitions to allow objects of that type to be used as iterators and step values in For...Next loops


-------------------------------------------------------- KeyPgOpGreaterThan ----

Operator > (Greater Than)
  

	Compares an expression greater than another expression

Syntax
Declare Operator > ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator > ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator > ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator > ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator > ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator > ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator > ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator > ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator > ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator > ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator > ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator > ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator > ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator > ( ByRef lhs As T, ByRef rhs As T ) As Integer

Usage
result = lhs > rhs

Parameters
lhs
The left-hand side expression to compare to.
rhs
The right-hand side expression to compare to.
T
Any pointer type.

Return Value
Returns negative one (-1) if the left-hand side expression is greater than the right-hand side expression, or zero (0) if less than or equal.

Description
Operator > (Greater than) is a binary operator that compares an expression greater than another expression and returns the result - a boolean value in the form of an Integer: negative on


-------------------------------------------------------- KeyPgOpGreaterThanOrEqual ----

Operator >= (Greater Than Or Equal)
  

	Compares an expression greater than or equal to another expression

Syntax
Declare Operator >= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator >= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator >= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator >= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator >= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator >= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator >= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator >= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator >= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator >= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator >= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator >= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator >= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator >= ( ByRef lhs As T, ByRef rhs As T ) As Integer

Usage
result = lhs >= rhs

Parameters
lhs
The left-hand side expression to compare to.
rhs
The right-hand side expression to compare to.
T
Any pointer type.

Return Value
Returns negative one (-1) if the left-hand side expression is greater than or equal to the right-hand side expression, or zero (0) if less than.

Description
Operator >= (Greater than or Equal) is a binary operator that compares an expression greater than or equal to another expression and returns the result - a boolean value in the form of a


-------------------------------------------------------- KeyPgOpImp ----

Operator Imp (Implication)
  

	Returns the bitwise-and (implication) of two numeric values

Syntax
Declare Operator Imp ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs Imp rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the bitwise-implication of the two operands.

Description
This operator returns the bitwise-implication of its operands, a logical operation that results in a value with bits set depending on the bits of the operands (for conversion of a boolea


-------------------------------------------------------- KeyPgOpIntegerDivide ----

Operator \ (Integer Divide)
  

	Divides two Integer expressions

Syntax
Declare Operator \ ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator \ ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Usage
result = lhs \ rhs

Parameters
lhs
The left-hand side dividend expression.
rhs
The right-hand side divisor expression.

Return Value
Returns the quotient of an Integer dividend and divisor.

Description
Operator \ (Integer division) divides two Integer expressions and returns the result. Float numeric values are converted to Integer by rounding up or down, and the fractional part of the


-------------------------------------------------------- KeyPgOpIs ----

Operator Is (Run-Time Type Information)
  

	Check if an object is compatible to a type derived from its compile-time type
(in the context of inheritance)

Syntax
result = expression Is  typename

Parameters
expression
The expression to check, an object of a type that is directly or indirectly derived from Object using Extends.
typename
The child type to check for. This type must be directly or indirectly derived from the type of expression (the compile-time type of the object).

Return Value
Returns negative one (-1) if the expression is an object of real-type typename or one of its base-types derived from the expression type, or zero (0) if it's an object of an incompatible type.

Description
The Is operator must be used in conjunction with inheritance in order to check compatibility between objects and types from an inheritance structure extending the built-in Object type.



-------------------------------------------------------- KeyPgOpLessThan ----

Operator < (Less Than)
  

	Compares an expression less than another expression

Syntax
Declare Operator < ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator < ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator < ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator < ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator < ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator < ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator < ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator < ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator < ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator < ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator < ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator < ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator < ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator < ( ByRef lhs As T, ByRef rhs As T ) As Integer

Usage
result = lhs < rhs

Parameters
lhs
The left-hand side expression to compare to.
rhs
The right-hand side expression to compare to.
T
Any pointer type.

Return Value
Returns negative one (-1) if the left-hand side expression is less than the right-hand side expression, or zero (0) if greater than or equal.

Description
Operator < (Less than) is a binary operator that compares two expressions for inequality and returns the result - a boolean value in the form of an Integer: negative one (-1) for true an


-------------------------------------------------------- KeyPgOpLessThanOrEqual ----

Operator <= (Less Than Or Equal)
  

	Compares an expression less than or equal to another expression

Syntax
Declare Operator <= ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <= ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <= ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <= ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <= ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <= ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <= ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <= ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <= ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <= ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <= ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <= ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <= ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <= ( ByRef lhs As T, ByRef rhs As T ) As Integer

Usage
result = lhs <= rhs

Parameters
lhs
The left-hand side expression to compare to.
rhs
The right-hand side expression to compare to.
T
Any pointer type.

Return Value
Returns negative one (-1) if the left-hand side expression is less than or equal to the right-hand side expression, or zero (0) if greater than.

Description
Operator <= (Less than or Equal) is a binary operator that compares an expression less than or equal to another expression and returns the result - a boolean value in the form of an Inte


-------------------------------------------------------- KeyPgOpLet ----

Operator Let (Assign)
  

	Indicates the assignment operator when overloading Operator = (Assignment)

Syntax
{ Type | Class | Union } typename
Declare Operator Let ( [ ByRef | ByVal ] rhs As datatype )
End { Type | Class | Union }

Operator typename.Let ( [ ByRef | ByVal ] rhs As datatype )

Usage
lhs = rhs
or
lhs => rhs

Parameters
typename 
name of the Type, Class, or Union.
lhs
The variable to assign to.
rhs
The value to assign.

Description
Let is used to overload the Operator =[>] (Assignment) operator and to distinguish it from the comparison operator Operator = (Equal).

lhs =[>] rhs will assign the rhs to lhs by invok


-------------------------------------------------------- KeyPgOpLetlist ----

Operator Let() (Assignment)
  

	Assigns fields of a user defined type to a list of variables

Syntax
Let( variable1 [, variable2 [, ... ]] ) = UDT_var
or
Let( variable1 [, variable2 [, ... ]] ) => UDT_var

Parameters
variable1 [, variable2 [, ... ]]
Comma separated list of variables to receive the values of the UDT variable's fields.
UDT_var
A user defined type variable.

Description
Assigns the values from the UDT_var variable's fields to the list of variables.

When the UDT Extends a Base, the first variable (variable1) assigned by the operator then corresponds t


-------------------------------------------------------- KeyPgOpMemberAccess ----

Operator . (Member Access)
  

	Returns a reference to a member from a reference to an object

Syntax
Declare Operator . ( ByRef lhs As T ) ByRef As U

Usage
result = lhs . rhs

Parameters
lhs
An object.
T
A user-defined type.
rhs
The name of a member to access.
U
The type that rhs refers to.

Return Value
Returns a reference to the member specified by rhs.

Description
Operator . (Member access) returns a reference to a member of an object.

Operator . (Member access) can also be used to access members of an implicit object inside a With..End With bl


-------------------------------------------------------- KeyPgOpModulus ----

Operator Mod (Modulus)
  

	Finds the remainder from a division operation

Syntax
Declare Operator Mod ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer

Usage
result = lhs Mod rhs

Parameters
lhs
The left-hand side dividend expression.
rhs
The right-hand side divisor expression.

Return Value
Returns the remainder of a division operation.

Description
Operator Mod (Modulus) divides two Integer expressions and returns the remainder. Float numeric values are converted to Integer by rounding up or down.

Neither of the operands are mod


-------------------------------------------------------- KeyPgOpMultiply ----

Operator * (Multiply)
  

	Multiplies two numeric expressions

Syntax
Declare Operator * ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator * ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator * ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator * ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Usage
result = lhs * rhs

Parameters
lhs
The left-hand side multiplicand expression.
rhs
The right-hand side multiplicand expression.

Return Value
Returns the product of two multiplicands.

Description
Operator * (Multiply) returns the product of two multiplicands.

Neither operand is modified in any way.

This operator can be overloaded to accept user-defined types.




-------------------------------------------------------- KeyPgOpNegate ----

Operator - (Negate)
  

	Changes the sign of a numeric expression

Syntax
Declare Operator - ( ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef rhs As Single ) As Single
Declare Operator - ( ByRef rhs As Double ) As Double

Usage
result = - rhs

Parameters
rhs
The right-hand side numeric expression to negate.

Return Value
Returns the negative of the expression.

Description
Operator - (Negate) is a unary operator that negates the value of its operand.

The operand is not modified in any way.

This operator can be overloaded for user-defined types.




-------------------------------------------------------- KeyPgOpNew ----

Operator New Expression
  

	Operator to dynamically allocate memory and construct data of a specified type.

Usage
result = New datatype
or
result = New datatype ( initializers, ... )
or
result = New datatype[ count ]

Parameters
datatype
Name of the data type to create.
initializers
Initial value(s) for the variable.
count
Exact number of elements to allocate.

Return Value
A pointer of type datatype to the newly allocated data, or null pointer if the memory allocation failed.

Description
The New Expression operator dynamically allocates memory and constructs a specified data type.

For simple types, like integers, an initial value can be given. For types without constr


-------------------------------------------------------- KeyPgOpNewOverload ----

Operator New Overload
  

	Member operator to overload dynamic memory allocation process part provided by Operator New Expression when applying to a UDT (User Defined Type).

Syntax
Declare Operator New ( size As UInteger ) As Any Ptr
Declare Operator new[] ( size As UInteger ) As Any Ptr

Parameters
size 
Number of bytes to allocate.
Return Value
A pointer of type Any Ptr to the start of the newly allocated memory.

Description
The member operator New Overload overloads the dynamic memory allocation process part provided by the New Expression operator when applying to a UDT (User Defined Type). So the user can 


-------------------------------------------------------- KeyPgOpNext ----

Operator Next (Iteration)
  

	Determines if a For...Next loop should be terminated

Syntax
{ Type | Class | Union } typename
Declare Operator Next ( [ ByRef | ByVal ] cond As typename ) As Integer
Declare Operator Next ( [ ByRef | ByVal ] cond As typename, [ ByRef | ByVal ] stp As typename ) As Integer
...
End { Type | Class | Union }

Usage
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

Parameters
(including arguments)
typename
name of the Type, Class, or Union
cond, end_value
a typename object used as a loop-terminating value
stp, step_value
a typename object used as an incremental value
iterator
a typename object used as an iterator
start_value
a typename object used to copy construct or assign to the iterator initially

Description
Operator For, Operator Next and Operator Step can be overloaded in user-defined type definitions to allow objects of that type to be used as iterators and step values in For...Next loops


-------------------------------------------------------- KeyPgOpNot ----

Operator Not (Complement)
  

	Returns the bitwise-not (complement) of a numeric value

Syntax
Declare Operator Not ( ByRef rhs As Byte ) As Integer
Declare Operator Not ( ByRef rhs As UByte ) As Integer
Declare Operator Not ( ByRef rhs As Single ) As Integer
Declare Operator Not ( ByRef rhs As Double ) As Integer

Declare Operator Not ( ByRef rhs As T ) As T

Usage
result = Not rhs

Parameters
rhs
The right-hand side expression.
T
Any numeric or boolean type.

Return Value
Returns the bitwise-complement of its operand.

Description
This operator returns the bitwise-complement of its operand, a logical operation that results in a value with bits set depending on the bits of the operand.
(for a boolean type, 'Not fa


-------------------------------------------------------- KeyPgOpNotEqual ----

Operator <> (Not Equal)
  

	Compares two expressions for inequality

Syntax
Declare Operator <> ( ByRef lhs As Byte, ByRef rhs As Byte ) As Integer
Declare Operator <> ( ByRef lhs As UByte, ByRef rhs As UByte ) As Integer
Declare Operator <> ( ByRef lhs As Short, ByRef rhs As Short ) As Integer
Declare Operator <> ( ByRef lhs As UShort, ByRef rhs As UShort ) As Integer
Declare Operator <> ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator <> ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As Integer
Declare Operator <> ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As Integer
Declare Operator <> ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As Integer

Declare Operator <> ( ByRef lhs As Single, ByRef rhs As Single ) As Integer
Declare Operator <> ( ByRef lhs As Double, ByRef rhs As Double ) As Integer

Declare Operator <> ( ByRef lhs As String, ByRef rhs As String ) As Integer
Declare Operator <> ( ByRef lhs As ZString, ByRef rhs As ZString ) As Integer
Declare Operator <> ( ByRef lhs As WString, ByRef rhs As WString ) As Integer

Declare Operator <> ( ByRef lhs As T, ByRef rhs As T ) As Integer

Declare Operator <> ( ByRef lhs As Boolean, ByRef rhs As Boolean ) As Boolean

Usage
result = lhs <> rhs

Parameters
lhs
The left-hand side expression to compare to.
rhs
The right-hand side expression to compare to.
T
Any pointer type.

Return Value
Returns negative one (-1) if expressions are not equal, or zero (0) if equal.

Description
Operator <> (Not equal) is a binary operator that compares two expressions for inequality and returns the result - a boolean value mainly in the form of an Integer: negative one (-1) for


-------------------------------------------------------- KeyPgOpOr ----

Operator Or (Inclusive Disjunction)
  

	Returns the bitwise-or (inclusive disjunction) of two numeric values

Syntax
Declare Operator Or ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs Or rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the bitwise-disjunction of the two operands.

Description
This operator returns the bitwise-disjunction of its operands, a logical operation that results in a value with bits set depending on the bits of the operands (for conversion of a boolea


-------------------------------------------------------- KeyPgOpOrElse ----

Operator Orelse (Short Circuit Inclusive Disjunction)
  

	Returns the short circuit-or (Inclusive Disjunction) of two numeric values

Syntax
Declare Operator OrElse ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs OrElse rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the short circuit-or (inclusive disjunction) of the two operands.

Description
This operator evaluates the left hand side expression.  If the result is nonzero, then -1 (true) is immediately returned.  If the result is zero then the right hand side is evaluated, an


-------------------------------------------------------- KeyPgOpPlacementNew ----

Operator Placement New
  

	Operator to construct an object at a specified memory address.

Syntax
result = New(address) datatype
or
result = New(address) datatype ( initializers, ... )
or
result = New(address) datatype[ count ]

Parameters
address 
the location in memory to construct. the parenthesis are not optional.
initializers
Initial value(s) for the variable.
datatype
name of the data type to construct.
count
Number of elements to construct.

Return Value
A pointer of type datatype to the newly constructed data.

Description
The Placement New operator constructs a specified data type at the specified memory location. 

For simple types, like integers, an initial value can be given. For types without Constr


-------------------------------------------------------- KeyPgOpPpConcat ----

Operator ## (Preprocessor Concatenate)
  

	Preprocessor operator to concatenate strings

Syntax
text##text

Description
This operator creates a new token by concatenating the texts at both sides of it.  This text can be recognized by other macros and further expanded.  One use, is to create a macro that e


-------------------------------------------------------- KeyPgOpPpEscape ----

Operator ! (Escaped String Literal)
  

	Explicitly indicates that a string literal should be processed for escape sequences.

Syntax
!"text"

Parameters
!
The preprocessor escaped string operator
"text"	
The string literal containing escape characters

Description
This operator explicitly indicates that the string literal following it (wrapped in double quotes) should be processed for escape sequences.  This a preprocessor operator and can only be


-------------------------------------------------------- KeyPgOpPpNoescape ----

Operator $ (Non-Escaped String Literal)
  

	Explicitly indicates that a string literal should not be processed for escape sequences.

Syntax
$"text"

Parameters
$
The preprocessor non-escaped operator
"text"	
The string literal

Description
This operator explicitly indicates that the string literal following it (wrapped in double quotes) should not be processed for escape sequences.  This a preprocessor operator and can onl


-------------------------------------------------------- KeyPgOpPpStringize ----

Operator # (Preprocessor Stringize)
  

	Preprocessor operator to convert macro arguments to strings

Syntax
#macro_argument

Description
This operator converts the macro_argument into a string whose value is the name of the argument. This substitution is made during the macro expansion, previous to compilation.

Note: b


-------------------------------------------------------- KeyPgOpProcptr ----

Operator Procptr (Procedure Pointer)
  

	Returns the address of a procedure

Syntax
Declare Operator ProcPtr ( ByRef identifier As proctype [, proctype ] ) As proctype Ptr

Usage
result = ProcPtr ( identifier [, proctype ] )

Parameters
identifier
A procedure identifier.
proctype
Any type of procedure (sub/function).

Return Value
Returns the address of the procedure.

Description
This operator returns the address of a Sub or Function procedure.

When using the two arguments PROCPTR( identifier, type ) syntax, this allows of getting procedure pointer for based o


-------------------------------------------------------- KeyPgOpPtrIndex ----

Operator [] (Pointer Index)
  

	Returns a reference to memory offset from an address

Syntax
Declare Operator [] ( ByRef lhs As T Pointer, ByRef rhs As Integer ) ByRef As T


Usage
result = lhs [ rhs ]
or
lhs [ rhs ] = value

Parameters
lhs
The base address.
rhs
A signed offset from lhs.
T
Any data type.

Description
This operator returns a reference to a value some distance in memory from a base address. It is essentially shorthand for "*(lhs + rhs)" because the reference can be thought of as a poin


-------------------------------------------------------- KeyPgOpPtrMemberAccess ----

Operator -> (Pointer To Member Access)
  

	Returns a reference to a member from a pointer to an object

Syntax
Declare Operator -> ( ByRef lhs As T Ptr ) ByRef As U

Usage
result = lhs -> rhs

Parameters
lhs
The address of an object.
T
A user-defined type.
rhs
The name of a member to access.
U
The type that rhs refers to.

Return Value
Returns a reference to the member specified by rhs.

Description
Operator -> (Pointer to member access) returns a reference to a member of an object through a pointer to that object. It has the effect of dereferencing a pointer to an object, then usin


-------------------------------------------------------- KeyPgOpShiftLeft ----

Operator Shl (Shift Left)
  

	Shifts the bits of a numeric expression to the left

Syntax
Declare Operator Shl ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shl ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shl ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shl ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

Usage
result = lhs Shl rhs

Parameters
lhs
The left-hand side expression.
rhs
The right-hand side shift expression.

Return Value
Returns the result of lhs being shifted left rhs number of times.

Description
Operator Shl (Shift left) shifts all of the bits in the left-hand side expression (lhs) left a number of times specified by the right-hand side expression (rhs). Numerically, the result 


-------------------------------------------------------- KeyPgOpShiftRight ----

Operator Shr (Shift Right)
  

	Shifts the bits of a numeric expression to the right

Syntax
Declare Operator Shr ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator Shr ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger
Declare Operator Shr ( ByRef lhs As LongInt, ByRef rhs As LongInt ) As LongInt
Declare Operator Shr ( ByRef lhs As ULongInt, ByRef rhs As ULongInt ) As ULongInt

Usage
result = lhs Shr rhs

Parameters
lhs
The left-hand side expression.
rhs
The right-hand side shift expression.

Return Value
Returns the result of lhs being shifted right rhs number of times.

Description
Operator Shr (Shift right) shifts all of the bits in the left-hand side expression (lhs) right a number of times specified by the right-hand side expression (rhs). Numerically, the resul


-------------------------------------------------------- KeyPgOpStep ----

Operator Step (Iteration)
  

	Increments the iterator of a For...Next loop

Syntax
{ Type | Class | Union } typename
Declare Operator Step ()
Declare Operator Step ( [ ByRef | ByVal ] stp As typename )
...
End { Type | Class | Union }

Usage
For iterator [ As typename ] = start_value To end_value [ Step step_value ]
[ ...statements... ]
Next

Parameters
(including arguments)
typename
name of the Type, Class, or Union
stp, step_value
a typename object used as an incremental value
iterator
a typename object used as an iterator
end_value
a typename object used as a loop-terminating value
start_value
a typename object used to copy construct or assign to the iterator initially

Description
Operator For, Operator Next and Operator Step can be overloaded in user-defined type definitions to allow objects of that type to be used as iterators and step values in For...Next loops


-------------------------------------------------------- KeyPgOpStringIndex ----

Operator [] (String Index)
  

	Returns a reference to the numeric value of a character in a string

Syntax
Declare Operator [] ( ByRef lhs As String, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As ZString, ByRef rhs As Integer ) ByRef As UByte
Declare Operator [] ( ByRef lhs As WString, ByRef rhs As Integer ) ByRef As T

Usage
result = lhs [ rhs ]
or
lhs [ rhs ] = value

Parameters
lhs
The string (a string reference, not a string returned as local copy).
rhs
A zero-based offset from the first character.
T
The wide-character type (varies per platform).

Description
This operator returns a reference to the numeric value of a specific character in a string:
 For a String or a ZString:
a UByte (containing the ASCII value of the character).
 For a W


-------------------------------------------------------- KeyPgOpStrptr ----

Operator Strptr (String Pointer)
  

	Returns the address of a string's character data.

Syntax
Declare Operator StrPtr ( ByRef lhs As String ) As ZString Ptr
Declare Operator StrPtr ( ByRef lhs As WString ) As WString Ptr

Usage
result = StrPtr ( lhs )

Parameters
lhs
A string.

Return Value
Returns a ZString/WString Ptr to a string/wstring's character data (null value in case of empty string).

Description
This operator returns a ZString/WString Ptr that points to the beginning of a string/wstring's character data. Operator Strptr is the proper method for acquiring the address of a string'


-------------------------------------------------------- KeyPgOpSubtract ----

Operator - (Subtract)
  

	Subtracts two expressions

Syntax
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As Integer ) As Integer
Declare Operator - ( ByRef lhs As UInteger, ByRef rhs As UInteger ) As UInteger

Declare Operator - ( ByRef lhs As Single, ByRef rhs As Single ) As Single
Declare Operator - ( ByRef lhs As Double, ByRef rhs As Double ) As Double

Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As T Pointer ) As Integer
Declare Operator - ( ByRef lhs As T Pointer, ByRef rhs As Integer ) As T Pointer

Declare Operator - ( ByRef lhs As T, ByRef rhs As T ) As Integer
Declare Operator - ( ByRef lhs As T, ByRef rhs As Integer ) As T
Declare Operator - ( ByRef lhs As Integer, ByRef rhs As T ) As T

Usage
result = lhs - rhs

Parameters
lhs
The left-hand side expression to subtract from.
rhs
The right-hand side expression to subtract.
T
Any pointer type.

Return Value
Returns the subtraction of two expressions.

Description
When the left and right-hand side expressions are numeric values, Operator - (Subtract) returns the subtraction of the two values.

If the left and right-hand side expressions are both


-------------------------------------------------------- KeyPgOption ----

Option()
  

	Specifies additional attributes and/or characteristics of symbols.

Syntax
Option( "literal-text" )

Parameters
literal-text
The literal text specifying the option. See description.

Description
Option() allows the programmer to specify additional attributes or characteristics.  Enclosing the string into quotes and parentheses is required in the syntax.  Unrecognized options are


-------------------------------------------------------- KeyPgOptionbase ----

Option Base
  

	Specifies a default lower bound for array declarations

Syntax
Option Base base_subscript

Parameters
base_subscript
an numeric literal value

Description
Option Base is a statement that sets the default lower bound for any following array declarations. This default remains in effect for the rest of the module in which Option Base is used,


-------------------------------------------------------- KeyPgOptionbyval ----

Option ByVal
  

	Specifies parameters are to be passed by value by default in procedure declarations

Syntax
Option ByVal

Description
Option ByVal is a statement that sets the default passing convention for procedure parameters to by value, as if declared with ByVal. This default remains in effect for the rest of the m


-------------------------------------------------------- KeyPgOptiondynamic ----

Option Dynamic
  

	Specifies variable-length array declarations

Syntax
Option Dynamic

Description
Option Dynamic is a statement that specifies that any following array declarations are variable-length, whether they are declared with constant subscript ranges or not. This remains in e


-------------------------------------------------------- KeyPgOptionescape ----

Option Escape
  

	Specifies that string literals should be processed for C-like escape sequences by default

Syntax
Option Escape

Description
Option Escape is a statement that causes string literals to be processed for C-like escape sequences by default. Normally, escape sequences have no effect in string literals unless the s


-------------------------------------------------------- KeyPgOptionexplicit ----

Option Explicit
  

	Forces variables, objects and arrays to be declared before they are used

Syntax
Option Explicit

Description
Option Explicit is a statement that forces any following variable, object or array usage to be preceded by a declaration, with, for example, Dim or Static. This rule remains in effect fo


-------------------------------------------------------- KeyPgOptiongosub ----

Option Gosub
  

	Enables support for GoSub and On Gosub.

Syntax
Option Gosub

Description
Option Gosub enables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to en


-------------------------------------------------------- KeyPgOptionnogosub ----

Option Nogosub
  

	Disables support for GoSub and On Gosub.

Syntax
Option Nogosub

Description
Option Nogosub disables support for GoSub and Return (from gosub).

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to


-------------------------------------------------------- KeyPgOptionnokeyword ----

Option NoKeyword
  

	"Undefines" a reserved keyword

Syntax
Option NoKeyword keyword

Parameters
keyword
the keyword to undefine

Description
Option NoKeyword is a statement that undefines a FreeBASIC reserved keyword, meaning it can be used as an identifier for a variable, object, procedure or any other symbol. The keyword is


-------------------------------------------------------- KeyPgOptionprivate ----

Option Private
  

	Specifies internal linkage by default for procedure declarations

Syntax
Option Private

Description
Option Private is a statement that gives any following procedure declarations internal linkage by default, as if declared with Private. This default remains in effect for the rest of the


-------------------------------------------------------- KeyPgOptionstatic ----

Option Static
  

	Reverts to default array declaration behavior

Syntax
Option Static

Description
Option Static is a statement that overrides the behavior of Option Dynamic, that is, arrays declared with constant subscript ranges are fixed-length. This remains in effect for the rest 


-------------------------------------------------------- KeyPgOpValueOf ----

Operator * (Value Of)
  

	Dereferences a pointer

Syntax
Declare Operator * ( ByRef rhs As T Pointer ) ByRef As T


Usage
result = * rhs
or
* rhs = value

Parameters
rhs
The address to dereference.
T
Any standard, user-defined or procedure type.

Return Value
Returns a reference to the value stored at the address rhs.

Description
Operator * (Value of) returns a reference to the value stored at an address, and is often called the dereference operator. The operand is not modified in any way.
Any type of Pointer ca


-------------------------------------------------------- KeyPgOpVarptr ----

Operator Varptr (Variable Pointer)
  

	Returns the address of a variable or object

Syntax
Declare Operator VarPtr ( ByRef lhs As T ) As T Ptr

Syntax
result = VarPtr ( lhs )

Parameters
lhs
A variable or object.
T
Any data type.

Return Value
Returns the address of a variable or object.

Description
This operator returns the address of its operand.

When the operand is of type String, the address of the internal string descriptor is returned. Use Operator Strptr (String Pointer) t


-------------------------------------------------------- KeyPgOpXor ----

Operator Xor (Exclusive Disjunction)
  

	Returns the bitwise-xor (exclusive disjunction) of two numeric values

Syntax
Declare Operator Xor ( ByRef lhs As T1, ByRef rhs As T2 ) As Ret

Usage
result = lhs Xor rhs

Parameters
lhs
The left-hand side expression.
T1
Any numeric or boolean type.
rhs
The right-hand side expression.
T2
Any numeric or boolean type.
Ret
A numeric or boolean type (varies with T1 and T2).

Return Value
Returns the bitwise-xor of the two operands.

Description
This operator returns the bitwise-exclusion of its operands, a logical operation that results in a value with bits set depending on the bits of the operands (for conversion of a boolean 


-------------------------------------------------------- KeyPgOrGfx ----

Or
  

	Parameter to the Put graphics statement which uses a bit-wise Or as the blitting method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Or

Parameters
Or
Required.

Description
The Or method combines each source pixel with the corresponding destination pixel, using the bit-wise Or function.  The result of this is output as the destination pixel.
This method wo


-------------------------------------------------------- KeyPgOut ----

Out
  

	Outputs a value to a hardware port.

Syntax
Declare Function Out ( ByVal port As UShort , ByVal data As UByte ) As Long

Usage
Out port,value

Parameters
port
Hardware port to write to.
data
Data value to write.

Description
This function sends value to port and returns immediately.




-------------------------------------------------------- KeyPgOutput ----

Output
  

	Specifies text file to be opened for output mode

Syntax
Open filename for Output [Encoding encoding_type] [Lock lock_type] as [#]filenum 

Parameters
filename
file name to open for output
encoding_type
indicates encoding type for the file
lock_type
locking to be used while the file is open
filenum
unused file number to associate with the open file

Description
A file mode used with Open to open a text file for writing.

This mode is used to write text with Print #, or comma separated values with Write #. 

Text files can't be simultaneousl


-------------------------------------------------------- KeyPgOverload ----

Overload
  

	Specifies that a procedure name can be overloaded

Syntax
Declare [Static] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]

Declare [Static] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type [Static] [Export]

[Public|Private] Sub procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

[Public|Private] Function procedure_name [cdecl|stdcall|pascal] Overload [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

Description
In procedure declarations, Overload allows procedure names to be overloaded, that is, other procedures (regardless of whether to be subs or functions) can then be declared with the same 


-------------------------------------------------------- KeyPgOverride ----

Override
  

	Method attribute; specifies that a method must override a virtual

Syntax
Type typename Extends basename
...
Declare Sub|Function|Operator|Property|Destructor ... ( [parameterlist] ) [[ ByRef ] As datatype] Override
...
End Type

Description
In method declarations, Override can be used to indicate that this method is expected to override a Virtual or Abstract method from the base class. Then the compiler will show an error i


-------------------------------------------------------- KeyPgPaint ----

Paint
  

	Fills an area delimited by a border of a specified color

Syntax
Paint [target,] [STEP] (x, y)[, [paint][, [border_color]]]

Parameters
target
specifies buffer to draw on.  
STEP
indicates that coordinates are relative
(x, y)
coordinates of the pixel on which to start the flood fill (paint)
paint
the color attribute or fill pattern
a numeric value indicates a color, while a string indicates a fill pattern
border_color
boundary color for the fill

Description
Graphics command to fill an area delimited by a border of specified color. Also known as 'flood-fill' or 'paint bucket'.

Paint can operate on the current work page as set by the Scree


-------------------------------------------------------- KeyPgPalette ----

Palette
  

	Customizes colors in modes with paletted colors

Syntax
Palette [Get] [index, color]
Palette [Get] [index, r, g, b]
Palette [Get] Using arrayname(idx)

Parameters
Get
indicates getting palette information rather than setting palette information
index
palette index
color
color attribute
r
red color component
g
green color component
b
blue color component
Using
indicates using array of color values
arrayname(idx)
array and index to get/set color attributes

Description
The Palette statement is used to retrieve or customize the current palette for graphics modes with a color depth of up to 8bpp; using Palette while in a mode with a higher color depth wi


-------------------------------------------------------- KeyPgPascal ----

pascal
  

	Specifies a Pascal-style calling convention in a procedure declaration

Syntax
Sub name pascal [Overload] [Alias "alias"] ( parameters )
Function name pascal [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

Description
In procedure declarations, pascal specifies that a procedure will use the pascal calling convention. In the Pascal calling convention, any parameters are to be passed (pushed onto the st


-------------------------------------------------------- KeyPgPcopy ----

PCopy
  

	Copies one graphical or text page onto another

Syntax
Declare Function PCopy ( ByVal source As Long = -1, ByVal destination As Long = -1 ) As Long

Usage
PCopy [ source ] [, destination ]

Parameters
source
page to copy from
destination
page to copy to

Return Value
Returns zero (0) if successful, or a non-zero error code to indicate a failure.

Description
Copies one graphical or text video page to another. Useful for drawing all graphics on one invisible page and copying it to the active visible page - creating smooth graphics and animati


-------------------------------------------------------- KeyPgPeek ----

Peek
  

	Gets the value of an arbitrary type at an address in memory

Syntax
Declare Function Peek ( ByVal address As Any Ptr ) ByRef As UByte
Declare Function Peek ( datatype, ByVal address As Any Ptr ) ByRef As datatype

Usage
Peek( [ datatype, ] address )

Parameters
address
The address in memory to get the value from.
datatype
The type of value to get. If omitted, UByte is assumed.

Description
This procedure returns a reference to the value in memory given by a memory address, and is equivalent to:
*cast(ubyte ptr, address)
or
*cast(datatype ptr, address)
thus this keyword


-------------------------------------------------------- KeyPgPmap ----

PMap
  

	Maps coordinates between view and physical mapping.

Syntax
Declare Function PMap ( ByVal coord As Single, ByVal func As Long ) As Single

Usage
result = PMap( coord, func )

Parameters
coord
An expression indicating the coordinate to be mapped.
func
The mapping function number to be applied to given coordinate.

Return Value
The mapped coordinate value.

Description
This function converts a coordinate between view (as defined by the Window statement) and physical (as set by the View (Graphics) statement) mappings. Depending on the value of func, exp


-------------------------------------------------------- KeyPgPoint ----

Point
  

	Returns the color attribute of a specified pixel coordinate

Syntax
result = Point( coord_x, coord_y [,buffer] )
or
result = Point( function_index )


Usage
coord_x
x coordinate of the pixel
coord_y
y coordinate of the pixel
buffer
the image buffer to read from
function_index
the type of screen coordinate to return: one of the values 0, 1, 2, 3

Return Value
The return datatype is a ULong.

If the x, y coordinates of a pixel are provided Point returns the color attribute at the specified coordinates, as an 8-bit palette index in 8 bpp indexed modes, a 24-bit RGB value in 16 bpp modes (upper 8 bits unused, limited precision of R,G,B), and a 32-bit RGB or RGBA value in 32 bpp modes (upper 8 bits unused or holding Alpha). Note that it does NOT return a 16-bit value (5 bits R + 6 bits G + 5 bits B).

If the argument is a function index, Point returns one of the graphics cursor coordinates set by the last graphics command.

Argument Value Returned  0The current physical x coordinate.1The current physical y coordinate. 2The current view x coordinate. This returns the same value as the POINT(0) function if the WINDOW statement has not been used.3The current view y coordinate. This returns the same value as the POINT(1) function if the WINDOW statement has not been used.

Description
GfxLib Function with two different uses.
If supplied with two coordinates it reads the color of the pixel at the coordinate coord_x, coord_y of the screen, or of the buffer, if supplied


-------------------------------------------------------- KeyPgPointCoord ----

PointCoord
  

	Queries Draw's pen position in graphics mode

Syntax
Declare Function PointCoord( ByVal func As Long ) As Single

Usage
result = PointCoord( func )

Description
The PointCoord function can be used to query x and y position of the Draw pen in graphics mode. The result value depends on the passed func value:

func value:return value:0x physical 


-------------------------------------------------------- KeyPgPoke ----

Poke
  

	Assigns a value to a location in memory.

Syntax
Declare Sub Poke ( ByVal address As Any Ptr, ByRef value As UByte )
Declare Sub Poke ( datatype, ByVal address As Any Ptr, ByRef value As datatype )

Usage
Poke [ datatype, ] address, value

Parameters
datatype
The type of data at the specified address. If omitted, UByte is assumed.
address
The location in memory to assign to.
value
The value to assign.

Description
Poke assigns a value to a location in memory. It is equivalent to
*cast(ubyte ptr, address) = value
or
*cast(datatype ptr, address) = value

When datatype is a user-defined type, Po


-------------------------------------------------------- KeyPgPos ----

Pos
  

	Returns the horizontal (left to right) position of the text cursor

Syntax
Declare Function Pos ( ) As Long
Declare Function Pos ( ByVal dummy As Long ) As Long

Usage
result = Pos[ ( dummy ) ]

Parameters
dummy
An unused parameter retained for backward compatibility with QBASIC.

Return Value
Returns the horizontal position of the text cursor.

Description
Returns the horizontal (left to right) position of the text cursor. The leftmost column is number 1.




-------------------------------------------------------- KeyPgPpassert ----

#assert
  

	Preprocessor conditional directive

Syntax
#assert  condition

Parameters
condition
A conditional expression that is assumed to be true

Description
Asserts the truth of a conditional expression at compile time.  If condition is false, compilation will stop with an error.

This statement differs from the Assert macro in that #asser


-------------------------------------------------------- KeyPgPpcmdline ----

#Cmdline
  

	Preprocessor directive

Syntax
#cmdline "args..."

Parameters
args...
argument list (separated by spaces) of valid Compiler Options except -print and also generic option -help.

Description
#cmdline is a pre-processor directive that allows specifying compiler options from inside the first specified fb source file.  The first source file is the first specified '.bas' file gi


-------------------------------------------------------- KeyPgPpdefine ----

#define
  

	Preprocessor directive to define a macro

Syntax
#define identifier body
#define identifier( [ parameters ] ) body
#define identifier( [ parameters, ] Variadic_Parameter... ) body

Description
#define allows to declare text-based preprocessor macros. Once the compiler has seen a #define, it will start replacing further occurrences of identifier with body. body may be empty. Th


-------------------------------------------------------- KeyPgPpelse ----

#else
  

	Preprocessor conditional directive

Syntax
#if (expression)
' Conditionally included statements if expression is True
#else
' Conditionally included statements if expression is False 
#endif

Description
#else can be added to an #if, #ifdef, or #ifndef block to provide an alternate result to the conditional expression.




-------------------------------------------------------- KeyPgPpelseif ----

#elseif
  

	Preprocessor conditional directive

Syntax
#if (expression1)
' Conditionally included statements if expression1 is True
#elseif (expression2)
' Conditionally included statements if expression2 is True
#else
' Conditionally included statements if both
' expression1 and expression2 are False
#endif

Description
#elseif can be added to an #if block to provide an additional conditions.




-------------------------------------------------------- KeyPgPpendif ----

#endif
  

	Preprocessor conditional directive

Syntax
#endif

Description
Ends a group of conditional directives

See #if, #ifdef, or #ifndef for examples of usage.




-------------------------------------------------------- KeyPgPperror ----

#error
  

	Preprocessor diagnostic directive

Syntax
#error error_text

Parameters
error_text
The display message

Description
#error interrupts compiling to display error_text when compiler finds it, and then parsing continues. 

This keyword must be surrounded by an #if <condition> ...#endif, so the compiler


-------------------------------------------------------- KeyPgPpif ----

#if
  

	Preprocessor conditional directive

Syntax
#if (expression)
' Conditionally included statements
#endif

Description
Conditionally includes statements at compile time.

Statements contained within the #if / #endif block are included if expression evaluates to True (non-zero) and excluded (ignored) if


-------------------------------------------------------- KeyPgPpifdef ----

#ifdef
  

	Preprocessor conditional directive

Syntax
#ifdef symbol
' Conditionally included statements
#endif

Description
Conditionally includes statements at compile time.

Statements within the #ifdef...#endif block are included if symbol is defined and excluded (ignored) if symbol is not defined.

#i


-------------------------------------------------------- KeyPgPpifndef ----

#ifndef
  

	Preprocessor conditional directive

Syntax
#ifndef symbol
' Conditionally included statements
#endif

Description
Conditionally includes statements at compile time.

Statements within the #ifndef...#endif block are included if symbol is not defined and excluded (ignored) if symbol is defined.

#


-------------------------------------------------------- KeyPgPplang ----

#lang
  

	Preprocessor statement to set the compiler dialect.

Syntax
#lang "lang"

Parameters
"lang"
The dialect to set, enclosed in double quotes, and must be one of "fb", "fblite", "qb", or "deprecated".

Description
If the -forcelang option was not given on the command line, #lang can be used to set the dialect for the source module in which it appears.  At most two passes will be made on the source


-------------------------------------------------------- KeyPgPplibpath ----

#libpath
  

	Preprocessor statement to add a search path for libraries

Syntax
#libpath "path"

Description
Adds a library search path to the linker's list of search paths as if it had been specified on the command line with the '-p' option.

Paths are relative to the working directory where


-------------------------------------------------------- KeyPgPpline ----

#line
  

	Preprocessor directive to set the current line number and file name

Syntax
#line number [ "name" ]

Parameters
number 
new line number
"name"
new file name (optional)

Description
Informs the compiler of a change in line number and file name and updates the __FILE__ and __LINE__ macro values accordingly.

Both compile time messages and run-time messages are affe


-------------------------------------------------------- KeyPgPpmacro ----

#Macro...#Endmacro
  

	Preprocessor directive to define a multiline macro

Syntax
#macro identifier [?] ( [ parameters ] )
body
#endmacro

#macro identifier [?] ( [ parameters, ] Variadic_Parameter... )
body
#endmacro

Description
#macro is the multi-line version of #define.

If using the optional question mark (?) after the identifier in the definition syntax, macros with parameters can be invoked without using


-------------------------------------------------------- KeyPgPpPragma ----

#pragma
  

	Preprocessor directive

Syntax
#pragma option [ = value ]
Or
#pragma push ( option [, value ] )
Or
#pragma pop ( option )

Parameters
Possible values for option and related values:

Option Value Description msbitfields false Use bitfields compatible with gcc (default) msbitfields true  Use bitfields compatible with those used in Microsoft C compilers once N/A cause the source file in which the pragma ppears to behave as though it was included with #include once ... constness false disable 'CONST qualifier discarded' warning in current source constness true enable 'CONST qualifier discarded' warning in current source lookup108 false use normal symbol lookups for unqualified symbol names lookup108 true use fbc-1.08.x or earlier symbol lookups for unqualified symbol names
If value is not given, the compiler assumes True (-1).  A zero (0) value may be used in place of False.  A non-zero (for example, -1) value may be used in place of True.

Description
Allows the setting of compiler options inside the source code.

Push saves the current value of the option onto a stack, then assigns the new value (or True) to it. Pop restores the op


-------------------------------------------------------- KeyPgPpPragmaReserve ----

#Pragma Reserve
  

	Preprocessor directive

Syntax
#pragma reserve symbol
or
#pragma reserve (extern) symbol
or
#pragma reserve (asm) symbol
or
#pragma reserve (asm, extern) symbol) or #pragma reserve (extern, asm) symbol)

Parameters
symbol
symbol name to reserve.

Description
#pragma reserved statements are preprocessor directives that allow user to reserve symbol names by accessing to the internal symbol tables of the fbc compiler:
- #pragma reserve symbol



-------------------------------------------------------- KeyPgPpprint ----

#print
  

	Preprocessor diagnostic directive

Syntax
#print text

Description
Causes compiler to output text to screen during compilation.




-------------------------------------------------------- KeyPgPpundef ----

#undef
  

	Preprocessor directive to undefine a macro

Syntax
#undef symbol

Description
Undefines a symbol previously defined with #define.

Can be used to ensure that a macro or symbol has a limited lifespan and does not conflict with a similar macro definition that may 


-------------------------------------------------------- KeyPgPreserve ----

Preserve
  

	Used with ReDim to preserve contents will resizing an array

Syntax
ReDim Preserve array(...) [As datatype]

Description
Used with ReDim so that when an array is resized, data is not reset but is preserved. This means when the array is enlarged that only new data is reset, while the old data remains the sa


-------------------------------------------------------- KeyPgPreset ----

PReset
  

	Plots a single pixel

Syntax
PReset [target ,] [STEP] (x, y) [,color]

Parameters
target
specifies buffer to draw on.  
STEP
indicates that coordinates are relative
(x, y)
coordinates of the pixel.
color
the color attribute.

Description
target specifies buffer to draw on.  target may be an image created with ImageCreate or Get (Graphics).  If omitted, target defaults to the screen's current work page.

(x, y) are the 


-------------------------------------------------------- KeyPgPrint ----

(Print | ?)
  

	Writes text to the screen

Syntax
(Print | ?) [ expressionlist ] [ , | ; ]

Parameters
expressionlist
list of items to print

Description
Print outputs a list of values to the screen. Numeric values are converted to their string representation, with left padding for the sign. Objects of user-defined types must overload Ope


-------------------------------------------------------- KeyPgPrintPp ----

(Print | ?) #
  

	Writes a list of values to a file or device

Syntax
(Print | ?) # filenum, [ expressionlist ] [ , | ; ]

Parameters
filenum
The file number of a file or device opened for Output or Append.
expressionlist
List of values to write.

Description
Print # outputs a list of values to a text file or device. Numeric values are converted to their string representation, with left padding for the sign. Objects of user-defined types must


-------------------------------------------------------- KeyPgPrintusing ----

(Print | ?) Using
  

	Outputs formatted text to the screen or output device.

Syntax
(Print | ?) [# filenum ,] [ printexpressionlist {,|;} ] Using formatstring ; [ expressionlist [ ; ] ]

Parameters
filenum
The file number of a file or device opened for Output or Append.  (Alternatively LPrint may be used where appropriate, instead of Print #)
printexpressionlist
Optional preceding list of items to print, separated by commas (,) or semi-colons (;) (see Print for more details).
formatstring
Format string to use.
expressionlist
List of items to format, separated by semi-colons (;).

Description
Print to screen various expressions using a format determined by the formatstring parameter. Internally, Print Using uses a buffer size of 2048 bytes: while it is highly unlikely that th


-------------------------------------------------------- KeyPgPrivate ----

Private
  

	Specifies a procedure having internal linkage

Syntax
Private Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Private Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

Description
In procedure definitions (forbidden at declaration line level), Private specifies that a procedure has internal linkage, meaning its name is not visible to external modules.
Therefore a


-------------------------------------------------------- KeyPgProperty ----

Property
  

	Declares or defines a property in a type or class

Syntax
{ Type | Class } typename
Declare Property fieldname () [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] new_value As datatype )
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype
Declare Property fieldname ( [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype )
End { Type | Class }

Property typename.fieldname () [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname ( [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype ) [ ByRef ] As datatype [ Export ]
statements
End Property

Property typename.fieldname (  [ ByRef | ByVal ] index As datatype, [ ByRef | ByVal ] new_value As datatype ) [ Export ]
statements
End Property

Parameters
typename 
name of the Type or Class
fieldname 
name of the property
new_value 
the value passed to property to be assigned
index 
the property index value

Description
Property fields are used to get and set values of a Type or Class in the same way as other data fields except instead of a simple assignment to a field or a value retrieved from field, a


-------------------------------------------------------- KeyPgPset ----

PSet
  

	Plots a single pixel

Syntax
PSet [target ,] [STEP] (x, y) [,color]

Parameters
target
specifies buffer to draw on.  
STEP
indicates that coordinates are relative
(x, y)
coordinates of the pixel.
color
the color attribute.

Description
target specifies buffer to draw on.  target may be an image created with ImageCreate or Get (Graphics).  If omitted, target defaults to the screen's current work page.

(x, y) are the 


-------------------------------------------------------- KeyPgPsetGfx ----

PSet
  

	Parameter to the Put graphics statement which selects PSet as the blitting method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], PSet

Parameters
PSet
Required.

Description
The PSet method copies the source pixel values onto the destination pixels.

This is the simplest Put method. The pixels in the destination buffer are directly overwritten with the pix


-------------------------------------------------------- KeyPgPtr ----

(Pointer | Ptr)
  

	A variable declaration type modifier

Syntax
... As DataType {Pointer | Ptr}

Description
Declares a pointer variable.
The variable type can be a predefined type or a user-defined type.

Operator @ (Address Of) operator or VarPtr are used to take the address of a variable.


-------------------------------------------------------- KeyPgPublic ----

Public
  

	Specifies a procedure having external linkage.

Syntax
Public Sub procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [Constructor [priority]] [Static] [Export]
..procedure body..
End Sub

Public Function procedure_name [cdecl|stdcall|pascal] [Overload] [Alias "external_name"] [([parameter_list])] [ ByRef ] As return_type  [Static] [Export]
..procedure body..
End Function

Description
In procedure definitions (forbidden at declaration line level), Public specifies that a procedure has external linkage, meaning its name is visible to external modules. If Public or Priv


-------------------------------------------------------- KeyPgPutfileio ----

Put (File I/O)
  

	Writes data from a buffer to a file

Syntax
Put #filenum As Long, [position As LongInt], data As Any [, amount As UInteger]
Put #filenum As Long, [position As LongInt], data As String
Put #filenum As Long, [position As LongInt], data() As Any

Usage
Put #filenum, position, data [, amount]
varres = Put (#filenum, position, data [, amount])

Parameters
filenum
The value passed to Open when the file was opened.
position
Is the position where Put must start in the file. If the file was opened For Random, the position is in records, else it is given in bytes. If omitted, writing starts at the present file pointer position.  The position is 1-based: i.e. the first record or byte of a file is at position 1.
If position is omitted or zero (0), file writing will start from the current file position.
data
Is the buffer where data is written from. It can be a numeric variable, a string, an array or a user-defined type. The operation will try to transfer to disk the complete variable, unless amount is given.
When putting arrays, data should be followed by an empty pair of brackets: '()'.  Put will write all of the data in the array.  amount is not allowed.
When putting Strings, the number of bytes written is the same as the number of bytes in the string data.  amount is not allowed.
Note: If you want to write values from a buffer, you should NOT pass a pointer to the buffer; instead you should pass the first variable in the buffer (this can be done by dereferencing the pointer with Operator * (Value Of)). If you pass a pointer directly, then Put will put the memory from the pointer variable, not the memory it points to.
amount
Makes Put write to file amount consecutive variables to the file - i.e. it writes ( amount * SizeOf(data) ) bytes of data, starting at data's location in memory, into the file.  If amount is omitted it defaults to 1, meaning that Put just writes a single variable.

Return Value
Put() returns a 32 bit Long: 0 on success; nonzero on error. "disk full" is considered as an error, and results in return code 3. An "exact" amount of data written before is not available, and wouldn't be really useful anyway. 

Description
Writes binary data from a buffer variable to a file opened in Binary or Random mode.

Put can be used as a function, and will return 0 on success or an error code on failure.	

For f


-------------------------------------------------------- KeyPgPutgraphics ----

Put (Graphics)
  

	Copies an image on to another image or screen

Syntax
Put [target, ] [ [STEP](x, y), source [, (x1, y1)-[STEP](x2, y2) ] [, method [, ( alphaval|value|blender [, param]) ] ]

Parameters
target
is the address of the buffer where the image is to be drawn. If it's omitted, the image gets blitted to screen. See below.
[STEP](x, y)
specify offsets from the upper-left corner of the destination buffer, or screen, that the image gets drawn to.  STEP indicates that (x, y) offsets are relative to the current graphics cursor position.
source
is the address of the buffer of the image to be drawn. See below.
(x1, y1)-[STEP](x2, y2)
specify a rectangular area in the source buffer to draw. If omitted, the entire buffer is drawn. STEP indicates that x2 and y2 are relative to x1 and y1, respectively.
method
specifies the method used to draw the image to the destination buffer, and can be any one of the following (the default method is XOR):

Background-independent methods
PSet : Source pixel values are copied without modification.
PRESET : Source pixel values are 1's-complement negated before being copied.
Trans : Source pixel values are copied without modification. Does not draw source pixels of mask color. See below.
Background-dependent methods
And : Destination pixels are bitwise Anded with source pixels. See below.
Or : Destination pixels are bitwise Ored with source pixels. See below.
Xor : Destination pixels are bitwise Xored with source pixels. See below.
Alpha : Source is blended with a transparency factor specified either in the value parameter, or in the image's individual pixels.  See below.
Add: Source is multiplied by a value and added with saturation to the destination. See below.
Custom : Uses a user-defined function to perform blending the source with the destination. See below.

value
is a 0..255 value specifying the transparency value for an ADD or ALPHA method blit.
blender 
specifies the address of a user-defined function to be called in a CUSTOM method blit. See below.
param 
specifies a parameter to pass to the custom blender.

Description
The Put statement can be used to draw an image onto another image or screen. The x and y coordinates are affected by the last call to the View and Window statements, and plotted image re


-------------------------------------------------------- KeyPgRandom ----

Random
  

	Specifies file or device to be opened for random access mode

Syntax
Open filename for Random [Access access_type] [Lock lock_type] as [#]filenum [Len = record_length]

Parameters
filename
file name to open
access_type
indicates whether the file may be read from, written to or both
lock_type
locking to be used while the file is open
filenum
unused file number to associate with the open file
record_length
the size of the record used for the file

Description
Opens a file or device for reading and/or writing binary data in the given file filenum, with records of size record_length.
If the file does not exist, a new file will be created, othe


-------------------------------------------------------- KeyPgRandomize ----

Randomize
  

	Seeds the random number generator

Syntax
Declare Sub Randomize ( ByVal seed As Double = -1.0, ByVal algorithm As Long = 0 )

Usage
Randomize [ seed ][, algorithm ]

Parameters
seed
A Double seed value for the random number generator, but the fractional part is clipped for all algorithms except algorithm #4 (see below). If omitted, a value based on Timer will be used instead.
algorithm
An integer value to select the algorithm (see the standard header "fbmath.bi" for available algorithms). If omitted, the default algorithm for the current language dialect is used.

Description
Sets the random seed that helps Rnd generate random numbers, and selects the algorithm to use.
The constants for algorithm are defined in fbmath.bi. In the -lang fb dialect, these const


-------------------------------------------------------- KeyPgRead ----

Read
  

	Reads values stored with the Data statement.

Syntax
Read variable_list

Description
Reads data stored in the application with the Data command. 

The elements of the variable_list must be of basic types, numeric, strings or elements of arrays and user defined types.



-------------------------------------------------------- KeyPgReadFile ----

Read (File Access)
  

	File access specifier

Syntax
Open filename As String For Binary Access Read As #filenum As Integer

Description
Specifier for the Access clause in the Open statement.  Read specifies that the file is accessible for input.




-------------------------------------------------------- KeyPgReadWriteFile ----

Read Write (File Access)
  

	File access specifier

Syntax
Open filename As String For Binary Access Read Write As #filenum As Integer

Description
Specifier for the Access clause in the Open statement.  Read Write specifies that the file is accessible for both input and output.




-------------------------------------------------------- KeyPgReallocate ----

Reallocate
  

	Reallocates storage for an existing reserved block of memory

Syntax
Declare Function Reallocate cdecl ( ByVal pointer As Any Ptr, ByVal count As UInteger ) As Any Ptr

Usage
result = Reallocate( pointer, count )

Parameters
pointer
The address of allocated memory to be reallocated.
count
The number of bytes, in total, to be reallocated.

Return Value
The address of the reallocated memory. A null (0) pointer is returned if reallocation was unsuccessful, and the original memory pointed to by pointer remains unchanged.

Description
Attempts to reallocate, or resize, memory previously allocated with Allocate or CAllocate. The contents of the buffer are preserved, although if count is less than the original size of t


-------------------------------------------------------- KeyPgRedim ----

ReDim
  

	Defines or resizes a variable-length array

Syntax
Declaring a Dynamic Array:
ReDim [ Shared ] symbolname([subscript [, ...]]) As datatype [, ...]
ReDim [ Shared ] As datatype symbolname([subscript [, ...]]) [, ...]
Resizing a Dynamic Array:
ReDim [ Preserve ] symbolname([subscript [, ...]]) [, ...]
or:
ReDim [ Preserve ] [ ( ] expression [ ) ] ([subscript [, ...]]) [, ...]

Parameters
Shared
Specifies shared (file-scope) access to the array throughout the module.
Preserve
When used with an existing array, the contents of the array will be preserved during the resize. Note that in some cases Preserve will not preserve data at its original index, see below.
symbolname
A new or existing array identifier.
expression or (expression)
An expression referring to an existing array. This can be used to resize arrays which are members of user-defined types. In some cases, it is necessary to specify parentheses around the expression (especially if the array expression itself contains parentheses) - see the examples below.
subscript: [ lowerbound To ] upperbound
The lower and upper bound range for a dimension of the array. Lower bound defaults to zero (0), or the default Base, if not specified.
datatype
The type of elements contained in the array.

Description
ReDim can be used to define new variable-length arrays, or resize existing variable-length arrays while keeping the same number of dimensions. ReDim always produces variable-length array


-------------------------------------------------------- KeyPgRem ----

Rem
  

	Indicates comments in the source code.

Syntax
Rem comment

' Comment

/' Multi-line
   comment '/

Description
A source code line beginning with Rem indicates that the line is a comment and will not be compiled.  

The single quote character (') may also be used to indicate a comment and may ap


-------------------------------------------------------- KeyPgReset ----

Reset
  

	Closes all open files, or resets standard I/O handles.

Syntax
Declare Sub Reset ( )
Declare Sub Reset ( ByVal streamno As Long )

Usage
Reset
or
Reset( streamno )

Parameters
streamno
The stream number to reset, 0 for stdin or 1 for stdout.

Description
Reset, when called with no arguments, closes all disk files.

Reset, when called with the streamno argument, will reset the redirected or piped streams associated with stdin (0), or st


-------------------------------------------------------- KeyPgRestore ----

Restore
  

	Changes the next read location for values stored with the Data statement.

Syntax
Restore [label]

Description
Sets the next-data-to-read pointer to the first element of the first Data statement after the label.  The label must be contained in the same module as the currently-executing code.  Res


-------------------------------------------------------- KeyPgResume ----

Resume
  

	Error handling statement to resume execution after a jump to an error handler

Syntax
Resume

Description
Resume is used in the traditional QB error handling mechanism within an error handler (called by On Error) to return execution to the line that caused the error.  Usually this is used af


-------------------------------------------------------- KeyPgResumenext ----

Resume Next
  

	Error handling statement to resume execution after a jump to an error handler

Syntax
Resume Next

Description
Resume Next is used in the traditional QB error handling mechanism within an error handler (called by On Error) to return execution to the line after the one that caused the error.  Usua


-------------------------------------------------------- KeyPgReturn ----

Return (From Procedure)
  

	Control flow statement to return from a procedure or GoSub.

Syntax
Return expression

Description
Return is used to return from a procedure.

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to enable and disable GoSu


-------------------------------------------------------- KeyPgReturnGosub ----

Return (From Gosub)
  

	Control flow statement to return from a procedure or GoSub.

Syntax
Return [ label ]

Description
Return is used to return from a gosub GoSub.

Because Return could mean return-from-gosub or return-from-procedure, Option Gosub and Option Nogosub can be used to enable and disable Go


-------------------------------------------------------- KeyPgRgb ----

RGB
  

	Computes a valid color value for hi/truecolor modes

Syntax
#define RGB(r,g,b) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (&hFF000000ul))

Usage
result = RGB(red, green, blue)

Parameters
red
red color component value
green
green color component value
blue
blue color component value

Return Value
The combined color.

Description
red, green and blue are components ranging 0-255.

The RGB function can be used to compute a valid color value for use while in hi/truecolor modes. It returns an unsigned long, in the 


-------------------------------------------------------- KeyPgRgba ----

RGBA
  

	Computes a valid color value including alpha (transparency) for hi/truecolor modes

Syntax
#define RGBA(r,g,b,a) CULng((CUByte(r) Shl 16) Or (CUByte(g) Shl 8) Or CUByte(b) Or (CUByte(a) Shl 24))

Usage
result = RGBA(red, green, blue, alpha)

Parameters
red
red color component value
green
green color component value
blue
blue color component value
alpha
alpha component value

Return Value
the combined color

Description
red, green, blue and alpha are components ranging 0-255.

The RGBA function can be used to compute a valid color value including an alpha channel for use while in hi/truecolor modes. I


-------------------------------------------------------- KeyPgRight ----

Right
  

	Returns the rightmost substring of a string

Syntax
Declare Function Right ( ByRef str As Const String, ByVal n As Integer ) As String
Declare Function Right ( ByRef str As Const WString, ByVal n As Integer ) As WString

Usage
result = Right[$]( str, n )

Parameters
str
The source string.
n
The substring length, in characters.

Return Value
Returns the rightmost substring from str.

Description
Returns the rightmost n characters starting from the right (end) of str. If str is empty, then the null string ("") is returned. If n <= 0 then the null string ("") is returned. If n > l


-------------------------------------------------------- KeyPgRmdir ----

RmDir
  

	Removes a folder/directory from the file system

Syntax
Declare Function RmDir ( ByRef folder As Const String ) As Long

Usage
result = RmDir( folder )

Parameters
folder
The folder/directory to be removed.

Return Value
Returns zero (0) on success, and negative one (-1) on failure.

Description
Removes a folder from the file system. The function will fail if the folder is not empty.




-------------------------------------------------------- KeyPgRnd ----

Rnd
  

	Returns a random Double precision number in the range [0, 1)

Syntax
Declare Function Rnd ( ByVal seed As Single = 1.0 ) As Double

Usage
result = Rnd( seed )

Parameters
seed
Optional Single argument. If seed has a value of zero (0.0), the last random number generated is repeate.  For any other number a new random number is returned. With the QB-compatible algorithm, a negative number fully reseeds the generator.  The default for no argument is to return a new random number.

Return Value
Returns the random number generated.

Description
Returns a number of type Double in the range [0, 1) (i.e. 0 <= Rnd < 1), based on a random seed (see Randomize).

Rnd can use a variety of different algorithms - see Randomize for deta


-------------------------------------------------------- KeyPgRset ----

RSet
  

	Right justifies a string in a string buffer

Syntax
Declare Sub RSet ( ByRef dst As String, ByRef src As Const String )
Declare Sub RSet ( ByVal dst As WString Ptr, ByVal src As Const WString Ptr )

Usage
RSet dst, src

Parameters
dst
A String or WString buffer to copy the text into.
src
The source String or WString to be right justified.

Description
RSet right justifies text into the string buffer dst, filling the right part of the string with src and the left part with spaces.  The string buffer size is not modified.

If text is 


-------------------------------------------------------- KeyPgRtrim ----

RTrim
  

	Removes surrounding substrings or characters on the right side of a string

Syntax
Declare Function RTrim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function RTrim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

Usage
result = RTrim[$]( str [, [ Any ] trimset ] )

Parameters
str
The source string.
trimset
The substring to trim.

Return Value
Returns the trimmed string.

Description
This procedure trims surrounding characters from the right (end) of a source string. Substrings matching trimset will be trimmed if specified, otherwise spaces (ASCII code 32) are trimme


-------------------------------------------------------- KeyPgRun ----

Run
  

	Transfers execution to an external program

Syntax
Declare Function Run ( ByRef program As Const String, ByRef arguments As Const String = "" ) As Long

Usage
result = Run( program [, arguments ] )

Parameters
program
The file name (including file path) of the program (executable) to transfer control to.
arguments
The command-line arguments to be passed to the program.

Return Value
Returns negative one (-1) if the program could not be executed.

Description
Transfers control over to an external program. When the program exits, execution will return to the system.




-------------------------------------------------------- KeyPgSadd ----

SAdd
  

	Returns a pointer to a string variable's data

Syntax
Declare Function SAdd ( ByRef str As String ) As ZString Ptr
Declare Function SAdd ( ByRef str As WString ) As WString Ptr
Declare Function SAdd ( ByRef str As ZString ) As ZString Ptr

Usage
result = SAdd( str )

Parameters
str
the string expression or variable to get the address of

Return Value
A pointer to the data associated with str.

Description
Returns the memory offset of the string data in the string variable.




-------------------------------------------------------- KeyPgScope ----

Scope...End Scope
  

	Statement to begin a new scope block

Syntax
Scope
[statements]
End Scope

Description
The Scope block allows variables to be (re)defined and used locally in a program.

When a variable is (re)defined with Dim within a scope structure, this local working variable can be 


-------------------------------------------------------- KeyPgScreenCons ----

Screen (Console)
  

	Gets the character or color attribute at a given location

Syntax
Declare Function Screen ( ByVal row As Long, ByVal column As Long, ByVal colorflag As Long = 0 ) As Long

Usage
result = Screen( row, column [, colorflag ] )

Parameters
row
1-based offset from the top left corner of the console.
column
1-based offset from the top left corner of the console.
colorflag
If equal to 0, the ASCII code is returned, otherwise the color attribute is returned.  If omitted, it defaults to 0.

Return Value
The ASCII or color attribute of the character.

Description
Screen returns the character or the color attribute found at a given position of a console output. It works in console mode and in graphics mode.

The format of the color attribute dep


-------------------------------------------------------- KeyPgScreencontrol ----

ScreenControl
  

	Sets or gets internal graphics library settings

Syntax
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As Long = &h80000000, ByRef param2 As Long = &h80000000, ByRef param3 As Long = &h80000000, ByRef param4 As Long = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param1 As LongInt, ByRef param2 As LongInt = &h80000000, ByRef param3 As LongInt = &h80000000, ByRef param4 As LongInt = &h80000000 )
Declare Sub ScreenControl ( ByVal what As Const Long, ByRef param As String)

Usage
in the LONG (or INTEGER<32>) version of the sub:
ScreenControl( what [, [ param1 ] [, [ param2 ] [, [ param3 ] [, param4 ]]]] )
or,
ScreenControl( what , param )
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenControl( what , param1 [, [ param2 ] [, [ param3 ] [, param4 ]]] )
or,
ScreenControl( what , param )

Parameters
what
specifies the function to perform
param1
first integer parameter, contains value to be set on entry or value got on exit
param2
second integer parameter, contains value to be set on entry or value got on exit
param3
third integer parameter, contains value to be set on entry or value got on exit
param4
fourth integer parameter, contains value to be set on entry or value got on exit
param
string parameter, contains text to be set on entry or text got on exit

Description
This function can be used to set or get internal GfxLib states. The what parameter specifies which operation to perform. On operations that set states, the param* parameters must contain


-------------------------------------------------------- KeyPgScreencopy ----

ScreenCopy
  

	Copies the contents of a graphical page into another graphical page

Syntax
Declare Function ScreenCopy ( ByVal from_page As Long = -1, ByVal to_page As Long = -1 ) As Long

Usage
ScreenCopy [ from_page ] [, to_page ]

Parameters
from_page
page to copy from
to_page
page to copy to

Return Value
Returns zero (0) if successful, or a non-zero error code to indicate a failure.

Description
from_page is the page to copy from. If this argument is omitted, the current work page is assumed.  to_page is the page to copy to. If this argument is omitted, the currently visible pag


-------------------------------------------------------- KeyPgScreenevent ----

ScreenEvent
  

	Queries for and retrieves system events.

Syntax
Declare Function ScreenEvent ( ByVal event As Any Ptr = 0 ) As Long

Usage
result = ScreenEvent( [ event ] )

Parameters
event
Specifies the buffer where the function should store the event data.

Return Value
Returns -1 if there are pending events to be retrieved, 0 otherwise.

Description
This function returns the latest available system event from the internal GfxLib events queue. By "event" we mean any mouse or keyboard activity, for example.

The event data (if avail


-------------------------------------------------------- KeyPgScreenglproc ----

ScreenGLProc
  

	Gets the address of an OpenGL procedure

Syntax
Declare Function ScreenGLProc ( ByRef procname As Const String ) As Any Ptr

Parameters
procname
name of the procedure to retrieve the address of

Description
This function can be used to get the address of any OpenGL procedure, to be used to retrieve the pointers to new functions associated with OpenGL extensions. If given procedure named pro


-------------------------------------------------------- KeyPgScreengraphics ----

Screen (Graphics)
  

	Initializes a graphics mode using QB-like mode numbers

Syntax
-lang fb|fblite dialects:
Screen mode [, [ depth ] [, [ num_pages ] [, [ flags ] [, [ refresh_rate ]]]]]
Screen , [ active_page ] [, [ visible_page ]]
-lang qb dialect:
Screen [ mode ] [, [ colormode ] [, [ active_page ] [, [ visible_page ]]]]
Parameters
mode 
is a QB style graphics screen mode number (see below).  If mode is 0, then any currently set graphics mode is closed, and all functions resume their normal console-mode functionality.  See below for available modes.
depth
is the color depth in bits per pixel.  This only has an effect for modes 14 and higher.  Values of 8, 16 and 32 are allowed.  15 and 24 are also allowed as aliases for 16 and 32, respectively.  If omitted, it defaults to 8.
num_pages
is the number of video pages you want, see below.  If omitted, it defaults to 1.
flags
Are used to select several things as graphics driver priority, fullscreen mode. There are constants predefined in the fbgfx.bi file ready to use.  See the page ScreenRes for available flags.
refresh_rate
requests a refresh rate.  If it is not available in the present card or the parameter is omitted, FreeBASIC chooses the rate automatically.
active_page
Used to set the active page, where printing/drawing commands take effect
visible_page
Used to set the visible page, which is shown to the user
colormode
Unused - allowed for compatibility with the QB syntax

Description
Screen tells the compiler to link the GfxLib and initializes a QB-only, QB-on-GUI or OpenGL graphics mode, depending on the flags setting.

In QB-only modes a dumb window or fullscreen


-------------------------------------------------------- KeyPgScreeninfo ----

ScreenInfo
  

	Retrieves information about current video mode or the desktop.

Syntax
Declare Sub ScreenInfo ( ByRef w As Long = 0, ByRef h As Long = 0, ByRef depth As Long = 0, ByRef bpp As Long = 0, ByRef pitch As Long = 0, ByRef rate As Long = 0, ByRef driver As String = "" )
Declare Sub ScreenInfo ( ByRef w As LongInt, ByRef h As LongInt, ByRef depth As LongInt = 0, ByRef bpp As LongInt = 0, ByRef pitch As LongInt = 0, ByRef rate As LongInt = 0, ByRef driver As String = "" )

Usage
in the LONG (or INTEGER<32>) version of the sub:
ScreenInfo [ w ] [, [ h ] [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]]
in the LONGINT (or INTEGER<64>) version of the sub:
ScreenInfo w , h [, [ depth ] [, [ bpp ] [, [ pitch ] [, [ rate ] [, driver ]]]]]

Parameters
w
Width.
h
Height.
depth
Color depth in bits.
bpp
Bytes per pixel.
pitch
Bytes per scan line.
rate
Refresh rate.
driver
Driver name.

Description
This function can be useful to get current mode informations like graphics driver name, color depth, screen size and more.

If ScreenInfo is called when no graphics mode is set, it ret


-------------------------------------------------------- KeyPgScreenlist ----

ScreenList
  

	Finds available fullscreen video modes

Syntax
Declare Function ScreenList ( ByVal depth As Long = 0 ) As Long

Usage
result = ScreenList( [ depth ] )

Parameters
depth
the color depth for which the list of modes is requested  (supported depths are 8, 15, 16, 24 and 32)

Return Value
returns 0, when there are no more resolutions to read.

Description
It works like the Dir function: the first call to the function requires the depth parameter to be specified, it  returns the lowest supported resolution for the requested depth. Further 


-------------------------------------------------------- KeyPgScreenlock ----

ScreenLock
  

	Locks the working page's frame buffer

Syntax
Declare Sub ScreenLock ( )

Usage
ScreenLock

Description
All of FreeBASIC's Graphics Library functions draw to a frame buffer and an automatic routine copies the frame buffer to the actual screen memory at each draw. If the user program does a


-------------------------------------------------------- KeyPgScreenptr ----

ScreenPtr
  

	Returns a pointer to the current work page's frame buffer

Syntax
Declare Function ScreenPtr ( ) As Any Ptr

Usage
result = ScreenPtr

Return Value
a pointer to the current work page frame buffer memory, or NULL (0) if no graphics mode is set.

Description
ScreenPtr provides a way to directly read/write the working page's frame buffer. ScreenLock should be used before any read or writes are attempted. The pointer returned is valid up until


-------------------------------------------------------- KeyPgScreenres ----

ScreenRes
  

	Initializes a graphics mode by specifying horizontal and vertical resolution

Syntax
Declare Function ScreenRes ( ByVal width As Long, ByVal height As Long, ByVal depth As Long = 8, ByVal num_pages As Long = 1, ByVal flags As Long = 0, ByVal refresh_rate As Long = 0 ) As Long
Usage
ScreenRes width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]]
result = ScreenRes( width, height [, [depth] [, [num_pages] [, [flags] [, refresh_rate ]]]] )

Parameters
width, height
The display width and height, respectively. For fullscreen mode, the user should check the availability of the resolution using ScreenList.
depth
The color depth in bits per pixel. Valid color depths are: 1, 2, 4, 8, 16 and 32.  Values of 15 and 24 are also allowed as aliases for 16 and 32, respectively.  If omitted, the default is 8 bits per pixel.  8 bits and below will give a palette image.  The default palette will be the first 2 ^ depth colors of the 256-color palette used in Screen 13.
num_pages
The number of video pages to create, defaults to 1. (see Screen)
flags
Used to set various properties of the screen, including fullscreen mode and graphics driver priority. (see the standard header "fbgfx.bi" for available flags)
refresh_rate
The desired refresh rate of the screen, only has an effect for fullscreen modes, and some systems and drivers only. Defaults to an appropriate value, invalid refresh rates will be ignored.

Return Value
Returns zero (0) if successful, or a non-zero error code to indicate a failure. (throws a runtime error) (???)

Description
ScreenRes tells the compiler to link the GfxLib and initializes a QB-only, QB-on-GUI or OpenGL graphics mode, depending on the flags setting.

ScreenRes  clears the created window or t


-------------------------------------------------------- KeyPgScreenset ----

ScreenSet
  

	Sets current work and visible pages

Syntax
Declare Sub ScreenSet ( ByVal work_page As Long = -1, ByVal visible_page As Long = -1 )

Usage
ScreenSet [ work_page ] [, visible_page ]

Parameters
work_page
index to working page
visible_page
index to visible page

Description
ScreenSet allows to set the current working page and the current visible page. Page numbers range from 0 to num_pages - 1, where num_pages is the number of pages specified when setting t


-------------------------------------------------------- KeyPgScreensync ----

ScreenSync
  

	Synchronizes display updates with hardware

Syntax
Declare Function ScreenSync ( ) As Long

Usage
result = ScreenSync

Return Value
Zero if successful, or non-zero if a graphics mode was not previously set.

Description
This GfxLib statement stops the execution of the program until the graphics card signals it has ended tracing a frame and is going to start the new one.

If the program uses this small


-------------------------------------------------------- KeyPgScreenunlock ----

ScreenUnlock
  

	Unlocks work page's framebuffer

Syntax
Declare Sub ScreenUnlock ( ByVal startline As Long = -1, ByVal endline As Long = -1 )

Usage
ScreenUnlock [ start_line ] [, end_line ]

Parameters
startline
optional argument specifying first screen line to be updated. If omitted, top screen line is assumed.
endline
optional argument specifying last screen line to be updated. If omitted, bottom screen line is assumed.

Description
ScreenUnlock unlocks the current work page assuming it was previously locked by calling ScreenLock and lets the system restart updating the screen regularly. When called with start_line 


-------------------------------------------------------- KeyPgSecond ----

Second
  

	Gets the seconds from a Date Serial 

Syntax
Declare Function Second ( ByVal date_serial As Double ) As Long

Usage
#include "vbcompat.bi"
result = Second( date_serial )

Parameters
date_serial
the date serial

Return Value
Returns the seconds from a  variable containing a date in  Date Serial  format.

Description
The compiler will not recognize this function unless vbcompat.bi is included.




-------------------------------------------------------- KeyPgSeekreturn ----

Seek (Function)
  

	Gets the position of the next read/write operation for a file or device

Syntax
Declare Function Seek ( ByVal filenum As Long ) As LongInt

Parameters
filenum
file number of an open file

Return Value
The file position where the next read or write operation will take place.

Description
The position is given in records if the file was opened in Random access mode, in bytes in any other case. The file position returned is 1-based, so the first record of a file is 1.

T


-------------------------------------------------------- KeyPgSeekset ----

Seek (Statement)
  

	Sets the position of the next read/write operation on a file

Syntax
Seek [#]filenum, position

Parameters
filenum
file number of an opened a file
position
the new position for i/o operations

Description
Sets the position at which the next read or write operation on a file will occur.

The position is given in records if the file was opened in Random access mode, in bytes in any other 


-------------------------------------------------------- KeyPgSelectcase ----

Select Case
  

	Conditional statement block

Syntax
Select Case expression
[ Case expressionlist] 
[statements]
[ Case Else ]
[statements]
End Select
or
Select Case As Const integer_expression
[ Case constant | enumeration ]
[ statements ]
[ Case Else ]
[ statements ]
End Select

Description
Select Case executes specific code depending on the value of an expression. The expression is evaluated once, and compared against each Case, in order, until a matching expression is fou


-------------------------------------------------------- KeyPgSetdate ----

SetDate
  

	Sets the current system date

Syntax
Declare Function SetDate ( ByRef newdate As Const String ) As Long

Usage
result = SetDate( newdate )

Parameters
newdate
the new date to set

Return Value
Returns zero on success or non-zero on failure on all ports except DOS.

Description
To set the date you just format newdate and send to SetDate in a valid format following one of the following: "mm-dd-yy", "mm-dd-yyyy", "mm/dd/yy", or "mm/dd/yyyy" (mm is the month, dd i


-------------------------------------------------------- KeyPgSetenviron ----

SetEnviron
  

	Sets a system environment variable

Syntax
Declare Function SetEnviron ( ByRef varexpression As String ) As Long

Usage
result = SetEnviron( varexpression )

Parameters
varexpression
Name and setting of an environment variable in the following (or equivalent) form: varname=varstring.
(varname being the name of the environment variable, and varstring being its text value to set)

Return Value
Return zero (0) if successful, non-zero otherwise.

Description
Modifies system environment variables.  There are several variables available for editing other than the default ones on your system.  An example of this would be fbgfx, where you can ch


-------------------------------------------------------- KeyPgSetmouse ----

SetMouse
  

	Sets the position and visibility of the mouse cursor

Syntax
Declare Function SetMouse ( ByVal x As Long = -1, ByVal y As Long = -1, ByVal visibility As Long = -1, ByVal clip As Long = -1 ) As Long

Usage
result = SetMouse([ x ] [, [ y ] [, [ visibility ] [, [ clip ]]]])

Parameters
(For each parameter, -1 is a special value indicating "no changes.")
x
optional - set x coordinate
y
optional - set y coordinate
visibility
optional - set visibility: 1 indicates visible, 0 indicates hidden
clip
optional - set clipping: 1 indicates mouse is clipped to graphics window, 0 indicates no clipping

Return Value
Zero (0) on success, non-zero to indicate failure.

Description
SetMouse will set the (x, y) coordinates of the mouse pointer, as well as setting its visibility.  The mouse position is set using the x and y parameters.  The mouse will be visible if v


-------------------------------------------------------- KeyPgSettime ----

SetTime
  

	Sets the current system time

Syntax
Declare Function SetTime ( ByRef newtime As Const String ) As Long

Usage
result = SetTime( newtime )

Parameters
newtime
the new time to set

Return Value
Returns zero on success or non-zero on failure on all ports except DOS.

Description
To set the time, format the date and send to Settime in one of the following formats: "hh:mm:ss", "hh:mm", or "hh" (hh is the hour, mm is the minute, and ss is the second).

The error 


-------------------------------------------------------- KeyPgSgn ----

Sgn
  

	Returns the sign part of a number

Syntax
Declare Function Sgn ( ByVal number As Integer ) As Integer
Declare Function Sgn ( ByVal number As LongInt ) As LongInt
Declare Function Sgn ( ByVal number As Double ) As Double

Usage
result = Sgn( number )

Parameters
number
the number to find the sign of

Return Value
Returns the sign part of number.
 If number is greater than zero, then Sgn returns 1.
 If number is equal to zero, then Sgn returns 0.
 If number is less than zero, then Sgn returns -1.

Description
The required number argument can be any valid numeric expression.  Unsigned numbers will be treated as if they were signed, i.e. if the highest bit is set the number will be treated as n


-------------------------------------------------------- KeyPgShared ----

Shared
  

	Variable declaration modifier specifying visibility throughout a module

Syntax
Dim Shared ...
ReDim Shared ...
Common Shared ...
Static Shared ...
[Static] Var Shared ...

Description
Shared makes module-level variables visible inside Subs and Functions.
If Shared is not used on a module-level variable's declaration, the variable is only visible to the module-level c


-------------------------------------------------------- KeyPgShell ----

Shell
  

	Sends a command to the system command interpreter

Syntax
Declare Function Shell ( ByRef command As Const String ) As Long

Usage
result = Shell( command )

Parameters
command
A string specifying the command to send to the command interpreter.

Return Value
If the command could not be executed, -1 is returned. Otherwise, the command is executed and its exit code is returned.

Description
Program execution will be suspended until the command interpreter exits.




-------------------------------------------------------- KeyPgShort ----

Short
  

	Standard data type: 16 bit signed

Syntax
Dim variable As Short

Description
16-bit signed whole-number data type. Can hold values from -32768 to 32767.




-------------------------------------------------------- KeyPgSin ----

Sin
  

	Returns the sine of an angle

Syntax
Declare Function Sin ( ByVal angle As Double ) As Double

Usage
result = Sin( angle )

Parameters
angle
the angle (in radians)

Return Value
Returns the sine of the argument angle as a Double within the range of -1.0 to 1.0.

Description
The argument angle is measured in radians (not degrees).

The value returned by this function is undefined for values of angle with an absolute value of 2 ^ 63 or greater.

Sin can b


-------------------------------------------------------- KeyPgSingle ----

Single
  

	Standard data type: 32 bit floating point

Syntax
Dim variable As Single

Description
Single is a 32-bit, floating point data type used to store decimal numbers. They can hold positive values in the range 1.401298e-45 to 3.402823e+38, or negative values in the range -1.40


-------------------------------------------------------- KeyPgSizeof ----

SizeOf
  

	Returns the size of a variable or type in bytes.

Syntax
SizeOf ( variable | DataType )

Description
The SizeOf operator returns an Integer value: the number of bytes taken up by a variable or DataType (including the data fields of a UDT).

Different from Len, when used with fixed-len


-------------------------------------------------------- KeyPgSleep ----

Sleep
  

	Waits until a specified time has elapsed, or a key is pressed.

Syntax
Declare Sub Sleep ( ByVal amount As Long = -1 )
Declare Function Sleep ( ByVal amount As Long , ByVal keyflag As Long ) As Long

Usage
Sleep [ amount [, keyflag ]]
result = Sleep ( amount, keyflag )

Parameters
amount
Optional number of milliseconds to wait (default is to wait for a key press).
keyflag
Optional flag; give it a value of 0 for a normal sleep, or 1 to specify that the wait cannot be interrupted by a key press.

Return Value
Returns 1 if keyflag was not a valid value (i.e. something other than 0 or 1) to indicate failure, or 0 otherwise.

Description
Sleep will wait until amount milliseconds (can be seconds in -lang qb, see below) given elapsed (if any value was passed) or until the user presses a key. If amount is below 100 ms then 


-------------------------------------------------------- KeyPgSpace ----

Space
  

	Creates a string of a given length filled with spaces (" ")

Syntax
Declare Function Space( ByVal count As Integer ) As String

Usage
result = Space[$]( count )

Parameters
count
An integer type specifying the length of the string to be created.

Return Value
The created string. An empty string will be returned if count <= 0.

Description
Space creates a string with the specified number of spaces.




-------------------------------------------------------- KeyPgSpc ----

Spc
  

	Output function to skip spaces when writing to screen or file

Syntax
Spc( columns )

Usage
Print Spc( spaces ) [(, | ;)] ...

Parameters
spaces
number of spaces to skip

Description
Spc skips over the given number of spaces when Printing to screen or to a file.  The character cells skipped over are left unchanged.




-------------------------------------------------------- KeyPgSqr ----

Sqr
  

	Returns a square root of a number

Syntax
Declare Function Sqr ( ByVal number As Double ) As Double

Usage
result = Sqr( number )

Parameters
number
the number (greater than or equal to zero)

Return Value
Returns the square root of the argument number.

If number equals zero, Sqr returns zero (0.0).

If number is less than zero, Sqr returns a special value representing "not defined", printing like "NaN" or "IND", exact text is platform dependent.

Description
This is the same as raising the argument number to the one-half power: y = x ^ (1/2) . The required number argument can be any valid numeric expression greater than or equal zero.

If 


-------------------------------------------------------- KeyPgStatic ----

Static
  

	Defines variables, objects and arrays having static storage

Syntax
Static symbol1 [ (array-dimensions) ] As DataType [ = expression] [, symbol2 [ (array-dimensions) ] As DataType [ = expression], ...]
or
Static As DataType symbol1 [ (array-dimensions) ] [ = expression] [, symbol2 [ (array-dimensions) ] [ = expression], ...]
or
Static Var symbol1 = expression [, symbol2 = expression, ...]

or

Sub|Function procedurename ( parameters ) [[ ByRef ] As DataType] Static
...
End Sub|Function

Parameters
symbol
variable or array symbol name.
array-dimensions
lower-bound To upper-bound [, ...]
or
Any [, Any...]
or empty.
expression
An constant expression, or an array of constant expressions

Description
Specifies static storage for variables, objects and arrays; they are allocated at program startup and deallocated upon exit. Objects are constructed once when they are defined, and destr


-------------------------------------------------------- KeyPgStaticMember ----

Static (Member)
  

	Declare a static member procedure or variable

Syntax
Type typename
Static variablename As DataType [, ...]
Declare Static Sub|Function procedurename ...
...
End Type

Dim typename.variablename As DataType [= initializer] [, ...]

[Static] Sub|Function typename.procedurename ...
...
End Sub|Function

Description
 Static member procedures
Static methods do not have an implicit This instance argument passed to them. This allows them to be used like normal non-member procedures (for example with c


-------------------------------------------------------- KeyPgStdcall ----

stdcall
  

	Specifies a stdcall-style calling convention in a procedure declaration

Syntax
Sub name stdcall [Overload] [Alias "alias"] ( parameters )
Function name stdcall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type

Description
In procedure declarations, stdcall specifies that a procedure will use the stdcall calling convention. In the stdcall calling convention, any parameters are to be passed (pushed onto the


-------------------------------------------------------- KeyPgStep ----

Step
  

	Statement modifier.

Syntax
For iterator = initial_value To end_value Step increment

Line [ buffer, ] Step ( x1, y1 ) - Step ( x2, y2 ) [, [ color ][, [ B|BF ][, style ] ] ]

Circle [ target, ] Step ( x, y ), radius [, [ color ][, [ start ][, [ end ][, [ aspect ][, F] ] ] ] ]

Paint [ target, ] STEP ( x, y ) [, [ paint ][, [ border_color ] ] ]

Description
In a For statement, Step specifies the increment of the loop iterator with each loop.

In a Line, Circle or Paint statement, Step indicates that the following coordinate has values rel


-------------------------------------------------------- KeyPgStick ----

Stick
  

	Reads axis position from attached gaming devices

Syntax
Declare Function Stick ( ByVal axis As Long ) As Long

Usage
result = Stick( axis )

Parameters
axis
the axis number to query for position

Return Value
Returns a number between 1 and 200 for specified axis, otherwise zero (0), if the device is not attached.

Description
Stick will retrieve the axis position for the first and second axes on the first and second gaming devices.  axis must be a number between 0 and 3 having the following meaning:

AxisRe


-------------------------------------------------------- KeyPgStop ----

Stop
  

	Halts program execution, and waits for a key press before ending the program.

Syntax
Declare Sub Stop ( ByVal retval As Long = 0 )

Usage
Stop

Parameters
retval
Error code returned to system.

Description
Halts the execution of the program and stands by. It's  provided as a help to debugging, as it preserves the memory and doesn't close files. For normal program termination the End keywor


-------------------------------------------------------- KeyPgStr ----

Str
  

	Returns a string representation of a number, boolean or Unicode character string

Syntax
Declare Function Str ( ByVal n As Byte ) As String
Declare Function Str ( ByVal n As UByte ) As String
Declare Function Str ( ByVal n As Short ) As String
Declare Function Str ( ByVal n As UShort ) As String
Declare Function Str ( ByVal n As Long ) As String
Declare Function Str ( ByVal n As ULong ) As String
Declare Function Str ( ByVal n As LongInt ) As String
Declare Function Str ( ByVal n As ULongInt ) As String
Declare Function Str ( ByVal n As Single ) As String
Declare Function Str ( ByVal n As Double ) As String
Declare Function Str ( ByVal b As Boolean ) As String
Declare Function Str ( ByRef str As Const String ) As String
Declare Function Str ( ByVal str As Const WString ) As String

Usage
result = Str[$]( number )
or
result = Str( string )

Parameters
number
Numeric expression to convert to a string.
string
String expression to convert to a string.

Description
Str converts numeric variables to their string representation. Used this way it is the String equivalent to WStr applied to numeric variables, and the opposite of the Val function, which


-------------------------------------------------------- KeyPgStrig ----

Strig
  

	Reads button state from attached gaming devices

Syntax
Declare Function Strig ( ByVal button As Long ) As Long

Usage
result = Strig( button )

Parameters
button
the button to query for state

Return Value
Returns -1 (pressed) or 0 (not-pressed) to indicate the state of the button requested.

Description
Strig will retrieve the button state for the first and second buttons on the first and second gaming devices.  button must be a number between 0 and 7 and has the following meaning:

B


-------------------------------------------------------- KeyPgString ----

String
  

	Standard data type: 8 bit character string

Syntax
Dim variable As String [ * size]

Description
A String is an array of characters.

A String declared without the size parameter is dynamically resized depending on the length of the string. The length can range from 0 bytes to 2 g


-------------------------------------------------------- KeyPgStringFunction ----

String (Function)
  

	Creates and fills a string of a certain length with a certain character

Syntax
Declare Function String ( ByVal count As Integer, ByVal ch_code As Long ) As String
Declare Function String ( ByVal count As Integer, ByRef ch As Const String ) As String

Usage
result = String[$]( count, ch_code )
or
result = String[$]( count, ch )

Parameters
count
An integer specifying the length of the string to be created.
ch_code
A long specifying the ASCII character code to be used to fill the string.
ch
A string whose first character is to be used to fill the string.

Return Value
The created string. An empty string will be returned if either ch is an empty string, or count <= 0.

Description
The String function returns a string with a length of count, filled with a given ch_code or ch.




-------------------------------------------------------- KeyPgSub ----

Sub
  

	Defines a procedure

Syntax
[Public|Private] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [( [parameter_list] )] [Static] [Export]
statements
...
[Return]
...
End Sub

[Public] Sub identifier [cdecl|pascal|stdcall] [Overload] [Alias external_identifier] [()] [Constructor|Destructor] [Static]
statements
...
[Return]
...
End Sub

Parameters
identifier: the name of the subroutine
external_identifier: externally visible (to the linker) name enclosed in quotes
parameter_list: parameter[, parameter[, ...]]
parameter: [ByRef|ByVal] identifier [As type] [= default_value]
identifier: the name of the variable referenced in the subroutine. If the argument is an array then the identifier must be followed by an empty parenthesis.
type: the type of variable
default_value: the value of the argument if none is specified in the call
statements: one or more statements that make up the subroutine body

Description
A subroutine is a block of code which may be called at any time from a program. This code may need to be executed multiple times, and subroutines provide an invaluable means to simplify 


-------------------------------------------------------- KeyPgSubPtr ----

Sub Pointer
  

	Data type that stores a pointer to a Sub procedure

Syntax
Dim variable As Sub [cdecl|pascal|stdcall] [( [parameter_list] )] [= initializer]

Parameters
parameter_list: parameter[, parameter[, ...]]
parameter: [ByRef|ByVal] identifier [As type] [= default_value]
identifier: the name of the variable referenced in the subroutine
type: the type of variable
default_value: the value of the argument if none is specified in the call
intializer: address of a subroutine to set as the intial value

Description
A Sub pointer is a procedure pointer that stores the memory location of compiled code.  If no intializer is given the default initial value is zero (0).

The memory address for the Sub


-------------------------------------------------------- KeyPgSwap ----

Swap
  

	Exchanges the values of two variables

Syntax
Declare Sub Swap  ( ByRef a As Any, ByRef b As Any )

Parameters
a
A variable to swap.
b
A variable to swap.

Description
Swaps the value of two variables, including UDT instances (swaps all data members).

Note: When the data are referenced by a pointer, alone or within a descriptive structure (a UDT, fo


-------------------------------------------------------- KeyPgSystem ----

System
  

	Closes all open files and ends the program

Syntax
Declare Sub System ( ByVal retval As Long = 0 )

Usage
System( [ retval ] )

Parameters
retval
Error code returned to system.

Description
Closes all open files, exits the program, and returns to the operating system. An optional return value, an integer, can be specified to return an error code to the system. If no return 


-------------------------------------------------------- KeyPgTab ----

Tab
  

	Sets the column when writing to screen or file

Syntax
Tab( col_num )

Usage
Print Tab( column ) [(, | ;)] ...

Parameters
column
1-based column number to move to

Description
Tab will move the cursor to given column number when Printing to screen or to a file.  Character cells skipped over between the old and new cursor positions are left unchanged.
If the c


-------------------------------------------------------- KeyPgTan ----

Tan
  

	Returns the tangent of an angle

Syntax
Declare Function Tan ( ByVal angle As Double ) As Double

Usage
result = Tan( angle )

Parameters
angle
the angle (in radians)

Return Value
Returns the tangent of the argument angle as a Double within the range of -infinity to infinity.

Description
The argument angle is measured in radians (not degrees).

The value returned by this function is undefined for values of angle with an absolute value of 2 ^ 63 or greater.

Tan can b


-------------------------------------------------------- KeyPgThen ----
Then   
Description



-------------------------------------------------------- KeyPgThis ----

This
  

	Hidden instance parameter passed to non-static member functions in a Type or Class

Syntax
This.fieldname
or
With This
.fieldname
End With

Description
This is a reference to an instance of a Type or Class that is passed (through a hidden Byref Parameter) to all non-static member functions of that type or class. Non-static member functi


-------------------------------------------------------- KeyPgThiscall ----

__Thiscall
  

	Specifies the Thiscall calling convention in a member procedure declaration

Syntax
Type typename
declare Sub name __Thiscall [Overload] [Alias "alias"] ( parameters )
declare Function name __Thiscall [Overload] [Alias "alias"] ( parameters ) [ ByRef ] As return_type
End Type

Description
In member procedure declarations, __Thiscall specifies that a procedure will use the Thiscall calling convention. In the Thiscall calling convention, the implicit and hidden This paramet


-------------------------------------------------------- KeyPgThreadCall ----

ThreadCall
  

	Starts a user-defined procedure with parameters in a separate execution thread

Threadcall uses LibFFI internally: people who write programs using this functionality should be careful to follow LibFFI's license, which can be found at http://github.com/atgreen/libffi/blob/master/LICENSE.

Syntax
Function ThreadCall subname([paramlist]) As Any Ptr

Usage
threadid = ThreadCall subname([paramlist])

Parameters
subname
The name of a subroutine
paramlist
A list of parameters to pass to the subroutine, as with a normal sub call.	

Return Value
Threadcall returns an Any Ptr handle to the thread created, or the null pointer (0) on failure.

Description
Like ThreadCreate, Threadcall creates a thread which runs at the same time as the code calling it.  By placing "Threadcall" before almost any normal call to sub, the sub is called inside


-------------------------------------------------------- KeyPgThreadCreate ----

ThreadCreate
  

	Starts a user-defined procedure in a separate execution thread

Syntax
Declare Function ThreadCreate _
( _
ByVal procptr As Sub ( ByVal userdata As Any Ptr ), _
ByVal param As Any Ptr = 0, _
ByVal stack_size As Integer = 0 _
) As Any Ptr

Usage
result = ThreadCreate ( procptr [, [ param ] [, stack_size ] ] )

Parameters
procptr
A pointer to the Sub intended to work as a thread (see Operator Procptr (Procedure Pointer) to get a pointer to a sub). The sub must have the following signature (same parameters, same calling convention) to be compatible to procptr:
Declare Sub myThread ( ByVal userdata As Any Ptr )
userdata
The Any Ptr parameter of the Sub intended to work as a thread. FreeBASIC expects this parameter to be present, it must not be omitted! 
param
Any Ptr argument that will be passed to the thread Sub pointed to by procptr through its userdata parameter. For example, this can be a pointer to a structure or an array containing various information for the thread sub to work with. If param is not given, 0 (zero) will be passed to the thread sub's userdata parameter instead.
stack_size
Optional number of bytes to reserve for this thread's stack.

Return Value
ThreadCreate returns an Any Ptr handle to the thread created, or a null pointer (0) on failure.

Description
The sub pointed to by procptr is started as a thread. It will be passed the content of param, or 0 (zero) if not specified, in its userdata parameter.

The sub that was started as a th


-------------------------------------------------------- KeyPgThreadDetach ----

ThreadDetach
  

	Releases a thread handle without waiting for the thread to finish

Syntax
Declare Sub ThreadDetach ( ByVal id As Any Ptr )

Usage
#include "fbthread.bi"
ThreadDetach( id )

Parameters
id
Any Ptr handle of a thread created by ThreadCreate or ThreadCall

Description
ThreadDetach releases resources associated with the thread handle returned by ThreadCreate or ThreadCall. The thread handle will be destroyed by ThreadDetach and cannot be used anymore.



-------------------------------------------------------- KeyPgThreadSelf ----

ThreadSelf
  

	Return the thread handle of the current thread.

Syntax
Declare Function ThreadSelf ( ) As Any Ptr

Usage
#include "fbthread.bi"
result = ThreadSelf

Return Value
ThreadSelf returns an Any Ptr handle of the current thread.

Description
ThreadSelf is used to get the handle of the current thread.

This function can uniquely identify the existing threads:
- If there are multiple threads, and one thread is completed, th


-------------------------------------------------------- KeyPgThreadWait ----

ThreadWait
  

	Waits for a thread to finish execution and releases the thread handle

Syntax
Declare Sub ThreadWait ( ByVal id As Any Ptr )

Usage
ThreadWait( id )

Parameters
id
Any Ptr handle of a thread created by ThreadCreate or ThreadCall

Description
ThreadWait waits for a thread created by ThreadCreate or ThreadCall to finish execution, and then releases the resources associated with the thread handle. ThreadWait does not return unt


-------------------------------------------------------- KeyPgTime ----

Time
  

	Returns the current system time as a string

Syntax
Declare Function Time ( ) As String

Usage
result = Time[$]

Return Value
Returns the current system time.

Description
Returns the current system time in the format hh:mm:ss.




-------------------------------------------------------- KeyPgTimer ----

Timer
  

	Returns the amount of time that has passed since a static reference point.

Syntax
Declare Function Timer ( ) As Double

Usage
result = Timer

Return Value
Returns a Double precision result with the time, in seconds, since a static reference point.

Description
The Timer function is useful for finding out how long a section of code takes to run, or for control the timing of your code.  To find out how much time has passed between two points in 


-------------------------------------------------------- KeyPgTimeserial ----

TimeSerial
  

	Gets a Date Serial for the specified hours, minutes, and seconds

Syntax
Declare Function TimeSerial ( ByVal hour As Long, ByVal minute As Long, ByVal second As Long ) As Double

Usage
#include "vbcompat.bi"
result = TimeSerial( hours, minutes, seconds )

Parameters
hour
number of hours, in the range 0-23
minute
number of minutes
second
number of seconds

Return Value
Returns a date serial containing the time formed by the values in the hours, minutes and seconds parameters.The date serial returned has no integer part.

Description
hours must be specified in the range 0-23

The compiler will not recognize this function unless vbcompat.bi or datetime.bi is included.




-------------------------------------------------------- KeyPgTimeValue ----

TimeValue
  

	Gets a Date Serial from a time string

Syntax
Declare Function TimeValue ( ByRef timestring As String ) As Double

Usage
#include "vbcompat.bi"
result = TimeValue( timestring )

Parameters
timestring
the string to convert

Return Value
Returns a Date Serial from a time string.

Description
The time string must be in the format "23:59:59" or  "11:59:59PM"

The compiler will not recognize this function unless vbcompat.bi or datetime.bi is included.




-------------------------------------------------------- KeyPgTo ----

To
  

	Statement modifier to specify a range.

Syntax
For iterator intial_value To ending_value
statement(s).
Next [ iterator ]
or
Select Case case_comparison_value
Case lower_bound To upper_bound
statement(s).
End Select
or
Dim variable_identifier( lower_bound To upper_bound ) As type_specifier

Description
The To keyword is used to define a certain numerical range. This keyword is valid only if used with For ... Next, Case and Dim statements.

In the first syntax, the To keyword defines 


-------------------------------------------------------- KeyPgTransGfx ----

Trans
  

	Parameter to the Put graphics statement which selects transparent background as the blitting method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Trans

Parameters
Trans
Required.

Description
Trans selects transparent background as the method for blitting an image buffer.  This is similar to the PSET method, but pixels containing the mask color are skipped.
For 8-bit color i


-------------------------------------------------------- KeyPgTrim ----

Trim
  

	Removes surrounding substrings or characters on the left and right side of a string

Syntax
Declare Function Trim ( ByRef str As Const String, [ Any ] ByRef trimset As Const String = " " ) As String
Declare Function Trim ( ByRef str As Const WString, [ Any ] ByRef trimset As Const WString = WStr(" ") ) As WString

Usage
result = Trim[$]( str [, [ Any ] trimset ] )

Parameters
str
The source string.
trimset
The substring to trim.

Return Value
Returns the trimmed string.

Description
This procedure trims surrounding characters from the left (beginning) and right (end) of a source string. Substrings matching trimset will be trimmed if specified, otherwise spaces (ASCI


-------------------------------------------------------- KeyPgTrue ----

True
  

	Intrinsic constant set by the compiler

Syntax
Const True As Boolean

Description
Gives the True Boolean value where used.




-------------------------------------------------------- KeyPgType ----

Type
  

	Declares a user-defined type.

Syntax
Type typename
fieldname1 As DataType
fieldname2 As DataType
As DataType fieldname3, fieldname4
...
End Type

Type typename [Alias "alternatename"] [Extends base_typename] [Field = alignment]
[Private:|Public:|Protected:]

Declare Sub|Function|Constructor|Destructor|Property|Operator ...
Static variablename As DataType
ReDim arrayname(array dimensions) As DataType

fieldname As DataType [= initializer]
fieldname(array dimensions) As DataType [= initializer]
fieldname(Any [, Any...]) As DataType
fieldname : bits As DataType [= initializer]

As DataType fieldname [= initializer], ...
As DataType fieldname(array dimensions) [= initializer], ...
As DataType fieldname(Any [, Any...])
As DataType fieldname : bits [= initializer], ...

Union
fieldname As DataType
Type
fieldname As DataType
...
End Type
...
End Union

...
End Type

Description
Type is used to declare custom data types containing one or more data fields, including integer types, floating point types, fixed-size or variable-length (dynamic) arrays, fixed-size or


-------------------------------------------------------- KeyPgTypeAlias ----

Type (Alias)
  

	Declares an alternative name for a type

Syntax
Type typename As symbol

Parameters
typename 
new alternative name.
symbol 
symbol or data type declaration to associate with typename. 

Description
symbol may refer to any declared data type including a built-in data type, Sub or Function pointer, Type declaration, Union declaration, or Enum declaration.

A type alias can be used 


-------------------------------------------------------- KeyPgTypeof ----

TypeOf
  

	Returns the type of a variable.

Syntax
TypeOf ( variable | datatype )

Parameters
variable
A variable of any type.
datatype
A DataType.

Description
TypeOf is a compiler intrinsic that replaces itself with the type of the variable passed to it. It can either be used in a variable declaration (Example 1) or it can be used in the prepr


-------------------------------------------------------- KeyPgTypeTemp ----

Temporary Types
  

	Creates a temporary copy of a user defined type

Syntax
result = Type( initializers, ... )
or
result = Type<typename>( initializers, ... )

Parameters
initializers
Initial values for the type (or only the firsts)
typename
The name of the Type or Union

Return Value
A temporary copy of the type.

Description
Used to create a temporary type.  If typename is not explicitly given, it will be inferred from its usage if possible.  Usage of the temporary copy may include assigning it to a variable


-------------------------------------------------------- KeyPgUbound ----

UBound
  

	Returns the upper bound of an array's dimension

Syntax
Declare Function UBound ( array() As Any, ByVal dimension As Integer = 1 ) As Integer

Usage
result = UBound( array [, dimension ] )

Parameters
array
an array of any type
dimension
the dimension to get upper bound of

Return Value
Returns the upper bound of an array's dimension.
Description
UBound returns the largest value that can be used as an index into a particular dimension of an array.

Array dimensions are numbered from one (1) to n, where n is the total number of 


-------------------------------------------------------- KeyPgUbyte ----

UByte
  

	Standard data type: 8 bit unsigned.
Equivalent to Unsigned Byte.

Syntax
Dim variable As UByte

Description
8-bit unsigned whole-number data type. Can hold a value in the range of 0 to 255.




-------------------------------------------------------- KeyPgUcase ----

UCase
  

	Returns an upper case copy of a string

Syntax
Declare Function UCase ( ByRef str As Const String, ByVal mode As Long = 0 ) As String
Declare Function UCase ( ByRef str As Const WString, ByVal mode As Long = 0 ) As WString

Usage
result = UCase[$]( str [ , mode ] )

Parameters
str
String to convert to uppercase.
mode
The conversion mode: 0 = current locale, 1 = ASCII only

Return Value
Uppercase copy of str.

Description
Returns a copy of str with all of the letters converted to upper case.

If str is empty, the null string ("") is returned.




-------------------------------------------------------- KeyPgUinteger ----

UInteger
  

	Standard data type: 32-bit or 64-bit unsigned, same size as SizeOf(Any Ptr).
Equivalent to Unsigned Integer.

Syntax
Dim variable As UInteger
Dim variable As UInteger<bits>

Parameters
bits
A numeric constant expression indicating the size in bits of unsigned integer desired.  The values allowed are 8, 16, 32 or 64.

Description
32-bit or 64-bit unsigned whole-number data type, depending on the platform.

If an explicit bit size is given, a data type is provided that can hold values from 0 up to (1ULL Shl (bit


-------------------------------------------------------- KeyPgUlong ----

ULong
  

	Standard data type: 32-bit unsigned integer.
Equivalent to Unsigned Long.

Syntax
Dim variable As ULong

Description
32-bit unsigned whole-number data type. Can hold values from 0 to 4294967295. Corresponds to an unsigned DWORD.




-------------------------------------------------------- KeyPgUlongint ----

ULongInt
  

	Standard data type: 64 bit unsigned.
Equivalent to Unsigned LongInt.

Syntax
Dim variable As ULongInt

Description
A 64-bit unsigned whole-number data type. Can hold values from 0 to 18 446 744 073 709 551 615. Corresponds to an unsigned QWORD.




-------------------------------------------------------- KeyPgUnion ----

Union
  

	Declares a union user defined type.

Syntax
Union typename
fieldname as datatype
Declare member function declaration ...
...
End Union

Parameters
typename
Name of the Union
fieldname
Name of a data field member
member function declaration
Any of the supported member functions

Description
The data elements of a Union occupy a common space in memory (same memory address for all data elements of the Union). A data element of a Union can be a simple data field or an unnamed 


-------------------------------------------------------- KeyPgUnlock ----

Unlock
  

	Removes a previous access restriction (lock) on a file

Syntax
Unlock #filenum, record
Unlock #filenum, start To end

Parameters
filenum
The file number used to Open the file.
record
The record (Random files) to unlock.
start
The first byte position (Binary files) in a range to unlock.
end
The last byte position (Binary files) in a range to unlock.

Description
Unlock removes the temporary access restriction set by Lock.

It is strongly recommended to use the same arguments used in the previous Lock.

Note: This command does not always work


-------------------------------------------------------- KeyPgUnsigned ----

Unsigned
  

	Integer data type modifier

Syntax
Dim variable As Unsigned {integer-based data type}

Description
Forces an integer-based data type to be unsigned (cannot contain negative numbers, but has its maximum value doubled).




-------------------------------------------------------- KeyPgUntil ----

Until
  

	Conditional clause used in Do..Loop statements.

Syntax
Do Until condition
or
Loop Until condition

Description
Until is used with the Do...Loop structure.




-------------------------------------------------------- KeyPgUshort ----

UShort
  

	Standard data type: 16 bit unsigned.
Equivalent to Unsigned Short.

Syntax
Dim variable As UShort

Description
16-bit unsigned whole-number data type. Can hold values from 0 to 65535.




-------------------------------------------------------- KeyPgUsing ----

Using (Namespaces)
  

	Brings namespace symbols into the current scope

Syntax
Using identifier [, identifier [, ...] ]

Parameters
identifier: The name of the Namespace that you want to use.

Description
The Using command allows all symbols from a given namespace to be accessed without the namespace's name prefix. Unlike C++ but like C#, the Namespace keyword is not needed after Using, b


-------------------------------------------------------- KeyPgVaArg ----

va_arg
  

	Returns the current argument from a variable argument list.

Syntax
variable = va_arg ( argument_list, datatype )

Description
The va_arg macro allows the use of a variable number of arguments within a function:
 	va_arg returns the current argument in the list, argument_list, with an expected data type of data


-------------------------------------------------------- KeyPgVaFirst ----

va_first
  

	Returns a pointer to the first argument in a variable argument list

Syntax
pointer_variable = va_first()

Description
The va_first function provides an untyped pointer value that points to the first variable argument passed to a function.

Not supported when using -gen gcc.  Use Cva_List variadic argu


-------------------------------------------------------- KeyPgVal ----

Val
  

	Converts a string to a floating point number

Syntax
Declare Function Val ( ByRef str As Const String ) As Double
Declare Function Val ( ByRef str As Const WString ) As Double

Usage
result = Val( strnum )

Parameters
strnum
the string containing a number to convert

Return Value
Returns a converted Double precision number

If the first character of the string is invalid, Val will return 0.

Description
Val("10") will return 10.0, and Val("10.10") will return 10.1. The function parses the string from the left, skipping any white space, and returns the longest number it can read, stoppin


-------------------------------------------------------- KeyPgValint ----

ValInt
  

	Converts a string to a 32bit integer

Syntax
Declare Function ValInt ( ByRef strnum As Const String ) As Long
Declare Function ValInt ( ByRef strnum As Const WString ) As Long

Usage
result = ValInt ( strnum )

Parameters
strnum
the string to convert

Return Value
Returns a Long value of the converted string

If the first character of the string is invalid, ValInt will return 0.

Description
For example, ValInt("10") will return 10, and ValInt("10.60") will return 10 as well. The function parses the string from the left, skipping any white space, and returns the longest numb


-------------------------------------------------------- KeyPgVallng ----

ValLng
  

	Converts a string to a 64bit integer

Syntax
Declare Function ValLng ( ByRef strnum As Const String ) As LongInt
Declare Function ValLng ( ByRef strnum As Const WString ) As LongInt

Usage
result = ValLng ( strnum )

Parameters
strnum
the string to convert

Return Value
Returns a LongInt of the converted string

If the first character of the string is invalid, ValLng will return 0.

Description
For example, ValLng("10") will return 10, and ValLng("10.60") will return 10 as well. The function parses the string from the left, skipping any white space, and returns the longest numb


-------------------------------------------------------- KeyPgValuint ----

ValUInt
  

	Converts a string to an unsigned 32bit integer

Syntax
Declare Function ValUInt ( ByRef strnum As Const String ) As ULong
Declare Function ValUInt ( ByRef strnum As Const WString ) As ULong

Usage
result = ValUInt ( strnum )

Parameters
strnum
the string to convert

Return Value
Returns a ULong value of the converted string

If the first character of the string is invalid, ValUInt will return 0.

Description
For example, ValUInt("10") will return 10, and ValUInt("10.60") will return 10 as well. The function parses the string from the left, skipping any white space, and returns the longest nu


-------------------------------------------------------- KeyPgValulng ----

ValULng
  

	Converts a string to a unsigned 64bit integer

Syntax
Declare Function ValULng ( ByRef strnum As Const String ) As ULongInt
Declare Function ValULng ( ByRef strnum As Const WString ) As ULongInt

Usage
result = ValULng ( strnum )

Parameters
strnum
the string to convert

Return Value
Returns a ULongInt of the converted string

If the first character of the string is invalid, ValULng will return 0.

Description
For example, ValULng("10") will return 10, and ValULng("10.60") will return 10 as well. The function parses the string from the left, skipping any white space, and returns the longest nu


-------------------------------------------------------- KeyPgVaNext ----

va_next
  

	Returns a pointer to the next argument in a variable argument list

Syntax
Argument_Pointer = va_next ( Argument_List, datatype )

Description
The va_next macro provides a datatype pointer value that points to the next argument within the list Argument_List, datatype being the type of the current argument being stepped over.




-------------------------------------------------------- KeyPgVar ----

Var
  

	Declares a variable whose type is implied from the initializer expression

Syntax
[Static] Var [Shared] symbolname = expression[, symbolname = expression]

Description
Var declares a variable whose type is implied from the initializer expression. It is illegal to specify an explicit type in a Var declaration. The initializer expression can be either a 


-------------------------------------------------------- KeyPgViewgraphics ----

View (Graphics)
  

	Sets new physical coordinate mapping and clipping region for graphics keywords

Syntax
View
View ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]
View Screen ( x1, y1 )-( x2, y2 ) [ [, fill_color ] [, border_color ] ]

Parameters
x1 As Integer, y1 As Integer
The horizontal and vertical offsets, in pixels, of one corner of the viewport relative to the top-left corner of the screen.
x2 As Integer, y2 As Integer
The horizontal and vertical offsets, in pixels, of the opposite corner of the viewport relative to the top-left corner of the screen.
fill_color As ULong
The color to fill the new viewport.
border_color As ULong
The color of the border to draw around the new viewport.

Description
The viewport, or clipping region, is a rectangular area of the graphics screen, outside of which no graphics drawing will be done. That is, only graphics drawing done within this area wi


-------------------------------------------------------- KeyPgViewtext ----

View Print
  

	Sets the printable text area of the screen

Syntax
View Print [ firstrow To lastrow ]

Parameters
firstrow
first row of print area
lastrow
last row of print area

Description
Sets the boundaries of the text printing area on the screen (in console mode or in graphics mode) to the lines starting at first up to and including last (the number of the available tex


-------------------------------------------------------- KeyPgVirtual ----

Virtual
  

	Declare virtual methods

Syntax
Type typename Extends base_typename
Declare Virtual Sub|Function|Property|Operator|Destructor ...
End Type

Description
Virtual methods are methods that can be overridden by data types derived from the type they were declared in, allowing for dynamic polymorphism. In contrast to Abstract methods, virtual 


-------------------------------------------------------- KeyPgVisPrivate ----

Private: (Access Control)
  

	Specifies private member access control in a Type or Class

Syntax
Type typename
Private:
member declarations
End Type

Parameters
typename
name of the Type or Class
member declarations
declarations for fields, functions, or enumerations

Description
Private: indicates that member declarations following it have private access.  Private members are accessible only from inside a member function for the Type or Class (so not accessible 


-------------------------------------------------------- KeyPgVisProtected ----

Protected: (Access Control)
  

	Specifies protected member access control in a Type or Class

Syntax
Type typename
Protected:
member declarations
End Type

Parameters
typename
name of the Type or Class
member declarations
declarations for fields, functions, or enumerations

Description
Protected: indicates that member declarations following it have protected access.  Protected members are accessible only from inside a member function for the Type or Class, and classes 


-------------------------------------------------------- KeyPgVisPublic ----

Public: (Access Control)
  

	Specifies public member access control in a Type or Class

Syntax
Type typename
Public:
member declarations
End Type

Parameters
typename
name of the Type or Class
member declarations
declarations for fields, functions, or enumerations

Description
Public: indicates that member declarations following it have public access.  Public members are accessible with any usage of the Type or Class.

member declarations following Public: a


-------------------------------------------------------- KeyPgWait ----

Wait
  

	Reads from a hardware port with a mask.

Syntax
Declare Function Wait ( ByVal port As UShort, ByVal and_mask As Long, ByVal xor_mask As Long = 0 ) As Long

Usage
Wait port, and_value [, xor_value]

Parameters
port
Port to read.
and_mask
Mask value to And the port value with.
xor_mask
Mask value to Xor the port value with.

Return Value
0 if successful, -1 on failure.

Description
Wait keeps reading port until the reading ANDed with and_mask and optionally XORed with xor_mask gives a non-zero result.





-------------------------------------------------------- KeyPgWbin ----

WBin
  

	Returns the binary WString (Unicode) representation of a number

Syntax
Declare Function WBin ( ByVal number As UByte ) As WString
Declare Function WBin ( ByVal number As UShort ) As WString
Declare Function WBin ( ByVal number As ULong ) As WString
Declare Function WBin ( ByVal number As ULongInt ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr ) As WString

Declare Function WBin ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WBin ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

Usage
result = WBin( number [, digits] )

Parameters
number
A whole number or expression evaluating to a whole number.
digits
Optional number of digits to return.

Return Value
Returns a binary WString representation of number, truncated or padded with zeros ("0") to fit the number of digits, if specified.

Description
Returns a WString (Unicode) representing the binary value of the integer number. Binary digits range from 0 to 1.

If you specify digits > 0, the result wstring will be exactly that le


-------------------------------------------------------- KeyPgWchr ----
WChr   
Description



-------------------------------------------------------- KeyPgWeekday ----

Weekday
  

	Gets the number of day of the week from a Date Serial

Syntax
Declare Function Weekday ( ByVal serial As Double , ByVal firstdayofweek As Long = fbusesystem ) As Long

Usage
#include "vbcompat.bi"
result = Weekday( date_serial [, firstdayofweek ] )

Parameters
date_serial
the date
firstdayofweek
the first day of the week

Return Value
Returns the week day number from a variable containing a date in Date Serial format.

Description
The week day values must be in the range 1-7, its meaning depends on the firstdayofweek parameter

firstdayofweek is optional.

valuefirst day of weekconstantomittedsunday 0local set


-------------------------------------------------------- KeyPgWeekdayname ----

WeekdayName
  

	Gets the name of a week day from its integral representation

Syntax
Declare Function WeekdayName ( ByVal weekday As , ByVal abbreviate As Long = 0, ByVal firstdayofweek As Long = fbUseSystem ) As String

Usage
#include "vbcompat.bi"
result = WeekdayName( weekday [, abbreviate [, firstdayofweek ] ] )

Parameters
weekday
the number of the day of the week
abbreviate
flag to indicate that name should be abbreviated
firstdayofweek
first day of the week

Return Value
Returns the local operating system language day of week name from the weekday value 1 to 7.

Description
How weekday is interpreted depends on the firstdayofweek parameter.

If abbreviate is true, a 3 letter abbreviation is returned, if false or omitted, the whole name is returned.

fir


-------------------------------------------------------- KeyPgWend ----

Wend
  

	Control flow statement.

Syntax
While [condition]
[statement block]
Wend

Description
Wend specifies the end of a While...Wend loop block.




-------------------------------------------------------- KeyPgWhex ----

WHex
  

	Returns the hexadecimal WString (Unicode) representation of a number

Syntax
Declare Function WHex ( ByVal number As UByte ) As WString
Declare Function WHex ( ByVal number As UShort ) As WString
Declare Function WHex ( ByVal number As ULong ) As WString
Declare Function WHex ( ByVal number As ULongInt ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr ) As WString

Declare Function WHex ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WHex ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

Usage
result = WHex( number [, digits ] )

Parameters
number
A whole number or expression evaluating to a whole number.
digits
Optional number of digits to return.

Return Value
Returns a hexadecimal WString representation of number, truncated or padded with zeros ("0") to fit the number of digits, if specified.

Description
Hexadecimal digits range from 0-9, or A-F.

If you specify digits > 0, the resulting WString will be exactly that length.  It will be truncated or padded with zeros on the left, if nec


-------------------------------------------------------- KeyPgWhile ----

While
  

	Control flow statement.

Syntax
Do While condition
[statement block]
Loop
or
Do
[statement block]
Loop While condition
or
While [condition]
[statement block]
Wend

Description
While specifies that a loop block will continue if the condition following it evaluates as true. This condition is checked during each loop iteration.




-------------------------------------------------------- KeyPgWhilewend ----

While...Wend
  

	Control flow statement for looping

Syntax
While [condition]
[statement block]
Wend

Description
The While statement will cause the following set of statements in the statement block to execute repeatedly if and while the expression condition evaluates to true.

If condition evalu


-------------------------------------------------------- KeyPgWidth ----

Width
  

	Sets or gets the number of rows and columns of the display

Syntax
Width [columns] [, rows]
Width LPrint columns
Width { #filenum | devicename }, columns
result = Width( )

Parameters
columns
columns (in characters) for output
rows
rows (in characters) for output
filenum
file number to apply to
devicename
device name to apply to

Return Value
Returns a 32 bit Long where the High Word is the number of rows and the Low Word is the number of columns currently set.

Description
Sets the maximum number of columns of characters of an output device (console, printer or text file). If text sent to the device reaches the width an automatic carriage return is generat


-------------------------------------------------------- KeyPgWindow ----

Window
  

	Sets new view coordinates mapping for current viewport

Syntax
Window [ [Screen] ( x1, y1 )-( x2, y2 ) ]

Parameters
Screen
Optional argument specifying y coordinates increase from top to bottom.
( x1, y1 )-( x2, y2 )
New floating point values corresponding to the opposite corners of the current viewport.  If omitted, the Window coordinate mapping is removed.

Description
Window is used to define a new coordinates system. (x1, y1) and (x2, y2) are the new coordinates to be mapped to the opposite corners of the current viewport; all future coordinates pass


-------------------------------------------------------- KeyPgWindowtitle ----

WindowTitle
  

	Sets the program window title

Syntax
Declare Sub WindowTitle ( ByRef title As Const String )

Usage
WindowTitle title

Parameters
title
the string to be assigned as new window title.

Description
This statement is useful to change the program window title. The new title set will become active immediately if the program already runs in windowed mode, otherwise will become the new 


-------------------------------------------------------- KeyPgWinput ----

Winput()
  

	Reads a number of wide-characters from console or file

Syntax
Declare Function WInput( ByVal num As Integer ) As WString
Declare Function WInput( ByVal num As Integer, ByVal filenum As Long = 0 ) As WString

Usage
result = WInput( num [, [#]filenum } )

Parameters
num
Number of characters to read.
filenum
File number of bound file or device.

Return Value
Returns a WString of the characters read.

Description
Reads a number of wide-characters from the console, or a bound file/device specified by filenum.

The first version waits for and reads n wide characters from the keyboard buffer. Exte


-------------------------------------------------------- KeyPgWith ----

With
  

	Statement block to allow implicit access to fields in a user defined type variable

Syntax
With user_defined_var
statements
End With

Description
The With...End With block allows the omission of the name of a variable of a user-defined Type when referring to its fields. The fields may then be accessed with just a single period (.)


-------------------------------------------------------- KeyPgWoct ----

WOct
  

	Converts a number to a Unicode octal representation

Syntax
Declare Function WOct ( ByVal number As UByte ) As WString
Declare Function WOct ( ByVal number As UShort ) As WString
Declare Function WOct ( ByVal number As ULong ) As WString
Declare Function WOct ( ByVal number As ULongInt ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr ) As WString

Declare Function WOct ( ByVal number As UByte, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As UShort, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULong, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As ULongInt, ByVal digits As Long ) As WString
Declare Function WOct ( ByVal number As Const Any Ptr, ByVal digits As Long ) As WString

Usage
result = WOct( number [, digits ] )

Parameters
number
Number to convert to octal representation.
digits
Desired number of digits in the returned string.

Return Value
The Unicode octal representation of the number, truncated or padded with zeros ("0") to fit the number of digits, if specified.

Description
Returns the octal WString (Unicode) representation of number. Octal digits range from 0 to 7.

If you specify digits > 0, the result string will be exactly that length.  It will be tru


-------------------------------------------------------- KeyPgWrite ----

Write
  

	Outputs a comma-separated list of values to the screen

Syntax
Write [ expressionlist ]

Parameters
expressionlist
Comma-separated list of items to print

Description
Outputs the values in expressionlist to the screen. The values are separated with commas, and strings are enclosed in double quotes. Numeric values with an absolute value of less than on


-------------------------------------------------------- KeyPgWriteFile ----

Write (File Access)
  

	File access specifier

Syntax
Open filename As String For Binary Access Write As #filenum As Integer

Description
Specifier for the Access clause in the Open statement.  Write specifies that the file is accessible for output.




-------------------------------------------------------- KeyPgWritePp ----

Write #
  

	Outputs a comma-separated list of values to a text file or device

Syntax
Write # filenum , [ expressionlist ]

Parameters
filenum
File number of an open file or device opened for Output or Append.
expressionlist
Comma-separated list of items to print

Description
Outputs the values in expressionlist to the text file or device bound to filenum. The values are separated with commas, and strings are enclosed in double quotes. Numeric values greater 


-------------------------------------------------------- KeyPgWspace ----

WSpace
  

	Creates a WString of a given length filled with spaces (" ")

Syntax
Declare Function WSpace( ByVal count As Integer ) As WString

Usage
result = WSpace( count )

Parameters
count
An integer type specifying the length of the string to be created.

Return Value
The created WString. An empty string will be returned if count <= 0.

Description
WSpace creates a wstring (wide character string- Unicode) with the specified number of spaces.




-------------------------------------------------------- KeyPgWstr ----

WStr
  

	Returns a wide-character string representation of a number or ASCII character string

Syntax
Declare Function WStr ( ByVal n As Byte ) As WString
Declare Function WStr ( ByVal n As UByte ) As WString
Declare Function WStr ( ByVal n As Short ) As WString
Declare Function WStr ( ByVal n As UShort ) As WString
Declare Function WStr ( ByVal n As Long ) As WString
Declare Function WStr ( ByVal n As ULong ) As WString
Declare Function WStr ( ByVal n As LongInt ) As WString
Declare Function WStr ( ByVal n As ULongInt ) As WString
Declare Function WStr ( ByVal n As Single ) As WString
Declare Function WStr ( ByVal n As Double ) As WString
Declare Function WStr ( ByRef str As Const String ) As WString
Declare Function WStr ( ByVal str As Const WString Ptr ) As WString

Usage
result = WStr( number )
or
result = WStr( string )

Parameters
number
Numeric expression to convert to a wide-character string.
string
String expression to convert to a wide-character string.

Return Value
Returns the wide-character representation of the numeric or string expression.

Description
WStr converts numeric variables to their wide-character string representation. It is the wide-character equivalent to Str.

WStr also converts ASCII character strings to Unicode charac


-------------------------------------------------------- KeyPgWstring ----

WString
  

	Standard data type: wide character string

Syntax
Dim variable As WString * size
Dim variable As WString Ptr

Description
A WString is a fixed-size array of wide-chars that never overflows if the size is known at compile-time. It has no descriptor, and does never resize unless it's a pointer and Allocate/Re


-------------------------------------------------------- KeyPgWstringFunction ----

Wstring (Function)
  

	Fills a WString with a certain length of a certain wide character

Syntax
Declare Function WString ( ByVal count As Integer, ByVal ch_code As Long ) As WString
Declare Function WString ( ByVal count As Integer, ByRef ch As Const WString ) As WString

Usage
result = WString( count, ch_code )
or
result = WString( count, ch )

Parameters
count
An Integer specifying the length of the string to be created.
ch_code
A Long specifying the Unicode char to be used to fill the string.
ch
A WString whose first character is to be used to fill the string.

Return Value
The created WString. An empty string will be returned if either ch is an empty string, or count <= 0.

Description
WString generates a temporary WString filled with count copies of a Unicode character. This string can be printed or assigned to a previously Dimed WString.




-------------------------------------------------------- KeyPgXorGfx ----

Xor
  

	Parameter to the Put graphics statement which uses a bit-wise Xor as the blitting method

Syntax
Put [ target, ] [ STEP ] ( x,y ), source [ ,( x1,y1 )-( x2,y2 ) ], Xor

Parameters
Xor
Required.

Description
The Xor method combines each source pixel with the corresponding destination pixel, using the bit-wise Xor function.  The result of this is output as the destination pixel.
This method 


-------------------------------------------------------- KeyPgYear ----

Year
  

	Gets the year from a Date Serial

Syntax
Declare Function Year ( ByVal date_serial As Double ) As Long

Usage
#include "vbcompat.bi"
result = Year( date_serial )

Parameters
date_serial
the date

Return Value
Returns the year from a  variable containing a date in  Date Serial  format. 

Description

The compiler will not recognize this function unless vbcompat.bi is included.




-------------------------------------------------------- KeyPgZstring ----

ZString
  

	Standard data type: 8 bit character string

Syntax
Dim variable As ZString * size
Dim variable As ZString Ptr

Description
A ZString is a C-style fixed-size array of chars.  It has no descriptor so its length is calculated faster to pass it as an argument to functions. When the variable has a fixed size (num

